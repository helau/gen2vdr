From 79bcc3886dcb9207bbecf7ff78cc799e8076c057 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 12:36:47 +0400
Subject: [PATCH 001/364] saa716x: Initial framework driver to support SAA7160,
 SAA7161, SAA7162 chips

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  24 ++++
 drivers/media/pci/saa716x/Makefile         |   8 ++
 drivers/media/pci/saa716x/saa716x_budget.c | 120 +++++++++++++++++
 drivers/media/pci/saa716x/saa716x_budget.h |   7 +
 drivers/media/pci/saa716x/saa716x_hybrid.c | 105 +++++++++++++++
 drivers/media/pci/saa716x/saa716x_hybrid.h |   7 +
 drivers/media/pci/saa716x/saa716x_i2c.c    | 148 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_pci.c    | 133 ++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_priv.h   | 115 ++++++++++++++++
 9 files changed, 667 insertions(+)
 create mode 100644 drivers/media/pci/saa716x/Kconfig
 create mode 100644 drivers/media/pci/saa716x/Makefile
 create mode 100644 drivers/media/pci/saa716x/saa716x_budget.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_budget.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_hybrid.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_hybrid.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_i2c.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_pci.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_priv.h

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
new file mode 100644
index 0000000000000..8b136a8059d61
--- /dev/null
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -0,0 +1,24 @@
+config DVB_SAA716X_CORE
+	tristate "SAA7160/2 PCI Express bridge based devices"
+	depends on PCI && I2C
+
+	help
+	  Support for PCI cards based on the SAA7160/2 PCI Express bridge.
+
+	  Say Y if you own such a device and want to use it.
+
+config DVB_SAA716X_BUDGET
+	tristate "SAA7160/2 based Budget PCIe cards (DVB only)"
+	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
+
+	help
+	  Support for the SAA7160/2 based Budget PCIe DVB cards
+	  Currently supported devices are
+
+config DVB_SAA716X_HYBRID
+	tristate "SAA7160/2 based Hybrid PCIe cards (DVB + Analog)"
+	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
+
+	help
+	  Support for the SAA7160/2 based Hybrid PCIe DVB cards
+	  Currently supported devices are
diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
new file mode 100644
index 0000000000000..b72d92974a952
--- /dev/null
+++ b/drivers/media/pci/saa716x/Makefile
@@ -0,0 +1,8 @@
+saa716x_core-objs		 := saa716x_pci.o	\
+				    saa716x_i2c.o
+
+obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
+obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
+obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
+
+EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
new file mode 100644
index 0000000000000..224265de7ec79
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -0,0 +1,120 @@
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/mutex.h>
+
+#include <asm/io.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+#include <linux/kmod.h>
+#include <linux/vmalloc.h>
+#include <linux/init.h>
+#include <linux/device.h>
+
+#include "saa716x_priv.h"
+#include "saa716x_budget.h"
+
+unsigned int verbose;
+module_param(verbose, int, 0644);
+MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
+
+
+#define DRIVER_NAME	"SAA716x Budget"
+
+static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+{
+	struct saa716x_dev *saa716x;
+	int err = 0;
+
+	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	if (saa716x == NULL) {
+		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
+		err = -ENOMEM;
+		goto fail0;
+	}
+
+	saa716x->verbose	= verbose;
+	saa716x->pdev		= pdev;
+	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
+
+	err = saa716x_pci_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
+		goto fail1;
+	}
+
+	err = saa716x_i2c_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		goto fail2;
+	}
+
+	return 0;
+
+fail2:
+	saa716x_pci_exit(saa716x);
+
+fail1:
+	kfree(saa716x);
+
+fail0:
+	return err;
+}
+
+static void __devexit saa716x_budget_pci_remove(struct pci_dev *pdev)
+{
+	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
+
+	saa716x_i2c_exit(saa716x);
+	saa716x_pci_exit(saa716x);
+	kfree(saa716x);
+}
+
+static int load_config_vp1028(struct saa716x_dev *saa716x)
+{
+//	int ret = -ENODEV;
+	int ret = 0;
+
+	return ret;
+}
+
+#define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
+#define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
+
+static struct saa716x_config saa716x_vp1028_config = {
+	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
+	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
+	.load_config		= &load_config_vp1028,
+};
+
+
+static struct pci_device_id saa716x_budget_pci_table[] = {
+
+	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config) /* VP-1028 */
+};
+MODULE_DEVICE_TABLE(pci, saa716x_budget_pci_table);
+
+static struct pci_driver saa716x_budget_pci_driver = {
+	.name			= DRIVER_NAME,
+	.id_table		= saa716x_budget_pci_table,
+	.probe			= saa716x_budget_pci_probe,
+	.remove			= saa716x_budget_pci_remove,
+};
+
+static int __devinit saa716x_budget_init(void)
+{
+	return pci_register_driver(&saa716x_budget_pci_driver);
+}
+
+static void __devexit saa716x_budget_exit(void)
+{
+	return pci_unregister_driver(&saa716x_budget_pci_driver);
+}
+
+module_init(saa716x_budget_init);
+module_exit(saa716x_budget_exit);
+
+MODULE_DESCRIPTION("SAA716x Budget driver");
+MODULE_AUTHOR("Manu Abraham");
+MODULE_LICENSE("GPL");
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
new file mode 100644
index 0000000000000..027171f799c02
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_BUDGET_H
+#define __SAA716x_BUDGET_H
+ 
+#define TWINHAN_TECHNOLOGIES	0x1822
+#define TWINHAN_VP_1028		0x0044
+
+#endif /* __SAA716x_BUDGET_H */
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
new file mode 100644
index 0000000000000..c9fefca28ec98
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -0,0 +1,105 @@
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/mutex.h>
+
+#include <asm/io.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+#include <linux/kmod.h>
+#include <linux/vmalloc.h>
+#include <linux/init.h>
+#include <linux/device.h>
+
+#include "saa716x_priv.h"
+#include "saa716x_hybrid.h"
+
+unsigned int verbose;
+module_param(verbose, int, 0644);
+MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
+
+
+#define DRIVER_NAME	"SAA716x Hybrid"
+
+static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+{
+	struct saa716x_dev *saa716x;
+	int err = 0;
+
+	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	if (saa716x == NULL) {
+		printk(KERN_ERR "saa716x_hybrid_pci_probe ERROR: out of memory\n");
+		err = -ENOMEM;
+		goto fail0;
+	}
+
+	saa716x->verbose	= verbose;
+	saa716x->pdev		= pdev;
+	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
+
+	if ((err = saa716x_pci_init(saa716x)) != 0)
+		goto fail1;
+
+fail1:
+	kfree(saa716x);
+
+fail0:
+	return err;
+}
+
+static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
+{
+	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
+
+	saa716x_pci_exit(saa716x);
+	kfree(saa716x);
+}
+
+static int load_config_vp6090(struct saa716x_dev *saa716x)
+{
+//	int ret = -ENODEV;
+	int ret = 0;
+
+	return ret;
+}
+
+#define SAA716x_MODEL_TWINHAN_VP6090	"Twinhan/Azurewave VP-6090"
+#define SAA716x_DEV_TWINHAN_VP6090	"2xDVB-S + 2xDVB-T + 2xAnalog"
+
+static struct saa716x_config saa716x_vp6090_config = {
+	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
+	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
+	.load_config		= &load_config_vp6090,
+};
+
+
+static struct pci_device_id saa716x_hybrid_pci_table[] = {
+
+	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7160, &saa716x_vp6090_config),
+};
+MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
+
+static struct pci_driver saa716x_hybrid_pci_driver = {
+	.name			= DRIVER_NAME,
+	.id_table		= saa716x_hybrid_pci_table,
+	.probe			= saa716x_hybrid_pci_probe,
+	.remove			= saa716x_hybrid_pci_remove,
+};
+
+static int __devinit saa716x_hybrid_init(void)
+{
+	return pci_register_driver(&saa716x_hybrid_pci_driver);
+}
+
+static void __devexit saa716x_hybrid_exit(void)
+{
+	return pci_unregister_driver(&saa716x_hybrid_pci_driver);
+}
+
+module_init(saa716x_hybrid_init);
+module_exit(saa716x_hybrid_exit);
+
+MODULE_DESCRIPTION("SAA716x Hybrid driver");
+MODULE_AUTHOR("Manu Abraham");
+MODULE_LICENSE("GPL");
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
new file mode 100644
index 0000000000000..717a0cb1f1de6
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_HYBRID_H
+#define __SAA716x_HYBRID_H
+ 
+#define TWINHAN_TECHNOLOGIES	0x1822
+#define TWINHAN_VP_6090		0x6090
+
+#endif /* __SAA716x_HYBRID_H */
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
new file mode 100644
index 0000000000000..6b7b23dd5a361
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -0,0 +1,148 @@
+#include <linux/delay.h>
+
+#include "saa716x_priv.h"
+
+
+#define RX_FIFO			0x000
+#define TX_FIFO			0x000
+#define I2C_STATUS		0x008
+#define I2C_CONTROL		0x00c
+#define CLOCK_DIVISOR_HIGH	0x010
+#define CLOCK_DIVISOR_LOW	0x014
+#define RX_LEVEL		0x01c
+#define TX_LEVEL		0x020
+#define SDA_HOLD		0x028
+
+
+#define MODULE_CONF		0xfd4
+#define INT_CLR_ENABLE		0xfd8
+#define INT_SET_ENABLE		0xfdc
+#define INT_STATUS		0xfe0
+#define INT_ENABLE		0xfe4
+#define INT_CLR_STATUS		0xfe8
+#define INT_SET_STATUS		0xfec
+
+
+static int saa716x_i2c_read(struct saa716x_dev *saa716x, const struct i2c_msg *msg)
+{
+
+	return 0;
+}
+
+static int saa716x_i2c_write(struct saa716x_dev *saa716x, const struct i2c_msg*msg)
+{
+
+	return 0;
+}
+
+static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
+{
+	struct saa716x_i2c *i2c;
+	struct saa716x_dev *saa716x;
+	int ret = 0, i;
+
+	i2c	= i2c_get_adapdata(adapter);
+	saa716x = i2c->saa716x;
+
+	mutex_lock(&i2c->i2c_lock);
+	for (i = 0; i < num; i++) {
+		if (msgs[i].flags & I2C_M_RD)
+			ret = saa716x_i2c_read(saa716x, &msgs[i]);
+		else
+			ret = saa716x_i2c_write(saa716x, &msgs[i]);
+
+		if (ret < 0)
+			goto bail_out;
+	}
+	mutex_unlock(&i2c->i2c_lock);
+	return num;
+
+bail_out:
+	mutex_unlock(&i2c->i2c_lock);
+	return ret;
+}
+
+static u32 saa716x_i2c_func(struct i2c_adapter *adapter)
+{
+	return I2C_FUNC_SMBUS_EMUL;
+}
+
+static struct i2c_algorithm saa716x_algo = {
+	.master_xfer	= saa716x_i2c_xfer,
+	.functionality	= saa716x_i2c_func,
+};
+
+#define I2C_HW_B_SAA716x		0x12
+
+static struct i2c_adapter saa716x_i2c[] = {
+
+	{
+		.owner	= THIS_MODULE,
+		.name	= "SAA716x I2C Core 0",
+		.id	= I2C_HW_B_SAA716x,
+		.class	= I2C_CLASS_TV_DIGITAL,
+		.algo	= &saa716x_algo,
+	}, {
+		.owner	= THIS_MODULE,
+		.name	= "SAA716x I2C Core 1",
+		.id	= I2C_HW_B_SAA716x,
+		.class	= I2C_CLASS_TV_DIGITAL,
+		.algo	= &saa716x_algo,
+	},
+};
+
+#define SAA716x_I2C_ADAPTERS	2
+
+int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev	= saa716x->pdev;
+	struct saa716x_i2c *i2c = saa716x->i2c;
+	int i, err = 0;
+
+	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core", saa716x->pdev->device);
+	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
+		dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, saa716x_i2c[i].name);
+		mutex_init(&i2c->i2c_lock);
+		memcpy(&i2c->i2c_adapter, &saa716x_i2c[i], sizeof (struct i2c_adapter));
+		i2c_set_adapdata(&i2c->i2c_adapter, saa716x_i2c);
+		i2c->i2c_adapter.dev.parent = &pdev->dev;
+		err = i2c_add_adapter(&i2c->i2c_adapter);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, saa716x_i2c[i].name);
+			goto exit;
+		}
+		i2c->saa716x = saa716x;
+		i2c++;
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully initialized", saa716x->pdev->device);
+
+	return 0;
+exit:
+	return err;
+}
+EXPORT_SYMBOL_GPL(saa716x_i2c_init);
+
+int __devexit saa716x_i2c_exit(struct saa716x_dev *saa716x)
+{
+	struct saa716x_i2c *i2c = saa716x->i2c;
+	int i, err = 0;
+
+	dprintk(SAA716x_DEBUG, 1, "Removing SAA%02x I2C Core", saa716x->pdev->device);
+	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
+		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, saa716x_i2c[i].name);
+		err = i2c_del_adapter(&i2c->i2c_adapter);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s remove failed", i, saa716x_i2c[i].name);
+			goto exit;
+		}
+		i2c++;
+	}
+	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully removed", saa716x->pdev->device);
+
+	return 0;
+
+exit:
+	return err;
+}
+EXPORT_SYMBOL_GPL(saa716x_i2c_exit);
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
new file mode 100644
index 0000000000000..deff5e956bdb7
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -0,0 +1,133 @@
+#include <asm/io.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+#include <linux/kmod.h>
+#include <linux/vmalloc.h>
+#include <linux/init.h>
+#include <linux/device.h>
+
+#include <asm/irq.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+
+
+#include "saa716x_priv.h"
+
+#define DRIVER_NAME				"SAA716x Core"
+
+static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
+{
+	return IRQ_HANDLED;
+}
+
+int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+	int err = 0, ret = -ENODEV, i;
+	u8 revision;
+
+	dprintk(SAA716x_ERROR, 1, "found a %s PCI Express card", saa716x->config->model_name);
+
+	err = pci_enable_device(pdev);
+	if (err != 0) {
+		ret = -ENODEV;
+		dprintk(SAA716x_ERROR, 1, "ERROR: PCI enable failed (%i)", err);
+		goto fail0;
+	}
+
+	pci_set_master(pdev);
+
+	for (i = 0; i < 6; i++) {
+		if (pci_resource_flags(pdev, i) & IORESOURCE_MEM) {
+			dprintk(SAA716x_DEBUG, 1, "Found IOMEM on BAR%d", i);
+			saa716x->addr = pci_resource_start(pdev, i);
+			saa716x->len  = pci_resource_len(pdev, i);
+			break;
+		}
+	}
+
+	if (!request_mem_region(saa716x->addr, saa716x->len, DRIVER_NAME)) {
+		dprintk(SAA716x_ERROR, 1, "Request region failed");
+		ret = -ENODEV;
+		goto fail1;
+	}
+
+	saa716x->mmio = ioremap(saa716x->addr, saa716x->len);
+	if (!saa716x->mmio) {
+		dprintk(SAA716x_ERROR, 1, "IO remap failed");
+		ret = -ENODEV;
+		goto fail2;
+	}
+
+	err = request_irq(pdev->irq,
+			  saa716x_pci_irq,
+			  IRQF_SHARED | IRQF_DISABLED,
+			  DRIVER_NAME,
+			  saa716x);
+
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
+		ret = -ENODEV;
+		goto fail3;
+	}
+
+	pci_read_config_byte(pdev, PCI_CLASS_REVISION, &revision);
+
+	saa716x->revision	= revision;
+
+	dprintk(SAA716x_ERROR, 0, "    SAA%02x Rev %d [%04x:%04x], ",
+		saa716x->pdev->device,
+		revision,
+		saa716x->pdev->subsystem_vendor,
+		saa716x->pdev->subsystem_device);
+
+	dprintk(SAA716x_ERROR, 0,
+		"irq: %d,\n    memory: 0x%02lx, mmio: 0x%p\n",
+		saa716x->pdev->irq,
+		saa716x->addr,
+		saa716x->mmio);
+
+	pci_set_drvdata(pdev, saa716x);
+
+	return 0;
+
+fail3:
+	dprintk(SAA716x_ERROR, 1, "Err: IO Unmap");
+	if (saa716x->mmio)
+		iounmap(saa716x->mmio);
+
+fail2:
+	dprintk(SAA716x_ERROR, 1, "Err: Release regions");
+	release_mem_region(saa716x->addr, saa716x->len);
+
+fail1:
+	pci_disable_device(pdev);
+
+fail0:
+	pci_set_drvdata(pdev, NULL);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(saa716x_pci_init);
+
+void __devexit saa716x_pci_exit(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+
+	free_irq(pdev->irq, saa716x);
+
+	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem: 0x%p", saa716x->pdev->device, saa716x->mmio);
+	if (saa716x->mmio)
+		iounmap(saa716x->mmio);
+
+	if (saa716x->addr)
+		release_mem_region(saa716x->addr, saa716x->len);
+
+	pci_disable_device(pdev);
+	pci_set_drvdata(pdev, NULL);
+}
+EXPORT_SYMBOL_GPL(saa716x_pci_exit);
+
+MODULE_DESCRIPTION("SAA716x bridge driver");
+MODULE_AUTHOR("Manu Abraham");
+MODULE_LICENSE("GPL");
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
new file mode 100644
index 0000000000000..fea37861f4c4a
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -0,0 +1,115 @@
+#ifndef __SAA716x_PRIV_H
+#define __SAA716x_PRIV_H
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/mutex.h>
+
+#include <linux/pci.h>
+#include <linux/ioport.h>
+#include <linux/i2c.h>
+
+#define SAA716x_ERROR		0
+#define SAA716x_NOTICE		1
+#define SAA716x_INFO		2
+#define SAA716x_DEBUG		3
+
+#define SAA716x_DEV		saa716x->num
+#define SAA716x_VERBOSE		saa716x->verbose
+
+#define dprintk(__x, __y, __fmt, __arg...) do {								\
+	if (__y) {											\
+		if	((SAA716x_VERBOSE > SAA716x_ERROR) && (SAA716x_VERBOSE > __x))			\
+			printk(KERN_ERR "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+		else if	((SAA716x_VERBOSE > SAA716x_NOTICE) && (SAA716x_VERBOSE > __x))			\
+			printk(KERN_NOTICE "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+		else if ((SAA716x_VERBOSE > SAA716x_INFO) && (SAA716x_VERBOSE > __x))			\
+			printk(KERN_INFO "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+		else if ((SAA716x_VERBOSE > SAA716x_DEBUG) && (SAA716x_VERBOSE > __x))			\
+			printk(KERN_DEBUG "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+	} else {											\
+		if (SAA716x_VERBOSE > __x)								\
+			printk(__fmt , ##__arg);							\
+	}												\
+} while(0)
+
+
+#define NXP_SEMICONDUCTOR	0x1131
+#define SAA7160			0x7160
+#define SAA7162			0x7162
+
+#define MAKE_ENTRY(__subven, __subdev, __chip, __configptr) {		\
+		.vendor		= NXP_SEMICONDUCTOR,			\
+		.device		= (__chip),				\
+		.subvendor	= (__subven),				\
+		.subdevice	= (__subdev),				\
+		.driver_data	= (unsigned long) (__configptr)		\
+}
+
+struct saa716x_dev;
+
+typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
+
+struct saa716x_config {
+	char				*model_name;
+	char				*dev_type;
+	saa716x_load_config_t		load_config;
+};
+
+struct saa716x_i2c {
+	struct i2c_adapter		i2c_adapter;
+	struct mutex			i2c_lock;
+	struct saa716x_dev		*saa716x;
+};
+
+struct saa716x_dev {
+	struct saa716x_config		*config;
+	struct pci_dev			*pdev;
+
+	int				num; /* device count */
+	int				verbose;
+
+	u8 				revision;
+
+	/* PCI */
+	unsigned long			addr;
+	void __iomem			*mmio;
+	u32				len;
+
+	/* I2C */
+	struct saa716x_i2c		i2c[2];
+
+	/* DMA */
+};
+
+/* PCI */
+extern int saa716x_pci_init(struct saa716x_dev *saa716x);
+extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
+
+/* MSI */
+extern int saa716x_msi_init(struct saa716x_dev *saa716x);
+extern void saa716x_msi_exit(struct saa716x_dev *saa716x);
+
+/* I2C */
+extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
+extern int saa716x_i2c_exit(struct saa716x_dev *saa716x);
+
+/* SPI */
+extern int saa716x_spi_init(struct saa716x_dev *saa716x);
+extern void saa716x_spi_exit(struct saa716x_dev *saa716x);
+
+/* DMA */
+extern int saa716x_dma_init(struct saa716x_dev *saa716x);
+extern void saa716x_dma_exit(struct saa716x_dev *saa716x);
+
+/* DVB */
+extern int saa716x_dvb_init(struct saa716x_dev *saa716x);
+extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
+
+/* AUDIO */
+extern int saa716x_audio_init(struct saa716x_dev *saa716x);
+extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_PRIV_H */

From dce6bd8729bc258e0ace8f433afd6e23ff758192 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 12:40:46 +0400
Subject: [PATCH 002/364] saa716x: Add missing return, to avoid falling through
 the error codes

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index c9fefca28ec98..b710d1d095816 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -41,6 +41,9 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	if ((err = saa716x_pci_init(saa716x)) != 0)
 		goto fail1;
 
+
+	return 0;
+
 fail1:
 	kfree(saa716x);
 

From 80b0bfe48ae56c57b78001b6510925c9c7f2378c Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 12:42:05 +0400
Subject: [PATCH 003/364] saa716x: Updated board definitions

From Jacky

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 25 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_pci.c    |  4 +++-
 drivers/media/pci/saa716x/saa716x_priv.h   |  1 +
 3 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index b710d1d095816..2583c7e40ae81 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -67,19 +67,44 @@ static int load_config_vp6090(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+static int load_config_nemo(struct saa716x_dev *saa716x)
+{
+    int ret = 0;
+    return ret;
+}
+
+
 #define SAA716x_MODEL_TWINHAN_VP6090	"Twinhan/Azurewave VP-6090"
+#define SAA716x_CHIPS_TWINHAN_VP6090       "2xTDA8263 + 2xMB86A16L + 2xTDA8275A + 2xTDA10046 + SAA7162"
 #define SAA716x_DEV_TWINHAN_VP6090	"2xDVB-S + 2xDVB-T + 2xAnalog"
 
+/*****************NXP Semiconductors reference design board ******************/
+#define SAA716x_MODEL_NXP_NENO     "NXP Semiconductors NEMO referrence board" 
+#define SAA716x_CHIPS_NXP_NEMO      "SAA7160 + TDA8275A + TDA10046 + SAA7136"
+#define SAA716x_DEV_NXP_NEMO         "DVB-T + Analog"
+/*******************************END*************************************/
+
+
+
 static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
+	.chips_desc            = SAA716x_CHIPS_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.load_config		= &load_config_vp6090,
 };
 
+static struct saa716x_config saa716x_nemo_config = {
+       .model_name        = SAA716x_MODEL_NXP_NENO,
+	.chips_desc           = SAA716x_CHIPS_NXP_NEMO,
+	.dev_type             = SAA716x_DEV_NXP_NEMO,
+	.load_config          = &load_config_nemo,
+};
+
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7160, &saa716x_vp6090_config),
+	MAKE_ENTRY(PCI_ANY_ID, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 };
 MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index deff5e956bdb7..7acf9f9f11d03 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -26,7 +26,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 	struct pci_dev *pdev = saa716x->pdev;
 	int err = 0, ret = -ENODEV, i;
 	u8 revision;
-
+  
 	dprintk(SAA716x_ERROR, 1, "found a %s PCI Express card", saa716x->config->model_name);
 
 	err = pci_enable_device(pdev);
@@ -73,6 +73,8 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 	}
 
 	pci_read_config_byte(pdev, PCI_CLASS_REVISION, &revision);
+	
+	dprintk(SAA716x_ERROR, 0, "SAA716x Revision ID: 0x%02x", revision);
 
 	saa716x->revision	= revision;
 
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index fea37861f4c4a..2380a724e5b2b 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -55,6 +55,7 @@ typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 struct saa716x_config {
 	char				*model_name;
 	char				*dev_type;
+	char				*chips_desc;
 	saa716x_load_config_t		load_config;
 };
 

From 524945fc2bdef88c99e014748c1115fa808c3275 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:35:29 +0400
Subject: [PATCH 004/364] saa716x: Add some register definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_reg.h | 551 ++++++++++++++++++++++++
 1 file changed, 551 insertions(+)
 create mode 100644 drivers/media/pci/saa716x/saa716x_reg.h

diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
new file mode 100644
index 0000000000000..d6ab9d0eea4e7
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -0,0 +1,551 @@
+#ifndef __SAA716x_REG_H
+#define __SAA716x_REG_H
+
+/* BAR = 17 bits */
+#define VI0				0x00000000
+#define VI1				0x00001000
+#define FGPI0				0x00002000
+#define FGPI1				0x00003000
+#define FGPI2				0x00004000
+#define FGPI3				0x00005000
+#define AI0				0x00006000
+#define AI1				0x00007000
+#define BAM				0x00008000
+#define MMU				0x00009000
+#define MSI				0x0000a000
+#define I2C_B				0x0000b000
+#define I2C_A				0x0000c000
+#define SPI				0x0000d000
+#define GPIO				0x0000e000
+#define PHI_0				0x0000f000
+#define GREG				0x00012000
+#define CGU				0x00013000
+#define DCS				0x00014000
+
+/* BAR = 20 bits */
+#define PHI_1				0x00020000
+
+#define GREG_SUBSYS_CONFIG		0x000
+#define GREG_SUBSYS_ID			(0xffff << 16)
+#define GREG_SUBSYS_VID			(0xffff <<  0)
+
+#define GREG_MSI_BAR_PMCSR		0x004
+#define GREG_PMCSR_SCALE_7		(0x0003 << 30)
+#define GREG_PMCSR_SCALE_6		(0x0003 << 28)
+#define GREG_PMCSR_SCALE_5		(0x0003 << 26)
+#define GREG_PMCSR_SCALE_4		(0x0003 << 24)
+#define GREG_PMCSR_SCALE_3		(0x0003 << 22)
+#define GREG_PMCSR_SCALE_2		(0x0003 << 20)
+#define GREG_PMCSR_SCALE_1		(0x0003 << 18)
+#define GREG_PMCSR_SCALE_0		(0x0003 << 16)
+
+#define GREG_BAR_WIDTH_17		(0x001e <<  8)
+#define GREG_BAR_WIDTH_18		(0x001c <<  8)
+#define GREG_BAR_WIDTH_19		(0x0018 <<  8)
+#define GREG_BAR_WIDTH_20		(0x0010 <<  8)
+
+#define GREG_BAR_PREFETCH		(0x0001 <<  3)
+#define GREG_MSI_MM_CAP1		(0x0000 <<  0) // FIXME !
+#define GREG_MSI_MM_CAP2		(0x0001 <<  0)
+#define GREG_MSI_MM_CAP4		(0x0002 <<  0)
+#define GREG_MSI_MM_CAP8		(0x0003 <<  0)
+#define GREG_MSI_MM_CAP16		(0x0004 <<  0)
+#define GREG_MSI_MM_CAP32		(0x0005 <<  0)
+
+#define GREG_PMCSR_DATA_1		0x008
+#define GREG_PMCSR_DATA_2		0x00c
+#define GREG_VI_CTRL			0x010
+#define GREG_FGPI_CTRL			0x014
+
+#define GREG_RSTU_CTRL			0x018
+#define BOOT_READY			(0x0001 << 13)
+#define RESET_REQ			(0x0001 << 12)
+#define IP_RST_RELEASE			(0x0001 << 11)
+#define ADAPTER_RST_RELEASE		(0x0001 << 10)
+#define PCIE_CORE_RST_RELEASE		(0x0001 <<  9)
+#define BOOT_IP_RST_RELEASE		(0x0001 <<  8)
+#define BOOT_RST_RELEASE		(0x0001 <<  7)
+#define CGU_RST_RELEASE			(0x0001 <<  6)
+#define IP_RST_ASSERT			(0x0001 <<  5)
+#define ADAPTER_RST_ASSERT		(0x0001 <<  4)
+#define RST_ASSERT			(0x0001 <<  3)
+#define BOOT_IP_RST_ASSERT		(0x0001 <<  2)
+#define BOOT_RST_ASSERT			(0x0001 <<  1)
+#define CGU_RST_ASSERT			(0x0001 <<  0)
+
+#define GREG_I2C_CTRL			0x01c
+#define I2C_SLAVE_ADDR			(0x007f <<  0)
+
+#define GREG_OVFLW_CTRL			0x020
+#define OVERFLOW_ENABLE			(0x1fff <<  0)
+
+#define GREG_TAG_ACK_FLEN		0x024
+#define TAG_ACK_FLEN_1B			(0x0000 <<  0)
+#define TAG_ACK_FLEN_2B			(0x0001 <<  0)
+#define TAG_ACK_FLEN_4B			(0x0002 <<  0)
+#define TAG_ACK_FLEN_8B			(0x0003 <<  0)
+
+#define GREG_VIDEO_IN_CTRL		0x028
+
+#define GREG_SPARE_1			0x02c
+#define GREG_SPARE_2			0x030
+#define GREG_SPARE_3			0x034
+#define GREG_SPARE_4			0x038
+#define GREG_SPARE_5			0x03c
+#define GREG_SPARE_6			0x040
+#define GREG_SPARE_7			0x044
+#define GREG_SPARE_8			0x048
+#define GREG_SPARE_9			0x04c
+#define GREG_SPARE_10			0x050
+#define GREG_SPARE_11			0x054
+#define GREG_SPARE_12			0x058
+#define GREG_SPARE_13			0x05c
+#define GREG_SPARE_14			0x060
+#define GREG_SPARE_15			0x064
+
+#define GREG_FAIL_DISABLE		0x068
+#define BOOT_FAIL_DISABLE		(0x0001 <<  0)
+
+#define GREG_SW_RST			0xff0
+#define SW_RESET			(0x0001 <<  0)
+
+/* GPIO */
+#define GPIO_RD				0x000
+#define GPIO_WR				0x004
+#define GPIO_WR_MODE			0x008
+#define GPIO_OEN			0x00c
+
+#define GPIO_SW_RST			0xff0
+#define GPIO_SW_RESET			(0x0001 <<  0)
+
+/* CGU */
+#define CGU_SCR0			0x000
+#define CGU_SCR1			0x004
+#define CGU_SCR2			0x008
+#define CGU_SCR3			0x00c
+#define CGU_SCR4			0x010
+#define CGU_SCR5			0x014
+#define CGU_SCR6			0x018
+#define CGU_SCR7			0x01c
+#define CGU_SCR8			0x020
+#define CGU_SCR9			0x024
+#define CGU_SCR10			0x028
+#define CGU_SCR11			0x02c
+#define CGU_SCR12			0x030
+#define CGU_SCR13			0x034
+
+#define CGU_FS1_0			0x038
+#define CGU_FS1_1			0x03c
+#define CGU_FS1_2			0x040
+#define CGU_FS1_3			0x044
+#define CGU_FS1_4			0x048
+#define CGU_FS1_5			0x04c
+#define CGU_FS1_6			0x050
+#define CGU_FS1_7			0x054
+#define CGU_FS1_8			0x058
+#define CGU_FS1_9			0x05c
+#define CGU_FS1_10			0x060
+#define CGU_FS1_11			0x064
+#define CGU_FS1_12			0x068
+#define CGU_FS1_13			0x06c
+
+#define CGU_FS2_0			0x070
+#define CGU_FS2_1			0x074
+#define CGU_FS2_2			0x078
+#define CGU_FS2_3			0x07c
+#define CGU_FS2_4			0x080
+#define CGU_FS2_5			0x084
+#define CGU_FS2_6			0x088
+#define CGU_FS2_7			0x08c
+#define CGU_FS2_8			0x090
+#define CGU_FS2_9			0x094
+#define CGU_FS2_10			0x098
+#define CGU_FS2_11			0x09c
+#define CGU_FS2_12			0x0a0
+#define CGU_FS2_13			0x0a4
+
+#define CGU_SSR_0			0x0a8
+#define CGU_SSR_1			0x0ac
+#define CGU_SSR_2			0x0b0
+#define CGU_SSR_3			0x0b4
+#define CGU_SSR_4			0x0b8
+#define CGU_SSR_5			0x0bc
+#define CGU_SSR_6			0x0c0
+#define CGU_SSR_7			0x0c4
+#define CGU_SSR_8			0x0c8
+#define CGU_SSR_9			0x0cc
+#define CGU_SSR_10			0x0d0
+#define CGU_SSR_11			0x0d4
+#define CGU_SSR_12			0x0d8
+#define CGU_SSR_13			0x0dc
+
+#define CGU_PCR_0_0			0x0e0
+#define CGU_PCR_0_1			0x0e4
+#define CGU_PCR_0_2			0x0e8
+#define CGU_PCR_0_3			0x0ec
+#define CGU_PCR_0_4			0x0f0
+#define CGU_PCR_0_5			0x0f4
+#define CGU_PCR_0_6			0x0f8
+#define CGU_PCR_0_7			0x0fc
+#define CGU_PCR_1_0			0x100
+#define CGU_PCR_1_1			0x104
+#define CGU_PCR_2_0			0x108
+#define CGU_PCR_2_1			0x10c
+#define CGU_PCR_3_0			0x110
+#define CGU_PCR_3_1			0x114
+#define CGU_PCR_3_2			0x118
+#define CGU_PCR_4_0			0x11c
+#define CGU_PCR_4_1			0x120
+#define CGU_PCR_5			0x124
+#define CGU_PCR_6			0x128
+#define CGU_PCR_7			0x12c
+#define CGU_PCR_8			0x130
+#define CGU_PCR_9			0x134
+#define CGU_PCR_10			0x138
+#define CGU_PCR_11			0x13c
+#define CGU_PCR_12			0x140
+#define CGU_PCR_13			0x144
+
+#define CGU_PSR_0_0			0x148
+#define CGU_PSR_0_1			0x14c
+#define CGU_PSR_0_2			0x150
+#define CGU_PSR_0_3			0x154
+#define CGU_PSR_0_4			0x158
+#define CGU_PSR_0_5			0x15c
+#define CGU_PSR_0_6			0x160
+#define CGU_PSR_0_7			0x164
+#define CGU_PSR_1_0			0x168
+#define CGU_PSR_1_1			0x16c
+#define CGU_PSR_2_0			0x170
+#define CGU_PSR_2_1			0x174
+#define CGU_PSR_3_0			0x178
+#define CGU_PSR_3_1			0x17c
+#define CGU_PSR_3_2			0x180
+#define CGU_PSR_4_0			0x184
+#define CGU_PSR_4_1			0x188
+#define CGU_PSR_5			0x18c
+#define CGU_PSR_6			0x190
+#define CGU_PSR_7			0x194
+#define CGU_PSR_8			0x198
+#define CGU_PSR_9			0x19c
+#define CGU_PSR_10			0x1a0
+#define CGU_PSR_11			0x1a4
+#define CGU_PSR_12			0x1a8
+#define CGU_PSR_13			0x1ac
+
+#define CGU_ESR_0_0			0x1b0
+#define CGU_ESR_0_1			0x1b4
+#define CGU_ESR_0_2			0x1b8
+#define CGU_ESR_0_3			0x1bc
+#define CGU_ESR_0_4			0x1c0
+#define CGU_ESR_0_5			0x1c4
+#define CGU_ESR_0_6			0x1c8
+#define CGU_ESR_0_7			0x1cc
+#define CGU_ESR_1_0			0x1d0
+#define CGU_ESR_1_1			0x1d4
+#define CGU_ESR_2_0			0x1d8
+#define CGU_ESR_2_1			0x1dc
+#define CGU_ESR_2_2			0x1e0
+#define CGU_ESR_3_0			0x1e4
+#define CGU_ESR_3_1			0x1e8
+#define CGU_ESR_4_0			0x1ec
+#define CGU_ESR_4_1			0x1f0
+#define CGU_ESR_5			0x1f4
+#define CGU_ESR_6			0x1f8
+#define CGU_ESR_7			0x1fc
+#define CGU_ESR_8			0x200
+#define CGU_ESR_9			0x204
+#define CGU_ESR_10			0x208
+#define CGU_ESR_11			0x20c
+#define CGU_ESR_12			0x210
+#define CGU_ESR_13			0x214
+
+#define CGU_FDC_0			0x218
+#define CGU_FDC_1			0x21c
+#define CGU_FDC_2			0x220
+#define CGU_FDC_3			0x224
+#define CGU_FDC_4			0x228
+#define CGU_FDC_5			0x22c
+#define CGU_FDC_6			0x230
+#define CGU_FDC_7			0x234
+#define CGU_FDC_8			0x238
+#define CGU_FDC_9			0x23c
+#define CGU_FDC_10			0x240
+#define CGU_FDC_11			0x244
+#define CGU_FDC_12			0x248
+#define CGU_FDC_13			0x24c
+
+/* MSI */
+#define MSI_DELAY_TIMER			0x000
+#define MSI_INTA_POLARITY		0x004
+#define MSI_CONFIG0			0x008
+#define MSI_CONFIG1			0x00c
+#define MSI_CONFIG2			0x010
+#define MSI_CONFIG3			0x014
+#define MSI_CONFIG4			0x018
+#define MSI_CONFIG5			0x01c
+#define MSI_CONFIG6			0x020
+#define MSI_CONFIG7			0x024
+#define MSI_CONFIG8			0x028
+#define MSI_CONFIG9			0x02c
+#define MSI_CONFIG10			0x030
+#define MSI_CONFIG11			0x034
+#define MSI_CONFIG12			0x038
+#define MSI_CONFIG13			0x03c
+#define MSI_CONFIG14			0x040
+#define MSI_CONFIG15			0x044
+#define MSI_CONFIG16			0x048
+#define MSI_CONFIG17			0x04c
+#define MSI_CONFIG18			0x050
+#define MSI_CONFIG19			0x054
+#define MSI_CONFIG20			0x058
+#define MSI_CONFIG21			0x05c
+#define MSI_CONFIG22			0x060
+#define MSI_CONFIG23			0x064
+#define MSI_CONFIG24			0x068
+#define MSI_CONFIG25			0x06c
+#define MSI_CONFIG26			0x070
+#define MSI_CONFIG27			0x074
+#define MSI_CONFIG28			0x078
+#define MSI_CONFIG29			0x07c
+#define MSI_CONFIG30			0x080
+#define MSI_CONFIG31			0x084
+#define MSI_CONFIG32			0x088
+#define MSI_CONFIG33			0x08c
+#define MSI_CONFIG34			0x090
+#define MSI_CONFIG35			0x094
+#define MSI_CONFIG36			0x098
+#define MSI_CONFIG37			0x09c
+#define MSI_CONFIG38			0x0a0
+#define MSI_CONFIG39			0x0a4
+#define MSI_CONFIG40			0x0a8
+#define MSI_CONFIG41			0x0ac
+#define MSI_CONFIG42			0x0b0
+#define MSI_CONFIG43			0x0b4
+#define MSI_CONFIG44			0x0b8
+#define MSI_CONFIG45			0x0bc
+#define MSI_CONFIG46			0x0c0
+#define MSI_CONFIG47			0x0c4
+#define MSI_CONFIG48			0x0c8
+
+#define MSI_INT_STATUS_L		0xfc0
+#define MSI_INT_STATUS_H		0xfc4
+#define MSI_INT_STATUS_CLR_L		0xfc8
+#define MSI_INT_STATUS_CLR_H		0xfcc
+#define MSI_INT_STATUS_SET_L		0xfd0
+#define MSI_INT_STATUS_SET_H		0xfd4
+#define MSI_INT_ENA_L			0xfd8
+#define MSI_INT_ENA_H			0xfdc
+#define MSI_INT_ENA_CLR_L		0xfe0
+#define MSI_INT_ENA_CLR_H		0xfe4
+#define MSI_INT_ENA_SET_L		0xfe8
+#define MSI_INT_ENA_SET_H		0xfec
+
+#define MSI_SW_RST			0xff0
+#define MSI_SW_RESET			(0x0001 <<  0)
+
+/* MMU */
+#define MMU_MODE			0x000
+
+#define MMU_DMA_CONFIG0			0x004
+#define MMU_DMA_CONFIG1			0x008
+#define MMU_DMA_CONFIG2			0x00c
+#define MMU_DMA_CONFIG3			0x010
+#define MMU_DMA_CONFIG4			0x014
+#define MMU_DMA_CONFIG5			0x018
+#define MMU_DMA_CONFIG6			0x01c
+#define MMU_DMA_CONFIG7			0x020
+#define MMU_DMA_CONFIG8			0x024
+#define MMU_DMA_CONFIG9			0x028
+#define MMU_DMA_CONFIG10		0x02c
+#define MMU_DMA_CONFIG11		0x030
+#define MMU_DMA_CONFIG12		0x034
+#define MMU_DMA_CONFIG13		0x038
+#define MMU_DMA_CONFIG14		0x03c
+#define MMU_DMA_CONFIG15		0x040
+
+#define MMU_SW_RST			0xff0
+#define MMU_SW_RESET			(0x0001 <<  0)
+
+#define MMU_PTA_BASE0			0x044 /* DMA 0 */
+#define MMU_PTA_BASE1			0x084 /* DMA 1 */
+#define MMU_PTA_BASE2			0x0c4 /* DMA 2 */
+#define MMU_PTA_BASE3			0x104 /* DMA 3 */
+#define MMU_PTA_BASE4			0x144 /* DMA 4 */
+#define MMU_PTA_BASE5			0x184 /* DMA 5 */
+#define MMU_PTA_BASE6			0x1c4 /* DMA 6 */
+#define MMU_PTA_BASE7			0x204 /* DMA 7 */
+#define MMU_PTA_BASE8			0x244 /* DMA 8 */
+#define MMU_PTA_BASE9			0x284 /* DMA 9 */
+#define MMU_PTA_BASE10			0x2c4 /* DMA 10 */
+#define MMU_PTA_BASE11			0x304 /* DMA 11 */
+#define MMU_PTA_BASE12			0x344 /* DMA 12 */
+#define MMU_PTA_BASE13			0x384 /* DMA 13 */
+#define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
+#define MMU_PTA_BASE15			0x404 /* DMA 15 */
+
+#define MMU_PTA0_LSB			MMU_PTA_BASE + 0x00
+#define MMU_PTA0_MSB			MMU_PTA_BASE + 0x04
+#define MMU_PTA1_LSB			MMU_PTA_BASE + 0x08
+#define MMU_PTA1_MSB			MMU_PTA_BASE + 0x0c
+#define MMU_PTA2_LSB			MMU_PTA_BASE + 0x10
+#define MMU_PTA2_MSB			MMU_PTA_BASE + 0x14
+#define MMU_PTA3_LSB			MMU_PTA_BASE + 0x18
+#define MMU_PTA3_MSB			MMU_PTA_BASE + 0x1c
+#define MMU_PTA4_LSB			MMU_PTA_BASE + 0x20
+#define MMU_PTA4_MSB			MMU_PTA_BASE + 0x24
+#define MMU_PTA5_LSB			MMU_PTA_BASE + 0x28
+#define MMU_PTA5_MSB			MMU_PTA_BASE + 0x2c
+#define MMU_PTA6_LSB			MMU_PTA_BASE + 0x30
+#define MMU_PTA6_MSB			MMU_PTA_BASE + 0x34
+#define MMU_PTA7_LSB			MMU_PTA_BASE + 0x38
+#define MMU_PTA7_MSB			MMU_PTA_BASE + 0x3c
+
+/* BAM */
+#define BAM_VI0_0_DMA_BUF_MODE		0x000
+
+#define BAM_VI0_0_ADDR_OFFST_0		0x004
+#define BAM_VI0_0_ADDR_OFFST_1		0x008
+#define BAM_VI0_0_ADDR_OFFST_2		0x00c
+#define BAM_VI0_0_ADDR_OFFST_3		0x010
+#define BAM_VI0_0_ADDR_OFFST_4		0x014
+#define BAM_VI0_0_ADDR_OFFST_5		0x018
+#define BAM_VI0_0_ADDR_OFFST_6		0x01c
+#define BAM_VI0_0_ADDR_OFFST_7		0x020
+
+#define BAM_VI0_1_DMA_BUF_MODE		0x024
+#define BAM_VI0_1_ADDR_OFFST_0		0x028
+#define BAM_VI0_1_ADDR_OFFST_1		0x02c
+#define BAM_VI0_1_ADDR_OFFST_2		0x030
+#define BAM_VI0_1_ADDR_OFFST_3		0x034
+#define BAM_VI0_1_ADDR_OFFST_4		0x038
+#define BAM_VI0_1_ADDR_OFFST_5		0x03c
+#define BAM_VI0_1_ADDR_OFFST_6		0x040
+#define BAM_VI0_1_ADDR_OFFST_7		0x044
+
+#define BAM_VI0_2_DMA_BUF_MODE		0x048
+#define BAM_VI0_2_ADDR_OFFST_0		0x04c
+#define BAM_VI0_2_ADDR_OFFST_1		0x050
+#define BAM_VI0_2_ADDR_OFFST_2		0x054
+#define BAM_VI0_2_ADDR_OFFST_3		0x058
+#define BAM_VI0_2_ADDR_OFFST_4		0x05c
+#define BAM_VI0_2_ADDR_OFFST_5		0x060
+#define BAM_VI0_2_ADDR_OFFST_6		0x064
+#define BAM_VI0_2_ADDR_OFFST_7		0x068
+
+
+#define BAM_VI1_0_DMA_BUF_MODE		0x06c
+#define BAM_VI1_0_ADDR_OFFST_0		0x070
+#define BAM_VI1_0_ADDR_OFFST_1		0x074
+#define BAM_VI1_0_ADDR_OFFST_2		0x078
+#define BAM_VI1_0_ADDR_OFFST_3		0x07c
+#define BAM_VI1_0_ADDR_OFFST_4		0x080
+#define BAM_VI1_0_ADDR_OFFST_5		0x084
+#define BAM_VI1_0_ADDR_OFFST_6		0x088
+#define BAM_VI1_0_ADDR_OFFST_7		0x08c
+
+#define BAM_VI1_1_DMA_BUF_MODE		0x090
+#define BAM_VI1_1_ADDR_OFFST_0		0x094
+#define BAM_VI1_1_ADDR_OFFST_1		0x098
+#define BAM_VI1_1_ADDR_OFFST_2		0x09c
+#define BAM_VI1_1_ADDR_OFFST_3		0x0a0
+#define BAM_VI1_1_ADDR_OFFST_4		0x0a4
+#define BAM_VI1_1_ADDR_OFFST_5		0x0a8
+#define BAM_VI1_1_ADDR_OFFST_6		0x0ac
+#define BAM_VI1_1_ADDR_OFFST_7		0x0b0
+
+#define BAM_VI1_2_DMA_BUF_MODE		0x0b4
+#define BAM_VI1_2_ADDR_OFFST_0		0x0b8
+#define BAM_VI1_2_ADDR_OFFST_1		0x0bc
+#define BAM_VI1_2_ADDR_OFFST_2		0x0c0
+#define BAM_VI1_2_ADDR_OFFST_3		0x0c4
+#define BAM_VI1_2_ADDR_OFFST_4		0x0c8
+#define BAM_VI1_2_ADDR_OFFST_5		0x0cc
+#define BAM_VI1_2_ADDR_OFFST_6		0x0d0
+#define BAM_VI1_2_ADDR_OFFST_7		0x0d4
+
+
+#define BAM_FGPI0_DMA_BUF_MODE		0x0d8
+#define BAM_FGPI0_ADDR_OFFST_0		0x0dc
+#define BAM_FGPI0_ADDR_OFFST_1		0x0e0
+#define BAM_FGPI0_ADDR_OFFST_2		0x0e4
+#define BAM_FGPI0_ADDR_OFFST_3		0x0e8
+#define BAM_FGPI0_ADDR_OFFST_4		0x0ec
+#define BAM_FGPI0_ADDR_OFFST_5		0x0f0
+#define BAM_FGPI0_ADDR_OFFST_6		0x0f4
+#define BAM_FGPI0_ADDR_OFFST_7		0x0f8
+
+#define BAM_FGPI1_DMA_BUF_MODE		0x0fc
+#define BAM_FGPI1_ADDR_OFFST_0		0x100
+#define BAM_FGPI1_ADDR_OFFST_1		0x104
+#define BAM_FGPI1_ADDR_OFFST_2		0x108
+#define BAM_FGPI1_ADDR_OFFST_3		0x10c
+#define BAM_FGPI1_ADDR_OFFST_4		0x110
+#define BAM_FGPI1_ADDR_OFFST_5		0x114
+#define BAM_FGPI1_ADDR_OFFST_6		0x118
+#define BAM_FGPI1_ADDR_OFFST_7		0x11c
+
+#define BAM_FGPI2_DMA_BUF_MODE		0x120
+#define BAM_FGPI2_ADDR_OFFST_0		0x124
+#define BAM_FGPI2_ADDR_OFFST_1		0x128
+#define BAM_FGPI2_ADDR_OFFST_2		0x12c
+#define BAM_FGPI2_ADDR_OFFST_3		0x130
+#define BAM_FGPI2_ADDR_OFFST_4		0x134
+#define BAM_FGPI2_ADDR_OFFST_5		0x138
+#define BAM_FGPI2_ADDR_OFFST_6		0x13c
+#define BAM_FGPI2_ADDR_OFFST_7		0x140
+
+#define BAM_FGPI3_DMA_BUF_MODE		0x144
+#define BAM_FGPI3_ADDR_OFFST_0		0x148
+#define BAM_FGPI3_ADDR_OFFST_1		0x14c
+#define BAM_FGPI3_ADDR_OFFST_2		0x150
+#define BAM_FGPI3_ADDR_OFFST_3		0x154
+#define BAM_FGPI3_ADDR_OFFST_4		0x158
+#define BAM_FGPI3_ADDR_OFFST_5		0x15c
+#define BAM_FGPI3_ADDR_OFFST_6		0x160
+#define BAM_FGPI3_ADDR_OFFST_7		0x164
+
+
+#define BAM_AI0_DMA_BUF_MODE		0x168
+#define BAM_AI0_ADDR_OFFST_0		0x16c
+#define BAM_AI0_ADDR_OFFST_1		0x170
+#define BAM_AI0_ADDR_OFFST_2		0x174
+#define BAM_AI0_ADDR_OFFST_3		0x178
+#define BAM_AI0_ADDR_OFFST_4		0x17c
+#define BAM_AIO_ADDR_OFFST_5		0x180
+#define BAM_AI0_ADDR_OFFST_6		0x184
+#define BAM_AIO_ADDR_OFFST_7		0x188
+
+#define BAM_AI1_DMA_BUF_MODE		0x18c
+#define BAM_AI1_ADDR_OFFST_0		0x190
+#define BAM_AI1_ADDR_OFFST_1		0x194
+#define BAM_AI1_ADDR_OFFST_2		0x198
+#define BAM_AI1_ADDR_OFFST_3		0x19c
+#define BAM_AI1_ADDR_OFFST_4		0x1a0
+#define BAM_AI1_ADDR_OFFST_5		0x1a4
+#define BAM_AI1_ADDR_OFFST_6		0x1a8
+#define BAM_AI1_ADDR_OFFST_7		0x1ac
+
+#define BAM_SW_RST			0xff0
+#define BAM_SW_RESET			(0x0001 <<  0)
+
+/* I2C */
+#define RX_FIFO				0x000
+#define TX_FIFO				0x000
+#define I2C_STATUS			0x008
+#define I2C_CONTROL			0x00c
+#define CLOCK_DIVISOR_HIGH		0x010
+#define CLOCK_DIVISOR_LOW		0x014
+#define RX_LEVEL			0x01c
+#define TX_LEVEL			0x020
+#define SDA_HOLD			0x028
+
+#define MODULE_CONF			0xfd4
+#define INT_CLR_ENABLE			0xfd8
+#define INT_SET_ENABLE			0xfdc
+#define INT_STATUS			0xfe0
+#define INT_ENABLE			0xfe4
+#define INT_CLR_STATUS			0xfe8
+#define INT_SET_STATUS			0xfec
+
+#endif /* __SAA716x_REG_H */

From 78975dc68ca37c6fd325f4577350c014264a5a00 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:36:14 +0400
Subject: [PATCH 005/364] saa716x: Add Read/Write macros

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 2380a724e5b2b..caa30799a304f 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -16,8 +16,8 @@
 #define SAA716x_INFO		2
 #define SAA716x_DEBUG		3
 
-#define SAA716x_DEV		saa716x->num
-#define SAA716x_VERBOSE		saa716x->verbose
+#define SAA716x_DEV		(saa716x)->num
+#define SAA716x_VERBOSE		(saa716x)->verbose
 
 #define dprintk(__x, __y, __fmt, __arg...) do {								\
 	if (__y) {											\
@@ -48,6 +48,9 @@
 		.driver_data	= (unsigned long) (__configptr)		\
 }
 
+#define SAA716x_WR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
+#define SAA716x_RD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
+
 struct saa716x_dev;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);

From 806dbd227f658f835ae351052bd10459ffa59baa Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:43:25 +0400
Subject: [PATCH 006/364] saa716x: Initial attempt to Boot the core

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |   3 +-
 drivers/media/pci/saa716x/saa716x_boot.c   | 115 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_budget.c |   7 ++
 drivers/media/pci/saa716x/saa716x_hybrid.c |  11 +-
 drivers/media/pci/saa716x/saa716x_priv.h   |  21 ++++
 5 files changed, 155 insertions(+), 2 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_boot.c

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index b72d92974a952..f8b65156b82bc 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -1,5 +1,6 @@
 saa716x_core-objs		 := saa716x_pci.o	\
-				    saa716x_i2c.o
+				    saa716x_i2c.o	\
+				    saa716x_boot.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
new file mode 100644
index 0000000000000..4fb72e4607242
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -0,0 +1,115 @@
+#include <linux/delay.h>
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+
+static int saa716x_ext_boot(struct saa716x_dev *saa716x)
+{
+	/* Write to GREG Subsystem ID */
+	SAA716x_WR(GREG, GREG_SUBSYS_CONFIG, saa716x->pdev->subsystem_vendor);
+
+	/* GREG_JETSTR_CONFIG_1 */
+	SAA716x_WR(GREG, GREG_MSI_BAR_PMCSR, GREG_MSI_MM_CAP32 | GREG_BAR_WIDTH_20 | GREG_MSI_MM_CAP32);
+
+	/* GREG_JETSTR_CONFIG_2 */
+	SAA716x_WR(GREG, GREG_PMCSR_DATA_1, 0);
+
+	/* GREG_JETSTR_CONFIG_3 */
+	SAA716x_WR(GREG, GREG_PMCSR_DATA_2, 0);
+
+	/* Release GREG Resets */
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, IP_RST_RELEASE | ADAPTER_RST_RELEASE | PCIE_CORE_RST_RELEASE);
+
+	/* Disable Logical A/V channels */
+	SAA716x_WR(GREG, GPIO_OEN, 0xfcffffff);
+
+	/* Disable all clocks except PHY, Adapter, DCSN and Boot */
+	SAA716x_WR(CGU, CGU_PCR_0_3, 0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_0_4, 0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_0_7, 0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_2_1, 0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_3_2, 0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_4_1, 0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_5,   0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_6,   0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_7,   0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_8,   0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_9,   0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_10,  0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_11,  0x00000006);
+	SAA716x_WR(CGU, CGU_PCR_12,  0x00000006);
+
+	/* Set GREG Boot Ready */
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, BOOT_READY);
+
+	/* Disable GREG Clock */
+	SAA716x_WR(CGU, CGU_PCR_0_6, 0x00000006);
+
+	return 0;
+}
+
+static int saa716x_int_boot(struct saa716x_dev *saa716x)
+{
+	return 0;
+}
+
+int saa716x_core_boot(struct saa716x_dev *saa716x)
+{
+	struct saa716x_config *config = saa716x->config;
+
+	switch (config->boot_mode) {
+	case SAA716x_EXT_BOOT:
+		dprintk(SAA716x_DEBUG, 1, "Using External Boot from config");
+		saa716x_ext_boot(saa716x);
+		break;
+	case SAA716x_INT_BOOT:
+		dprintk(SAA716x_DEBUG, 1, "Using Internal Boot from config");
+		saa716x_int_boot(saa716x);
+		break;
+	default:
+		dprintk(SAA716x_ERROR, 1, "Unsupported Mode, halting (MODE=0x%02x)", config->boot_mode);
+		return -1;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_core_boot);
+
+int saa716x_jetpack_init(struct saa716x_dev *saa716x)
+{
+	/* Reset all blocks */
+	dprintk(SAA716x_DEBUG, 1, "Jetpack Init");
+	SAA716x_WR(MSI, MSI_SW_RST, MSI_SW_RESET);
+	SAA716x_WR(MMU, MMU_SW_RST, MMU_SW_RESET);
+	SAA716x_WR(BAM, BAM_SW_RST, BAM_SW_RESET);
+
+	switch (saa716x->pdev->device) {
+	case SAA7162:
+		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
+		SAA716x_WR(GPIO, GPIO_OEN, 0xfcffffff);
+		SAA716x_WR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
+		msleep(10);
+		SAA716x_WR(GPIO, GPIO_WR,  0x03000000); /* Enable decoders */
+		break;
+	case SAA7161:
+		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
+		SAA716x_WR(GPIO, GPIO_OEN, 0xfeffffff);
+		SAA716x_WR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
+		msleep(10);
+		SAA716x_WR(GPIO, GPIO_WR,  0x01000000); /* Enable decoder */
+		break;
+	case SAA7160:
+		dprintk(SAA716x_DEBUG, 1, "Setting SAA%02x Defaults", saa716x->pdev->device);
+		saa716x->i2c_rate = SAA716x_I2C_RATE_100;
+		break;
+	default:
+		dprintk(SAA716x_ERROR, 1, "Unknown device (0x%02x)", saa716x->pdev->device);
+		return -1;
+	}
+
+	/* General setup for MMU */
+	SAA716x_WR(MMU, MMU_MODE, 0x14);
+	dprintk(SAA716x_DEBUG, 1, "SAA%02x Jetpack Successfully initialized", saa716x->pdev->device);
+
+	return 0;
+}
+EXPORT_SYMBOL(saa716x_jetpack_init);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 224265de7ec79..51b427c6f8754 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -44,6 +44,12 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
+	err = saa716x_jetpack_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
+		goto fail1;
+	}
+ 
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
@@ -85,6 +91,7 @@ static int load_config_vp1028(struct saa716x_dev *saa716x)
 static struct saa716x_config saa716x_vp1028_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
+	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp1028,
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 2583c7e40ae81..3d5ddf8a871ca 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -38,9 +38,17 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	saa716x->pdev		= pdev;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
 
-	if ((err = saa716x_pci_init(saa716x)) != 0)
+	err = saa716x_pci_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
 		goto fail1;
+	}
 
+	err = saa716x_jetpack_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
+		goto fail1;
+	}
 
 	return 0;
 
@@ -90,6 +98,7 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.chips_desc            = SAA716x_CHIPS_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
+	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp6090,
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index caa30799a304f..45d2aca89ee82 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -38,6 +38,7 @@
 
 #define NXP_SEMICONDUCTOR	0x1131
 #define SAA7160			0x7160
+#define SAA7161			0x7161
 #define SAA7162			0x7162
 
 #define MAKE_ENTRY(__subven, __subdev, __chip, __configptr) {		\
@@ -55,9 +56,22 @@ struct saa716x_dev;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 
+enum saa716x_boot_mode {
+	SAA716x_EXT_BOOT = 1,
+	SAA716x_INT_BOOT,
+};
+
+enum saa716x_i2c_rate {
+	SAA716x_I2C_RATE_400 = 1,
+	SAA716x_I2C_RATE_100,
+};
+
 struct saa716x_config {
 	char				*model_name;
 	char				*dev_type;
+
+	enum saa716x_boot_mode		boot_mode;
+
 	char				*chips_desc;
 	saa716x_load_config_t		load_config;
 };
@@ -66,6 +80,8 @@ struct saa716x_i2c {
 	struct i2c_adapter		i2c_adapter;
 	struct mutex			i2c_lock;
 	struct saa716x_dev		*saa716x;
+
+	enum saa716x_i2c_rate		i2c_rate; /* run time */
 };
 
 struct saa716x_dev {
@@ -84,6 +100,7 @@ struct saa716x_dev {
 
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
+	enum saa716x_i2c_rate		i2c_rate; /* init time */
 
 	/* DMA */
 };
@@ -116,4 +133,8 @@ extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
 extern int saa716x_audio_init(struct saa716x_dev *saa716x);
 extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
 
+/* Boot */
+extern int saa716x_core_boot(struct saa716x_dev *saa716x);
+extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
+
 #endif /* __SAA716x_PRIV_H */

From 4acb958f066ae3f5af5cd6d34e77a4302224c4be Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:44:25 +0400
Subject: [PATCH 007/364] saa716x: Initial attempt to initialize the I2C core

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c |  11 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c |  15 +++
 drivers/media/pci/saa716x/saa716x_i2c.c    | 115 +++++++++++++++++----
 drivers/media/pci/saa716x/saa716x_priv.h   |   1 +
 4 files changed, 120 insertions(+), 22 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 51b427c6f8754..68a8e10c5491e 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -49,13 +49,20 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
 		goto fail1;
 	}
- 
+#if 0
+	err = saa716x_core_boot(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
+		goto fail2;
+	}
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
+
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
 		goto fail2;
 	}
-
+#endif
 	return 0;
 
 fail2:
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 3d5ddf8a871ca..9a88705a6b217 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -49,9 +49,24 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
 		goto fail1;
 	}
+#if 0
+	err = saa716x_core_boot(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
+		goto fail2;
+	}
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
 
+	err = saa716x_i2c_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		goto fail2;
+	}
+#endif
 	return 0;
 
+fail2:
+	saa716x_pci_exit(saa716x);
 fail1:
 	kfree(saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 6b7b23dd5a361..359541a1666f0 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -1,27 +1,29 @@
 #include <linux/delay.h>
-
+#include "saa716x_reg.h"
 #include "saa716x_priv.h"
 
+static void saa716x_term_xfer(struct i2c_adapter *adapter)
+{
+	struct saa716x_i2c *i2c;
+	struct saa716x_dev *saa716x;
+	u32 I2C_DEV;
 
-#define RX_FIFO			0x000
-#define TX_FIFO			0x000
-#define I2C_STATUS		0x008
-#define I2C_CONTROL		0x00c
-#define CLOCK_DIVISOR_HIGH	0x010
-#define CLOCK_DIVISOR_LOW	0x014
-#define RX_LEVEL		0x01c
-#define TX_LEVEL		0x020
-#define SDA_HOLD		0x028
-
-
-#define MODULE_CONF		0xfd4
-#define INT_CLR_ENABLE		0xfd8
-#define INT_SET_ENABLE		0xfdc
-#define INT_STATUS		0xfe0
-#define INT_ENABLE		0xfe4
-#define INT_CLR_STATUS		0xfe8
-#define INT_SET_STATUS		0xfec
-
+	i2c 	= i2c_get_adapdata(adapter);
+	saa716x = i2c->saa716x;
+	I2C_DEV = i2c->i2c_dev;
+
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc0); /* Start: SCL/SDA High */
+	msleep(10);
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0x80);
+	msleep(10);
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0x00);
+	msleep(10);
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0x80);
+	msleep(10);
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc0);
+
+	return;
+}
 
 static int saa716x_i2c_read(struct saa716x_dev *saa716x, const struct i2c_msg *msg)
 {
@@ -98,6 +100,8 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	struct pci_dev *pdev	= saa716x->pdev;
 	struct saa716x_i2c *i2c = saa716x->i2c;
 	int i, err = 0;
+	u32 I2C_DEV[2] = {I2C_B, I2C_A};
+	u32 reg;
 
 	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core", saa716x->pdev->device);
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
@@ -111,6 +115,77 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, saa716x_i2c[i].name);
 			goto exit;
 		}
+		i2c->i2c_dev	= I2C_DEV[i];
+		i2c->i2c_rate	= saa716x->i2c_rate;
+ 
+		msleep(1000);
+		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
+		if (!(reg & 0xd)) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, saa716x_i2c[i].name);
+			err = -1;
+			goto exit;
+		}
+
+		/* Flush queue */
+		SAA716x_WR(I2C_DEV[i], I2C_CONTROL, 0xcc);
+
+		/* Disable all interrupts and clear status */
+		SAA716x_WR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
+		SAA716x_WR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
+
+		/* Reset I2C Core and generate a delay */
+		SAA716x_WR(I2C_DEV[i], I2C_CONTROL, 0xc1);
+
+		msleep(100);
+
+		reg = SAA716x_RD(I2C_DEV[i], I2C_CONTROL);
+		if (reg != 0xc0) {
+			dprintk(SAA716x_ERROR, 1, "Core RESET failed");
+			err = -1;
+			goto exit;
+		}
+		
+		/* I2C Rate Setup */
+		switch (i2c->i2c_rate) {
+		case SAA716x_I2C_RATE_400:
+			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 400k", i, saa716x_i2c[i].name);
+			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], SDA_HOLD, 0x19);
+			break;
+		case SAA716x_I2C_RATE_100:
+			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 100k", i, saa716x_i2c[i].name);
+			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], SDA_HOLD, 0x60);
+			break;
+		default:
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Unknown Rate (Rate=0x%02x)", i, saa716x_i2c[i].name, i2c->i2c_rate);
+			break;
+		}
+		/* Disable all interrupts and clear status */
+		SAA716x_WR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
+		SAA716x_WR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
+
+		/* enable interrupts: transaction done, arbitration, No Ack and I2C error */
+		SAA716x_WR(I2C_DEV[i], INT_SET_ENABLE, 0x00c7);
+
+		/* Check interrupt enable status */
+		reg = SAA716x_RD(I2C_DEV[i], INT_ENABLE);
+		if (reg != 0xc7) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Interrupt enable failed, Exiting !", i, saa716x_i2c[i].name);
+			err = -1;
+			goto exit;
+		}
+
+		/* Check status */
+		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
+		if (!(reg & 0xd)) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s has bad state, Exiting !", i, saa716x_i2c[i].name);
+			err = -1;
+			goto exit;
+		}
+
 		i2c->saa716x = saa716x;
 		i2c++;
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 45d2aca89ee82..0a100915ef87a 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -80,6 +80,7 @@ struct saa716x_i2c {
 	struct i2c_adapter		i2c_adapter;
 	struct mutex			i2c_lock;
 	struct saa716x_dev		*saa716x;
+	u32				i2c_dev;
 
 	enum saa716x_i2c_rate		i2c_rate; /* run time */
 };

From 3b84fba3d3b73243382db065e368fda81e161459 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:51:20 +0400
Subject: [PATCH 008/364] saa716x: Setup CGU

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |  1 +
 drivers/media/pci/saa716x/saa716x_boot.c   |  9 ++--
 drivers/media/pci/saa716x/saa716x_budget.c | 16 +++---
 drivers/media/pci/saa716x/saa716x_cgu.c    | 60 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_hybrid.c | 16 +++---
 drivers/media/pci/saa716x/saa716x_priv.h   |  4 ++
 drivers/media/pci/saa716x/saa716x_reg.h    |  4 ++
 7 files changed, 88 insertions(+), 22 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_cgu.c

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index f8b65156b82bc..ec4c4084eaf43 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -1,5 +1,6 @@
 saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_i2c.o	\
+				    saa716x_cgu.o	\
 				    saa716x_boot.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 4fb72e4607242..fa2ef5286b7f6 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -65,9 +65,10 @@ int saa716x_core_boot(struct saa716x_dev *saa716x)
 		dprintk(SAA716x_DEBUG, 1, "Using Internal Boot from config");
 		saa716x_int_boot(saa716x);
 		break;
+	case SAA716x_CGU_BOOT:
 	default:
-		dprintk(SAA716x_ERROR, 1, "Unsupported Mode, halting (MODE=0x%02x)", config->boot_mode);
-		return -1;
+		dprintk(SAA716x_ERROR, 1, "Using CGU Setup");
+		break;
 	}
 
 	return 0;
@@ -77,7 +78,6 @@ EXPORT_SYMBOL_GPL(saa716x_core_boot);
 int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 {
 	/* Reset all blocks */
-	dprintk(SAA716x_DEBUG, 1, "Jetpack Init");
 	SAA716x_WR(MSI, MSI_SW_RST, MSI_SW_RESET);
 	SAA716x_WR(MMU, MMU_SW_RST, MMU_SW_RESET);
 	SAA716x_WR(BAM, BAM_SW_RST, BAM_SW_RESET);
@@ -98,12 +98,11 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 		SAA716x_WR(GPIO, GPIO_WR,  0x01000000); /* Enable decoder */
 		break;
 	case SAA7160:
-		dprintk(SAA716x_DEBUG, 1, "Setting SAA%02x Defaults", saa716x->pdev->device);
 		saa716x->i2c_rate = SAA716x_I2C_RATE_100;
 		break;
 	default:
 		dprintk(SAA716x_ERROR, 1, "Unknown device (0x%02x)", saa716x->pdev->device);
-		return -1;
+		return -ENODEV;
 	}
 
 	/* General setup for MMU */
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 68a8e10c5491e..d9073f23354b1 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -43,13 +43,6 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
 		goto fail1;
 	}
-
-	err = saa716x_jetpack_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
-		goto fail1;
-	}
-#if 0
 	err = saa716x_core_boot(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
@@ -57,12 +50,17 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	}
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
 
+	err = saa716x_jetpack_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
+		goto fail1;
+	}
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
 		goto fail2;
 	}
-#endif
+
 	return 0;
 
 fail2:
@@ -98,7 +96,7 @@ static int load_config_vp1028(struct saa716x_dev *saa716x)
 static struct saa716x_config saa716x_vp1028_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
-	.boot_mode		= SAA716x_EXT_BOOT,
+	.boot_mode		= SAA716x_CGU_BOOT,
 	.load_config		= &load_config_vp1028,
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
new file mode 100644
index 0000000000000..fece570245305
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -0,0 +1,60 @@
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+
+#define CGU_CLKS	15
+#define PLL_FREQ	2500
+
+int saa716x_cgu_init(struct saa716x_dev *saa716x)
+{
+	int M, N;
+	u8 i;
+	u32 boot_div[15], freq[15];
+	u32 CGU_FDC[15] = {
+		CGU_FDC_0,
+		CGU_FDC_1,
+		CGU_FDC_2,
+		CGU_FDC_3,
+		CGU_FDC_4,
+		CGU_FDC_5,
+		CGU_FDC_6,
+		CGU_FDC_7,
+		CGU_FDC_8,
+		CGU_FDC_9,
+		CGU_FDC_10,
+		CGU_FDC_11,
+		CGU_FDC_12,
+		CGU_FDC_13,
+	};
+
+	SAA716x_WR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
+	SAA716x_WR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* MMU */
+	SAA716x_WR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* DTL2MTL */
+	SAA716x_WR(CGU, CGU_PCR_0_5, CGU_PCR_RUN); /* MSI */
+	SAA716x_WR(CGU, CGU_PCR_3_2, CGU_PCR_RUN); /* I2C */
+	SAA716x_WR(CGU, CGU_PCR_4_1, CGU_PCR_RUN); /* PHI */
+	SAA716x_WR(CGU, CGU_PCR_0_7, CGU_PCR_RUN); /* GPIO */
+	SAA716x_WR(CGU, CGU_PCR_2_1, CGU_PCR_RUN); /* SPI */
+	SAA716x_WR(CGU, CGU_PCR_1_1, CGU_PCR_RUN); /* DCS */
+	SAA716x_WR(CGU, CGU_PCR_3_1, CGU_PCR_RUN); /* BOOT */
+
+	dprintk(SAA716x_DEBUG, 1, "Initial Clocks setup");
+
+	for (i = 0; i < CGU_CLKS; i++) {
+		boot_div[i] = SAA716x_RD(CGU, CGU_FDC[i]);
+
+		N  =  (boot_div[i] >> 11) & 0xff;
+		N *= -1;
+		M  = ((boot_div[i] >> 3) & 0xff) + N;
+
+		if (M)
+			freq[i] = (N * PLL_FREQ) / M;
+		else
+			freq[i] = 0;
+
+		dprintk(SAA716x_DEBUG, 1, "Clock %d, M=%d, Frequency=%d",
+			i, M, freq[i]);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_cgu_init);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 9a88705a6b217..be2695dc19bfa 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -44,12 +44,6 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
-	err = saa716x_jetpack_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
-		goto fail1;
-	}
-#if 0
 	err = saa716x_core_boot(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
@@ -57,12 +51,18 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	}
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
 
+	err = saa716x_jetpack_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
+		goto fail1;
+	}
+
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
 		goto fail2;
 	}
-#endif
+
 	return 0;
 
 fail2:
@@ -113,7 +113,7 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.chips_desc            = SAA716x_CHIPS_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
-	.boot_mode		= SAA716x_EXT_BOOT,
+	.boot_mode		= SAA716x_CGU_BOOT,
 	.load_config		= &load_config_vp6090,
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 0a100915ef87a..d0a6a579d648e 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -59,6 +59,7 @@ typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 enum saa716x_boot_mode {
 	SAA716x_EXT_BOOT = 1,
 	SAA716x_INT_BOOT,
+	SAA716x_CGU_BOOT,
 };
 
 enum saa716x_i2c_rate {
@@ -138,4 +139,7 @@ extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 
+/* CGU */
+extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
+
 #endif /* __SAA716x_PRIV_H */
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index d6ab9d0eea4e7..2429991cb6c70 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -205,6 +205,10 @@
 #define CGU_PCR_11			0x13c
 #define CGU_PCR_12			0x140
 #define CGU_PCR_13			0x144
+#define CGU_PCR_WAKE_EN			(0x0001 <<  2)
+#define CGU_PCR_AUTO			(0x0001 <<  1)
+#define CGU_PCR_RUN			(0x0001 <<  0)
+
 
 #define CGU_PSR_0_0			0x148
 #define CGU_PSR_0_1			0x14c

From 266cf742475b849c87587a6a172899d7def68180 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:53:16 +0400
Subject: [PATCH 009/364] saa716x: Whitespace cleanup

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 46 +++++++++++++---------
 1 file changed, 27 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index be2695dc19bfa..4e50d0f85fa8f 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -90,38 +90,46 @@ static int load_config_vp6090(struct saa716x_dev *saa716x)
 	return ret;
 }
 
-static int load_config_nemo(struct saa716x_dev *saa716x)
-{
-    int ret = 0;
-    return ret;
-}
 
 
+/*
+ * Twinhan/Azurewave VP-6090
+ * DVB-S Frontend: 2x MB86A16
+ * DVB-T Frontend: 2x TDA10046 + TDA8275
+ */
 #define SAA716x_MODEL_TWINHAN_VP6090	"Twinhan/Azurewave VP-6090"
-#define SAA716x_CHIPS_TWINHAN_VP6090       "2xTDA8263 + 2xMB86A16L + 2xTDA8275A + 2xTDA10046 + SAA7162"
+#define SAA716x_CHIPS_TWINHAN_VP6090	"2xMB86A16L + 2xTDA8275A + 2xTDA10046 + SAA7162"
 #define SAA716x_DEV_TWINHAN_VP6090	"2xDVB-S + 2xDVB-T + 2xAnalog"
 
-/*****************NXP Semiconductors reference design board ******************/
-#define SAA716x_MODEL_NXP_NENO     "NXP Semiconductors NEMO referrence board" 
-#define SAA716x_CHIPS_NXP_NEMO      "SAA7160 + TDA8275A + TDA10046 + SAA7136"
-#define SAA716x_DEV_NXP_NEMO         "DVB-T + Analog"
-/*******************************END*************************************/
-
-
-
 static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
-	.chips_desc            = SAA716x_CHIPS_TWINHAN_VP6090,
+	.chips_desc		= SAA716x_CHIPS_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.boot_mode		= SAA716x_CGU_BOOT,
 	.load_config		= &load_config_vp6090,
 };
 
+/*
+ * NXP Reference design (NEMO)
+ * DVB-T Frontend: 1x TDA10046 + TDA8275
+ * Analog Decoder: External SAA7136
+ */
+#define SAA716x_MODEL_NXP_NENO		"NXP Semiconductors NEMO referrence board" 
+#define SAA716x_CHIPS_NXP_NEMO		"SAA7160 + TDA8275A + TDA10046 + SAA7136"
+#define SAA716x_DEV_NXP_NEMO		"DVB-T + Analog"
+
+static int load_config_nemo(struct saa716x_dev *saa716x)
+{
+    int ret = 0;
+    return ret;
+}
+
 static struct saa716x_config saa716x_nemo_config = {
-       .model_name        = SAA716x_MODEL_NXP_NENO,
-	.chips_desc           = SAA716x_CHIPS_NXP_NEMO,
-	.dev_type             = SAA716x_DEV_NXP_NEMO,
-	.load_config          = &load_config_nemo,
+	.model_name		= SAA716x_MODEL_NXP_NENO,
+	.chips_desc		= SAA716x_CHIPS_NXP_NEMO,
+	.dev_type		= SAA716x_DEV_NXP_NEMO,
+	.boot_mode		= SAA716x_CGU_BOOT,
+	.load_config		= &load_config_nemo,
 };
 
 

From 03b2fd30f5bca0bd78ea36ea25ed9f2fabc1722c Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:54:00 +0400
Subject: [PATCH 010/364] saa716x: Use subsystem Vendor ID

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 4e50d0f85fa8f..d5d0865d6c1ac 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -135,8 +135,8 @@ static struct saa716x_config saa716x_nemo_config = {
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
-	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7160, &saa716x_vp6090_config),
-	MAKE_ENTRY(PCI_ANY_ID, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
+	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
+	MAKE_ENTRY(NXP_SEMICONDUCTOR, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 };
 MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
 

From 72bc9727c1406e03a0fed22b7e2ad816c70e55b6 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:57:32 +0400
Subject: [PATCH 011/364] saa716x: Small cleanups

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 21 ++++++++-------------
 drivers/media/pci/saa716x/saa716x_priv.h   |  1 -
 2 files changed, 8 insertions(+), 14 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index d5d0865d6c1ac..89bdc30abe89f 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -82,15 +82,6 @@ static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
 	kfree(saa716x);
 }
 
-static int load_config_vp6090(struct saa716x_dev *saa716x)
-{
-//	int ret = -ENODEV;
-	int ret = 0;
-
-	return ret;
-}
-
-
 
 /*
  * Twinhan/Azurewave VP-6090
@@ -98,24 +89,29 @@ static int load_config_vp6090(struct saa716x_dev *saa716x)
  * DVB-T Frontend: 2x TDA10046 + TDA8275
  */
 #define SAA716x_MODEL_TWINHAN_VP6090	"Twinhan/Azurewave VP-6090"
-#define SAA716x_CHIPS_TWINHAN_VP6090	"2xMB86A16L + 2xTDA8275A + 2xTDA10046 + SAA7162"
 #define SAA716x_DEV_TWINHAN_VP6090	"2xDVB-S + 2xDVB-T + 2xAnalog"
 
+static int load_config_vp6090(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+
+	return ret;
+}
+
 static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
-	.chips_desc		= SAA716x_CHIPS_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.boot_mode		= SAA716x_CGU_BOOT,
 	.load_config		= &load_config_vp6090,
 };
 
+
 /*
  * NXP Reference design (NEMO)
  * DVB-T Frontend: 1x TDA10046 + TDA8275
  * Analog Decoder: External SAA7136
  */
 #define SAA716x_MODEL_NXP_NENO		"NXP Semiconductors NEMO referrence board" 
-#define SAA716x_CHIPS_NXP_NEMO		"SAA7160 + TDA8275A + TDA10046 + SAA7136"
 #define SAA716x_DEV_NXP_NEMO		"DVB-T + Analog"
 
 static int load_config_nemo(struct saa716x_dev *saa716x)
@@ -126,7 +122,6 @@ static int load_config_nemo(struct saa716x_dev *saa716x)
 
 static struct saa716x_config saa716x_nemo_config = {
 	.model_name		= SAA716x_MODEL_NXP_NENO,
-	.chips_desc		= SAA716x_CHIPS_NXP_NEMO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
 	.boot_mode		= SAA716x_CGU_BOOT,
 	.load_config		= &load_config_nemo,
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index d0a6a579d648e..20cab76789e31 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -73,7 +73,6 @@ struct saa716x_config {
 
 	enum saa716x_boot_mode		boot_mode;
 
-	char				*chips_desc;
 	saa716x_load_config_t		load_config;
 };
 

From df3b8980f8f4f2c1a9a617ab89c8d00bfe2979c0 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:58:09 +0400
Subject: [PATCH 012/364] saa716x: Enable all inputs

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 51 +++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_i2c.c |  2 +-
 drivers/media/pci/saa716x/saa716x_reg.h | 33 +++++++++-------
 3 files changed, 71 insertions(+), 15 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index fece570245305..be4a96b1abf04 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -1,3 +1,4 @@
+#include <linux/delay.h>
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
 
@@ -55,6 +56,56 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 			i, M, freq[i]);
 	}
 
+	/* VI 0 */
+	SAA716x_WR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
+	SAA716x_WR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
+	SAA716x_WR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
+	SAA716x_WR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
+
+	/* VI 1 */
+	SAA716x_WR(CGU, CGU_PCR_6, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_6, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_6, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_6, CGU_ESR_FD_EN);
+
+	/* FGPI 0 */
+	SAA716x_WR(CGU, CGU_PCR_7, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_7, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_7, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_7, CGU_ESR_FD_EN);
+
+	/* FGPI 1 */
+	SAA716x_WR(CGU, CGU_PCR_8, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_8, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_8, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_8, CGU_ESR_FD_EN);
+
+	/* FGPI 2 */
+	SAA716x_WR(CGU, CGU_PCR_9, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_9, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_9, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_9, CGU_ESR_FD_EN);
+
+	/* FGPI 3 */
+	SAA716x_WR(CGU, CGU_PCR_10, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_10, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_10, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_10, CGU_ESR_FD_EN);
+
+	/* AI 0 */
+	SAA716x_WR(CGU, CGU_PCR_11, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_11, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_11, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_11, CGU_ESR_FD_EN);
+
+	/* AI 1 */
+	SAA716x_WR(CGU, CGU_PCR_12, CGU_PCR_RUN);
+	SAA716x_WR(CGU, CGU_SCR_12, CGU_SCR_ENF1);
+	SAA716x_WR(CGU, CGU_FS1_12, 0x00000000);
+	SAA716x_WR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
+
+	msleep(50); /* wait for PLL */
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_cgu_init);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 359541a1666f0..ce84e803fbe26 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -118,7 +118,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		i2c->i2c_dev	= I2C_DEV[i];
 		i2c->i2c_rate	= saa716x->i2c_rate;
  
-		msleep(1000);
+		msleep(100);
 		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
 		if (!(reg & 0xd)) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, saa716x_i2c[i].name);
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 2429991cb6c70..96f25f5d36157 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -119,20 +119,24 @@
 #define GPIO_SW_RESET			(0x0001 <<  0)
 
 /* CGU */
-#define CGU_SCR0			0x000
-#define CGU_SCR1			0x004
-#define CGU_SCR2			0x008
-#define CGU_SCR3			0x00c
-#define CGU_SCR4			0x010
-#define CGU_SCR5			0x014
-#define CGU_SCR6			0x018
-#define CGU_SCR7			0x01c
-#define CGU_SCR8			0x020
-#define CGU_SCR9			0x024
-#define CGU_SCR10			0x028
-#define CGU_SCR11			0x02c
-#define CGU_SCR12			0x030
-#define CGU_SCR13			0x034
+#define CGU_SCR_0			0x000
+#define CGU_SCR_1			0x004
+#define CGU_SCR_2			0x008
+#define CGU_SCR_3			0x00c
+#define CGU_SCR_4			0x010
+#define CGU_SCR_5			0x014
+#define CGU_SCR_6			0x018
+#define CGU_SCR_7			0x01c
+#define CGU_SCR_8			0x020
+#define CGU_SCR_9			0x024
+#define CGU_SCR_10			0x028
+#define CGU_SCR_11			0x02c
+#define CGU_SCR_12			0x030
+#define CGU_SCR_13			0x034
+#define CGU_SCR_STOP			(0x0001 <<  3)
+#define CGU_SCR_RESET			(0x0001 <<  2)
+#define CGU_SCR_ENF2			(0x0001 <<  1)
+#define CGU_SCR_ENF1			(0x0001 <<  0)
 
 #define CGU_FS1_0			0x038
 #define CGU_FS1_1			0x03c
@@ -263,6 +267,7 @@
 #define CGU_ESR_11			0x20c
 #define CGU_ESR_12			0x210
 #define CGU_ESR_13			0x214
+#define CGU_ESR_FD_EN			(0x0001 <<  0)
 
 #define CGU_FDC_0			0x218
 #define CGU_FDC_1			0x21c

From 85400a791af6c0e8db3bb99b6b9dd9330f4f14d0 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 14:59:11 +0400
Subject: [PATCH 013/364] saa716x: Initial go at MSI setup

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile      |   1 +
 drivers/media/pci/saa716x/saa716x_msi.c | 110 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_reg.h |  63 ++++++++++++++
 3 files changed, 174 insertions(+)
 create mode 100644 drivers/media/pci/saa716x/saa716x_msi.c

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index ec4c4084eaf43..110937843792a 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -1,6 +1,7 @@
 saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_i2c.o	\
 				    saa716x_cgu.o	\
+				    saa716x_msi.o	\
 				    saa716x_boot.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
new file mode 100644
index 0000000000000..68fd91552670a
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -0,0 +1,110 @@
+#include <linux/delay.h>
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+
+#define MSI_CONFIG_REGS		49
+
+int saa716x_msi_init(struct saa716x_dev *saa716x)
+{
+	u32 ena_l, ena_h, sta_l, sta_h;
+	int i;
+	u32 MSI_CONFIG_REG[49] = {
+		MSI_CONFIG0,
+		MSI_CONFIG1,
+		MSI_CONFIG2,
+		MSI_CONFIG3,
+		MSI_CONFIG4,
+		MSI_CONFIG5,
+		MSI_CONFIG6,
+		MSI_CONFIG7,
+		MSI_CONFIG8,
+		MSI_CONFIG9,
+		MSI_CONFIG10,
+		MSI_CONFIG11,
+		MSI_CONFIG12,
+		MSI_CONFIG13,
+		MSI_CONFIG14,
+		MSI_CONFIG15,
+		MSI_CONFIG16,
+		MSI_CONFIG17,
+		MSI_CONFIG18,
+		MSI_CONFIG19,
+		MSI_CONFIG20,
+		MSI_CONFIG21,
+		MSI_CONFIG22,
+		MSI_CONFIG23,
+		MSI_CONFIG24,
+		MSI_CONFIG25,
+		MSI_CONFIG26,
+		MSI_CONFIG27,
+		MSI_CONFIG28,
+		MSI_CONFIG29,
+		MSI_CONFIG30,
+		MSI_CONFIG31,
+		MSI_CONFIG32,
+		MSI_CONFIG33,
+		MSI_CONFIG34,
+		MSI_CONFIG35,
+		MSI_CONFIG36,
+		MSI_CONFIG37,
+		MSI_CONFIG38,
+		MSI_CONFIG39,
+		MSI_CONFIG40,
+		MSI_CONFIG41,
+		MSI_CONFIG42,
+		MSI_CONFIG43,
+		MSI_CONFIG44,
+		MSI_CONFIG45,
+		MSI_CONFIG46,
+		MSI_CONFIG47,
+		MSI_CONFIG48
+	};
+
+	/* let HW take care of MSI race */
+	SAA716x_WR(MSI, MSI_DELAY_TIMER, 0x0);
+
+	/* INTA Polarity: Active High */
+	SAA716x_WR(MSI, MSI_INTA_POLARITY, MSI_INTA_POLARITY_HIGH);
+
+	/*
+	 * IRQ Edge Rising: 25:24 = 0x01
+	 * Traffic Class: 18:16 = 0x00
+	 * MSI ID: 4:0 = 0x00
+	 */
+	for (i = 0; i < MSI_CONFIG_REGS; i++)
+		SAA716x_WR(MSI, MSI_CONFIG_REG[i], 0x01000000);
+
+	/* get Status */
+	ena_l = SAA716x_RD(MSI, MSI_INT_ENA_L);
+	ena_h = SAA716x_RD(MSI, MSI_INT_ENA_H);
+	sta_l = SAA716x_RD(MSI, MSI_INT_STATUS_L);
+	sta_h = SAA716x_RD(MSI, MSI_INT_STATUS_H);
+
+	/* disable and clear enabled and asserted IRQ's */
+	if (sta_l)
+		SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, sta_l);
+
+	if (sta_h)
+		SAA716x_WR(MSI, MSI_INT_STATUS_CLR_H, sta_h);
+
+	if (ena_l)
+		SAA716x_WR(MSI, MSI_INT_ENA_CLR_L, ena_l);
+
+	if (ena_h)
+		SAA716x_WR(MSI, MSI_INT_ENA_CLR_H, ena_h);
+
+	msleep(5);
+
+	/* Check IRQ's really disabled */
+	ena_l = SAA716x_RD(MSI, MSI_INT_ENA_L);
+	ena_h = SAA716x_RD(MSI, MSI_INT_ENA_H);
+	sta_l = SAA716x_RD(MSI, MSI_INT_STATUS_L);
+	sta_h = SAA716x_RD(MSI, MSI_INT_STATUS_H);
+
+	if ((ena_l == 0) && (ena_h == 0) && (sta_l == 0) && (sta_h == 0))
+		return 0;
+	else
+		return -EIO;
+
+	return 0;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 96f25f5d36157..611d4681f4ece 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -286,7 +286,12 @@
 
 /* MSI */
 #define MSI_DELAY_TIMER			0x000
+#define MSI_DELAY_1CLK			(0x0001 <<  0)
+#define MSI_DELAY_2CLK			(0x0002 <<  0)
+
 #define MSI_INTA_POLARITY		0x004
+#define MSI_INTA_POLARITY_HIGH		(0x0001 <<  0)
+
 #define MSI_CONFIG0			0x008
 #define MSI_CONFIG1			0x00c
 #define MSI_CONFIG2			0x010
@@ -336,9 +341,67 @@
 #define MSI_CONFIG46			0x0c0
 #define MSI_CONFIG47			0x0c4
 #define MSI_CONFIG48			0x0c8
+#define MSI_INT_POL_EDGE_RISE		(0x0001 << 24)
+#define MSI_INT_POL_EDGE_FALL		(0x0002 << 24)
+#define MSI_INT_POL_EDGE_ANY		(0x0003 << 24)
+#define MSI_TC				(0x0007 << 16)
+#define MSI_ID				(0x000f <<  0)
 
 #define MSI_INT_STATUS_L		0xfc0
+#define MSI_INT_TAGACK_VI0_0		(0x00000001 <<  0)
+#define MSI_INT_TAGACK_VI0_1		(0x00000001 <<  1)
+#define MSI_INT_TAGACK_VI0_2		(0x00000001 <<  2)
+#define MSI_INT_TAGACK_VI1_0		(0x00000001 <<  3)
+#define MSI_INT_TAGACK_VI1_1		(0x00000001 <<  4)
+#define MSI_INT_TAGACK_VI1_2		(0x00000001 <<  5)
+#define MSI_INT_TAGACK_FGPI_0		(0x00000001 <<  6)
+#define MSI_INT_TAGACK_FGPI_1		(0x00000001 <<  7)
+#define MSI_INT_TAGACK_FGPI_2		(0x00000001 <<  8)
+#define MSI_INT_TAGACK_FGPI_3		(0x00000001 <<  9)
+#define MSI_INT_TAGACK_AI_0		(0x00000001 << 10)
+#define MSI_INT_TAGACK_AI_1		(0x00000001 << 11)
+#define MSI_INT_OVRFLW_VI0_0		(0x00000001 << 12)
+#define MSI_INT_OVRFLW_VI0_1		(0x00000001 << 13)
+#define MSI_INT_OVRFLW_VI0_2		(0x00000001 << 14)
+#define MSI_INT_OVRFLW_VI1_0		(0x00000001 << 15)
+#define MSI_INT_OVRFLW_VI1_1		(0x00000001 << 16)
+#define MSI_INT_OVRFLW_VI1_2		(0x00000001 << 17)
+#define MSI_INT_OVRFLW_FGPI_O		(0x00000001 << 18)
+#define MSI_INT_OVRFLW_FGPI_1		(0x00000001 << 19)
+#define MSI_INT_OVRFLW_FGPI_2		(0x00000001 << 20)
+#define MSI_INT_OVRFLW_FGPI_3		(0x00000001 << 21)
+#define MSI_INT_OVRFLW_AI_0		(0x00000001 << 22)
+#define MSI_INT_OVRFLW_AI_1		(0x00000001 << 23)
+#define MSI_INT_AVINT_VI0		(0x00000001 << 24)
+#define MSI_INT_AVINT_VI1		(0x00000001 << 25)
+#define MSI_INT_AVINT_FGPI_0		(0x00000001 << 26)
+#define MSI_INT_AVINT_FGPI_1		(0x00000001 << 27)
+#define MSI_INT_AVINT_FGPI_2		(0x00000001 << 28)
+#define MSI_INT_AVINT_FGPI_3		(0x00000001 << 29)
+#define MSI_INT_AVINT_AI_0		(0x00000001 << 30)
+#define MSI_INT_AVINT_AI_1		(0x00000001 << 31)
+
 #define MSI_INT_STATUS_H		0xfc4
+#define MSI_INT_UNMAPD_TC_INT		(0x00000001 <<  0)
+#define MSI_INT_EXTINT_0		(0x00000001 <<  1)
+#define MSI_INT_EXTINT_1		(0x00000001 <<  2)
+#define MSI_INT_EXTINT_2		(0x00000001 <<  3)
+#define MSI_INT_EXTINT_3		(0x00000001 <<  4)
+#define MSI_INT_EXTINT_4		(0x00000001 <<  5)
+#define MSI_INT_EXTINT_5		(0x00000001 <<  6)
+#define MSI_INT_EXTINT_6		(0x00000001 <<  7)
+#define MSI_INT_EXTINT_7		(0x00000001 <<  8)
+#define MSI_INT_EXTINT_8		(0x00000001 <<  9)
+#define MSI_INT_EXTINT_9		(0x00000001 << 10)
+#define MSI_INT_EXTINT_10		(0x00000001 << 11)
+#define MSI_INT_EXTINT_11		(0x00000001 << 12)
+#define MSI_INT_EXTINT_12		(0x00000001 << 13)
+#define MSI_INT_EXTINT_13		(0x00000001 << 14)
+#define MSI_INT_EXTINT_14		(0x00000001 << 15)
+#define MSI_INT_EXTINT_15		(0x00000001 << 16)
+#define MSI_INT_I2CINT_0		(0x00000001 << 17)
+#define MSI_INT_I2CINT_1		(0x00000001 << 18)
+
 #define MSI_INT_STATUS_CLR_L		0xfc8
 #define MSI_INT_STATUS_CLR_H		0xfcc
 #define MSI_INT_STATUS_SET_L		0xfd0

From da4dfc7f289cc14ed0f14c5eee25366ea8b31eaa Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:00:21 +0400
Subject: [PATCH 014/364] saa716x: Update I2C register definitions and fields

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c |  19 +++-
 drivers/media/pci/saa716x/saa716x_reg.h | 120 ++++++++++++++++++++++++
 2 files changed, 138 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index ce84e803fbe26..9c4df6a75e970 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -31,9 +31,20 @@ static int saa716x_i2c_read(struct saa716x_dev *saa716x, const struct i2c_msg *m
 	return 0;
 }
 
-static int saa716x_i2c_write(struct saa716x_dev *saa716x, const struct i2c_msg*msg)
+//static int saa716x_i2c_write(struct saa716x_dev *saa716x, const struct i2c_msg *msg)
+static int saa716x_i2c_write(struct i2c_adapter *adapter, const struct i2c_msg *msg)
 {
+	struct saa716x_i2c *i2c;
+	struct saa716x_dev *saa716x;
+
+	u32 stat, I2C_DEV;
+
+	i2c	= i2c_get_adapdata(adapter);
+	saa716x = i2c->saa716x;
 
+	I2C_DEV	= i2c->i2c_dev; 
+	stat	= SAA716x_RD(I2C_DEV, I2C_STATUS);
+	
 	return 0;
 }
 
@@ -100,6 +111,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	struct pci_dev *pdev	= saa716x->pdev;
 	struct saa716x_i2c *i2c = saa716x->i2c;
 	int i, err = 0;
+
 	u32 I2C_DEV[2] = {I2C_B, I2C_A};
 	u32 reg;
 
@@ -107,18 +119,22 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 		dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, saa716x_i2c[i].name);
 		mutex_init(&i2c->i2c_lock);
+
 		memcpy(&i2c->i2c_adapter, &saa716x_i2c[i], sizeof (struct i2c_adapter));
 		i2c_set_adapdata(&i2c->i2c_adapter, saa716x_i2c);
 		i2c->i2c_adapter.dev.parent = &pdev->dev;
+
 		err = i2c_add_adapter(&i2c->i2c_adapter);
 		if (err < 0) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, saa716x_i2c[i].name);
 			goto exit;
 		}
+
 		i2c->i2c_dev	= I2C_DEV[i];
 		i2c->i2c_rate	= saa716x->i2c_rate;
  
 		msleep(100);
+
 		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
 		if (!(reg & 0xd)) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, saa716x_i2c[i].name);
@@ -163,6 +179,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Unknown Rate (Rate=0x%02x)", i, saa716x_i2c[i].name, i2c->i2c_rate);
 			break;
 		}
+
 		/* Disable all interrupts and clear status */
 		SAA716x_WR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
 		SAA716x_WR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 611d4681f4ece..264598735d7fa 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -603,21 +603,141 @@
 
 /* I2C */
 #define RX_FIFO				0x000
+#define RX_BYTE				(0x000000ff <<  0)
+
 #define TX_FIFO				0x000
+#define STOP_BIT			(0x00000001 <<  9)
+#define START_BIT			(0x00000001 <<  8)
+#define TX_BYTE				(0x000000ff <<  0)
+
 #define I2C_STATUS			0x008
+#define TRANSMIT			(0x00000001 << 11)
+#define RECEIVE				(0x00000001 << 10)
+#define TRANSMIT_S_PROG			(0x00000001 <<  9)
+#define TRANSMIT_S_CLEAR		(0x00000001 <<  8)
+#define TRANSMIT_PROG			(0x00000001 <<  7)
+#define TRANSMIT_CLEAR			(0x00000001 <<  6)
+#define RECEIVE_PROG			(0x00000001 <<  5)
+#define RECEIVE_CLEAR			(0x00000001 <<  4)
+#define SDA_LINE			(0x00000001 <<  3)
+#define SCL_LINE			(0x00000001 <<  2)
+#define START_STOP_FLAG			(0x00000001 <<  1)
+#define MODE_STATUS			(0x00000001 <<  0)
+
 #define I2C_CONTROL			0x00c
+#define SCL_CONTROL			(0x00000001 <<  7)
+#define SDA_CONTROL			(0x00000001 <<  6)
+#define RECEIVE_PROTECT			(0x00000001 <<  5)
+#define RECEIVE_PRO_READ		(0x00000001 <<  4)
+#define TRANS_SELF_CLEAR		(0x00000001 <<  3)
+#define TRANS_S_SELF_CLEAR		(0x00000001 <<  2)
+#define SLAVE_ADDR_10BIT		(0x00000001 <<  1)
+#define RESET				(0x00000001 <<  0)
+
 #define CLOCK_DIVISOR_HIGH		0x010
+#define CLOCK_HIGH			(0x0000ffff <<  0)
+
 #define CLOCK_DIVISOR_LOW		0x014
+#define CLOCK_LOW			(0x0000ffff <<  0)
+
 #define RX_LEVEL			0x01c
+#define RECEIVE_RANGE			(0x0000007f <<  0)
+
 #define TX_LEVEL			0x020
+#define TRANSMIT_RANGE			(0x0000007f <<  0)
+
 #define SDA_HOLD			0x028
+#define HOLD_TIME			(0x0000007f <<  0)
 
 #define MODULE_CONF			0xfd4
 #define INT_CLR_ENABLE			0xfd8
+#define CLR_ENABLE_STFNF		(0x00000001 << 12)
+#define CLR_ENABLE_MTFNF		(0x00000001 << 11)
+#define CLR_ENABLE_RFDA			(0x00000001 << 10)
+#define CLR_ENABLE_RFF			(0x00000001 <<  9)
+#define CLR_ENABLE_STDR			(0x00000001 <<  8)
+#define CLR_ENABLE_MTDR			(0x00000001 <<  7)
+#define CLR_ENABLE_IBE			(0x00000001 <<  6)
+#define CLR_ENABLE_MSMC			(0x00000001 <<  5)
+#define CLR_ENABLE_SRSD			(0x00000001 <<  4)
+#define CLR_ENABLE_STSD			(0x00000001 <<  3)
+#define CLR_ENABLE_MTNA			(0x00000001 <<  2)
+#define CLR_ENABLE_MAF			(0x00000001 <<  1)
+#define CLR_ENABLE_MTD			(0x00000001 <<  0)
+
 #define INT_SET_ENABLE			0xfdc
+#define SET_ENABLE_STFNF		(0x00000001 << 12)
+#define SET_ENABLE_MTFNF		(0x00000001 << 11)
+#define SET_ENABLE_RFDA			(0x00000001 << 10)
+#define SET_ENABLE_RFF			(0x00000001 <<  9)
+#define SET_ENABLE_STDR			(0x00000001 <<  8)
+#define SET_ENABLE_MTDR			(0x00000001 <<  7)
+#define SET_ENABLE_IBE			(0x00000001 <<  6)
+#define SET_ENABLE_MSMC			(0x00000001 <<  5)
+#define SET_ENABLE_SRSD			(0x00000001 <<  4)
+#define SET_ENABLE_STSD			(0x00000001 <<  3)
+#define SET_ENABLE_MTNA			(0x00000001 <<  2)
+#define SET_ENABLE_MAF			(0x00000001 <<  1)
+#define SET_ENABLE_MTD			(0x00000001 <<  0)
+
 #define INT_STATUS			0xfe0
+#define INTERRUPT_STFNF			(0x00000001 << 12)
+#define INTERRUPT_MTFNF			(0x00000001 << 11)
+#define INTERRUPT_RFDA			(0x00000001 << 10)
+#define INTERRUPTE_RFF			(0x00000001 <<  9)
+#define SLAVE_INTERRUPT_STDR		(0x00000001 <<  8)
+#define MASTER_INTERRUPT_MTDR		(0x00000001 <<  7)
+#define I2C_ERROR_IBE			(0x00000001 <<  6)
+#define MODE_CHANGE_INTER_MSMC		(0x00000001 <<  5)
+#define SLAVE_RECEIVE_INTER_SRSD	(0x00000001 <<  4)
+#define SLAVE_TRANSMIT_INTER_STSD	(0x00000001 <<  3)
+#define ACK_INTER_MTNA			(0x00000001 <<  2)
+#define FAILURE_INTER_MAF		(0x00000001 <<  1)
+#define INTERRUPT_MTD			(0x00000001 <<  0)
+
 #define INT_ENABLE			0xfe4
+#define ENABLE_STFNF			(0x00000001 << 12)
+#define ENABLE_MTFNF			(0x00000001 << 11)
+#define ENABLE_RFDA			(0x00000001 << 10)
+#define ENABLE_RFF			(0x00000001 <<  9)
+#define ENABLE_STDR			(0x00000001 <<  8)
+#define ENABLE_MTDR			(0x00000001 <<  7)
+#define ENABLE_IBE			(0x00000001 <<  6)
+#define ENABLE_MSMC			(0x00000001 <<  5)
+#define ENABLE_SRSD			(0x00000001 <<  4)
+#define ENABLE_STSD			(0x00000001 <<  3)
+#define ENABLE_MTNA			(0x00000001 <<  2)
+#define ENABLE_MAF			(0x00000001 <<  1)
+#define ENABLE_MTD			(0x00000001 <<  0)
+
 #define INT_CLR_STATUS			0xfe8
+#define CLR_STATUS_STFNF		(0x00000001 << 12)
+#define CLR_STATUS_MTFNF		(0x00000001 << 11)
+#define CLR_STATUS_RFDA			(0x00000001 << 10)
+#define CLR_STATUS_RFF			(0x00000001 <<  9)
+#define CLR_STATUS_STDR			(0x00000001 <<  8)
+#define CLR_STATUS_MTDR			(0x00000001 <<  7)
+#define CLR_STATUS_IBE			(0x00000001 <<  6)
+#define CLR_STATUS_MSMC			(0x00000001 <<  5)
+#define CLR_STATUS_SRSD			(0x00000001 <<  4)
+#define CLR_STATUS_STSD			(0x00000001 <<  3)
+#define CLR_STATUS_MTNA			(0x00000001 <<  2)
+#define CLR_STATUS_MAF			(0x00000001 <<  1)
+#define CLR_STATIS_MTD			(0x00000001 <<  0)
+
 #define INT_SET_STATUS			0xfec
+#define SET_STATUS_STFNF		(0x00000001 << 12)
+#define SET_STATUS_MTFNF		(0x00000001 << 11)
+#define SET_STATUS_RFDA			(0x00000001 << 10)
+#define SET_STATUS_RFF			(0x00000001 <<  9)
+#define SET_STATUS_STDR			(0x00000001 <<  8)
+#define SET_STATUS_MTDR			(0x00000001 <<  7)
+#define SET_STATUS_IBE			(0x00000001 <<  6)
+#define SET_STATUS_MSMC			(0x00000001 <<  5)
+#define SET_STATUS_SRSD			(0x00000001 <<  4)
+#define SET_STATUS_STSD			(0x00000001 <<  3)
+#define SET_STATUS_MTNA			(0x00000001 <<  2)
+#define SET_STATUS_MAF			(0x00000001 <<  1)
+#define SET_STATIS_MTD			(0x00000001 <<  0)
 
 #endif /* __SAA716x_REG_H */

From 06d0a141cc9cfdc6f739e253f32635dd650ca69b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:02:06 +0400
Subject: [PATCH 015/364] saa716x: Initial go at the I2C implementation

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |   4 +-
 drivers/media/pci/saa716x/saa716x_boot.c   |   1 +
 drivers/media/pci/saa716x/saa716x_budget.c |  56 ++-
 drivers/media/pci/saa716x/saa716x_fgpi.c   |  15 +
 drivers/media/pci/saa716x/saa716x_i2c.c    | 382 +++++++++++++++++++--
 drivers/media/pci/saa716x/saa716x_msi.c    |   9 +
 drivers/media/pci/saa716x/saa716x_pci.c    |  71 +++-
 drivers/media/pci/saa716x/saa716x_priv.h   |  10 +
 drivers/media/pci/saa716x/saa716x_video.c  |  11 +
 9 files changed, 519 insertions(+), 40 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_fgpi.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_video.c

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 110937843792a..8485ec79d9985 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -2,7 +2,9 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_i2c.o	\
 				    saa716x_cgu.o	\
 				    saa716x_msi.o	\
-				    saa716x_boot.o
+				    saa716x_boot.o	\
+				    saa716x_video.o	\
+				    saa716x_fgpi.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index fa2ef5286b7f6..79892e403237f 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -68,6 +68,7 @@ int saa716x_core_boot(struct saa716x_dev *saa716x)
 	case SAA716x_CGU_BOOT:
 	default:
 		dprintk(SAA716x_ERROR, 1, "Using CGU Setup");
+		saa716x_cgu_init(saa716x);
 		break;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index d9073f23354b1..fa771b43e3ad9 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -12,6 +12,7 @@
 #include <linux/init.h>
 #include <linux/device.h>
 
+#include <linux/i2c.h>
 #include "saa716x_priv.h"
 #include "saa716x_budget.h"
 
@@ -22,6 +23,53 @@ MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
 
 #define DRIVER_NAME	"SAA716x Budget"
 
+static int read_eeprom_byte(struct saa716x_dev *saa716x, u8 *data, u8 len)
+{
+	struct saa716x_i2c *i2c = saa716x->i2c;
+	struct i2c_adapter *adapter = &i2c[0].i2c_adapter;
+
+	int err;
+
+	struct i2c_msg msg[] = {
+		{.addr = 0x50, .flags = 0,		.buf = data, .len = 1},
+		{.addr = 0x50, .flags = I2C_M_RD,	.buf = data, .len = len},
+	};
+
+	err = i2c_transfer(adapter, msg, 2);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "<err=%d, d0=0x%02x, d1=0x%02x>", err, data[0], data[1]);
+		return err;
+	}
+
+	return 0;
+}
+
+static int read_eeprom(struct saa716x_dev *saa716x)
+{
+	u8 buf[32];
+	int i, err = 0;
+
+	err = read_eeprom_byte(saa716x, buf, 32);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
+		return err;
+	}
+	dprintk(SAA716x_DEBUG, 0, "EEPROM=[");
+	for (i = 0; i < 32; i++)
+		dprintk(SAA716x_DEBUG, 0, " %02x", buf[i]);
+
+	dprintk(SAA716x_DEBUG, 0, " ]\n");
+	return 0;
+}
+
+static void saa716x_disable_interrupts(struct saa716x_dev *saa716x)
+{
+	saa716x_i2cint_disable(saa716x);
+	saa716x_msiint_disable(saa716x);
+	saa716x_vipint_disable(saa716x);
+	saa716x_fgpiint_disable(saa716x);
+}
+
 static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
@@ -55,12 +103,18 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
 		goto fail1;
 	}
+
+	saa716x_disable_interrupts(saa716x);
+
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
 		goto fail2;
 	}
-
+#if 0
+	/* Experiments */
+	read_eeprom(saa716x);
+#endif
 	return 0;
 
 fail2:
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
new file mode 100644
index 0000000000000..64ba0370d740e
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -0,0 +1,15 @@
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+
+void saa716x_fgpiint_disable(struct saa716x_dev *saa716x)
+{
+	SAA716x_WR(FGPI0, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_WR(FGPI1, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_WR(FGPI2, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_WR(FGPI3, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_WR(FGPI0, 0xfe8, 0x7f); /* clear status */
+	SAA716x_WR(FGPI1, 0xfe8, 0x7f); /* clear status */
+	SAA716x_WR(FGPI2, 0xfe8, 0x7f); /* clear status */
+	SAA716x_WR(FGPI3, 0xfe8, 0x7f); /* clear status */
+}
+EXPORT_SYMBOL_GPL(saa716x_fgpiint_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 9c4df6a75e970..e3881dd74659f 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -2,15 +2,19 @@
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
 
-static void saa716x_term_xfer(struct i2c_adapter *adapter)
-{
-	struct saa716x_i2c *i2c;
-	struct saa716x_dev *saa716x;
-	u32 I2C_DEV;
+#define SAA716x_I2C_TXFAIL	(I2C_ERROR_IBE		| \
+				 ACK_INTER_MTNA		| \
+				 FAILURE_INTER_MAF)
+
+#define SAA716x_I2C_TXBUSY	(TRANSMIT		| \
+				 TRANSMIT_S_PROG)
 
-	i2c 	= i2c_get_adapdata(adapter);
-	saa716x = i2c->saa716x;
-	I2C_DEV = i2c->i2c_dev;
+#define SAA716x_I2C_RXBUSY	(RECEIVE		| \
+				 RECEIVE_CLEAR)
+
+static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
 
 	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc0); /* Start: SCL/SDA High */
 	msleep(10);
@@ -25,44 +29,321 @@ static void saa716x_term_xfer(struct i2c_adapter *adapter)
 	return;
 }
 
-static int saa716x_i2c_read(struct saa716x_dev *saa716x, const struct i2c_msg *msg)
+static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	u32 stat;
+	int err = 0, timeout = 0;
 
-	return 0;
+	if (wait_event_timeout(i2c->i2c_wq,
+			       i2c->int_stat & INTERRUPT_MTD,
+			       msecs_to_jiffies(100) == -ERESTARTSYS)) {
+
+		dprintk(SAA716x_ERROR, 1, "Master transaction failed");
+		err = -EIO;
+	}
+
+	stat = SAA716x_RD(I2C_DEV, I2C_STATUS);
+	while (! (stat & TRANSMIT_CLEAR)) {
+		dprintk(SAA716x_ERROR, 1, "Waiting for TX FIFO to be empty");
+		msleep(5);
+		timeout++;
+		if (timeout > 500) {
+			dprintk(SAA716x_ERROR, 1, "TX FIFO empty timeout");
+			saa716x_term_xfer(i2c, I2C_DEV);
+			err = -EIO;
+			break;
+		}
+	}
+	return err;
 }
 
-//static int saa716x_i2c_write(struct saa716x_dev *saa716x, const struct i2c_msg *msg)
-static int saa716x_i2c_write(struct i2c_adapter *adapter, const struct i2c_msg *msg)
+static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
-	struct saa716x_i2c *i2c;
-	struct saa716x_dev *saa716x;
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	u32 reg;
+	int err;
+
+	/* Flush queue */
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xcc);
 
-	u32 stat, I2C_DEV;
+	/* Disable all interrupts and clear status */
+	SAA716x_WR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
-	i2c	= i2c_get_adapdata(adapter);
-	saa716x = i2c->saa716x;
+	/* Reset I2C Core and generate a delay */
+	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc1);
 
-	I2C_DEV	= i2c->i2c_dev; 
-	stat	= SAA716x_RD(I2C_DEV, I2C_STATUS);
+	msleep(100);
+
+	reg = SAA716x_RD(I2C_DEV, I2C_CONTROL);
+	if (reg != 0xc0) {
+		dprintk(SAA716x_ERROR, 1, "Core RESET failed");
+		err = -EIO;
+		goto exit;
+	}
 	
+	/* I2C Rate Setup */
+	switch (i2c->i2c_rate) {
+	case SAA716x_I2C_RATE_400:
+		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 400k");
+		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, SDA_HOLD, 0x19);
+		break;
+	case SAA716x_I2C_RATE_100:
+		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 100k");
+		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, SDA_HOLD, 0x60);
+		break;
+	default:
+		dprintk(SAA716x_ERROR, 1, "Unknown Rate (Rate=0x%02x)", i2c->i2c_rate);
+		break;
+	}
+
+	/* Disable all interrupts and clear status */
+	SAA716x_WR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+
+	/* enable interrupts: transaction done, arbitration, No Ack and I2C error */
+	SAA716x_WR(I2C_DEV, INT_SET_ENABLE, 0x00c7);
+
+	/* Check interrupt enable status */
+	reg = SAA716x_RD(I2C_DEV, INT_ENABLE);
+	if (reg != 0xc7) {
+		dprintk(SAA716x_ERROR, 1, "Interrupt enable failed, Exiting !");
+		err = -EIO;
+		goto exit;
+	}
+	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "I2C Reinit failed");
+	return err;
+}
+
+static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 data)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	int err = 0;
+	u32 reg;
+
+	/* Check FIFO status before TX */
+	reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+	if (reg & SAA716x_I2C_TXBUSY) {
+		msleep(10);
+		reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+		if (reg & SAA716x_I2C_TXBUSY) {
+			dprintk(SAA716x_ERROR, 1, "FIFO full or Blocked");
+
+ 			err = saa716x_i2c_reinit(i2c, I2C_DEV);
+ 			if (err < 0) {
+ 				dprintk(SAA716x_ERROR, 1, "Error Reinit");
+ 				err = -EIO;
+				goto exit;
+ 			}
+			err = -EBUSY;
+			goto exit;
+		}
+		err = -EBUSY;
+		goto exit;
+	}
+
+	/* Write to FIFO */
+	SAA716x_WR(I2C_DEV, TX_FIFO, data);
+	err = saa716x_xfer_wait(i2c, I2C_DEV);
+	if (err < 0) {
+		err = saa716x_i2c_reinit(i2c, I2C_DEV);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Error Reinit");
+			err = -EBUSY;
+			goto exit;
+		}
+		err = -EIO;
+		goto exit;
+	}
+	return err;
+
+exit:
+	dprintk(SAA716x_ERROR, 1, "I2C Send failed (Err=%d)", err);
+	return err;
+}
+
+static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	int err = 0;
+	u32 reg;
+
+	/* Check FIFO status before RX */
+	reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+	if (reg & SAA716x_I2C_RXBUSY) {
+		msleep(10);
+		reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+		if (reg & SAA716x_I2C_RXBUSY) {
+			dprintk(SAA716x_ERROR, 1, "FIFO empty");
+
+			err = saa716x_i2c_reinit(i2c, I2C_DEV);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Error Reinit");
+				err = -EIO;
+				goto exit;
+			}
+			err = -EBUSY;
+			goto exit;
+		}
+		err = -EBUSY;
+		goto exit;
+	}
+
+	/* Read from FIFO */
+	*data = SAA716x_RD(I2C_DEV, RX_FIFO);
+
+	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Error Reading data, err=%d", err);
+	return err;
+}
+
+static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
+{
+	struct saa716x_dev *saa716x	= i2c->saa716x;
+	u32 I2C_DEV			= i2c->i2c_dev;
+	u8 rxd;
+	int i, err = 0;
+
+	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <R>[ ", __func__, msg->addr);
+
+	/* Write */
+	err = saa716x_i2c_send(i2c, I2C_DEV, START_BIT | msg->addr | 0x01);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "Transfer failed");
+		err = -EIO;
+		goto exit;
+	}
+
+	for (i = 0; i < msg->len; i++) {
+		if (i == (msg->len - 1)) {
+			err = saa716x_i2c_send(i2c, I2C_DEV, (u8)STOP_BIT);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto exit;
+			}
+			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Receive failed");
+				err = -EIO;
+				goto exit;
+			}
+			msg->buf[i] = rxd;
+			dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
+		} else {
+			err = saa716x_i2c_send(i2c, I2C_DEV, 0x00); /* Send dummy */
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Send failed");
+				err = -EIO;
+				goto exit;
+			}
+			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Receive failed");
+				err = -EIO;
+				goto exit;
+			}
+			msg->buf[i] = rxd;
+			dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
+		}
+		dprintk(SAA716x_DEBUG, 0, "]\n");
+	}
+
+	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Error Reading data, err=%d", err);
+	return err;
+}
+
+static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
+{
+	struct saa716x_dev *saa716x	= i2c->saa716x;
+	u32 I2C_DEV			= i2c->i2c_dev;
+
+	int i, err = 0;
+
+	/* Clear INT status before first byte */
+	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+
+	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <W>[ ", __func__, msg->addr);
+	err = saa716x_i2c_send(i2c, I2C_DEV, START_BIT | msg->addr);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "Transfer failed");
+		err = -EIO;
+		goto exit;
+	}
+
+	for (i = 0; i < msg->len; i++) {
+		dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
+		if (i == (msg->len - 1)) {
+			err = saa716x_i2c_send(i2c, I2C_DEV, STOP_BIT | msg->buf[i]);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto exit;
+			}
+		} else {
+			err = saa716x_i2c_send(i2c, I2C_DEV, msg->buf[i]);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto exit;
+			}
+		}
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "Wrote Slave ADDRESS + START_BIT");
+
 	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Error Writing data, err=%d", err);
+	return err;
 }
 
-static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
+static int saa716x_i2c_busa_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
 {
-	struct saa716x_i2c *i2c;
-	struct saa716x_dev *saa716x;
+	struct saa716x_i2c *i2c = i2c_get_adapdata(adapter);
 	int ret = 0, i;
 
-	i2c	= i2c_get_adapdata(adapter);
-	saa716x = i2c->saa716x;
+	i2c = &i2c[0];
+	mutex_lock(&i2c->i2c_lock);
+	for (i = 0; i < num; i++) {
+		if (msgs[i].flags & I2C_M_RD)
+			ret = saa716x_i2c_read(i2c, &msgs[i]);
+		else
+			ret = saa716x_i2c_write(i2c, &msgs[i]);
+
+		if (ret < 0)
+			goto bail_out;
+	}
+	mutex_unlock(&i2c->i2c_lock);
+	return num;
 
+bail_out:
+	mutex_unlock(&i2c->i2c_lock);
+	return ret;
+}
+
+static int saa716x_i2c_busb_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
+{
+	struct saa716x_i2c *i2c = i2c_get_adapdata(adapter);
+	int ret = 0, i;
+
+	i2c = &i2c[1];
 	mutex_lock(&i2c->i2c_lock);
 	for (i = 0; i < num; i++) {
 		if (msgs[i].flags & I2C_M_RD)
-			ret = saa716x_i2c_read(saa716x, &msgs[i]);
+			ret = saa716x_i2c_read(i2c, &msgs[i]);
 		else
-			ret = saa716x_i2c_write(saa716x, &msgs[i]);
+			ret = saa716x_i2c_write(i2c, &msgs[i]);
 
 		if (ret < 0)
 			goto bail_out;
@@ -75,16 +356,31 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 	return ret;
 }
 
+void saa716x_i2cint_disable(struct saa716x_dev *saa716x)
+{
+	SAA716x_WR(I2C_A, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_WR(I2C_B, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_WR(I2C_A, INT_CLR_STATUS, 0x1fff);
+	SAA716x_WR(I2C_B, INT_CLR_STATUS, 0x1fff);
+}
+EXPORT_SYMBOL_GPL(saa716x_i2cint_disable);
+
 static u32 saa716x_i2c_func(struct i2c_adapter *adapter)
 {
 	return I2C_FUNC_SMBUS_EMUL;
 }
 
-static struct i2c_algorithm saa716x_algo = {
-	.master_xfer	= saa716x_i2c_xfer,
-	.functionality	= saa716x_i2c_func,
+static struct i2c_algorithm saa716x_algo[] = {
+	{
+		.master_xfer	= saa716x_i2c_busa_xfer,
+		.functionality	= saa716x_i2c_func,
+	}, {
+		.master_xfer	= saa716x_i2c_busb_xfer,
+		.functionality	= saa716x_i2c_func,
+	},
 };
 
+
 #define I2C_HW_B_SAA716x		0x12
 
 static struct i2c_adapter saa716x_i2c[] = {
@@ -94,13 +390,13 @@ static struct i2c_adapter saa716x_i2c[] = {
 		.name	= "SAA716x I2C Core 0",
 		.id	= I2C_HW_B_SAA716x,
 		.class	= I2C_CLASS_TV_DIGITAL,
-		.algo	= &saa716x_algo,
+		.algo	= &saa716x_algo[0],
 	}, {
 		.owner	= THIS_MODULE,
 		.name	= "SAA716x I2C Core 1",
 		.id	= I2C_HW_B_SAA716x,
 		.class	= I2C_CLASS_TV_DIGITAL,
-		.algo	= &saa716x_algo,
+		.algo	= &saa716x_algo[1],
 	},
 };
 
@@ -119,6 +415,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 		dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, saa716x_i2c[i].name);
 		mutex_init(&i2c->i2c_lock);
+		init_waitqueue_head(&i2c->i2c_wq);
 
 		memcpy(&i2c->i2c_adapter, &saa716x_i2c[i], sizeof (struct i2c_adapter));
 		i2c_set_adapdata(&i2c->i2c_adapter, saa716x_i2c);
@@ -138,7 +435,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
 		if (!(reg & 0xd)) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, saa716x_i2c[i].name);
-			err = -1;
+			err = -EIO;
 			goto exit;
 		}
 
@@ -157,7 +454,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		reg = SAA716x_RD(I2C_DEV[i], I2C_CONTROL);
 		if (reg != 0xc0) {
 			dprintk(SAA716x_ERROR, 1, "Core RESET failed");
-			err = -1;
+			err = -EIO;
 			goto exit;
 		}
 		
@@ -184,14 +481,25 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		SAA716x_WR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
 		SAA716x_WR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
 
-		/* enable interrupts: transaction done, arbitration, No Ack and I2C error */
-		SAA716x_WR(I2C_DEV[i], INT_SET_ENABLE, 0x00c7);
+		/* Enabled interrupts:
+		 * Master Transaction Done (),
+		 * Master Arbitration Failure,
+		 * Master Transaction No Ack,
+		 * I2C Error IBE
+		 * Master Transaction Data Request
+		 * (0xc7)
+		 */
+		SAA716x_WR(I2C_DEV[i], INT_SET_ENABLE, MASTER_INTERRUPT_MTDR	| \
+						       I2C_ERROR_IBE		| \
+						       ENABLE_MTNA		| \
+						       ENABLE_MAF		| \
+						       ENABLE_MTD);
 
 		/* Check interrupt enable status */
 		reg = SAA716x_RD(I2C_DEV[i], INT_ENABLE);
 		if (reg != 0xc7) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Interrupt enable failed, Exiting !", i, saa716x_i2c[i].name);
-			err = -1;
+			err = -EIO;
 			goto exit;
 		}
 
@@ -199,7 +507,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
 		if (!(reg & 0xd)) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s has bad state, Exiting !", i, saa716x_i2c[i].name);
-			err = -1;
+			err = -EIO;
 			goto exit;
 		}
 
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 68fd91552670a..0171fe27b6c55 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -108,3 +108,12 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 
 	return 0;
 }
+
+void saa716x_msiint_disable(struct saa716x_dev *saa716x)
+{
+	SAA716x_WR(MSI, MSI_INT_ENA_L, 0x0);
+	SAA716x_WR(MSI, MSI_INT_ENA_H, 0x0);
+	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, 0xffffffff);
+	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, 0x0000ffff);
+}
+EXPORT_SYMBOL_GPL(saa716x_msiint_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 7acf9f9f11d03..1ad0814782cf6 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -11,13 +11,82 @@
 #include <linux/sched.h>
 #include <linux/interrupt.h>
 
-
+#include "saa716x_reg.h"
 #include "saa716x_priv.h"
 
 #define DRIVER_NAME				"SAA716x Core"
 
+#define AI0				0x00006000
+#define AI1				0x00007000
+#define BAM				0x00008000
+#define MMU				0x00009000
+#define SPI				0x0000d000
+//#define GPIO				0x0000e000
+#define PHI_0				0x0000f000
+#define GREG				0x00012000
+#define CGU				0x00013000
+#define DCS				0x00014000
+
 static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 {
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
+	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+	u32 i2c_stat_0, i2c_stat_1, msi_stat_l, msi_stat_h;
+	u32 fgpi_stat_0, fgpi_stat_1, fgpi_stat_2, fgpi_stat_3;
+	u32 vi_stat_0, vi_stat_1;
+	u32 dcs_stat;
+
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
+	}
+
+	/* I2C_A/B */
+	i2c_stat_0 = SAA716x_RD(I2C_A, INT_STATUS);
+	i2c_stat_1 = SAA716x_RD(I2C_B, INT_STATUS);
+	SAA716x_WR(I2C_A, INT_CLR_STATUS, i2c_stat_0);
+	SAA716x_WR(I2C_B, INT_CLR_STATUS, i2c_stat_1);
+
+	/* MSI */
+	msi_stat_l = SAA716x_RD(MSI, MSI_INT_STATUS_L);
+	msi_stat_h = SAA716x_RD(MSI, MSI_INT_STATUS_H);
+	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, msi_stat_l);
+	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_H, msi_stat_h);
+
+	/* FGPI */
+	fgpi_stat_0 = SAA716x_RD(FGPI0, 0xfe0);
+	fgpi_stat_1 = SAA716x_RD(FGPI1, 0xfe0);
+	fgpi_stat_2 = SAA716x_RD(FGPI2, 0xfe0);
+	fgpi_stat_3 = SAA716x_RD(FGPI3, 0xfe0);
+	SAA716x_WR(FGPI0, 0xfe8, fgpi_stat_0);
+	SAA716x_WR(FGPI1, 0xfe8, fgpi_stat_1);
+	SAA716x_WR(FGPI2, 0xfe8, fgpi_stat_2);
+	SAA716x_WR(FGPI3, 0xfe8, fgpi_stat_3);
+
+	/* VI0/1 */
+	vi_stat_0 = SAA716x_RD(VI0, 0xfe0);
+	vi_stat_1 = SAA716x_RD(VI1, 0xfe0);
+	SAA716x_WR(VI0, 0xfe8, vi_stat_0);
+	SAA716x_WR(VI1, 0xfe8, vi_stat_1);
+
+	/* DCS */
+	dcs_stat = SAA716x_RD(DCS, 0xfe0);
+	SAA716x_WR(DCS, 0xfe8, dcs_stat);
+
+	dprintk(SAA716x_DEBUG, 1, "SAA716x IRQ VI 0=0x%02x, 1=0x%02x", vi_stat_0, vi_stat_1);
+
+	if (i2c_stat_0) {
+		dprintk(SAA716x_DEBUG, 1, "SAA716x IRQ, I2C_A=0x%02x", i2c_stat_0);
+		wake_up(&i2c_a->i2c_wq);
+	}
+
+	if (i2c_stat_1) {
+		dprintk(SAA716x_DEBUG, 1, "SAA716x IRQ, I2C_B=0x%02x", i2c_stat_1);
+		wake_up(&i2c_b->i2c_wq);
+	}
+
+
 	return IRQ_HANDLED;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 20cab76789e31..3220e3b06ccff 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -83,6 +83,8 @@ struct saa716x_i2c {
 	u32				i2c_dev;
 
 	enum saa716x_i2c_rate		i2c_rate; /* run time */
+	wait_queue_head_t		i2c_wq;
+	u32				int_stat;
 };
 
 struct saa716x_dev {
@@ -113,10 +115,12 @@ extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
 /* MSI */
 extern int saa716x_msi_init(struct saa716x_dev *saa716x);
 extern void saa716x_msi_exit(struct saa716x_dev *saa716x);
+extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
 
 /* I2C */
 extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
 extern int saa716x_i2c_exit(struct saa716x_dev *saa716x);
+extern void saa716x_i2cint_disable(struct saa716x_dev *saa716x);
 
 /* SPI */
 extern int saa716x_spi_init(struct saa716x_dev *saa716x);
@@ -141,4 +145,10 @@ extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 /* CGU */
 extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
 
+/* VIP */
+extern void saa716x_vipint_disable(struct saa716x_dev *saa716x);
+
+/* FGPI */
+extern void saa716x_fgpiint_disable(struct saa716x_dev *saa716x);
+
 #endif /* __SAA716x_PRIV_H */
diff --git a/drivers/media/pci/saa716x/saa716x_video.c b/drivers/media/pci/saa716x/saa716x_video.c
new file mode 100644
index 0000000000000..dfbcfd40e0b66
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_video.c
@@ -0,0 +1,11 @@
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+
+void saa716x_vipint_disable(struct saa716x_dev *saa716x)
+{
+	SAA716x_WR(VI0, 0xfe4, 0); /* disable VI 0 IRQ */
+	SAA716x_WR(VI1, 0xfe4, 0); /* disable VI 1 IRQ */
+	SAA716x_WR(VI0, 0xfe8, 0x3ff); /* clear IRQ */
+	SAA716x_WR(VI1, 0xfe8, 0x3ff); /* clear IRQ */
+}
+EXPORT_SYMBOL_GPL(saa716x_vipint_disable);

From 685e0a0598daec549910ce6d312817632f5619d6 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:02:53 +0400
Subject: [PATCH 016/364] saa716x: Remove unused definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 11 -----------
 1 file changed, 11 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 1ad0814782cf6..c7f1084c0f864 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -16,17 +16,6 @@
 
 #define DRIVER_NAME				"SAA716x Core"
 
-#define AI0				0x00006000
-#define AI1				0x00007000
-#define BAM				0x00008000
-#define MMU				0x00009000
-#define SPI				0x0000d000
-//#define GPIO				0x0000e000
-#define PHI_0				0x0000f000
-#define GREG				0x00012000
-#define CGU				0x00013000
-#define DCS				0x00014000
-
 static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;

From a53344c873ae15d08626b6bbad79cd4bd46e803a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:05:49 +0400
Subject: [PATCH 017/364] saa716x: Move i2c related stuff to it's own header

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.h  | 26 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_priv.h | 24 ++--------------------
 2 files changed, 28 insertions(+), 22 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_i2c.h

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
new file mode 100644
index 0000000000000..bb1da6642a302
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -0,0 +1,26 @@
+#ifndef __SAA716x_I2C_H
+#define __SAA716x_I2C_H
+
+struct saa716x_dev;
+
+enum saa716x_i2c_rate {
+	SAA716x_I2C_RATE_400 = 1,
+	SAA716x_I2C_RATE_100,
+};
+
+struct saa716x_i2c {
+	struct i2c_adapter		i2c_adapter;
+	struct mutex			i2c_lock;
+	struct saa716x_dev		*saa716x;
+	u32				i2c_dev;
+
+	enum saa716x_i2c_rate		i2c_rate; /* run time */
+	wait_queue_head_t		i2c_wq;
+	u32				int_stat;
+};
+
+extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
+extern int saa716x_i2c_exit(struct saa716x_dev *saa716x);
+extern void saa716x_i2cint_disable(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_I2C_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 3220e3b06ccff..d8e412fb2051e 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -10,6 +10,7 @@
 #include <linux/pci.h>
 #include <linux/ioport.h>
 #include <linux/i2c.h>
+#include "saa716x_i2c.h"
 
 #define SAA716x_ERROR		0
 #define SAA716x_NOTICE		1
@@ -62,11 +63,6 @@ enum saa716x_boot_mode {
 	SAA716x_CGU_BOOT,
 };
 
-enum saa716x_i2c_rate {
-	SAA716x_I2C_RATE_400 = 1,
-	SAA716x_I2C_RATE_100,
-};
-
 struct saa716x_config {
 	char				*model_name;
 	char				*dev_type;
@@ -76,17 +72,6 @@ struct saa716x_config {
 	saa716x_load_config_t		load_config;
 };
 
-struct saa716x_i2c {
-	struct i2c_adapter		i2c_adapter;
-	struct mutex			i2c_lock;
-	struct saa716x_dev		*saa716x;
-	u32				i2c_dev;
-
-	enum saa716x_i2c_rate		i2c_rate; /* run time */
-	wait_queue_head_t		i2c_wq;
-	u32				int_stat;
-};
-
 struct saa716x_dev {
 	struct saa716x_config		*config;
 	struct pci_dev			*pdev;
@@ -103,7 +88,7 @@ struct saa716x_dev {
 
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
-	enum saa716x_i2c_rate		i2c_rate; /* init time */
+	u32				i2c_rate; /* init time */
 
 	/* DMA */
 };
@@ -117,11 +102,6 @@ extern int saa716x_msi_init(struct saa716x_dev *saa716x);
 extern void saa716x_msi_exit(struct saa716x_dev *saa716x);
 extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
 
-/* I2C */
-extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
-extern int saa716x_i2c_exit(struct saa716x_dev *saa716x);
-extern void saa716x_i2cint_disable(struct saa716x_dev *saa716x);
-
 /* SPI */
 extern int saa716x_spi_init(struct saa716x_dev *saa716x);
 extern void saa716x_spi_exit(struct saa716x_dev *saa716x);

From fe241b0df03fad106e99c8ba6253fcfefc0d8d7c Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:06:25 +0400
Subject: [PATCH 018/364] saa716x: Add some labels

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 72 +++++++++++++++++++++++++
 1 file changed, 72 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index c7f1084c0f864..f9ed86bbeb339 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -16,6 +16,78 @@
 
 #define DRIVER_NAME				"SAA716x Core"
 
+static const char *msi_labels[] = {
+	"MSI_INT_TAGACK_VI0_0",
+	"MSI_INT_TAGACK_VI0_1",
+	"MSI_INT_TAGACK_VI0_2",
+	"MSI_INT_TAGACK_VI1_0",
+	"MSI_INT_TAGACK_VI1_1",
+	"MSI_INT_TAGACK_VI1_2",
+	"MSI_INT_TAGACK_FGPI_0",
+	"MSI_INT_TAGACK_FGPI_1",
+	"MSI_INT_TAGACK_FGPI_2",
+	"MSI_INT_TAGACK_FGPI_3",
+	"MSI_INT_TAGACK_AI_0",
+	"MSI_INT_TAGACK_AI_1",
+	"MSI_INT_OVRFLW_VI0_0",
+	"MSI_INT_OVRFLW_VI0_1",
+	"MSI_INT_OVRFLW_VI0_2",
+	"MSI_INT_OVRFLW_VI1_0",
+	"MSI_INT_OVRFLW_VI1_1",
+	"MSI_INT_OVRFLW_VI1_2",
+	"MSI_INT_OVRFLW_FGPI_O",
+	"MSI_INT_OVRFLW_FGPI_1",
+	"MSI_INT_OVRFLW_FGPI_2",
+	"MSI_INT_OVRFLW_FGPI_3",
+	"MSI_INT_OVRFLW_AI_0",
+	"MSI_INT_OVRFLW_AI_1",
+	"MSI_INT_AVINT_VI0",
+	"MSI_INT_AVINT_VI1",
+	"MSI_INT_AVINT_FGPI_0",
+	"MSI_INT_AVINT_FGPI_1",
+	"MSI_INT_AVINT_FGPI_2",
+	"MSI_INT_AVINT_FGPI_3",
+	"MSI_INT_AVINT_AI_0",
+	"MSI_INT_AVINT_AI_1",
+
+	"MSI_INT_UNMAPD_TC_INT",
+	"MSI_INT_EXTINT_0",
+	"MSI_INT_EXTINT_1",
+	"MSI_INT_EXTINT_2",
+	"MSI_INT_EXTINT_3",
+	"MSI_INT_EXTINT_4",
+	"MSI_INT_EXTINT_5",
+	"MSI_INT_EXTINT_6",
+	"MSI_INT_EXTINT_7",
+	"MSI_INT_EXTINT_8",
+	"MSI_INT_EXTINT_9",
+	"MSI_INT_EXTINT_10",
+	"MSI_INT_EXTINT_11",
+	"MSI_INT_EXTINT_12",
+	"MSI_INT_EXTINT_13",
+	"MSI_INT_EXTINT_14",
+	"MSI_INT_EXTINT_15",
+	"MSI_INT_I2CINT_0",
+	"MSI_INT_I2CINT_1"
+};
+
+static const char *i2c_labels[] = {
+	"INTERRUPT_MTD"
+	"FAILURE_INTER_MAF",
+	"ACK_INTER_MTNA",
+	"SLAVE_TRANSMIT_INTER_STSD",
+	"SLAVE_RECEIVE_INTER_SRSD",
+	"MODE_CHANGE_INTER_MSMC",
+	"I2C_ERROR_IBE",
+	"MASTER_INTERRUPT_MTDR",
+	"SLAVE_INTERRUPT_STDR",
+	"INTERRUPTE_RFF",
+	"INTERRUPT_RFDA",
+	"INTERRUPT_MTFNF",
+	"INTERRUPT_STFNF",
+};
+
+
 static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;

From 0689715927234d30b5120f22ad5bdffee600f899 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:08:10 +0400
Subject: [PATCH 019/364] saa716x: Rename files

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile                           | 2 +-
 drivers/media/pci/saa716x/{saa716x_video.c => saa716x_vip.c} | 0
 2 files changed, 1 insertion(+), 1 deletion(-)
 rename drivers/media/pci/saa716x/{saa716x_video.c => saa716x_vip.c} (100%)

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 8485ec79d9985..50949de26ee8e 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -2,8 +2,8 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_i2c.o	\
 				    saa716x_cgu.o	\
 				    saa716x_msi.o	\
+				    saa716x_vip.o	\
 				    saa716x_boot.o	\
-				    saa716x_video.o	\
 				    saa716x_fgpi.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
diff --git a/drivers/media/pci/saa716x/saa716x_video.c b/drivers/media/pci/saa716x/saa716x_vip.c
similarity index 100%
rename from drivers/media/pci/saa716x/saa716x_video.c
rename to drivers/media/pci/saa716x/saa716x_vip.c

From f044598ab34aad4646f574dec31d45280072a7e3 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:08:47 +0400
Subject: [PATCH 020/364] saa716x: Fix subdevice ID

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index 717a0cb1f1de6..624e6dcebb2d1 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -2,6 +2,6 @@
 #define __SAA716x_HYBRID_H
  
 #define TWINHAN_TECHNOLOGIES	0x1822
-#define TWINHAN_VP_6090		0x6090
+#define TWINHAN_VP_6090		0x0027
 
 #endif /* __SAA716x_HYBRID_H */

From 393589ceddbda65b81fb1012abca4992c80651a3 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:09:26 +0400
Subject: [PATCH 021/364] saa716x: Add more register definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_reg.h | 46 +++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 264598735d7fa..b0667d18ecec8 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -25,6 +25,52 @@
 /* BAR = 20 bits */
 #define PHI_1				0x00020000
 
+#define VI_MODE				0x000
+#define VID_CFEN			(0x0003 << 30)
+#define VID_OSM				(0x0001 << 29)
+#define VID_FSEQ			(0x0001 << 28)
+#define AUX_CFEN			(0x0003 << 26)
+#define AUX_OSM				(0x0001 << 25)
+#define AUX_FSEQ			(0x0001 << 24)
+#define AUX_ANC_DATA			(0x0003 << 22)
+#define AUX_ANC_RAW			(0x0001 << 21)
+#define RST_ON_ERR			(0x0001 << 17)
+#define SOFT_RESET			(0x0001 << 16)
+#define IFF_CLAMP			(0x0001 << 14)
+#define IFF_MODE			(0x0003 << 12)
+#define DFF_CLAMP			(0x0001 << 10)
+#define DFF_MODE			(0x0003 <<  8)
+#define HSP_CLAMP			(0x0001 <<  3)
+#define HSP_RGB				(0x0001 <<  2)
+#define HSP_MODE			(0x0003 <<  0)
+
+#define ID_MASK0			0x020
+#define ID_MASK_0			(0x00ff <<  8)
+#define DATA_ID_0			(0x00ff <<  0)
+
+#define ID_MASK1			0x024
+#define ID_MASK_1			(0x00ff <<  8)
+#define DATA_ID_1			(0x00ff <<  0)
+
+#define VIP_LINE_THRESH			0x040
+#define LCTHR				(0x07ff <<  0)
+
+#define VIN_FORMAT			0x100
+#define VSRA				(0x0003 << 30)
+#define SYNCHD				(0x0001 << 25)
+#define DUAL_STREAM			(0x0001 << 24)
+#define NHDAUX				(0x0001 << 20)
+#define NPAR				(0x0001 << 19)
+#define VSEL				(0x0003 << 14)
+#define TWOS				(0x0001 << 13)
+#define TPG				(0x0001 << 12)
+#define FREF				(0x0001 << 10)
+#define FTGL				(0x0001 <<  9)
+#define SF				(0x0001 <<  3)
+#define FZERO				(0x0001 <<  2)
+#define REVS				(0x0001 <<  1)
+#define REHS				(0x0001 <<  0)
+
 #define GREG_SUBSYS_CONFIG		0x000
 #define GREG_SUBSYS_ID			(0xffff << 16)
 #define GREG_SUBSYS_VID			(0xffff <<  0)

From 591d7271ca6554a77ae34edd40c38a3de718ed79 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:48:09 +0400
Subject: [PATCH 022/364] saa716x: Update/Reorganize register definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c |    4 +-
 drivers/media/pci/saa716x/saa716x_i2c.c  |   58 +-
 drivers/media/pci/saa716x/saa716x_reg.h  | 1420 +++++++++++++---------
 3 files changed, 882 insertions(+), 600 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 79892e403237f..c030c40ce59f7 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -17,7 +17,7 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	SAA716x_WR(GREG, GREG_PMCSR_DATA_2, 0);
 
 	/* Release GREG Resets */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, IP_RST_RELEASE | ADAPTER_RST_RELEASE | PCIE_CORE_RST_RELEASE);
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, GREG_IP_RST_RELEASE | GREG_ADAPTER_RST_RELEASE | GREG_PCIE_CORE_RST_RELEASE);
 
 	/* Disable Logical A/V channels */
 	SAA716x_WR(GREG, GPIO_OEN, 0xfcffffff);
@@ -39,7 +39,7 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	SAA716x_WR(CGU, CGU_PCR_12,  0x00000006);
 
 	/* Set GREG Boot Ready */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, BOOT_READY);
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, GREG_BOOT_READY);
 
 	/* Disable GREG Clock */
 	SAA716x_WR(CGU, CGU_PCR_0_6, 0x00000006);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index e3881dd74659f..e5edefc7a2258 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -3,14 +3,14 @@
 #include "saa716x_priv.h"
 
 #define SAA716x_I2C_TXFAIL	(I2C_ERROR_IBE		| \
-				 ACK_INTER_MTNA		| \
-				 FAILURE_INTER_MAF)
+				 I2C_ACK_INTER_MTNA	| \
+				 I2C_FAILURE_INTER_MAF)
 
-#define SAA716x_I2C_TXBUSY	(TRANSMIT		| \
-				 TRANSMIT_S_PROG)
+#define SAA716x_I2C_TXBUSY	(I2C_TRANSMIT		| \
+				 I2C_TRANSMIT_S_PROG)
 
-#define SAA716x_I2C_RXBUSY	(RECEIVE		| \
-				 RECEIVE_CLEAR)
+#define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
+				 I2C_RECEIVE_CLEAR)
 
 static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
@@ -36,7 +36,7 @@ static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	int err = 0, timeout = 0;
 
 	if (wait_event_timeout(i2c->i2c_wq,
-			       i2c->int_stat & INTERRUPT_MTD,
+			       i2c->int_stat & I2C_INTERRUPT_MTD,
 			       msecs_to_jiffies(100) == -ERESTARTSYS)) {
 
 		dprintk(SAA716x_ERROR, 1, "Master transaction failed");
@@ -44,7 +44,7 @@ static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	}
 
 	stat = SAA716x_RD(I2C_DEV, I2C_STATUS);
-	while (! (stat & TRANSMIT_CLEAR)) {
+	while (! (stat & I2C_TRANSMIT_CLEAR)) {
 		dprintk(SAA716x_ERROR, 1, "Waiting for TX FIFO to be empty");
 		msleep(5);
 		timeout++;
@@ -87,15 +87,15 @@ static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	switch (i2c->i2c_rate) {
 	case SAA716x_I2C_RATE_400:
 		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 400k");
-		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, SDA_HOLD, 0x19);
+		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, I2C_SDA_HOLD, 0x19);
 		break;
 	case SAA716x_I2C_RATE_100:
 		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 100k");
-		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, SDA_HOLD, 0x60);
+		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+		SAA716x_WR(I2C_DEV, I2C_SDA_HOLD, 0x60);
 		break;
 	default:
 		dprintk(SAA716x_ERROR, 1, "Unknown Rate (Rate=0x%02x)", i2c->i2c_rate);
@@ -215,7 +215,7 @@ static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <R>[ ", __func__, msg->addr);
 
 	/* Write */
-	err = saa716x_i2c_send(i2c, I2C_DEV, START_BIT | msg->addr | 0x01);
+	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr | 0x01);
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "Transfer failed");
 		err = -EIO;
@@ -224,7 +224,7 @@ static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 
 	for (i = 0; i < msg->len; i++) {
 		if (i == (msg->len - 1)) {
-			err = saa716x_i2c_send(i2c, I2C_DEV, (u8)STOP_BIT);
+			err = saa716x_i2c_send(i2c, I2C_DEV, (u8)I2C_STOP_BIT);
 			if (err < 0) {
 				dprintk(SAA716x_ERROR, 1, "Transfer failed");
 				err = -EIO;
@@ -274,7 +274,7 @@ static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
 	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <W>[ ", __func__, msg->addr);
-	err = saa716x_i2c_send(i2c, I2C_DEV, START_BIT | msg->addr);
+	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr);
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "Transfer failed");
 		err = -EIO;
@@ -284,7 +284,7 @@ static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 	for (i = 0; i < msg->len; i++) {
 		dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
 		if (i == (msg->len - 1)) {
-			err = saa716x_i2c_send(i2c, I2C_DEV, STOP_BIT | msg->buf[i]);
+			err = saa716x_i2c_send(i2c, I2C_DEV, I2C_STOP_BIT | msg->buf[i]);
 			if (err < 0) {
 				dprintk(SAA716x_ERROR, 1, "Transfer failed");
 				err = -EIO;
@@ -462,15 +462,15 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		switch (i2c->i2c_rate) {
 		case SAA716x_I2C_RATE_400:
 			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 400k", i, saa716x_i2c[i].name);
-			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], SDA_HOLD, 0x19);
+			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], I2C_SDA_HOLD, 0x19);
 			break;
 		case SAA716x_I2C_RATE_100:
 			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 100k", i, saa716x_i2c[i].name);
-			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], SDA_HOLD, 0x60);
+			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+			SAA716x_WR(I2C_DEV[i], I2C_SDA_HOLD, 0x60);
 			break;
 		default:
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Unknown Rate (Rate=0x%02x)", i, saa716x_i2c[i].name, i2c->i2c_rate);
@@ -489,11 +489,11 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		 * Master Transaction Data Request
 		 * (0xc7)
 		 */
-		SAA716x_WR(I2C_DEV[i], INT_SET_ENABLE, MASTER_INTERRUPT_MTDR	| \
-						       I2C_ERROR_IBE		| \
-						       ENABLE_MTNA		| \
-						       ENABLE_MAF		| \
-						       ENABLE_MTD);
+		SAA716x_WR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
+						       I2C_ERROR_IBE			| \
+						       I2C_ENABLE_MTNA			| \
+						       I2C_ENABLE_MAF			| \
+						       I2C_ENABLE_MTD);
 
 		/* Check interrupt enable status */
 		reg = SAA716x_RD(I2C_DEV[i], INT_ENABLE);
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index b0667d18ecec8..67d12f924cbf7 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -2,169 +2,749 @@
 #define __SAA716x_REG_H
 
 /* BAR = 17 bits */
+/*
+	VI0	0x00000000
+	VI1	0x00001000
+	FGPI0	0x00002000
+	FGPI1	0x00003000
+	FGPI2	0x00004000
+	FGPI3	0x00005000
+	AI0	0x00006000
+	AI1	0x00007000
+	BAM	0x00008000
+	MMU	0x00009000
+	MSI	0x0000a000
+	I2C_B	0x0000b000
+	I2C_A	0x0000c000
+	SPI	0x0000d000
+	GPIO	0x0000e000
+	PHI_0	0x0000f000
+	CGU	0x00013000
+	DCS	0x00014000
+	GREG	0x00012000
+*/
+
+/* -------------- VIP Registers -------------- */
+
 #define VI0				0x00000000
 #define VI1				0x00001000
+
+#define VI_MODE				0x000
+#define VID_CFEN			(0x00000003 << 30)
+#define VID_OSM				(0x00000001 << 29)
+#define VID_FSEQ			(0x00000001 << 28)
+#define AUX_CFEN			(0x00000003 << 26)
+#define AUX_OSM				(0x00000001 << 25)
+#define AUX_FSEQ			(0x00000001 << 24)
+#define AUX_ANC_DATA			(0x00000003 << 22)
+#define AUX_ANC_RAW			(0x00000001 << 21)
+#define RST_ON_ERR			(0x00000001 << 17)
+#define SOFT_RESET			(0x00000001 << 16)
+#define IFF_CLAMP			(0x00000001 << 14)
+#define IFF_MODE			(0x00000003 << 12)
+#define DFF_CLAMP			(0x00000001 << 10)
+#define DFF_MODE			(0x00000003 <<  8)
+#define HSP_CLAMP			(0x00000001 <<  3)
+#define HSP_RGB				(0x00000001 <<  2)
+#define HSP_MODE			(0x00000003 <<  0)
+
+#define ID_MASK0			0x020
+#define VI_ID_MASK_0			(0x000000ff <<  8)
+#define VI_DATA_ID_0			(0x000000ff <<  0)
+
+#define ID_MASK1			0x024
+#define VI_ID_MASK_1			(0x000000ff <<  8)
+#define VI_DATA_ID_1			(0x000000ff <<  0)
+
+#define VIP_LINE_THRESH			0x040
+#define VI_LCTHR			(0x000007ff <<  0)
+
+#define VIN_FORMAT			0x100
+#define VI_VSRA				(0x00000003 << 30)
+#define VI_SYNCHD			(0x00000001 << 25)
+#define VI_DUAL_STREAM			(0x00000001 << 24)
+#define VI_NHDAUX			(0x00000001 << 20)
+#define VI_NPAR				(0x00000001 << 19)
+#define VI_VSEL				(0x00000003 << 14)
+#define VI_TWOS				(0x00000001 << 13)
+#define VI_TPG				(0x00000001 << 12)
+#define VI_FREF				(0x00000001 << 10)
+#define VI_FTGL				(0x00000001 <<  9)
+#define VI_SF				(0x00000001 <<  3)
+#define VI_FZERO			(0x00000001 <<  2)
+#define VI_REVS				(0x00000001 <<  1)
+#define VI_REHS				(0x00000001 <<  0)
+
+
+
+
+/* -------------- FGPI Registers -------------- */
+
 #define FGPI0				0x00002000
 #define FGPI1				0x00003000
 #define FGPI2				0x00004000
 #define FGPI3				0x00005000
+
+#define FGPI_CONTROL			0x000
+#define FGPI_CAPTURE_ENABLE_2		(0x00000001 << 13)
+#define FGPI_CAPTURE_ENABLE_1		(0x00000001 << 12)
+#define FGPI_MODE			(0x00000001 << 11)
+#define FGPI_SAMPLE_SIZE		(0x00000003 <<  8)
+#define FGPI_BUF_SYNC_MSG_STOP		(0x00000003 <<  5)
+#define FGPI_REC_START_MSG_START	(0x00000003 <<  2)
+#define FGPI_TSTAMP_SELECT		(0x00000001 <<  1)
+#define FGPI_VAR_LENGTH			(0x00000001 <<  0)
+
+#define FGPI_BASE_1			0x004
+#define FGPI_BASE_2			0x008
+#define FGPI_SIZE			0x00c
+#define FGPI_REC_SIZE			0x010
+#define FGPI_STRIDE			0x014
+#define FGPI_NUM_RECORD_1		0x018
+#define FGPI_NUM_RECORD_2		0x01c
+#define FGPI_THRESHOLD_1		0x020
+#define FGPI_THRESHOLD_2		0x024
+
+#define INT_STATUS			0xfe0
+#define FGPI_BUF1_ACTIVE		(0x00000001 <<  7)
+#define FGPI_OVERFLOW			(0x00000001 <<  6)
+#define FGPI_MBE			(0x00000001 <<  5)
+#define FGPI_UNDERRUN			(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED		(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED		(0x00000001 <<  2)
+#define FGPI_BUF2_FULL			(0x00000001 <<  1)
+#define FGPI_BUF1_FULL			(0x00000001 <<  0)
+
+#define INT_ENABLE			0xfe4
+#define FGPI_OVERFLOW_ENA		(0x00000001 <<  6)
+#define FGPI_MBE_ENA			(0x00000001 <<  5)
+#define FGPI_UNDERRUN_ENA		(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED_ENA	(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED_ENA	(0x00000001 <<  2)
+#define FGPI_BUF2_FULL_ENA		(0x00000001 <<  1)
+#define FGPI_BUF1_FULL_ENA		(0x00000001 <<  0)
+
+#define INT_CLR_STATUS			0xfe8
+#define FGPI_OVERFLOW_ACK		(0x00000001 <<  6)
+#define FGPI_MBE_ACK			(0x00000001 <<  5)
+#define FGPI_UNDERRUN_ACK		(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED_ACK	(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED_ACK	(0x00000001 <<  2)
+#define FGPI_BUF2_DONE_ACK		(0x00000001 <<  1)
+#define FGPI_BUF1_DONE_ACK		(0x00000001 <<  0)
+
+#define INT_SET_STATUS			0xfec
+#define FGPI_OVERFLOW_SET		(0x00000001 <<  6)
+#define FGPI_MBE_SET			(0x00000001 <<  5)
+#define FGPI_UNDERRUN_SET		(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED_SET	(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED_SET	(0x00000001 <<  2)
+#define FGPI_BUF2_DONE_SET		(0x00000001 <<  1)
+#define FGPI_BUF1_DONE_SET		(0x00000001 <<  0)
+
+#define FGPI_SOFT_RESET			0xff0
+#define FGPI_SOFTWARE_RESET		(0x00000001 <<  0)
+
+#define FGPI_INTERFACE			0xff4
+#define FGPI_DISABLE_BUS_IF		(0x00000001 <<  0)
+
+
+
+
+/* -------------- AI Registers ---------------- */
+
 #define AI0				0x00006000
 #define AI1				0x00007000
+
+#define AI_STATUS			0x000
+#define AI_BUF1_ACTIVE			(0x00000001 <<  4)
+#define AI_OVERRUN			(0x00000001 <<  3)
+#define AI_HBE				(0x00000001 <<  2)
+#define AI_BUF2_FULL			(0x00000001 <<  1)
+#define AI_BUF1_FULL			(0x00000001 <<  0)
+
+#define AI_CTL				0x004
+#define AI_RESET			(0x00000001 <<  31)
+#define AI_CAP_ENABLE			(0x00000001 <<  30)
+#define AI_CAP_MODE			(0x00000003 <<  28)
+#define AI_SIGN_CONVERT			(0x00000001 <<  27)
+#define AI_EARLYMODE			(0x00000001 <<  26)
+#define AI_DIAGMODE			(0x00000001 <<  25)
+#define AI_RAWMODE			(0x00000001 <<  24)
+#define AI_OVR_INTEN			(0x00000001 <<   7)
+#define AI_HBE_INTEN			(0x00000001 <<   6)
+#define AI_BUF2_INTEN			(0x00000001 <<   5)
+#define AI_BUF1_INTEN			(0x00000001 <<   4)
+#define AI_ACK_OVR			(0x00000001 <<   3)
+#define AI_ACK_HBE			(0x00000001 <<   2)
+#define AI_ACK2				(0x00000001 <<   1)
+#define AI_ACK1				(0x00000001 <<   0)
+
+#define AI_SERIAL			0x008
+#define AI_SER_MASTER			(0x00000001 <<  31)
+#define AI_DATAMODE			(0x00000001 <<  30)
+#define AI_FRAMEMODE			(0x00000003 <<  28)
+#define AI_CLOCK_EDGE			(0x00000001 <<  27)
+#define AI_SSPOS4			(0x00000001 <<  19)
+#define AI_NR_CHAN			(0x00000003 <<  17)
+#define AI_WSDIV			(0x000001ff <<   8)
+#define AI_SCKDIV			(0x000000ff <<   0)
+
+#define AI_FRAMING			0x00c
+#define AI_VALIDPOS			(0x000001ff << 22)
+#define AI_LEFTPOS			(0x000001ff << 13)
+#define AI_RIGHTPOS			(0x000001ff <<  4)
+#define AI_SSPOS_3_0			(0x0000000f <<  0)
+
+#define AI_BASE1			0x014
+#define AI_BASE2			0x018
+#define AI_BASE				(0x03ffffff <<  6)
+
+#define AI_SIZE				0x01c
+#define AI_SAMPLE_SIZE			(0x03ffffff <<  6)
+
+#define AI_INT_ACK			0x020
+#define AI_ACK_OVR			(0x00000001 <<  3)
+#define AI_ACK_HBE			(0x00000001 <<  2)
+#define AI_ACK2				(0x00000001 <<  1)
+#define AI_ACK1				(0x00000001 <<  0)
+
+#define AI_PWR_DOWN			0xff4
+#define AI_PWR_DWN			(0x00000001 <<  0)
+
+/* -------------- BAM Registers -------------- */
+
 #define BAM				0x00008000
+
+#define BAM_VI0_0_DMA_BUF_MODE		0x000
+
+#define BAM_VI0_0_ADDR_OFFST_0		0x004
+#define BAM_VI0_0_ADDR_OFFST_1		0x008
+#define BAM_VI0_0_ADDR_OFFST_2		0x00c
+#define BAM_VI0_0_ADDR_OFFST_3		0x010
+#define BAM_VI0_0_ADDR_OFFST_4		0x014
+#define BAM_VI0_0_ADDR_OFFST_5		0x018
+#define BAM_VI0_0_ADDR_OFFST_6		0x01c
+#define BAM_VI0_0_ADDR_OFFST_7		0x020
+
+#define BAM_VI0_1_DMA_BUF_MODE		0x024
+#define BAM_VI0_1_ADDR_OFFST_0		0x028
+#define BAM_VI0_1_ADDR_OFFST_1		0x02c
+#define BAM_VI0_1_ADDR_OFFST_2		0x030
+#define BAM_VI0_1_ADDR_OFFST_3		0x034
+#define BAM_VI0_1_ADDR_OFFST_4		0x038
+#define BAM_VI0_1_ADDR_OFFST_5		0x03c
+#define BAM_VI0_1_ADDR_OFFST_6		0x040
+#define BAM_VI0_1_ADDR_OFFST_7		0x044
+
+#define BAM_VI0_2_DMA_BUF_MODE		0x048
+#define BAM_VI0_2_ADDR_OFFST_0		0x04c
+#define BAM_VI0_2_ADDR_OFFST_1		0x050
+#define BAM_VI0_2_ADDR_OFFST_2		0x054
+#define BAM_VI0_2_ADDR_OFFST_3		0x058
+#define BAM_VI0_2_ADDR_OFFST_4		0x05c
+#define BAM_VI0_2_ADDR_OFFST_5		0x060
+#define BAM_VI0_2_ADDR_OFFST_6		0x064
+#define BAM_VI0_2_ADDR_OFFST_7		0x068
+
+
+#define BAM_VI1_0_DMA_BUF_MODE		0x06c
+#define BAM_VI1_0_ADDR_OFFST_0		0x070
+#define BAM_VI1_0_ADDR_OFFST_1		0x074
+#define BAM_VI1_0_ADDR_OFFST_2		0x078
+#define BAM_VI1_0_ADDR_OFFST_3		0x07c
+#define BAM_VI1_0_ADDR_OFFST_4		0x080
+#define BAM_VI1_0_ADDR_OFFST_5		0x084
+#define BAM_VI1_0_ADDR_OFFST_6		0x088
+#define BAM_VI1_0_ADDR_OFFST_7		0x08c
+
+#define BAM_VI1_1_DMA_BUF_MODE		0x090
+#define BAM_VI1_1_ADDR_OFFST_0		0x094
+#define BAM_VI1_1_ADDR_OFFST_1		0x098
+#define BAM_VI1_1_ADDR_OFFST_2		0x09c
+#define BAM_VI1_1_ADDR_OFFST_3		0x0a0
+#define BAM_VI1_1_ADDR_OFFST_4		0x0a4
+#define BAM_VI1_1_ADDR_OFFST_5		0x0a8
+#define BAM_VI1_1_ADDR_OFFST_6		0x0ac
+#define BAM_VI1_1_ADDR_OFFST_7		0x0b0
+
+#define BAM_VI1_2_DMA_BUF_MODE		0x0b4
+#define BAM_VI1_2_ADDR_OFFST_0		0x0b8
+#define BAM_VI1_2_ADDR_OFFST_1		0x0bc
+#define BAM_VI1_2_ADDR_OFFST_2		0x0c0
+#define BAM_VI1_2_ADDR_OFFST_3		0x0c4
+#define BAM_VI1_2_ADDR_OFFST_4		0x0c8
+#define BAM_VI1_2_ADDR_OFFST_5		0x0cc
+#define BAM_VI1_2_ADDR_OFFST_6		0x0d0
+#define BAM_VI1_2_ADDR_OFFST_7		0x0d4
+
+
+#define BAM_FGPI0_DMA_BUF_MODE		0x0d8
+#define BAM_FGPI0_ADDR_OFFST_0		0x0dc
+#define BAM_FGPI0_ADDR_OFFST_1		0x0e0
+#define BAM_FGPI0_ADDR_OFFST_2		0x0e4
+#define BAM_FGPI0_ADDR_OFFST_3		0x0e8
+#define BAM_FGPI0_ADDR_OFFST_4		0x0ec
+#define BAM_FGPI0_ADDR_OFFST_5		0x0f0
+#define BAM_FGPI0_ADDR_OFFST_6		0x0f4
+#define BAM_FGPI0_ADDR_OFFST_7		0x0f8
+
+#define BAM_FGPI1_DMA_BUF_MODE		0x0fc
+#define BAM_FGPI1_ADDR_OFFST_0		0x100
+#define BAM_FGPI1_ADDR_OFFST_1		0x104
+#define BAM_FGPI1_ADDR_OFFST_2		0x108
+#define BAM_FGPI1_ADDR_OFFST_3		0x10c
+#define BAM_FGPI1_ADDR_OFFST_4		0x110
+#define BAM_FGPI1_ADDR_OFFST_5		0x114
+#define BAM_FGPI1_ADDR_OFFST_6		0x118
+#define BAM_FGPI1_ADDR_OFFST_7		0x11c
+
+#define BAM_FGPI2_DMA_BUF_MODE		0x120
+#define BAM_FGPI2_ADDR_OFFST_0		0x124
+#define BAM_FGPI2_ADDR_OFFST_1		0x128
+#define BAM_FGPI2_ADDR_OFFST_2		0x12c
+#define BAM_FGPI2_ADDR_OFFST_3		0x130
+#define BAM_FGPI2_ADDR_OFFST_4		0x134
+#define BAM_FGPI2_ADDR_OFFST_5		0x138
+#define BAM_FGPI2_ADDR_OFFST_6		0x13c
+#define BAM_FGPI2_ADDR_OFFST_7		0x140
+
+#define BAM_FGPI3_DMA_BUF_MODE		0x144
+#define BAM_FGPI3_ADDR_OFFST_0		0x148
+#define BAM_FGPI3_ADDR_OFFST_1		0x14c
+#define BAM_FGPI3_ADDR_OFFST_2		0x150
+#define BAM_FGPI3_ADDR_OFFST_3		0x154
+#define BAM_FGPI3_ADDR_OFFST_4		0x158
+#define BAM_FGPI3_ADDR_OFFST_5		0x15c
+#define BAM_FGPI3_ADDR_OFFST_6		0x160
+#define BAM_FGPI3_ADDR_OFFST_7		0x164
+
+
+#define BAM_AI0_DMA_BUF_MODE		0x168
+#define BAM_AI0_ADDR_OFFST_0		0x16c
+#define BAM_AI0_ADDR_OFFST_1		0x170
+#define BAM_AI0_ADDR_OFFST_2		0x174
+#define BAM_AI0_ADDR_OFFST_3		0x178
+#define BAM_AI0_ADDR_OFFST_4		0x17c
+#define BAM_AIO_ADDR_OFFST_5		0x180
+#define BAM_AI0_ADDR_OFFST_6		0x184
+#define BAM_AIO_ADDR_OFFST_7		0x188
+
+#define BAM_AI1_DMA_BUF_MODE		0x18c
+#define BAM_AI1_ADDR_OFFST_0		0x190
+#define BAM_AI1_ADDR_OFFST_1		0x194
+#define BAM_AI1_ADDR_OFFST_2		0x198
+#define BAM_AI1_ADDR_OFFST_3		0x19c
+#define BAM_AI1_ADDR_OFFST_4		0x1a0
+#define BAM_AI1_ADDR_OFFST_5		0x1a4
+#define BAM_AI1_ADDR_OFFST_6		0x1a8
+#define BAM_AI1_ADDR_OFFST_7		0x1ac
+
+#define BAM_SW_RST			0xff0
+#define BAM_SW_RESET			(0x00000001 <<  0)
+
+
+
+
+
+/* -------------- MMU Registers -------------- */
+
 #define MMU				0x00009000
+
+#define MMU_MODE			0x000
+
+#define MMU_DMA_CONFIG0			0x004
+#define MMU_DMA_CONFIG1			0x008
+#define MMU_DMA_CONFIG2			0x00c
+#define MMU_DMA_CONFIG3			0x010
+#define MMU_DMA_CONFIG4			0x014
+#define MMU_DMA_CONFIG5			0x018
+#define MMU_DMA_CONFIG6			0x01c
+#define MMU_DMA_CONFIG7			0x020
+#define MMU_DMA_CONFIG8			0x024
+#define MMU_DMA_CONFIG9			0x028
+#define MMU_DMA_CONFIG10		0x02c
+#define MMU_DMA_CONFIG11		0x030
+#define MMU_DMA_CONFIG12		0x034
+#define MMU_DMA_CONFIG13		0x038
+#define MMU_DMA_CONFIG14		0x03c
+#define MMU_DMA_CONFIG15		0x040
+
+#define MMU_SW_RST			0xff0
+#define MMU_SW_RESET			(0x0001 <<  0)
+
+#define MMU_PTA_BASE0			0x044 /* DMA 0 */
+#define MMU_PTA_BASE1			0x084 /* DMA 1 */
+#define MMU_PTA_BASE2			0x0c4 /* DMA 2 */
+#define MMU_PTA_BASE3			0x104 /* DMA 3 */
+#define MMU_PTA_BASE4			0x144 /* DMA 4 */
+#define MMU_PTA_BASE5			0x184 /* DMA 5 */
+#define MMU_PTA_BASE6			0x1c4 /* DMA 6 */
+#define MMU_PTA_BASE7			0x204 /* DMA 7 */
+#define MMU_PTA_BASE8			0x244 /* DMA 8 */
+#define MMU_PTA_BASE9			0x284 /* DMA 9 */
+#define MMU_PTA_BASE10			0x2c4 /* DMA 10 */
+#define MMU_PTA_BASE11			0x304 /* DMA 11 */
+#define MMU_PTA_BASE12			0x344 /* DMA 12 */
+#define MMU_PTA_BASE13			0x384 /* DMA 13 */
+#define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
+#define MMU_PTA_BASE15			0x404 /* DMA 15 */
+
+#define MMU_PTA0_LSB			MMU_PTA_BASE + 0x00
+#define MMU_PTA0_MSB			MMU_PTA_BASE + 0x04
+#define MMU_PTA1_LSB			MMU_PTA_BASE + 0x08
+#define MMU_PTA1_MSB			MMU_PTA_BASE + 0x0c
+#define MMU_PTA2_LSB			MMU_PTA_BASE + 0x10
+#define MMU_PTA2_MSB			MMU_PTA_BASE + 0x14
+#define MMU_PTA3_LSB			MMU_PTA_BASE + 0x18
+#define MMU_PTA3_MSB			MMU_PTA_BASE + 0x1c
+#define MMU_PTA4_LSB			MMU_PTA_BASE + 0x20
+#define MMU_PTA4_MSB			MMU_PTA_BASE + 0x24
+#define MMU_PTA5_LSB			MMU_PTA_BASE + 0x28
+#define MMU_PTA5_MSB			MMU_PTA_BASE + 0x2c
+#define MMU_PTA6_LSB			MMU_PTA_BASE + 0x30
+#define MMU_PTA6_MSB			MMU_PTA_BASE + 0x34
+#define MMU_PTA7_LSB			MMU_PTA_BASE + 0x38
+#define MMU_PTA7_MSB			MMU_PTA_BASE + 0x3c
+
+
+
+
+
+/* -------------- MSI Registers -------------- */
+
 #define MSI				0x0000a000
+
+#define MSI_DELAY_TIMER			0x000
+#define MSI_DELAY_1CLK			(0x00000001 <<  0)
+#define MSI_DELAY_2CLK			(0x00000002 <<  0)
+
+#define MSI_INTA_POLARITY		0x004
+#define MSI_INTA_POLARITY_HIGH		(0x00000001 <<  0)
+
+#define MSI_CONFIG0			0x008
+#define MSI_CONFIG1			0x00c
+#define MSI_CONFIG2			0x010
+#define MSI_CONFIG3			0x014
+#define MSI_CONFIG4			0x018
+#define MSI_CONFIG5			0x01c
+#define MSI_CONFIG6			0x020
+#define MSI_CONFIG7			0x024
+#define MSI_CONFIG8			0x028
+#define MSI_CONFIG9			0x02c
+#define MSI_CONFIG10			0x030
+#define MSI_CONFIG11			0x034
+#define MSI_CONFIG12			0x038
+#define MSI_CONFIG13			0x03c
+#define MSI_CONFIG14			0x040
+#define MSI_CONFIG15			0x044
+#define MSI_CONFIG16			0x048
+#define MSI_CONFIG17			0x04c
+#define MSI_CONFIG18			0x050
+#define MSI_CONFIG19			0x054
+#define MSI_CONFIG20			0x058
+#define MSI_CONFIG21			0x05c
+#define MSI_CONFIG22			0x060
+#define MSI_CONFIG23			0x064
+#define MSI_CONFIG24			0x068
+#define MSI_CONFIG25			0x06c
+#define MSI_CONFIG26			0x070
+#define MSI_CONFIG27			0x074
+#define MSI_CONFIG28			0x078
+#define MSI_CONFIG29			0x07c
+#define MSI_CONFIG30			0x080
+#define MSI_CONFIG31			0x084
+#define MSI_CONFIG32			0x088
+#define MSI_CONFIG33			0x08c
+#define MSI_CONFIG34			0x090
+#define MSI_CONFIG35			0x094
+#define MSI_CONFIG36			0x098
+#define MSI_CONFIG37			0x09c
+#define MSI_CONFIG38			0x0a0
+#define MSI_CONFIG39			0x0a4
+#define MSI_CONFIG40			0x0a8
+#define MSI_CONFIG41			0x0ac
+#define MSI_CONFIG42			0x0b0
+#define MSI_CONFIG43			0x0b4
+#define MSI_CONFIG44			0x0b8
+#define MSI_CONFIG45			0x0bc
+#define MSI_CONFIG46			0x0c0
+#define MSI_CONFIG47			0x0c4
+#define MSI_CONFIG48			0x0c8
+#define MSI_INT_POL_EDGE_RISE		(0x00000001 << 24)
+#define MSI_INT_POL_EDGE_FALL		(0x00000002 << 24)
+#define MSI_INT_POL_EDGE_ANY		(0x00000003 << 24)
+#define MSI_TC				(0x00000007 << 16)
+#define MSI_ID				(0x0000000f <<  0)
+
+#define MSI_INT_STATUS_L		0xfc0
+#define MSI_INT_TAGACK_VI0_0		(0x00000001 <<  0)
+#define MSI_INT_TAGACK_VI0_1		(0x00000001 <<  1)
+#define MSI_INT_TAGACK_VI0_2		(0x00000001 <<  2)
+#define MSI_INT_TAGACK_VI1_0		(0x00000001 <<  3)
+#define MSI_INT_TAGACK_VI1_1		(0x00000001 <<  4)
+#define MSI_INT_TAGACK_VI1_2		(0x00000001 <<  5)
+#define MSI_INT_TAGACK_FGPI_0		(0x00000001 <<  6)
+#define MSI_INT_TAGACK_FGPI_1		(0x00000001 <<  7)
+#define MSI_INT_TAGACK_FGPI_2		(0x00000001 <<  8)
+#define MSI_INT_TAGACK_FGPI_3		(0x00000001 <<  9)
+#define MSI_INT_TAGACK_AI_0		(0x00000001 << 10)
+#define MSI_INT_TAGACK_AI_1		(0x00000001 << 11)
+#define MSI_INT_OVRFLW_VI0_0		(0x00000001 << 12)
+#define MSI_INT_OVRFLW_VI0_1		(0x00000001 << 13)
+#define MSI_INT_OVRFLW_VI0_2		(0x00000001 << 14)
+#define MSI_INT_OVRFLW_VI1_0		(0x00000001 << 15)
+#define MSI_INT_OVRFLW_VI1_1		(0x00000001 << 16)
+#define MSI_INT_OVRFLW_VI1_2		(0x00000001 << 17)
+#define MSI_INT_OVRFLW_FGPI_O		(0x00000001 << 18)
+#define MSI_INT_OVRFLW_FGPI_1		(0x00000001 << 19)
+#define MSI_INT_OVRFLW_FGPI_2		(0x00000001 << 20)
+#define MSI_INT_OVRFLW_FGPI_3		(0x00000001 << 21)
+#define MSI_INT_OVRFLW_AI_0		(0x00000001 << 22)
+#define MSI_INT_OVRFLW_AI_1		(0x00000001 << 23)
+#define MSI_INT_AVINT_VI0		(0x00000001 << 24)
+#define MSI_INT_AVINT_VI1		(0x00000001 << 25)
+#define MSI_INT_AVINT_FGPI_0		(0x00000001 << 26)
+#define MSI_INT_AVINT_FGPI_1		(0x00000001 << 27)
+#define MSI_INT_AVINT_FGPI_2		(0x00000001 << 28)
+#define MSI_INT_AVINT_FGPI_3		(0x00000001 << 29)
+#define MSI_INT_AVINT_AI_0		(0x00000001 << 30)
+#define MSI_INT_AVINT_AI_1		(0x00000001 << 31)
+
+#define MSI_INT_STATUS_H		0xfc4
+#define MSI_INT_UNMAPD_TC_INT		(0x00000001 <<  0)
+#define MSI_INT_EXTINT_0		(0x00000001 <<  1)
+#define MSI_INT_EXTINT_1		(0x00000001 <<  2)
+#define MSI_INT_EXTINT_2		(0x00000001 <<  3)
+#define MSI_INT_EXTINT_3		(0x00000001 <<  4)
+#define MSI_INT_EXTINT_4		(0x00000001 <<  5)
+#define MSI_INT_EXTINT_5		(0x00000001 <<  6)
+#define MSI_INT_EXTINT_6		(0x00000001 <<  7)
+#define MSI_INT_EXTINT_7		(0x00000001 <<  8)
+#define MSI_INT_EXTINT_8		(0x00000001 <<  9)
+#define MSI_INT_EXTINT_9		(0x00000001 << 10)
+#define MSI_INT_EXTINT_10		(0x00000001 << 11)
+#define MSI_INT_EXTINT_11		(0x00000001 << 12)
+#define MSI_INT_EXTINT_12		(0x00000001 << 13)
+#define MSI_INT_EXTINT_13		(0x00000001 << 14)
+#define MSI_INT_EXTINT_14		(0x00000001 << 15)
+#define MSI_INT_EXTINT_15		(0x00000001 << 16)
+#define MSI_INT_I2CINT_0		(0x00000001 << 17)
+#define MSI_INT_I2CINT_1		(0x00000001 << 18)
+
+#define MSI_INT_STATUS_CLR_L		0xfc8
+#define MSI_INT_STATUS_CLR_H		0xfcc
+#define MSI_INT_STATUS_SET_L		0xfd0
+#define MSI_INT_STATUS_SET_H		0xfd4
+#define MSI_INT_ENA_L			0xfd8
+#define MSI_INT_ENA_H			0xfdc
+#define MSI_INT_ENA_CLR_L		0xfe0
+#define MSI_INT_ENA_CLR_H		0xfe4
+#define MSI_INT_ENA_SET_L		0xfe8
+#define MSI_INT_ENA_SET_H		0xfec
+
+#define MSI_SW_RST			0xff0
+#define MSI_SW_RESET			(0x0001 <<  0)
+
+
+
+
+/* -------------- I2C Registers -------------- */
+
 #define I2C_B				0x0000b000
 #define I2C_A				0x0000c000
-#define SPI				0x0000d000
-#define GPIO				0x0000e000
-#define PHI_0				0x0000f000
-#define GREG				0x00012000
-#define CGU				0x00013000
-#define DCS				0x00014000
 
-/* BAR = 20 bits */
-#define PHI_1				0x00020000
+#define RX_FIFO				0x000
+#define I2C_RX_BYTE			(0x000000ff <<  0)
 
-#define VI_MODE				0x000
-#define VID_CFEN			(0x0003 << 30)
-#define VID_OSM				(0x0001 << 29)
-#define VID_FSEQ			(0x0001 << 28)
-#define AUX_CFEN			(0x0003 << 26)
-#define AUX_OSM				(0x0001 << 25)
-#define AUX_FSEQ			(0x0001 << 24)
-#define AUX_ANC_DATA			(0x0003 << 22)
-#define AUX_ANC_RAW			(0x0001 << 21)
-#define RST_ON_ERR			(0x0001 << 17)
-#define SOFT_RESET			(0x0001 << 16)
-#define IFF_CLAMP			(0x0001 << 14)
-#define IFF_MODE			(0x0003 << 12)
-#define DFF_CLAMP			(0x0001 << 10)
-#define DFF_MODE			(0x0003 <<  8)
-#define HSP_CLAMP			(0x0001 <<  3)
-#define HSP_RGB				(0x0001 <<  2)
-#define HSP_MODE			(0x0003 <<  0)
+#define TX_FIFO				0x000
+#define I2C_STOP_BIT			(0x00000001 <<  9)
+#define I2C_START_BIT			(0x00000001 <<  8)
+#define I2C_TX_BYTE			(0x000000ff <<  0)
 
-#define ID_MASK0			0x020
-#define ID_MASK_0			(0x00ff <<  8)
-#define DATA_ID_0			(0x00ff <<  0)
+#define I2C_STATUS			0x008
+#define I2C_TRANSMIT			(0x00000001 << 11)
+#define I2C_RECEIVE			(0x00000001 << 10)
+#define I2C_TRANSMIT_S_PROG		(0x00000001 <<  9)
+#define I2C_TRANSMIT_S_CLEAR		(0x00000001 <<  8)
+#define I2C_TRANSMIT_PROG		(0x00000001 <<  7)
+#define I2C_TRANSMIT_CLEAR		(0x00000001 <<  6)
+#define I2C_RECEIVE_PROG		(0x00000001 <<  5)
+#define I2C_RECEIVE_CLEAR		(0x00000001 <<  4)
+#define I2C_SDA_LINE			(0x00000001 <<  3)
+#define I2C_SCL_LINE			(0x00000001 <<  2)
+#define I2C_START_STOP_FLAG		(0x00000001 <<  1)
+#define I2C_MODE_STATUS			(0x00000001 <<  0)
 
-#define ID_MASK1			0x024
-#define ID_MASK_1			(0x00ff <<  8)
-#define DATA_ID_1			(0x00ff <<  0)
+#define I2C_CONTROL			0x00c
+#define I2C_SCL_CONTROL			(0x00000001 <<  7)
+#define I2C_SDA_CONTROL			(0x00000001 <<  6)
+#define I2C_RECEIVE_PROTECT		(0x00000001 <<  5)
+#define I2C_RECEIVE_PRO_READ		(0x00000001 <<  4)
+#define I2C_TRANS_SELF_CLEAR		(0x00000001 <<  3)
+#define I2C_TRANS_S_SELF_CLEAR		(0x00000001 <<  2)
+#define I2C_SLAVE_ADDR_10BIT		(0x00000001 <<  1)
+#define I2C_RESET			(0x00000001 <<  0)
 
-#define VIP_LINE_THRESH			0x040
-#define LCTHR				(0x07ff <<  0)
+#define I2C_CLOCK_DIVISOR_HIGH		0x010
+#define I2C_CLOCK_HIGH			(0x0000ffff <<  0)
 
-#define VIN_FORMAT			0x100
-#define VSRA				(0x0003 << 30)
-#define SYNCHD				(0x0001 << 25)
-#define DUAL_STREAM			(0x0001 << 24)
-#define NHDAUX				(0x0001 << 20)
-#define NPAR				(0x0001 << 19)
-#define VSEL				(0x0003 << 14)
-#define TWOS				(0x0001 << 13)
-#define TPG				(0x0001 << 12)
-#define FREF				(0x0001 << 10)
-#define FTGL				(0x0001 <<  9)
-#define SF				(0x0001 <<  3)
-#define FZERO				(0x0001 <<  2)
-#define REVS				(0x0001 <<  1)
-#define REHS				(0x0001 <<  0)
+#define I2C_CLOCK_DIVISOR_LOW		0x014
+#define I2C_CLOCK_LOW			(0x0000ffff <<  0)
 
-#define GREG_SUBSYS_CONFIG		0x000
-#define GREG_SUBSYS_ID			(0xffff << 16)
-#define GREG_SUBSYS_VID			(0xffff <<  0)
+#define I2C_RX_LEVEL			0x01c
+#define I2C_RECEIVE_RANGE		(0x0000007f <<  0)
 
-#define GREG_MSI_BAR_PMCSR		0x004
-#define GREG_PMCSR_SCALE_7		(0x0003 << 30)
-#define GREG_PMCSR_SCALE_6		(0x0003 << 28)
-#define GREG_PMCSR_SCALE_5		(0x0003 << 26)
-#define GREG_PMCSR_SCALE_4		(0x0003 << 24)
-#define GREG_PMCSR_SCALE_3		(0x0003 << 22)
-#define GREG_PMCSR_SCALE_2		(0x0003 << 20)
-#define GREG_PMCSR_SCALE_1		(0x0003 << 18)
-#define GREG_PMCSR_SCALE_0		(0x0003 << 16)
-
-#define GREG_BAR_WIDTH_17		(0x001e <<  8)
-#define GREG_BAR_WIDTH_18		(0x001c <<  8)
-#define GREG_BAR_WIDTH_19		(0x0018 <<  8)
-#define GREG_BAR_WIDTH_20		(0x0010 <<  8)
-
-#define GREG_BAR_PREFETCH		(0x0001 <<  3)
-#define GREG_MSI_MM_CAP1		(0x0000 <<  0) // FIXME !
-#define GREG_MSI_MM_CAP2		(0x0001 <<  0)
-#define GREG_MSI_MM_CAP4		(0x0002 <<  0)
-#define GREG_MSI_MM_CAP8		(0x0003 <<  0)
-#define GREG_MSI_MM_CAP16		(0x0004 <<  0)
-#define GREG_MSI_MM_CAP32		(0x0005 <<  0)
+#define I2C_TX_LEVEL			0x020
+#define I2C_TRANSMIT_RANGE		(0x0000007f <<  0)
 
-#define GREG_PMCSR_DATA_1		0x008
-#define GREG_PMCSR_DATA_2		0x00c
-#define GREG_VI_CTRL			0x010
-#define GREG_FGPI_CTRL			0x014
+#define I2C_SDA_HOLD			0x028
+#define I2C_HOLD_TIME			(0x0000007f <<  0)
 
-#define GREG_RSTU_CTRL			0x018
-#define BOOT_READY			(0x0001 << 13)
-#define RESET_REQ			(0x0001 << 12)
-#define IP_RST_RELEASE			(0x0001 << 11)
-#define ADAPTER_RST_RELEASE		(0x0001 << 10)
-#define PCIE_CORE_RST_RELEASE		(0x0001 <<  9)
-#define BOOT_IP_RST_RELEASE		(0x0001 <<  8)
-#define BOOT_RST_RELEASE		(0x0001 <<  7)
-#define CGU_RST_RELEASE			(0x0001 <<  6)
-#define IP_RST_ASSERT			(0x0001 <<  5)
-#define ADAPTER_RST_ASSERT		(0x0001 <<  4)
-#define RST_ASSERT			(0x0001 <<  3)
-#define BOOT_IP_RST_ASSERT		(0x0001 <<  2)
-#define BOOT_RST_ASSERT			(0x0001 <<  1)
-#define CGU_RST_ASSERT			(0x0001 <<  0)
+#define MODULE_CONF			0xfd4
+#define INT_CLR_ENABLE			0xfd8
+#define I2C_CLR_ENABLE_STFNF		(0x00000001 << 12)
+#define I2C_CLR_ENABLE_MTFNF		(0x00000001 << 11)
+#define I2C_CLR_ENABLE_RFDA		(0x00000001 << 10)
+#define I2C_CLR_ENABLE_RFF		(0x00000001 <<  9)
+#define I2C_CLR_ENABLE_STDR		(0x00000001 <<  8)
+#define I2C_CLR_ENABLE_MTDR		(0x00000001 <<  7)
+#define I2C_CLR_ENABLE_IBE		(0x00000001 <<  6)
+#define I2C_CLR_ENABLE_MSMC		(0x00000001 <<  5)
+#define I2C_CLR_ENABLE_SRSD		(0x00000001 <<  4)
+#define I2C_CLR_ENABLE_STSD		(0x00000001 <<  3)
+#define I2C_CLR_ENABLE_MTNA		(0x00000001 <<  2)
+#define I2C_CLR_ENABLE_MAF		(0x00000001 <<  1)
+#define I2C_CLR_ENABLE_MTD		(0x00000001 <<  0)
 
-#define GREG_I2C_CTRL			0x01c
-#define I2C_SLAVE_ADDR			(0x007f <<  0)
+#define INT_SET_ENABLE			0xfdc
+#define I2C_SET_ENABLE_STFNF		(0x00000001 << 12)
+#define I2C_SET_ENABLE_MTFNF		(0x00000001 << 11)
+#define I2C_SET_ENABLE_RFDA		(0x00000001 << 10)
+#define I2C_SET_ENABLE_RFF		(0x00000001 <<  9)
+#define I2C_SET_ENABLE_STDR		(0x00000001 <<  8)
+#define I2C_SET_ENABLE_MTDR		(0x00000001 <<  7)
+#define I2C_SET_ENABLE_IBE		(0x00000001 <<  6)
+#define I2C_SET_ENABLE_MSMC		(0x00000001 <<  5)
+#define I2C_SET_ENABLE_SRSD		(0x00000001 <<  4)
+#define I2C_SET_ENABLE_STSD		(0x00000001 <<  3)
+#define I2C_SET_ENABLE_MTNA		(0x00000001 <<  2)
+#define I2C_SET_ENABLE_MAF		(0x00000001 <<  1)
+#define I2C_SET_ENABLE_MTD		(0x00000001 <<  0)
 
-#define GREG_OVFLW_CTRL			0x020
-#define OVERFLOW_ENABLE			(0x1fff <<  0)
+#define INT_STATUS			0xfe0
+#define I2C_INTERRUPT_STFNF		(0x00000001 << 12)
+#define I2C_INTERRUPT_MTFNF		(0x00000001 << 11)
+#define I2C_INTERRUPT_RFDA		(0x00000001 << 10)
+#define I2C_INTERRUPTE_RFF		(0x00000001 <<  9)
+#define I2C_SLAVE_INTERRUPT_STDR	(0x00000001 <<  8)
+#define I2C_MASTER_INTERRUPT_MTDR	(0x00000001 <<  7)
+#define I2C_ERROR_IBE			(0x00000001 <<  6)
+#define I2C_MODE_CHANGE_INTER_MSMC	(0x00000001 <<  5)
+#define I2C_SLAVE_RECEIVE_INTER_SRSD	(0x00000001 <<  4)
+#define I2C_SLAVE_TRANSMIT_INTER_STSD	(0x00000001 <<  3)
+#define I2C_ACK_INTER_MTNA		(0x00000001 <<  2)
+#define I2C_FAILURE_INTER_MAF		(0x00000001 <<  1)
+#define I2C_INTERRUPT_MTD		(0x00000001 <<  0)
 
-#define GREG_TAG_ACK_FLEN		0x024
-#define TAG_ACK_FLEN_1B			(0x0000 <<  0)
-#define TAG_ACK_FLEN_2B			(0x0001 <<  0)
-#define TAG_ACK_FLEN_4B			(0x0002 <<  0)
-#define TAG_ACK_FLEN_8B			(0x0003 <<  0)
+#define INT_ENABLE			0xfe4
+#define I2C_ENABLE_STFNF		(0x00000001 << 12)
+#define I2C_ENABLE_MTFNF		(0x00000001 << 11)
+#define I2C_ENABLE_RFDA			(0x00000001 << 10)
+#define I2C_ENABLE_RFF			(0x00000001 <<  9)
+#define I2C_ENABLE_STDR			(0x00000001 <<  8)
+#define I2C_ENABLE_MTDR			(0x00000001 <<  7)
+#define I2C_ENABLE_IBE			(0x00000001 <<  6)
+#define I2C_ENABLE_MSMC			(0x00000001 <<  5)
+#define I2C_ENABLE_SRSD			(0x00000001 <<  4)
+#define I2C_ENABLE_STSD			(0x00000001 <<  3)
+#define I2C_ENABLE_MTNA			(0x00000001 <<  2)
+#define I2C_ENABLE_MAF			(0x00000001 <<  1)
+#define I2C_ENABLE_MTD			(0x00000001 <<  0)
 
-#define GREG_VIDEO_IN_CTRL		0x028
+#define INT_CLR_STATUS			0xfe8
+#define I2C_CLR_STATUS_STFNF		(0x00000001 << 12)
+#define I2C_CLR_STATUS_MTFNF		(0x00000001 << 11)
+#define I2C_CLR_STATUS_RFDA		(0x00000001 << 10)
+#define I2C_CLR_STATUS_RFF		(0x00000001 <<  9)
+#define I2C_CLR_STATUS_STDR		(0x00000001 <<  8)
+#define I2C_CLR_STATUS_MTDR		(0x00000001 <<  7)
+#define I2C_CLR_STATUS_IBE		(0x00000001 <<  6)
+#define I2C_CLR_STATUS_MSMC		(0x00000001 <<  5)
+#define I2C_CLR_STATUS_SRSD		(0x00000001 <<  4)
+#define I2C_CLR_STATUS_STSD		(0x00000001 <<  3)
+#define I2C_CLR_STATUS_MTNA		(0x00000001 <<  2)
+#define I2C_CLR_STATUS_MAF		(0x00000001 <<  1)
+#define I2C_CLR_STATIS_MTD		(0x00000001 <<  0)
 
-#define GREG_SPARE_1			0x02c
-#define GREG_SPARE_2			0x030
-#define GREG_SPARE_3			0x034
-#define GREG_SPARE_4			0x038
-#define GREG_SPARE_5			0x03c
-#define GREG_SPARE_6			0x040
-#define GREG_SPARE_7			0x044
-#define GREG_SPARE_8			0x048
-#define GREG_SPARE_9			0x04c
-#define GREG_SPARE_10			0x050
-#define GREG_SPARE_11			0x054
-#define GREG_SPARE_12			0x058
-#define GREG_SPARE_13			0x05c
-#define GREG_SPARE_14			0x060
-#define GREG_SPARE_15			0x064
+#define INT_SET_STATUS			0xfec
+#define I2C_SET_STATUS_STFNF		(0x00000001 << 12)
+#define I2C_SET_STATUS_MTFNF		(0x00000001 << 11)
+#define I2C_SET_STATUS_RFDA		(0x00000001 << 10)
+#define I2C_SET_STATUS_RFF		(0x00000001 <<  9)
+#define I2C_SET_STATUS_STDR		(0x00000001 <<  8)
+#define I2C_SET_STATUS_MTDR		(0x00000001 <<  7)
+#define I2C_SET_STATUS_IBE		(0x00000001 <<  6)
+#define I2C_SET_STATUS_MSMC		(0x00000001 <<  5)
+#define I2C_SET_STATUS_SRSD		(0x00000001 <<  4)
+#define I2C_SET_STATUS_STSD		(0x00000001 <<  3)
+#define I2C_SET_STATUS_MTNA		(0x00000001 <<  2)
+#define I2C_SET_STATUS_MAF		(0x00000001 <<  1)
+#define I2C_SET_STATIS_MTD		(0x00000001 <<  0)
 
-#define GREG_FAIL_DISABLE		0x068
-#define BOOT_FAIL_DISABLE		(0x0001 <<  0)
 
-#define GREG_SW_RST			0xff0
-#define SW_RESET			(0x0001 <<  0)
 
-/* GPIO */
+
+/* -------------- SPI Registers -------------- */
+
+#define SPI_CONTROL_REG			0x000
+#define SPI_SERIAL_INTER_ENABLE		(0x00000001 <<  7)
+#define SPI_LSB_FIRST_ENABLE		(0x00000001 <<  6)
+#define SPI_MODE_SELECT			(0x00000001 <<  5)
+#define SPI_CLOCK_POLARITY		(0x00000001 <<  4)
+#define SPI_CLOCK_PHASE			(0x00000001 <<  3)
+
+#define SPI_STATUS			0x004
+#define SPI_TRANSFER_FLAG		(0x00000001 <<  7)
+#define SPI_WRITE_COLLISSION		(0x00000001 <<  6)
+#define SPI_READ_OVERRUN		(0x00000001 <<  5)
+#define SPI_MODE_FAULT			(0x00000001 <<  4)
+#define SPI_SLAVE_ABORT			(0x00000001 <<  3)
+
+#define SPI_DATA			0x008
+#define SPI_BIDI_DATA			(0x000000ff <<  0)
+
+#define SPI_CLOCK_COUNTER		0x00c
+#define SPI_CLOCK			(0x00000001 <<  0)
+
+
+
+
+/* -------------- GPIO Registers -------------- */
+
+#define GPIO				0x0000e000
+
 #define GPIO_RD				0x000
 #define GPIO_WR				0x004
 #define GPIO_WR_MODE			0x008
 #define GPIO_OEN			0x00c
 
 #define GPIO_SW_RST			0xff0
-#define GPIO_SW_RESET			(0x0001 <<  0)
+#define GPIO_SW_RESET			(0x00000001 <<  0)
+
+
+
+
+/* -------------- PHI0 Registers -------------- */
+
+
+
+
+
+/* -------------- CGU Registers -------------- */
+
+#define CGU				0x00013000
 
-/* CGU */
 #define CGU_SCR_0			0x000
 #define CGU_SCR_1			0x004
 #define CGU_SCR_2			0x008
@@ -179,10 +759,10 @@
 #define CGU_SCR_11			0x02c
 #define CGU_SCR_12			0x030
 #define CGU_SCR_13			0x034
-#define CGU_SCR_STOP			(0x0001 <<  3)
-#define CGU_SCR_RESET			(0x0001 <<  2)
-#define CGU_SCR_ENF2			(0x0001 <<  1)
-#define CGU_SCR_ENF1			(0x0001 <<  0)
+#define CGU_SCR_STOP			(0x00000001 <<  3)
+#define CGU_SCR_RESET			(0x00000001 <<  2)
+#define CGU_SCR_ENF2			(0x00000001 <<  1)
+#define CGU_SCR_ENF1			(0x00000001 <<  0)
 
 #define CGU_FS1_0			0x038
 #define CGU_FS1_1			0x03c
@@ -255,9 +835,9 @@
 #define CGU_PCR_11			0x13c
 #define CGU_PCR_12			0x140
 #define CGU_PCR_13			0x144
-#define CGU_PCR_WAKE_EN			(0x0001 <<  2)
-#define CGU_PCR_AUTO			(0x0001 <<  1)
-#define CGU_PCR_RUN			(0x0001 <<  0)
+#define CGU_PCR_WAKE_EN			(0x00000001 <<  2)
+#define CGU_PCR_AUTO			(0x00000001 <<  1)
+#define CGU_PCR_RUN			(0x00000001 <<  0)
 
 
 #define CGU_PSR_0_0			0x148
@@ -308,482 +888,184 @@
 #define CGU_ESR_6			0x1f8
 #define CGU_ESR_7			0x1fc
 #define CGU_ESR_8			0x200
-#define CGU_ESR_9			0x204
-#define CGU_ESR_10			0x208
-#define CGU_ESR_11			0x20c
-#define CGU_ESR_12			0x210
-#define CGU_ESR_13			0x214
-#define CGU_ESR_FD_EN			(0x0001 <<  0)
-
-#define CGU_FDC_0			0x218
-#define CGU_FDC_1			0x21c
-#define CGU_FDC_2			0x220
-#define CGU_FDC_3			0x224
-#define CGU_FDC_4			0x228
-#define CGU_FDC_5			0x22c
-#define CGU_FDC_6			0x230
-#define CGU_FDC_7			0x234
-#define CGU_FDC_8			0x238
-#define CGU_FDC_9			0x23c
-#define CGU_FDC_10			0x240
-#define CGU_FDC_11			0x244
-#define CGU_FDC_12			0x248
-#define CGU_FDC_13			0x24c
-
-/* MSI */
-#define MSI_DELAY_TIMER			0x000
-#define MSI_DELAY_1CLK			(0x0001 <<  0)
-#define MSI_DELAY_2CLK			(0x0002 <<  0)
-
-#define MSI_INTA_POLARITY		0x004
-#define MSI_INTA_POLARITY_HIGH		(0x0001 <<  0)
-
-#define MSI_CONFIG0			0x008
-#define MSI_CONFIG1			0x00c
-#define MSI_CONFIG2			0x010
-#define MSI_CONFIG3			0x014
-#define MSI_CONFIG4			0x018
-#define MSI_CONFIG5			0x01c
-#define MSI_CONFIG6			0x020
-#define MSI_CONFIG7			0x024
-#define MSI_CONFIG8			0x028
-#define MSI_CONFIG9			0x02c
-#define MSI_CONFIG10			0x030
-#define MSI_CONFIG11			0x034
-#define MSI_CONFIG12			0x038
-#define MSI_CONFIG13			0x03c
-#define MSI_CONFIG14			0x040
-#define MSI_CONFIG15			0x044
-#define MSI_CONFIG16			0x048
-#define MSI_CONFIG17			0x04c
-#define MSI_CONFIG18			0x050
-#define MSI_CONFIG19			0x054
-#define MSI_CONFIG20			0x058
-#define MSI_CONFIG21			0x05c
-#define MSI_CONFIG22			0x060
-#define MSI_CONFIG23			0x064
-#define MSI_CONFIG24			0x068
-#define MSI_CONFIG25			0x06c
-#define MSI_CONFIG26			0x070
-#define MSI_CONFIG27			0x074
-#define MSI_CONFIG28			0x078
-#define MSI_CONFIG29			0x07c
-#define MSI_CONFIG30			0x080
-#define MSI_CONFIG31			0x084
-#define MSI_CONFIG32			0x088
-#define MSI_CONFIG33			0x08c
-#define MSI_CONFIG34			0x090
-#define MSI_CONFIG35			0x094
-#define MSI_CONFIG36			0x098
-#define MSI_CONFIG37			0x09c
-#define MSI_CONFIG38			0x0a0
-#define MSI_CONFIG39			0x0a4
-#define MSI_CONFIG40			0x0a8
-#define MSI_CONFIG41			0x0ac
-#define MSI_CONFIG42			0x0b0
-#define MSI_CONFIG43			0x0b4
-#define MSI_CONFIG44			0x0b8
-#define MSI_CONFIG45			0x0bc
-#define MSI_CONFIG46			0x0c0
-#define MSI_CONFIG47			0x0c4
-#define MSI_CONFIG48			0x0c8
-#define MSI_INT_POL_EDGE_RISE		(0x0001 << 24)
-#define MSI_INT_POL_EDGE_FALL		(0x0002 << 24)
-#define MSI_INT_POL_EDGE_ANY		(0x0003 << 24)
-#define MSI_TC				(0x0007 << 16)
-#define MSI_ID				(0x000f <<  0)
-
-#define MSI_INT_STATUS_L		0xfc0
-#define MSI_INT_TAGACK_VI0_0		(0x00000001 <<  0)
-#define MSI_INT_TAGACK_VI0_1		(0x00000001 <<  1)
-#define MSI_INT_TAGACK_VI0_2		(0x00000001 <<  2)
-#define MSI_INT_TAGACK_VI1_0		(0x00000001 <<  3)
-#define MSI_INT_TAGACK_VI1_1		(0x00000001 <<  4)
-#define MSI_INT_TAGACK_VI1_2		(0x00000001 <<  5)
-#define MSI_INT_TAGACK_FGPI_0		(0x00000001 <<  6)
-#define MSI_INT_TAGACK_FGPI_1		(0x00000001 <<  7)
-#define MSI_INT_TAGACK_FGPI_2		(0x00000001 <<  8)
-#define MSI_INT_TAGACK_FGPI_3		(0x00000001 <<  9)
-#define MSI_INT_TAGACK_AI_0		(0x00000001 << 10)
-#define MSI_INT_TAGACK_AI_1		(0x00000001 << 11)
-#define MSI_INT_OVRFLW_VI0_0		(0x00000001 << 12)
-#define MSI_INT_OVRFLW_VI0_1		(0x00000001 << 13)
-#define MSI_INT_OVRFLW_VI0_2		(0x00000001 << 14)
-#define MSI_INT_OVRFLW_VI1_0		(0x00000001 << 15)
-#define MSI_INT_OVRFLW_VI1_1		(0x00000001 << 16)
-#define MSI_INT_OVRFLW_VI1_2		(0x00000001 << 17)
-#define MSI_INT_OVRFLW_FGPI_O		(0x00000001 << 18)
-#define MSI_INT_OVRFLW_FGPI_1		(0x00000001 << 19)
-#define MSI_INT_OVRFLW_FGPI_2		(0x00000001 << 20)
-#define MSI_INT_OVRFLW_FGPI_3		(0x00000001 << 21)
-#define MSI_INT_OVRFLW_AI_0		(0x00000001 << 22)
-#define MSI_INT_OVRFLW_AI_1		(0x00000001 << 23)
-#define MSI_INT_AVINT_VI0		(0x00000001 << 24)
-#define MSI_INT_AVINT_VI1		(0x00000001 << 25)
-#define MSI_INT_AVINT_FGPI_0		(0x00000001 << 26)
-#define MSI_INT_AVINT_FGPI_1		(0x00000001 << 27)
-#define MSI_INT_AVINT_FGPI_2		(0x00000001 << 28)
-#define MSI_INT_AVINT_FGPI_3		(0x00000001 << 29)
-#define MSI_INT_AVINT_AI_0		(0x00000001 << 30)
-#define MSI_INT_AVINT_AI_1		(0x00000001 << 31)
+#define CGU_ESR_9			0x204
+#define CGU_ESR_10			0x208
+#define CGU_ESR_11			0x20c
+#define CGU_ESR_12			0x210
+#define CGU_ESR_13			0x214
+#define CGU_ESR_FD_EN			(0x00000001 <<  0)
 
-#define MSI_INT_STATUS_H		0xfc4
-#define MSI_INT_UNMAPD_TC_INT		(0x00000001 <<  0)
-#define MSI_INT_EXTINT_0		(0x00000001 <<  1)
-#define MSI_INT_EXTINT_1		(0x00000001 <<  2)
-#define MSI_INT_EXTINT_2		(0x00000001 <<  3)
-#define MSI_INT_EXTINT_3		(0x00000001 <<  4)
-#define MSI_INT_EXTINT_4		(0x00000001 <<  5)
-#define MSI_INT_EXTINT_5		(0x00000001 <<  6)
-#define MSI_INT_EXTINT_6		(0x00000001 <<  7)
-#define MSI_INT_EXTINT_7		(0x00000001 <<  8)
-#define MSI_INT_EXTINT_8		(0x00000001 <<  9)
-#define MSI_INT_EXTINT_9		(0x00000001 << 10)
-#define MSI_INT_EXTINT_10		(0x00000001 << 11)
-#define MSI_INT_EXTINT_11		(0x00000001 << 12)
-#define MSI_INT_EXTINT_12		(0x00000001 << 13)
-#define MSI_INT_EXTINT_13		(0x00000001 << 14)
-#define MSI_INT_EXTINT_14		(0x00000001 << 15)
-#define MSI_INT_EXTINT_15		(0x00000001 << 16)
-#define MSI_INT_I2CINT_0		(0x00000001 << 17)
-#define MSI_INT_I2CINT_1		(0x00000001 << 18)
+#define CGU_FDC_0			0x218
+#define CGU_FDC_1			0x21c
+#define CGU_FDC_2			0x220
+#define CGU_FDC_3			0x224
+#define CGU_FDC_4			0x228
+#define CGU_FDC_5			0x22c
+#define CGU_FDC_6			0x230
+#define CGU_FDC_7			0x234
+#define CGU_FDC_8			0x238
+#define CGU_FDC_9			0x23c
+#define CGU_FDC_10			0x240
+#define CGU_FDC_11			0x244
+#define CGU_FDC_12			0x248
+#define CGU_FDC_13			0x24c
 
-#define MSI_INT_STATUS_CLR_L		0xfc8
-#define MSI_INT_STATUS_CLR_H		0xfcc
-#define MSI_INT_STATUS_SET_L		0xfd0
-#define MSI_INT_STATUS_SET_H		0xfd4
-#define MSI_INT_ENA_L			0xfd8
-#define MSI_INT_ENA_H			0xfdc
-#define MSI_INT_ENA_CLR_L		0xfe0
-#define MSI_INT_ENA_CLR_H		0xfe4
-#define MSI_INT_ENA_SET_L		0xfe8
-#define MSI_INT_ENA_SET_H		0xfec
 
-#define MSI_SW_RST			0xff0
-#define MSI_SW_RESET			(0x0001 <<  0)
 
-/* MMU */
-#define MMU_MODE			0x000
 
-#define MMU_DMA_CONFIG0			0x004
-#define MMU_DMA_CONFIG1			0x008
-#define MMU_DMA_CONFIG2			0x00c
-#define MMU_DMA_CONFIG3			0x010
-#define MMU_DMA_CONFIG4			0x014
-#define MMU_DMA_CONFIG5			0x018
-#define MMU_DMA_CONFIG6			0x01c
-#define MMU_DMA_CONFIG7			0x020
-#define MMU_DMA_CONFIG8			0x024
-#define MMU_DMA_CONFIG9			0x028
-#define MMU_DMA_CONFIG10		0x02c
-#define MMU_DMA_CONFIG11		0x030
-#define MMU_DMA_CONFIG12		0x034
-#define MMU_DMA_CONFIG13		0x038
-#define MMU_DMA_CONFIG14		0x03c
-#define MMU_DMA_CONFIG15		0x040
+/* -------------- DCS Registers -------------- */
 
-#define MMU_SW_RST			0xff0
-#define MMU_SW_RESET			(0x0001 <<  0)
+#define DCS				0x00014000
 
-#define MMU_PTA_BASE0			0x044 /* DMA 0 */
-#define MMU_PTA_BASE1			0x084 /* DMA 1 */
-#define MMU_PTA_BASE2			0x0c4 /* DMA 2 */
-#define MMU_PTA_BASE3			0x104 /* DMA 3 */
-#define MMU_PTA_BASE4			0x144 /* DMA 4 */
-#define MMU_PTA_BASE5			0x184 /* DMA 5 */
-#define MMU_PTA_BASE6			0x1c4 /* DMA 6 */
-#define MMU_PTA_BASE7			0x204 /* DMA 7 */
-#define MMU_PTA_BASE8			0x244 /* DMA 8 */
-#define MMU_PTA_BASE9			0x284 /* DMA 9 */
-#define MMU_PTA_BASE10			0x2c4 /* DMA 10 */
-#define MMU_PTA_BASE11			0x304 /* DMA 11 */
-#define MMU_PTA_BASE12			0x344 /* DMA 12 */
-#define MMU_PTA_BASE13			0x384 /* DMA 13 */
-#define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
-#define MMU_PTA_BASE15			0x404 /* DMA 15 */
+#define DCSC_CTRL			0x000
+#define DCSC_SEL_PLLDI			(0x03ffffff <<  5)
+#define DCSC_TOUT_SEL			(0x0000000f <<  1)
+#define DCSC_TOUT_OFF			(0x00000001 <<  0)
 
-#define MMU_PTA0_LSB			MMU_PTA_BASE + 0x00
-#define MMU_PTA0_MSB			MMU_PTA_BASE + 0x04
-#define MMU_PTA1_LSB			MMU_PTA_BASE + 0x08
-#define MMU_PTA1_MSB			MMU_PTA_BASE + 0x0c
-#define MMU_PTA2_LSB			MMU_PTA_BASE + 0x10
-#define MMU_PTA2_MSB			MMU_PTA_BASE + 0x14
-#define MMU_PTA3_LSB			MMU_PTA_BASE + 0x18
-#define MMU_PTA3_MSB			MMU_PTA_BASE + 0x1c
-#define MMU_PTA4_LSB			MMU_PTA_BASE + 0x20
-#define MMU_PTA4_MSB			MMU_PTA_BASE + 0x24
-#define MMU_PTA5_LSB			MMU_PTA_BASE + 0x28
-#define MMU_PTA5_MSB			MMU_PTA_BASE + 0x2c
-#define MMU_PTA6_LSB			MMU_PTA_BASE + 0x30
-#define MMU_PTA6_MSB			MMU_PTA_BASE + 0x34
-#define MMU_PTA7_LSB			MMU_PTA_BASE + 0x38
-#define MMU_PTA7_MSB			MMU_PTA_BASE + 0x3c
+#define DCSC_ADDR			0x00c
+#define DCSC_ERR_TOUT_ADDR		(0x3fffffff <<  2)
 
-/* BAM */
-#define BAM_VI0_0_DMA_BUF_MODE		0x000
+#define DCSC_STAT			0x010
+#define DCSC_ERR_TOUT_GNT		(0x0000001f << 24)
+#define DCSC_ERR_TOUT_SEL		(0x0000007f << 10)
+#define DCSC_ERR_TOUT_READ		(0x00000001 <<  8)
+#define DCSC_ERR_TOUT_MASK		(0x0000000f <<  4)
+#define DCSC_ERR_ACK			(0x00000001 <<  1)
 
-#define BAM_VI0_0_ADDR_OFFST_0		0x004
-#define BAM_VI0_0_ADDR_OFFST_1		0x008
-#define BAM_VI0_0_ADDR_OFFST_2		0x00c
-#define BAM_VI0_0_ADDR_OFFST_3		0x010
-#define BAM_VI0_0_ADDR_OFFST_4		0x014
-#define BAM_VI0_0_ADDR_OFFST_5		0x018
-#define BAM_VI0_0_ADDR_OFFST_6		0x01c
-#define BAM_VI0_0_ADDR_OFFST_7		0x020
+#define DCSC_FEATURES			0x040
+#define DCSC_UNIQUE_ID			(0x00000007 << 16)
+#define DCSC_SECURITY			(0x00000001 << 14)
+#define DCSC_NUM_BASE_REGS		(0x00000003 << 11)
+#define DCSC_NUM_TARGETS		(0x0000001f <<  5)
+#define DCSC_NUM_INITIATORS		(0x0000001f <<  0)
 
-#define BAM_VI0_1_DMA_BUF_MODE		0x024
-#define BAM_VI0_1_ADDR_OFFST_0		0x028
-#define BAM_VI0_1_ADDR_OFFST_1		0x02c
-#define BAM_VI0_1_ADDR_OFFST_2		0x030
-#define BAM_VI0_1_ADDR_OFFST_3		0x034
-#define BAM_VI0_1_ADDR_OFFST_4		0x038
-#define BAM_VI0_1_ADDR_OFFST_5		0x03c
-#define BAM_VI0_1_ADDR_OFFST_6		0x040
-#define BAM_VI0_1_ADDR_OFFST_7		0x044
+#define DCSC_BASE_REG0			0x100
+#define DCSC_BASE_N_REG			(0x00000fff << 20)
 
-#define BAM_VI0_2_DMA_BUF_MODE		0x048
-#define BAM_VI0_2_ADDR_OFFST_0		0x04c
-#define BAM_VI0_2_ADDR_OFFST_1		0x050
-#define BAM_VI0_2_ADDR_OFFST_2		0x054
-#define BAM_VI0_2_ADDR_OFFST_3		0x058
-#define BAM_VI0_2_ADDR_OFFST_4		0x05c
-#define BAM_VI0_2_ADDR_OFFST_5		0x060
-#define BAM_VI0_2_ADDR_OFFST_6		0x064
-#define BAM_VI0_2_ADDR_OFFST_7		0x068
+#define DCSC_INT_CLR_ENABLE		0xfd8
+#define DCSC_INT_CLR_ENABLE_TOUT	(0x00000001 <<  1)
+#define DCSC_INT_CLR_ENABLE_ERROR	(0x00000001 <<  0)
 
+#define DCSC_INT_SET_ENABLE		0xfdc
+#define DCSC_INT_SET_ENABLE_TOUT	(0x00000001 <<  1)
+#define DCSC_INT_SET_ENABLE_ERROR	(0x00000001 <<  0)
 
-#define BAM_VI1_0_DMA_BUF_MODE		0x06c
-#define BAM_VI1_0_ADDR_OFFST_0		0x070
-#define BAM_VI1_0_ADDR_OFFST_1		0x074
-#define BAM_VI1_0_ADDR_OFFST_2		0x078
-#define BAM_VI1_0_ADDR_OFFST_3		0x07c
-#define BAM_VI1_0_ADDR_OFFST_4		0x080
-#define BAM_VI1_0_ADDR_OFFST_5		0x084
-#define BAM_VI1_0_ADDR_OFFST_6		0x088
-#define BAM_VI1_0_ADDR_OFFST_7		0x08c
+#define DCSC_INT_STATUS			0xfe0
+#define DCSC_INT_STATUS_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_STATUS_ERROR		(0x00000001 <<  0)
 
-#define BAM_VI1_1_DMA_BUF_MODE		0x090
-#define BAM_VI1_1_ADDR_OFFST_0		0x094
-#define BAM_VI1_1_ADDR_OFFST_1		0x098
-#define BAM_VI1_1_ADDR_OFFST_2		0x09c
-#define BAM_VI1_1_ADDR_OFFST_3		0x0a0
-#define BAM_VI1_1_ADDR_OFFST_4		0x0a4
-#define BAM_VI1_1_ADDR_OFFST_5		0x0a8
-#define BAM_VI1_1_ADDR_OFFST_6		0x0ac
-#define BAM_VI1_1_ADDR_OFFST_7		0x0b0
+#define DCSC_INT_ENABLE			0xfe4
+#define DCSC_INT_ENABLE_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_ENABLE_ERROR		(0x00000001 <<  0)
 
-#define BAM_VI1_2_DMA_BUF_MODE		0x0b4
-#define BAM_VI1_2_ADDR_OFFST_0		0x0b8
-#define BAM_VI1_2_ADDR_OFFST_1		0x0bc
-#define BAM_VI1_2_ADDR_OFFST_2		0x0c0
-#define BAM_VI1_2_ADDR_OFFST_3		0x0c4
-#define BAM_VI1_2_ADDR_OFFST_4		0x0c8
-#define BAM_VI1_2_ADDR_OFFST_5		0x0cc
-#define BAM_VI1_2_ADDR_OFFST_6		0x0d0
-#define BAM_VI1_2_ADDR_OFFST_7		0x0d4
+#define DCSC_INT_CLR_STATUS		0xfe8
+#define DCSC_INT_CLEAR_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_CLEAR_ERROR		(0x00000001 <<  0)
 
+#define DCSC_INT_SET_STATUS		0xfec
+#define DCSC_INT_SET_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_SET_ERROR		(0x00000001 <<  0)
 
-#define BAM_FGPI0_DMA_BUF_MODE		0x0d8
-#define BAM_FGPI0_ADDR_OFFST_0		0x0dc
-#define BAM_FGPI0_ADDR_OFFST_1		0x0e0
-#define BAM_FGPI0_ADDR_OFFST_2		0x0e4
-#define BAM_FGPI0_ADDR_OFFST_3		0x0e8
-#define BAM_FGPI0_ADDR_OFFST_4		0x0ec
-#define BAM_FGPI0_ADDR_OFFST_5		0x0f0
-#define BAM_FGPI0_ADDR_OFFST_6		0x0f4
-#define BAM_FGPI0_ADDR_OFFST_7		0x0f8
 
-#define BAM_FGPI1_DMA_BUF_MODE		0x0fc
-#define BAM_FGPI1_ADDR_OFFST_0		0x100
-#define BAM_FGPI1_ADDR_OFFST_1		0x104
-#define BAM_FGPI1_ADDR_OFFST_2		0x108
-#define BAM_FGPI1_ADDR_OFFST_3		0x10c
-#define BAM_FGPI1_ADDR_OFFST_4		0x110
-#define BAM_FGPI1_ADDR_OFFST_5		0x114
-#define BAM_FGPI1_ADDR_OFFST_6		0x118
-#define BAM_FGPI1_ADDR_OFFST_7		0x11c
 
-#define BAM_FGPI2_DMA_BUF_MODE		0x120
-#define BAM_FGPI2_ADDR_OFFST_0		0x124
-#define BAM_FGPI2_ADDR_OFFST_1		0x128
-#define BAM_FGPI2_ADDR_OFFST_2		0x12c
-#define BAM_FGPI2_ADDR_OFFST_3		0x130
-#define BAM_FGPI2_ADDR_OFFST_4		0x134
-#define BAM_FGPI2_ADDR_OFFST_5		0x138
-#define BAM_FGPI2_ADDR_OFFST_6		0x13c
-#define BAM_FGPI2_ADDR_OFFST_7		0x140
 
-#define BAM_FGPI3_DMA_BUF_MODE		0x144
-#define BAM_FGPI3_ADDR_OFFST_0		0x148
-#define BAM_FGPI3_ADDR_OFFST_1		0x14c
-#define BAM_FGPI3_ADDR_OFFST_2		0x150
-#define BAM_FGPI3_ADDR_OFFST_3		0x154
-#define BAM_FGPI3_ADDR_OFFST_4		0x158
-#define BAM_FGPI3_ADDR_OFFST_5		0x15c
-#define BAM_FGPI3_ADDR_OFFST_6		0x160
-#define BAM_FGPI3_ADDR_OFFST_7		0x164
+/* -------------- GREG Registers -------------- */
 
+#define GREG				0x00012000
 
-#define BAM_AI0_DMA_BUF_MODE		0x168
-#define BAM_AI0_ADDR_OFFST_0		0x16c
-#define BAM_AI0_ADDR_OFFST_1		0x170
-#define BAM_AI0_ADDR_OFFST_2		0x174
-#define BAM_AI0_ADDR_OFFST_3		0x178
-#define BAM_AI0_ADDR_OFFST_4		0x17c
-#define BAM_AIO_ADDR_OFFST_5		0x180
-#define BAM_AI0_ADDR_OFFST_6		0x184
-#define BAM_AIO_ADDR_OFFST_7		0x188
+#define GREG_SUBSYS_CONFIG		0x000
+#define GREG_SUBSYS_ID			(0x0000ffff << 16)
+#define GREG_SUBSYS_VID			(0x0000ffff <<  0)
 
-#define BAM_AI1_DMA_BUF_MODE		0x18c
-#define BAM_AI1_ADDR_OFFST_0		0x190
-#define BAM_AI1_ADDR_OFFST_1		0x194
-#define BAM_AI1_ADDR_OFFST_2		0x198
-#define BAM_AI1_ADDR_OFFST_3		0x19c
-#define BAM_AI1_ADDR_OFFST_4		0x1a0
-#define BAM_AI1_ADDR_OFFST_5		0x1a4
-#define BAM_AI1_ADDR_OFFST_6		0x1a8
-#define BAM_AI1_ADDR_OFFST_7		0x1ac
+#define GREG_MSI_BAR_PMCSR		0x004
+#define GREG_PMCSR_SCALE_7		(0x00000003 << 30)
+#define GREG_PMCSR_SCALE_6		(0x00000003 << 28)
+#define GREG_PMCSR_SCALE_5		(0x00000003 << 26)
+#define GREG_PMCSR_SCALE_4		(0x00000003 << 24)
+#define GREG_PMCSR_SCALE_3		(0x00000003 << 22)
+#define GREG_PMCSR_SCALE_2		(0x00000003 << 20)
+#define GREG_PMCSR_SCALE_1		(0x00000003 << 18)
+#define GREG_PMCSR_SCALE_0		(0x00000003 << 16)
+
+#define GREG_BAR_WIDTH_17		(0x0000001e <<  8)
+#define GREG_BAR_WIDTH_18		(0x0000001c <<  8)
+#define GREG_BAR_WIDTH_19		(0x00000018 <<  8)
+#define GREG_BAR_WIDTH_20		(0x00000010 <<  8)
+
+#define GREG_BAR_PREFETCH		(0x00000001 <<  3)
+#define GREG_MSI_MM_CAP1		(0x00000000 <<  0) // FIXME !
+#define GREG_MSI_MM_CAP2		(0x00000001 <<  0)
+#define GREG_MSI_MM_CAP4		(0x00000002 <<  0)
+#define GREG_MSI_MM_CAP8		(0x00000003 <<  0)
+#define GREG_MSI_MM_CAP16		(0x00000004 <<  0)
+#define GREG_MSI_MM_CAP32		(0x00000005 <<  0)
 
-#define BAM_SW_RST			0xff0
-#define BAM_SW_RESET			(0x0001 <<  0)
+#define GREG_PMCSR_DATA_1		0x008
+#define GREG_PMCSR_DATA_2		0x00c
+#define GREG_VI_CTRL			0x010
+#define GREG_FGPI_CTRL			0x014
 
-/* I2C */
-#define RX_FIFO				0x000
-#define RX_BYTE				(0x000000ff <<  0)
+#define GREG_RSTU_CTRL			0x018
+#define GREG_BOOT_READY			(0x00000001 << 13)
+#define GREG_RESET_REQ			(0x00000001 << 12)
+#define GREG_IP_RST_RELEASE		(0x00000001 << 11)
+#define GREG_ADAPTER_RST_RELEASE	(0x00000001 << 10)
+#define GREG_PCIE_CORE_RST_RELEASE	(0x00000001 <<  9)
+#define GREG_BOOT_IP_RST_RELEASE	(0x00000001 <<  8)
+#define GREG_BOOT_RST_RELEASE		(0x00000001 <<  7)
+#define GREG_CGU_RST_RELEASE		(0x00000001 <<  6)
+#define GREG_IP_RST_ASSERT		(0x00000001 <<  5)
+#define GREG_ADAPTER_RST_ASSERT		(0x00000001 <<  4)
+#define GREG_RST_ASSERT			(0x00000001 <<  3)
+#define GREG_BOOT_IP_RST_ASSERT		(0x00000001 <<  2)
+#define GREG_BOOT_RST_ASSERT		(0x00000001 <<  1)
+#define GREG_CGU_RST_ASSERT		(0x00000001 <<  0)
 
-#define TX_FIFO				0x000
-#define STOP_BIT			(0x00000001 <<  9)
-#define START_BIT			(0x00000001 <<  8)
-#define TX_BYTE				(0x000000ff <<  0)
+#define GREG_I2C_CTRL			0x01c
+#define GREG_I2C_SLAVE_ADDR		(0x0000007f <<  0)
 
-#define I2C_STATUS			0x008
-#define TRANSMIT			(0x00000001 << 11)
-#define RECEIVE				(0x00000001 << 10)
-#define TRANSMIT_S_PROG			(0x00000001 <<  9)
-#define TRANSMIT_S_CLEAR		(0x00000001 <<  8)
-#define TRANSMIT_PROG			(0x00000001 <<  7)
-#define TRANSMIT_CLEAR			(0x00000001 <<  6)
-#define RECEIVE_PROG			(0x00000001 <<  5)
-#define RECEIVE_CLEAR			(0x00000001 <<  4)
-#define SDA_LINE			(0x00000001 <<  3)
-#define SCL_LINE			(0x00000001 <<  2)
-#define START_STOP_FLAG			(0x00000001 <<  1)
-#define MODE_STATUS			(0x00000001 <<  0)
+#define GREG_OVFLW_CTRL			0x020
+#define GREG_OVERFLOW_ENABLE		(0x00001fff <<  0)
 
-#define I2C_CONTROL			0x00c
-#define SCL_CONTROL			(0x00000001 <<  7)
-#define SDA_CONTROL			(0x00000001 <<  6)
-#define RECEIVE_PROTECT			(0x00000001 <<  5)
-#define RECEIVE_PRO_READ		(0x00000001 <<  4)
-#define TRANS_SELF_CLEAR		(0x00000001 <<  3)
-#define TRANS_S_SELF_CLEAR		(0x00000001 <<  2)
-#define SLAVE_ADDR_10BIT		(0x00000001 <<  1)
-#define RESET				(0x00000001 <<  0)
+#define GREG_TAG_ACK_FLEN		0x024
+#define GREG_TAG_ACK_FLEN_1B		(0x00000000 <<  0)
+#define GREG_TAG_ACK_FLEN_2B		(0x00000001 <<  0)
+#define GREG_TAG_ACK_FLEN_4B		(0x00000002 <<  0)
+#define GREG_TAG_ACK_FLEN_8B		(0x00000003 <<  0)
+
+#define GREG_VIDEO_IN_CTRL		0x028
 
-#define CLOCK_DIVISOR_HIGH		0x010
-#define CLOCK_HIGH			(0x0000ffff <<  0)
+#define GREG_SPARE_1			0x02c
+#define GREG_SPARE_2			0x030
+#define GREG_SPARE_3			0x034
+#define GREG_SPARE_4			0x038
+#define GREG_SPARE_5			0x03c
+#define GREG_SPARE_6			0x040
+#define GREG_SPARE_7			0x044
+#define GREG_SPARE_8			0x048
+#define GREG_SPARE_9			0x04c
+#define GREG_SPARE_10			0x050
+#define GREG_SPARE_11			0x054
+#define GREG_SPARE_12			0x058
+#define GREG_SPARE_13			0x05c
+#define GREG_SPARE_14			0x060
+#define GREG_SPARE_15			0x064
 
-#define CLOCK_DIVISOR_LOW		0x014
-#define CLOCK_LOW			(0x0000ffff <<  0)
+#define GREG_FAIL_DISABLE		0x068
+#define GREG_BOOT_FAIL_DISABLE		(0x00000001 <<  0)
 
-#define RX_LEVEL			0x01c
-#define RECEIVE_RANGE			(0x0000007f <<  0)
+#define GREG_SW_RST			0xff0
+#define GREG_SW_RESET			(0x00000001 <<  0)
 
-#define TX_LEVEL			0x020
-#define TRANSMIT_RANGE			(0x0000007f <<  0)
 
-#define SDA_HOLD			0x028
-#define HOLD_TIME			(0x0000007f <<  0)
 
-#define MODULE_CONF			0xfd4
-#define INT_CLR_ENABLE			0xfd8
-#define CLR_ENABLE_STFNF		(0x00000001 << 12)
-#define CLR_ENABLE_MTFNF		(0x00000001 << 11)
-#define CLR_ENABLE_RFDA			(0x00000001 << 10)
-#define CLR_ENABLE_RFF			(0x00000001 <<  9)
-#define CLR_ENABLE_STDR			(0x00000001 <<  8)
-#define CLR_ENABLE_MTDR			(0x00000001 <<  7)
-#define CLR_ENABLE_IBE			(0x00000001 <<  6)
-#define CLR_ENABLE_MSMC			(0x00000001 <<  5)
-#define CLR_ENABLE_SRSD			(0x00000001 <<  4)
-#define CLR_ENABLE_STSD			(0x00000001 <<  3)
-#define CLR_ENABLE_MTNA			(0x00000001 <<  2)
-#define CLR_ENABLE_MAF			(0x00000001 <<  1)
-#define CLR_ENABLE_MTD			(0x00000001 <<  0)
 
-#define INT_SET_ENABLE			0xfdc
-#define SET_ENABLE_STFNF		(0x00000001 << 12)
-#define SET_ENABLE_MTFNF		(0x00000001 << 11)
-#define SET_ENABLE_RFDA			(0x00000001 << 10)
-#define SET_ENABLE_RFF			(0x00000001 <<  9)
-#define SET_ENABLE_STDR			(0x00000001 <<  8)
-#define SET_ENABLE_MTDR			(0x00000001 <<  7)
-#define SET_ENABLE_IBE			(0x00000001 <<  6)
-#define SET_ENABLE_MSMC			(0x00000001 <<  5)
-#define SET_ENABLE_SRSD			(0x00000001 <<  4)
-#define SET_ENABLE_STSD			(0x00000001 <<  3)
-#define SET_ENABLE_MTNA			(0x00000001 <<  2)
-#define SET_ENABLE_MAF			(0x00000001 <<  1)
-#define SET_ENABLE_MTD			(0x00000001 <<  0)
+/* BAR = 20 bits */
 
-#define INT_STATUS			0xfe0
-#define INTERRUPT_STFNF			(0x00000001 << 12)
-#define INTERRUPT_MTFNF			(0x00000001 << 11)
-#define INTERRUPT_RFDA			(0x00000001 << 10)
-#define INTERRUPTE_RFF			(0x00000001 <<  9)
-#define SLAVE_INTERRUPT_STDR		(0x00000001 <<  8)
-#define MASTER_INTERRUPT_MTDR		(0x00000001 <<  7)
-#define I2C_ERROR_IBE			(0x00000001 <<  6)
-#define MODE_CHANGE_INTER_MSMC		(0x00000001 <<  5)
-#define SLAVE_RECEIVE_INTER_SRSD	(0x00000001 <<  4)
-#define SLAVE_TRANSMIT_INTER_STSD	(0x00000001 <<  3)
-#define ACK_INTER_MTNA			(0x00000001 <<  2)
-#define FAILURE_INTER_MAF		(0x00000001 <<  1)
-#define INTERRUPT_MTD			(0x00000001 <<  0)
+/* -------------- PHI1 Registers -------------- */
 
-#define INT_ENABLE			0xfe4
-#define ENABLE_STFNF			(0x00000001 << 12)
-#define ENABLE_MTFNF			(0x00000001 << 11)
-#define ENABLE_RFDA			(0x00000001 << 10)
-#define ENABLE_RFF			(0x00000001 <<  9)
-#define ENABLE_STDR			(0x00000001 <<  8)
-#define ENABLE_MTDR			(0x00000001 <<  7)
-#define ENABLE_IBE			(0x00000001 <<  6)
-#define ENABLE_MSMC			(0x00000001 <<  5)
-#define ENABLE_SRSD			(0x00000001 <<  4)
-#define ENABLE_STSD			(0x00000001 <<  3)
-#define ENABLE_MTNA			(0x00000001 <<  2)
-#define ENABLE_MAF			(0x00000001 <<  1)
-#define ENABLE_MTD			(0x00000001 <<  0)
+#define PHI_1				0x00020000
 
-#define INT_CLR_STATUS			0xfe8
-#define CLR_STATUS_STFNF		(0x00000001 << 12)
-#define CLR_STATUS_MTFNF		(0x00000001 << 11)
-#define CLR_STATUS_RFDA			(0x00000001 << 10)
-#define CLR_STATUS_RFF			(0x00000001 <<  9)
-#define CLR_STATUS_STDR			(0x00000001 <<  8)
-#define CLR_STATUS_MTDR			(0x00000001 <<  7)
-#define CLR_STATUS_IBE			(0x00000001 <<  6)
-#define CLR_STATUS_MSMC			(0x00000001 <<  5)
-#define CLR_STATUS_SRSD			(0x00000001 <<  4)
-#define CLR_STATUS_STSD			(0x00000001 <<  3)
-#define CLR_STATUS_MTNA			(0x00000001 <<  2)
-#define CLR_STATUS_MAF			(0x00000001 <<  1)
-#define CLR_STATIS_MTD			(0x00000001 <<  0)
 
-#define INT_SET_STATUS			0xfec
-#define SET_STATUS_STFNF		(0x00000001 << 12)
-#define SET_STATUS_MTFNF		(0x00000001 << 11)
-#define SET_STATUS_RFDA			(0x00000001 << 10)
-#define SET_STATUS_RFF			(0x00000001 <<  9)
-#define SET_STATUS_STDR			(0x00000001 <<  8)
-#define SET_STATUS_MTDR			(0x00000001 <<  7)
-#define SET_STATUS_IBE			(0x00000001 <<  6)
-#define SET_STATUS_MSMC			(0x00000001 <<  5)
-#define SET_STATUS_SRSD			(0x00000001 <<  4)
-#define SET_STATUS_STSD			(0x00000001 <<  3)
-#define SET_STATUS_MTNA			(0x00000001 <<  2)
-#define SET_STATUS_MAF			(0x00000001 <<  1)
-#define SET_STATIS_MTD			(0x00000001 <<  0)
 
 #endif /* __SAA716x_REG_H */

From b872f5083539176d80798ee464cef266f4019fc7 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:49:03 +0400
Subject: [PATCH 023/364] saa716x: Implement internal Boot mode

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 67 +++++++++++++++++++++++-
 1 file changed, 65 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index c030c40ce59f7..d8fd5ea66cb32 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -47,9 +47,72 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static int saa716x_int_boot(struct saa716x_dev *saa716x)
+static void saa716x_int_boot(struct saa716x_dev *saa716x)
 {
-	return 0;
+	/* Write GREG boot_ready to 0
+	 * DW_0 = 0x0001_2018
+	 * DW_1 = 0x0000_0000
+	 */
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00000000);
+
+	/* Clear VI0 interrupt
+	 * DW_2 = 0x0000_0fe8
+	 * DW_3 = 0x0000_03ff
+	 */
+	SAA716x_WR(VI0, INT_CLR_STATUS, 0x000003ff);
+
+	/* Clear VI1 interrupt
+	 * DW_4 = 0x0000_1fe8
+	 * DW_5 = 0x0000_03ff
+	 */
+	SAA716x_WR(VI1, INT_CLR_STATUS, 0x000003ff);
+
+	/* CLear FGPI0 interrupt
+	 * DW_6 = 0x0000_2fe8
+	 * DW_7 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI0, INT_CLR_STATUS, 0x0000007f);
+
+	/* Clear FGPI1 interrupt
+	 * DW_8 = 0x0000_3fe8
+	 * DW_9 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI1, INT_CLR_STATUS, 0x0000007f);
+
+	/* Clear FGPI2 interrupt
+	 * DW_10 = 0x0000_4fe8
+	 * DW_11 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI2, INT_CLR_STATUS, 0x0000007f);
+
+	/* Clear FGPI3 interrupt
+	 * DW_12 = 0x0000_5fe8
+	 * DW_13 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI3, INT_CLR_STATUS, 0x0000007f);
+
+	/* Clear AI0 interrupt
+	 * DW_14 = 0x0000_6020
+	 * DW_15 = 0x0000_000f
+	 */
+	SAA716x_WR(AI0, AI_INT_ACK, 0x0000000f)
+
+	/* Clear AI1 interrupt
+	 * DW_16 = 0x0000_7020
+	 * DW_17 = 0x0000_200f
+	 */
+	SAA716x_WR(AI1, AI_INT_ACK, 0x0000000f);
+
+	/* Set GREG boot_ready bit to 1
+	 * DW_18 = 0x0001_2018
+	 * DW_19 = 0x0000_2000
+	 */
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00002000);
+
+	/* End of Boot script command
+	 * DW_20 = 0x0000_0006
+	 * Where to write this value ??
+	 */
 }
 
 int saa716x_core_boot(struct saa716x_dev *saa716x)

From 4cf678b2653a56c6ea2fb8144f842790a0abc7f3 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:49:51 +0400
Subject: [PATCH 024/364] saa716x: Update register definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c |  2 +-
 drivers/media/pci/saa716x/saa716x_reg.h  | 55 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_vip.c  |  8 ++--
 3 files changed, 60 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index d8fd5ea66cb32..8b93964c06068 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -95,7 +95,7 @@ static void saa716x_int_boot(struct saa716x_dev *saa716x)
 	 * DW_14 = 0x0000_6020
 	 * DW_15 = 0x0000_000f
 	 */
-	SAA716x_WR(AI0, AI_INT_ACK, 0x0000000f)
+	SAA716x_WR(AI0, AI_INT_ACK, 0x0000000f);
 
 	/* Clear AI1 interrupt
 	 * DW_16 = 0x0000_7020
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 67d12f924cbf7..d00195615627d 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -75,6 +75,61 @@
 #define VI_REVS				(0x00000001 <<  1)
 #define VI_REHS				(0x00000001 <<  0)
 
+#define INT_STATUS			0xfe0
+#define VI_STAT_FID_AUX			(0x00000001 << 31)
+#define VI_STAT_FID_VID			(0x00000001 << 30)
+#define VI_STAT_FID_VPI			(0x00000001 << 29)
+#define VI_STAT_LINE_COUNT		(0x00000fff << 16)
+#define VI_STAT_AUX_OVRFLW		(0x00000001 <<  9)
+#define VI_STAT_VID_OVRFLW		(0x00000001 <<  8)
+#define VI_STAT_WIN_SEQBRK		(0x00000001 <<  7)
+#define VI_STAT_FID_SEQBRK		(0x00000001 <<  6)
+#define VI_STAT_LINE_THRESH		(0x00000001 <<  5)
+#define VI_STAT_AUX_WRAP		(0x00000001 <<  4)
+#define VI_STAT_AUX_START_IN		(0x00000001 <<  3)
+#define VI_STAT_AUX_END_OUT		(0x00000001 <<  2)
+#define VI_STAT_VID_START_IN		(0x00000001 <<  1)
+#define VI_STAT_VID_END_OUT		(0x00000001 <<  0)
+
+#define INT_ENABLE			0xfe4
+#define VI_ENABLE_AUX_OVRFLW		(0x00000001 <<  9)
+#define VI_ENABLE_VID_OVRFLW		(0x00000001 <<  8)
+#define VI_ENABLE_WIN_SEQBRK		(0x00000001 <<  7)
+#define VI_ENABLE_FID_SEQBRK		(0x00000001 <<  6)
+#define VI_ENABLE_LINE_THRESH		(0x00000001 <<  5)
+#define VI_ENABLE_AUX_WRAP		(0x00000001 <<  4)
+#define VI_ENABLE_AUX_START_IN		(0x00000001 <<  3)
+#define VI_ENABLE_AUX_END_OUT		(0x00000001 <<  2)
+#define VI_ENABLE_VID_START_IN		(0x00000001 <<  1)
+#define VI_ENABLE_VID_END_OUT		(0x00000001 <<  0)
+
+#define INT_CLR_STATUS			0xfe8
+#define VI_CLR_STATUS_AUX_OVRFLW	(0x00000001 <<  9)
+#define VI_CLR_STATUS_VID_OVRFLW	(0x00000001 <<  8)
+#define VI_CLR_STATUS_WIN_SEQBRK	(0x00000001 <<  7)
+#define VI_CLR_STATUS_FID_SEQBRK	(0x00000001 <<  6)
+#define VI_CLR_STATUS_LINE_THRESH	(0x00000001 <<  5)
+#define VI_CLR_STATUS_AUX_WRAP		(0x00000001 <<  4)
+#define VI_CLR_STATUS_AUX_START_IN	(0x00000001 <<  3)
+#define VI_CLR_STATUS_AUX_END_OUT	(0x00000001 <<  2)
+#define VI_CLR_STATUS_VID_START_IN	(0x00000001 <<  1)
+#define VI_CLR_STATUS_VID_END_OUT	(0x00000001 <<  0)
+
+#define INT_SET_STATUS			0xfec
+#define VI_SET_STATUS_AUX_OVRFLW	(0x00000001 <<  9)
+#define VI_SET_STATUS_VID_OVRFLW	(0x00000001 <<  8)
+#define VI_SET_STATUS_WIN_SEQBRK	(0x00000001 <<  7)
+#define VI_SET_STATUS_FID_SEQBRK	(0x00000001 <<  6)
+#define VI_SET_STATUS_LINE_THRESH	(0x00000001 <<  5)
+#define VI_SET_STATUS_AUX_WRAP		(0x00000001 <<  4)
+#define VI_SET_STATUS_AUX_START_IN	(0x00000001 <<  3)
+#define VI_SET_STATUS_AUX_END_OUT	(0x00000001 <<  2)
+#define VI_SET_STATUS_VID_START_IN	(0x00000001 <<  1)
+#define VI_SET_STATUS_VID_END_OUT	(0x00000001 <<  0)
+
+#define VIP_POWER_DOWN			0xff4
+#define VI_PWR_DWN			(0x00000001 << 31)
+
 
 
 
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index dfbcfd40e0b66..9f94ef20bf28b 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -3,9 +3,9 @@
 
 void saa716x_vipint_disable(struct saa716x_dev *saa716x)
 {
-	SAA716x_WR(VI0, 0xfe4, 0); /* disable VI 0 IRQ */
-	SAA716x_WR(VI1, 0xfe4, 0); /* disable VI 1 IRQ */
-	SAA716x_WR(VI0, 0xfe8, 0x3ff); /* clear IRQ */
-	SAA716x_WR(VI1, 0xfe8, 0x3ff); /* clear IRQ */
+	SAA716x_WR(VI0, INT_ENABLE, 0); /* disable VI 0 IRQ */
+	SAA716x_WR(VI1, INT_ENABLE, 0); /* disable VI 1 IRQ */
+	SAA716x_WR(VI0, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
+	SAA716x_WR(VI1, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
 }
 EXPORT_SYMBOL_GPL(saa716x_vipint_disable);

From 514079ee82b2c074880b82011cca2da9bce56fdb Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:50:42 +0400
Subject: [PATCH 025/364] saa716x: Still scratching

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 1 +
 drivers/media/pci/saa716x/saa716x_priv.h   | 3 ---
 drivers/media/pci/saa716x/saa716x_vip.c    | 7 +++++++
 drivers/media/pci/saa716x/saa716x_vip.h    | 7 +++++++
 4 files changed, 15 insertions(+), 3 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_vip.h

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index fa771b43e3ad9..7527f1a4fa188 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -14,6 +14,7 @@
 
 #include <linux/i2c.h>
 #include "saa716x_priv.h"
+#include "saa716x_vip.h"
 #include "saa716x_budget.h"
 
 unsigned int verbose;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index d8e412fb2051e..3abfadd0e1c89 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -125,9 +125,6 @@ extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 /* CGU */
 extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
 
-/* VIP */
-extern void saa716x_vipint_disable(struct saa716x_dev *saa716x);
-
 /* FGPI */
 extern void saa716x_fgpiint_disable(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 9f94ef20bf28b..7e01f1ad12d06 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -9,3 +9,10 @@ void saa716x_vipint_disable(struct saa716x_dev *saa716x)
 	SAA716x_WR(VI1, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
 }
 EXPORT_SYMBOL_GPL(saa716x_vipint_disable);
+
+void saa716x_vip_disable(struct saa716x_dev *saa716x)
+{
+       SAA716x_WR(VI0, VIP_POWER_DOWN, VI_PWR_DWN);
+       SAA716x_WR(VI1, VIP_POWER_DOWN, VI_PWR_DWN);
+}
+EXPORT_SYMBOL_GPL(saa716x_vip_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_vip.h b/drivers/media/pci/saa716x/saa716x_vip.h
new file mode 100644
index 0000000000000..61ecba88a78b9
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_vip.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_VIP_H
+#define __SAA716x_VIP_H
+
+extern void saa716x_vipint_disable(struct saa716x_dev *saa716x);
+extern void saa716x_vip_disable(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_VIP_H */

From 965dad36403652e393b8fbfefac0cd96a914af0d Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:51:55 +0400
Subject: [PATCH 026/364] saa716x: Initialize MSI

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 7 +++++++
 drivers/media/pci/saa716x/saa716x_msi.c    | 1 +
 drivers/media/pci/saa716x/saa716x_msi.h    | 7 +++++++
 3 files changed, 15 insertions(+)
 create mode 100644 drivers/media/pci/saa716x/saa716x_msi.h

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 7527f1a4fa188..fc90f6a169514 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -15,6 +15,7 @@
 #include <linux/i2c.h>
 #include "saa716x_priv.h"
 #include "saa716x_vip.h"
+#include "saa716x_msi.h"
 #include "saa716x_budget.h"
 
 unsigned int verbose;
@@ -99,6 +100,12 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	}
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
 
+	err = saa716x_msi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
+		goto fail2;
+	}
+
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 0171fe27b6c55..ea2751b02f417 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -108,6 +108,7 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(saa716x_msi_init);
 
 void saa716x_msiint_disable(struct saa716x_dev *saa716x)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
new file mode 100644
index 0000000000000..2320e575f3236
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_msi.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_MSI_H
+#define __SAA716x_MSI_H
+
+extern int saa716x_msi_init(struct saa716x_dev *saa716x);
+extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_MSI_H */

From ce32814b825f46b65ace15a9c047e9c45624cc8f Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:52:38 +0400
Subject: [PATCH 027/364] saa716x: Cleanup internal Boot configuration

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 135 +++++++++++++++--------
 drivers/media/pci/saa716x/saa716x_boot.h |  13 +++
 drivers/media/pci/saa716x/saa716x_priv.h |   7 +-
 3 files changed, 103 insertions(+), 52 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_boot.h

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 8b93964c06068..c5da16859f37e 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -47,72 +47,115 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	return 0;
 }
 
+/* Internal Bootscript configuration */
 static void saa716x_int_boot(struct saa716x_dev *saa716x)
 {
-	/* Write GREG boot_ready to 0
-	 * DW_0 = 0x0001_2018
-	 * DW_1 = 0x0000_0000
+	/* #1 Configure PCI COnfig space
+	 * GREG_JETSTR_CONFIG_0
 	 */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00000000);
+	SAA716x_WR(GREG, GREG_SUBSYS_CONFIG, saa716x->pdev->subsystem_vendor);
 
-	/* Clear VI0 interrupt
-	 * DW_2 = 0x0000_0fe8
-	 * DW_3 = 0x0000_03ff
+	/* GREG_JETSTR_CONFIG_1
+	 * pmcsr_scale:7 = 0x00
+	 * pmcsr_scale:6 = 0x00
+	 * pmcsr_scale:5 = 0x00
+	 * pmcsr_scale:4 = 0x00
+	 * pmcsr_scale:3 = 0x00
+	 * pmcsr_scale:2 = 0x00
+	 * pmcsr_scale:1 = 0x00
+	 * pmcsr_scale:0 = 0x00
+	 * BAR mask = 20 bit
+	 * BAR prefetch = no
+	 * MSI capable = 32 messages
 	 */
-	SAA716x_WR(VI0, INT_CLR_STATUS, 0x000003ff);
+	SAA716x_WR(GREG, GREG_MSI_BAR_PMCSR, 0x00001005);
 
-	/* Clear VI1 interrupt
-	 * DW_4 = 0x0000_1fe8
-	 * DW_5 = 0x0000_03ff
+	/* GREG_JETSTR_CONFIG_2
+	 * pmcsr_data:3 = 0x0
+	 * pmcsr_data:2 = 0x0
+	 * pmcsr_data:1 = 0x0
+	 * pmcsr_data:0 = 0x0
 	 */
-	SAA716x_WR(VI1, INT_CLR_STATUS, 0x000003ff);
+	SAA716x_WR(GREG, GREG_PMCSR_DATA_1, 0x00000000);
 
-	/* CLear FGPI0 interrupt
-	 * DW_6 = 0x0000_2fe8
-	 * DW_7 = 0x0000_007f
+	/* GREG_JETSTR_CONFIG_3
+	 * pmcsr_data:7 = 0x0
+	 * pmcsr_data:6 = 0x0
+	 * pmcsr_data:5 = 0x0
+	 * pmcsr_data:4 = 0x0
 	 */
-	SAA716x_WR(FGPI0, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_WR(GREG, GREG_PMCSR_DATA_2, 0x00000000);
 
-	/* Clear FGPI1 interrupt
-	 * DW_8 = 0x0000_3fe8
-	 * DW_9 = 0x0000_007f
+	/* #2 Release GREG resets
+	 * ip_rst_an
+	 * dpa1_rst_an
+	 * jetsream_reset_an
 	 */
-	SAA716x_WR(FGPI1, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00000e00);
 
-	/* Clear FGPI2 interrupt
-	 * DW_10 = 0x0000_4fe8
-	 * DW_11 = 0x0000_007f
+	/* #3 GPIO Setup
+	 * GPIO 25:24 = Output
+	 * GPIO Output "0" after Reset
 	 */
-	SAA716x_WR(FGPI2, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_WR(GPIO, GPIO_OEN, 0xfcffffff);
 
-	/* Clear FGPI3 interrupt
-	 * DW_12 = 0x0000_5fe8
-	 * DW_13 = 0x0000_007f
-	 */
-	SAA716x_WR(FGPI3, INT_CLR_STATUS, 0x0000007f);
+	/* #4 Custom stuff goes in here */
 
-	/* Clear AI0 interrupt
-	 * DW_14 = 0x0000_6020
-	 * DW_15 = 0x0000_000f
+	/* #5 Disable CGU Clocks
+	 * except for PHY, Jetstream, DPA1, DCS, Boot, GREG
+	 * CGU_PCR_0_3: pss_mmu_clk:0 = 0x0
 	 */
-	SAA716x_WR(AI0, AI_INT_ACK, 0x0000000f);
+	SAA716x_WR(CGU, CGU_PCR_0_3, 0x00000006);
 
-	/* Clear AI1 interrupt
-	 * DW_16 = 0x0000_7020
-	 * DW_17 = 0x0000_200f
-	 */
-	SAA716x_WR(AI1, AI_INT_ACK, 0x0000000f);
+	/* CGU_PCR_0_4: pss_dtl2mtl_mmu_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_0_4, 0x00000006);
 
-	/* Set GREG boot_ready bit to 1
-	 * DW_18 = 0x0001_2018
-	 * DW_19 = 0x0000_2000
-	 */
+	/* CGU_PCR_0_5: pss_msi_ck:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_0_5, 0x00000006);
+
+	/* CGU_PCR_0_7: pss_gpio_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_0_7, 0x00000006);
+
+	/* CGU_PCR_2_1: spi_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_2_1, 0x00000006);
+
+	/* CGU_PCR_3_2: i2c_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_3_2, 0x00000006);
+
+	/* CGU_PCR_4_1: phi_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_4_1, 0x00000006);
+
+	/* CGU_PCR_5: vip0_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_5, 0x00000006);
+
+	/* CGU_PCR_6: vip1_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_6, 0x00000006);
+
+	/* CGU_PCR_7: fgpi0_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_7, 0x00000006);
+
+	/* CGU_PCR_8: fgpi1_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_8, 0x00000006);
+
+	/* CGU_PCR_9: fgpi2_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_9, 0x00000006);
+
+	/* CGU_PCR_10: fgpi3_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_10, 0x00000006);
+
+	/* CGU_PCR_11: ai0_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_11, 0x00000006);
+
+	/* CGU_PCR_12: ai1_clk:0 = 0x0 */
+	SAA716x_WR(CGU, CGU_PCR_12, 0x00000006);
+
+	/* #6 Set GREG boot_ready = 0x1 */
 	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00002000);
 
-	/* End of Boot script command
-	 * DW_20 = 0x0000_0006
-	 * Where to write this value ??
-	 */
+	/* #7 Disable GREG CGU Clock */
+	SAA716x_WR(CGU, CGU_PCR_0_6, 0x00000006);
+
+	/* End of Bootscript command ?? */
 }
 
 int saa716x_core_boot(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
new file mode 100644
index 0000000000000..6d8d4518ead93
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -0,0 +1,13 @@
+#ifndef __SAA716x_BOOT_H
+#define __SAA716x_BOOT_H
+
+enum saa716x_boot_mode {
+	SAA716x_EXT_BOOT = 1,
+	SAA716x_INT_BOOT, /* GPIO[31:30] = 0x01 */
+	SAA716x_CGU_BOOT,
+};
+
+extern int saa716x_core_boot(struct saa716x_dev *saa716x);
+extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_BOOT_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 3abfadd0e1c89..293a2f425511f 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -11,6 +11,7 @@
 #include <linux/ioport.h>
 #include <linux/i2c.h>
 #include "saa716x_i2c.h"
+#include "saa716x_boot.h"
 
 #define SAA716x_ERROR		0
 #define SAA716x_NOTICE		1
@@ -57,12 +58,6 @@ struct saa716x_dev;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 
-enum saa716x_boot_mode {
-	SAA716x_EXT_BOOT = 1,
-	SAA716x_INT_BOOT,
-	SAA716x_CGU_BOOT,
-};
-
 struct saa716x_config {
 	char				*model_name;
 	char				*dev_type;

From 2deec9e582f6d892b6130626036339aceab64b09 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:54:41 +0400
Subject: [PATCH 028/364] saa716x: Cleanup external Boot configuration

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c   | 99 ++++++++++++++--------
 drivers/media/pci/saa716x/saa716x_boot.h   |  1 -
 drivers/media/pci/saa716x/saa716x_budget.c |  9 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c |  4 +-
 4 files changed, 73 insertions(+), 40 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index c5da16859f37e..da8238ba66d38 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -4,45 +4,73 @@
 
 static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 {
-	/* Write to GREG Subsystem ID */
-	SAA716x_WR(GREG, GREG_SUBSYS_CONFIG, saa716x->pdev->subsystem_vendor);
+	/* Write GREG boot_ready to 0
+	 * DW_0 = 0x0001_2018
+	 * DW_1 = 0x0000_0000
+	 */
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00000000);
 
-	/* GREG_JETSTR_CONFIG_1 */
-	SAA716x_WR(GREG, GREG_MSI_BAR_PMCSR, GREG_MSI_MM_CAP32 | GREG_BAR_WIDTH_20 | GREG_MSI_MM_CAP32);
+	/* Clear VI0 interrupt
+	 * DW_2 = 0x0000_0fe8
+	 * DW_3 = 0x0000_03ff
+	 */
+	SAA716x_WR(VI0, INT_CLR_STATUS, 0x000003ff);
 
-	/* GREG_JETSTR_CONFIG_2 */
-	SAA716x_WR(GREG, GREG_PMCSR_DATA_1, 0);
+	/* Clear VI1 interrupt
+	 * DW_4 = 0x0000_1fe8
+	 * DW_5 = 0x0000_03ff
+	 */
+	SAA716x_WR(VI1, INT_CLR_STATUS, 0x000003ff);
 
-	/* GREG_JETSTR_CONFIG_3 */
-	SAA716x_WR(GREG, GREG_PMCSR_DATA_2, 0);
+	/* CLear FGPI0 interrupt
+	 * DW_6 = 0x0000_2fe8
+	 * DW_7 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI0, INT_CLR_STATUS, 0x0000007f);
 
-	/* Release GREG Resets */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, GREG_IP_RST_RELEASE | GREG_ADAPTER_RST_RELEASE | GREG_PCIE_CORE_RST_RELEASE);
+	/* Clear FGPI1 interrupt
+	 * DW_8 = 0x0000_3fe8
+	 * DW_9 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI1, INT_CLR_STATUS, 0x0000007f);
 
-	/* Disable Logical A/V channels */
-	SAA716x_WR(GREG, GPIO_OEN, 0xfcffffff);
+	/* Clear FGPI2 interrupt
+	 * DW_10 = 0x0000_4fe8
+	 * DW_11 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI2, INT_CLR_STATUS, 0x0000007f);
 
-	/* Disable all clocks except PHY, Adapter, DCSN and Boot */
-	SAA716x_WR(CGU, CGU_PCR_0_3, 0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_0_4, 0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_0_7, 0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_2_1, 0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_3_2, 0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_4_1, 0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_5,   0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_6,   0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_7,   0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_8,   0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_9,   0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_10,  0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_11,  0x00000006);
-	SAA716x_WR(CGU, CGU_PCR_12,  0x00000006);
-
-	/* Set GREG Boot Ready */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, GREG_BOOT_READY);
-
-	/* Disable GREG Clock */
-	SAA716x_WR(CGU, CGU_PCR_0_6, 0x00000006);
+	/* Clear FGPI3 interrupt
+	 * DW_12 = 0x0000_5fe8
+	 * DW_13 = 0x0000_007f
+	 */
+	SAA716x_WR(FGPI3, INT_CLR_STATUS, 0x0000007f);
+
+	/* Clear AI0 interrupt
+	 * DW_14 = 0x0000_6020
+	 * DW_15 = 0x0000_000f
+	 */
+	SAA716x_WR(AI0, AI_INT_ACK, 0x0000000f);
+
+	/* Clear AI1 interrupt
+	 * DW_16 = 0x0000_7020
+	 * DW_17 = 0x0000_200f
+	 */
+	SAA716x_WR(AI1, AI_INT_ACK, 0x0000000f);
+
+	/* Set GREG boot_ready bit to 1
+	 * DW_18 = 0x0001_2018
+	 * DW_19 = 0x0000_2000
+	 */
+	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00002000);
+
+	/* End of Boot script command
+	 * DW_20 = 0x0000_0006
+	 * Where to write this value ??
+	 * This seems very odd an address to trigger the
+	 * Boot Control State Machine !
+	 */
+	SAA716x_WR(VI0, 0x00000006, 0xffffffff);
 
 	return 0;
 }
@@ -165,16 +193,15 @@ int saa716x_core_boot(struct saa716x_dev *saa716x)
 	switch (config->boot_mode) {
 	case SAA716x_EXT_BOOT:
 		dprintk(SAA716x_DEBUG, 1, "Using External Boot from config");
+		saa716x_cgu_init(saa716x);
 		saa716x_ext_boot(saa716x);
 		break;
 	case SAA716x_INT_BOOT:
 		dprintk(SAA716x_DEBUG, 1, "Using Internal Boot from config");
 		saa716x_int_boot(saa716x);
 		break;
-	case SAA716x_CGU_BOOT:
 	default:
-		dprintk(SAA716x_ERROR, 1, "Using CGU Setup");
-		saa716x_cgu_init(saa716x);
+		dprintk(SAA716x_ERROR, 1, "Unknown configuration %d", config->boot_mode);
 		break;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index 6d8d4518ead93..3201c026ebb01 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -4,7 +4,6 @@
 enum saa716x_boot_mode {
 	SAA716x_EXT_BOOT = 1,
 	SAA716x_INT_BOOT, /* GPIO[31:30] = 0x01 */
-	SAA716x_CGU_BOOT,
 };
 
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index fc90f6a169514..955c49b9361a7 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -93,6 +93,13 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
 		goto fail1;
 	}
+
+	err = saa716x_cgu_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		goto fail1;
+	}
+
 	err = saa716x_core_boot(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
@@ -158,7 +165,7 @@ static int load_config_vp1028(struct saa716x_dev *saa716x)
 static struct saa716x_config saa716x_vp1028_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
-	.boot_mode		= SAA716x_CGU_BOOT,
+	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp1028,
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 89bdc30abe89f..cf37fceddc16d 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -101,7 +101,7 @@ static int load_config_vp6090(struct saa716x_dev *saa716x)
 static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
-	.boot_mode		= SAA716x_CGU_BOOT,
+	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp6090,
 };
 
@@ -123,7 +123,7 @@ static int load_config_nemo(struct saa716x_dev *saa716x)
 static struct saa716x_config saa716x_nemo_config = {
 	.model_name		= SAA716x_MODEL_NXP_NENO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
-	.boot_mode		= SAA716x_CGU_BOOT,
+	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_nemo,
 };
 

From 7d3a88dca9bfb2273d7470879a703120d0e6b5a4 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:55:33 +0400
Subject: [PATCH 029/364] saa716x: Initialize CGU and MSI modules

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index cf37fceddc16d..946f4aa6f4648 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -44,6 +44,12 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
+	err = saa716x_cgu_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		goto fail1;
+	}
+
 	err = saa716x_core_boot(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
@@ -51,6 +57,12 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	}
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
 
+	err = saa716x_msi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
+		goto fail2;
+	}
+
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");

From d6022820eb641482e29d08e4bd697cfbbe699cd0 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:56:19 +0400
Subject: [PATCH 030/364] saa716x: Enable more debugging

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |  1 +
 drivers/media/pci/saa716x/saa716x_aip.c    | 16 ++++
 drivers/media/pci/saa716x/saa716x_aip.h    |  7 ++
 drivers/media/pci/saa716x/saa716x_budget.c | 12 +--
 drivers/media/pci/saa716x/saa716x_pci.c    | 87 ++++++++++------------
 5 files changed, 65 insertions(+), 58 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_aip.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_aip.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 50949de26ee8e..947c9f0cd1b16 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -3,6 +3,7 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_cgu.o	\
 				    saa716x_msi.o	\
 				    saa716x_vip.o	\
+				    saa716x_aip.o	\
 				    saa716x_boot.o	\
 				    saa716x_fgpi.o
 
diff --git a/drivers/media/pci/saa716x/saa716x_aip.c b/drivers/media/pci/saa716x/saa716x_aip.c
new file mode 100644
index 0000000000000..cc86d1de2b40b
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_aip.c
@@ -0,0 +1,16 @@
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+#include "saa716x_aip.h"
+
+int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev)
+{
+	return SAA716x_RD(dev, AI_CTL) == 0 ? 0 : -1;
+}
+EXPORT_SYMBOL_GPL(saa716x_aip_status);
+
+void saa716x_aip_disable(struct saa716x_dev *saa716x)
+{
+	SAA716x_WR(AI0, AI_CTL, 0x00);
+	SAA716x_WR(AI1, AI_CTL, 0x00);
+}
+EXPORT_SYMBOL_GPL(saa716x_aip_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_aip.h b/drivers/media/pci/saa716x/saa716x_aip.h
new file mode 100644
index 0000000000000..8e3ed5081f7b0
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_aip.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_AIP_H
+#define __SAA716x_AIP_H
+
+extern int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev);
+extern void saa716x_aip_disable(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_AIP_H */
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 955c49b9361a7..f5b004984e798 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -15,7 +15,9 @@
 #include <linux/i2c.h>
 #include "saa716x_priv.h"
 #include "saa716x_vip.h"
+#include "saa716x_aip.h"
 #include "saa716x_msi.h"
+#include "saa716x_reg.h"
 #include "saa716x_budget.h"
 
 unsigned int verbose;
@@ -64,14 +66,6 @@ static int read_eeprom(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static void saa716x_disable_interrupts(struct saa716x_dev *saa716x)
-{
-	saa716x_i2cint_disable(saa716x);
-	saa716x_msiint_disable(saa716x);
-	saa716x_vipint_disable(saa716x);
-	saa716x_fgpiint_disable(saa716x);
-}
-
 static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
@@ -119,8 +113,6 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
-	saa716x_disable_interrupts(saa716x);
-
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index f9ed86bbeb339..4ae745c4db867 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -93,60 +93,51 @@ static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
 	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
 	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
-	u32 i2c_stat_0, i2c_stat_1, msi_stat_l, msi_stat_h;
-	u32 fgpi_stat_0, fgpi_stat_1, fgpi_stat_2, fgpi_stat_3;
-	u32 vi_stat_0, vi_stat_1;
-	u32 dcs_stat;
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
 		return IRQ_NONE;
 	}
 
-	/* I2C_A/B */
-	i2c_stat_0 = SAA716x_RD(I2C_A, INT_STATUS);
-	i2c_stat_1 = SAA716x_RD(I2C_B, INT_STATUS);
-	SAA716x_WR(I2C_A, INT_CLR_STATUS, i2c_stat_0);
-	SAA716x_WR(I2C_B, INT_CLR_STATUS, i2c_stat_1);
-
-	/* MSI */
-	msi_stat_l = SAA716x_RD(MSI, MSI_INT_STATUS_L);
-	msi_stat_h = SAA716x_RD(MSI, MSI_INT_STATUS_H);
-	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, msi_stat_l);
-	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_H, msi_stat_h);
-
-	/* FGPI */
-	fgpi_stat_0 = SAA716x_RD(FGPI0, 0xfe0);
-	fgpi_stat_1 = SAA716x_RD(FGPI1, 0xfe0);
-	fgpi_stat_2 = SAA716x_RD(FGPI2, 0xfe0);
-	fgpi_stat_3 = SAA716x_RD(FGPI3, 0xfe0);
-	SAA716x_WR(FGPI0, 0xfe8, fgpi_stat_0);
-	SAA716x_WR(FGPI1, 0xfe8, fgpi_stat_1);
-	SAA716x_WR(FGPI2, 0xfe8, fgpi_stat_2);
-	SAA716x_WR(FGPI3, 0xfe8, fgpi_stat_3);
-
-	/* VI0/1 */
-	vi_stat_0 = SAA716x_RD(VI0, 0xfe0);
-	vi_stat_1 = SAA716x_RD(VI1, 0xfe0);
-	SAA716x_WR(VI0, 0xfe8, vi_stat_0);
-	SAA716x_WR(VI1, 0xfe8, vi_stat_1);
-
-	/* DCS */
-	dcs_stat = SAA716x_RD(DCS, 0xfe0);
-	SAA716x_WR(DCS, 0xfe8, dcs_stat);
-
-	dprintk(SAA716x_DEBUG, 1, "SAA716x IRQ VI 0=0x%02x, 1=0x%02x", vi_stat_0, vi_stat_1);
-
-	if (i2c_stat_0) {
-		dprintk(SAA716x_DEBUG, 1, "SAA716x IRQ, I2C_A=0x%02x", i2c_stat_0);
-		wake_up(&i2c_a->i2c_wq);
-	}
-
-	if (i2c_stat_1) {
-		dprintk(SAA716x_DEBUG, 1, "SAA716x IRQ, I2C_B=0x%02x", i2c_stat_1);
-		wake_up(&i2c_b->i2c_wq);
-	}
-
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+		SAA716x_RD(VI0, INT_STATUS),
+		SAA716x_RD(VI1, INT_STATUS),
+		SAA716x_RD(VI0, INT_ENABLE),
+		SAA716x_RD(VI1, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+		SAA716x_RD(FGPI0, INT_STATUS),
+		SAA716x_RD(FGPI1, INT_STATUS),
+		SAA716x_RD(FGPI0, INT_ENABLE),
+		SAA716x_RD(FGPI0, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
+		SAA716x_RD(FGPI2, INT_STATUS),
+		SAA716x_RD(FGPI3, INT_STATUS),
+		SAA716x_RD(FGPI2, INT_ENABLE),
+		SAA716x_RD(FGPI3, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+		SAA716x_RD(AI0, AI_STATUS),
+		SAA716x_RD(AI1, AI_STATUS),
+		SAA716x_RD(AI0, AI_CTL),
+		SAA716x_RD(AI1, AI_CTL));
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
+		SAA716x_RD(MSI, MSI_INT_STATUS_L),
+		SAA716x_RD(MSI, MSI_INT_STATUS_H),
+		SAA716x_RD(MSI, MSI_INT_ENA_L),
+		SAA716x_RD(MSI, MSI_INT_ENA_H));
+
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+		SAA716x_RD(I2C_A, INT_STATUS),
+		SAA716x_RD(I2C_B, INT_STATUS),
+		SAA716x_RD(I2C_A, INT_CLR_STATUS),
+		SAA716x_RD(I2C_B, INT_CLR_STATUS));
+
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
+		SAA716x_RD(DCS, DCSC_INT_STATUS),
+		SAA716x_RD(DCS, DCSC_INT_ENABLE));
 
 	return IRQ_HANDLED;
 }

From 18de3bc880ce8b8aec0bc7fcbcbfd18f93185448 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:56:58 +0400
Subject: [PATCH 031/364] saa716x: Check DMA availability

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 4ae745c4db867..7db468b15bb9b 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -145,7 +145,7 @@ static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
-	int err = 0, ret = -ENODEV, i;
+	int err = 0, ret = -ENODEV, i, use_dac;
 	u8 revision;
   
 	dprintk(SAA716x_ERROR, 1, "found a %s PCI Express card", saa716x->config->model_name);
@@ -157,6 +157,18 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		goto fail0;
 	}
 
+	if (!pci_set_dma_mask(pdev, DMA_64BIT_MASK)) {
+		use_dac = 1;
+		err = pci_set_consistent_dma_mask(pdev, DMA_64BIT_MASK);
+		if (err) {
+			dprintk(SAA716x_ERROR, 1, "Unable to obtain 64bit DMA");
+			goto fail1;
+		}
+	} else if ((err = pci_set_consistent_dma_mask(pdev, DMA_32BIT_MASK)) != 0) {
+		dprintk(SAA716x_ERROR, 1, "Unable to obtain 32bit DMA");
+		goto fail1;
+	}
+
 	pci_set_master(pdev);
 
 	for (i = 0; i < 6; i++) {
@@ -225,6 +237,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 	release_mem_region(saa716x->addr, saa716x->len);
 
 fail1:
+	dprintk(SAA716x_ERROR, 1, "Err: Disabling device");
 	pci_disable_device(pdev);
 
 fail0:

From 87c055d61490ba5139cd92b408836e93febee330 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:57:49 +0400
Subject: [PATCH 032/364] saa716x: Small cleanups and fixes

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 6 +++---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 9 ++++++---
 drivers/media/pci/saa716x/saa716x_priv.h   | 2 ++
 3 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index f5b004984e798..ac750da5c0a4e 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -116,7 +116,7 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
-		goto fail2;
+		goto fail3;
 	}
 #if 0
 	/* Experiments */
@@ -124,12 +124,12 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 #endif
 	return 0;
 
+fail3:
+	saa716x_i2c_exit(saa716x);
 fail2:
 	saa716x_pci_exit(saa716x);
-
 fail1:
 	kfree(saa716x);
-
 fail0:
 	return err;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 946f4aa6f4648..fcbe208da4b25 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -72,11 +72,13 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
-		goto fail2;
+		goto fail3;
 	}
 
 	return 0;
 
+fail3:
+	saa716x_i2c_exit(saa716x);
 fail2:
 	saa716x_pci_exit(saa716x);
 fail1:
@@ -90,6 +92,7 @@ static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 
+	saa716x_i2c_exit(saa716x);
 	saa716x_pci_exit(saa716x);
 	kfree(saa716x);
 }
@@ -123,7 +126,7 @@ static struct saa716x_config saa716x_vp6090_config = {
  * DVB-T Frontend: 1x TDA10046 + TDA8275
  * Analog Decoder: External SAA7136
  */
-#define SAA716x_MODEL_NXP_NENO		"NXP Semiconductors NEMO referrence board" 
+#define SAA716x_MODEL_NXP_NENO		"NEMO reference board" 
 #define SAA716x_DEV_NXP_NEMO		"DVB-T + Analog"
 
 static int load_config_nemo(struct saa716x_dev *saa716x)
@@ -143,7 +146,7 @@ static struct saa716x_config saa716x_nemo_config = {
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
-	MAKE_ENTRY(NXP_SEMICONDUCTOR, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
+	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 };
 MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
 
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 293a2f425511f..22deb515da0e7 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -43,6 +43,8 @@
 #define SAA7161			0x7161
 #define SAA7162			0x7162
 
+#define NXP_REFERENCE_BOARD	0x1131
+
 #define MAKE_ENTRY(__subven, __subdev, __chip, __configptr) {		\
 		.vendor		= NXP_SEMICONDUCTOR,			\
 		.device		= (__chip),				\

From 95440a0020892d346171ff9c9a0652e1f82ac68a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:58:30 +0400
Subject: [PATCH 033/364] saa716x: Fix typo

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index fcbe208da4b25..9f6aa39ab16f7 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -126,7 +126,7 @@ static struct saa716x_config saa716x_vp6090_config = {
  * DVB-T Frontend: 1x TDA10046 + TDA8275
  * Analog Decoder: External SAA7136
  */
-#define SAA716x_MODEL_NXP_NENO		"NEMO reference board" 
+#define SAA716x_MODEL_NXP_NEMO		"NEMO reference board" 
 #define SAA716x_DEV_NXP_NEMO		"DVB-T + Analog"
 
 static int load_config_nemo(struct saa716x_dev *saa716x)
@@ -136,7 +136,7 @@ static int load_config_nemo(struct saa716x_dev *saa716x)
 }
 
 static struct saa716x_config saa716x_nemo_config = {
-	.model_name		= SAA716x_MODEL_NXP_NENO,
+	.model_name		= SAA716x_MODEL_NXP_NEMO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_nemo,

From 72e22a5642c88558453b83aa551d7cd752435737 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 15:59:26 +0400
Subject: [PATCH 034/364] saa716x: Reset internal modules

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c   | 29 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_boot.h   |  1 +
 drivers/media/pci/saa716x/saa716x_hybrid.c |  2 ++
 3 files changed, 32 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index da8238ba66d38..08176b7ce4318 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -246,3 +246,32 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 EXPORT_SYMBOL(saa716x_jetpack_init);
+
+void saa716x_core_reset(struct saa716x_dev *saa716x)
+{
+	dprintk(SAA716x_DEBUG, 1, "RESET Modules");
+
+	/* VIP */
+	SAA716x_WR(VI0, VI_MODE, SOFT_RESET);
+	SAA716x_WR(VI1, VI_MODE, SOFT_RESET);
+
+	/* FGPI */
+	SAA716x_WR(FGPI0, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_WR(FGPI1, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_WR(FGPI2, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_WR(FGPI3, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+
+	/* AIP */
+	SAA716x_WR(AI0, AI_CTL, AI_RESET);
+	SAA716x_WR(AI1, AI_CTL, AI_RESET);
+
+	/* BAM */
+	SAA716x_WR(BAM, BAM_SW_RST, BAM_SW_RESET);
+
+	/* MMU */
+	SAA716x_WR(MMU, MMU_SW_RST, MMU_SW_RESET);
+
+	/* MSI */
+	SAA716x_WR(MSI, MSI_SW_RST, MSI_SW_RESET);
+}
+EXPORT_SYMBOL_GPL(saa716x_core_reset);
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index 3201c026ebb01..f45d3d740db21 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -8,5 +8,6 @@ enum saa716x_boot_mode {
 
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
+extern void saa716x_core_reset(struct saa716x_dev *saa716x);
 
 #endif /* __SAA716x_BOOT_H */
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 9f6aa39ab16f7..a2faabc95c13e 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -69,6 +69,8 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
+	saa716x_core_reset(saa716x);
+
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");

From e4fd29ca2f5d111d9eddb03c594f0732bb7b4e38 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:00:02 +0400
Subject: [PATCH 035/364] saa716x: Still debugging

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c |  3 +++
 drivers/media/pci/saa716x/saa716x_pci.c    | 14 +++++++++++---
 2 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index a2faabc95c13e..44af25c67731d 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -26,6 +26,7 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 {
 	struct saa716x_dev *saa716x;
 	int err = 0;
+	u32 sts;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -70,6 +71,8 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	}
 
 	saa716x_core_reset(saa716x);
+	pci_read_config_dword(pdev, 0x06, &sts);
+	dprintk(SAA716x_ERROR, 0, "  INTx pending=%s", ((sts >> 2) & 0x01) == 1 ? "Yes": "None");
 
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 7db468b15bb9b..0bb5ac0bb14c0 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -146,8 +146,10 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	int err = 0, ret = -ENODEV, i, use_dac;
+	u32 msi_cap;
 	u8 revision;
-  
+	const u8 msgs[] = { 1, 2, 4, 8, 16, 32 };
+
 	dprintk(SAA716x_ERROR, 1, "found a %s PCI Express card", saa716x->config->model_name);
 
 	err = pci_enable_device(pdev);
@@ -206,8 +208,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 	}
 
 	pci_read_config_byte(pdev, PCI_CLASS_REVISION, &revision);
-	
-	dprintk(SAA716x_ERROR, 0, "SAA716x Revision ID: 0x%02x", revision);
+	pci_read_config_dword(pdev, 0x40, &msi_cap);
 
 	saa716x->revision	= revision;
 
@@ -223,6 +224,13 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		saa716x->addr,
 		saa716x->mmio);
 
+	dprintk(SAA716x_ERROR, 0, "    SAA%02x %sBit, MSI %s, MSI-X=%d msgs",
+		saa716x->pdev->device,
+		(((msi_cap >> 23) & 0x01) == 1 ? "64":"32"),
+		(((msi_cap >> 16) & 0x01) == 1 ? "Enabled" : "Disabled"),
+		msgs[((msi_cap >> 17) & 0x07)]);
+
+
 	pci_set_drvdata(pdev, saa716x);
 
 	return 0;

From 912cfc776e52d7fbe4c376b6341cce90b6d396dd Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:00:34 +0400
Subject: [PATCH 036/364] saa716x: Code simplification

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c | 2 +-
 drivers/media/pci/saa716x/saa716x_pci.c | 3 +--
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index ea2751b02f417..a8ccd8649cea2 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -72,7 +72,7 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	 * MSI ID: 4:0 = 0x00
 	 */
 	for (i = 0; i < MSI_CONFIG_REGS; i++)
-		SAA716x_WR(MSI, MSI_CONFIG_REG[i], 0x01000000);
+		SAA716x_WR(MSI, MSI_CONFIG_REG[i], MSI_INT_POL_EDGE_RISE);
 
 	/* get Status */
 	ena_l = SAA716x_RD(MSI, MSI_INT_ENA_L);
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 0bb5ac0bb14c0..3d58a415e3876 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -148,7 +148,6 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 	int err = 0, ret = -ENODEV, i, use_dac;
 	u32 msi_cap;
 	u8 revision;
-	const u8 msgs[] = { 1, 2, 4, 8, 16, 32 };
 
 	dprintk(SAA716x_ERROR, 1, "found a %s PCI Express card", saa716x->config->model_name);
 
@@ -228,7 +227,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		saa716x->pdev->device,
 		(((msi_cap >> 23) & 0x01) == 1 ? "64":"32"),
 		(((msi_cap >> 16) & 0x01) == 1 ? "Enabled" : "Disabled"),
-		msgs[((msi_cap >> 17) & 0x07)]);
+		(1 << ((msi_cap >> 17) & 0x07)));
 
 
 	pci_set_drvdata(pdev, saa716x);

From 498f86dd6785ea09025fadab6f74802cf5076737 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:01:11 +0400
Subject: [PATCH 037/364] saa716x: Terminate PCI ID list

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 5 ++++-
 drivers/media/pci/saa716x/saa716x_hybrid.c | 5 ++++-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index ac750da5c0a4e..89e1a43d00ee1 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -164,7 +164,10 @@ static struct saa716x_config saa716x_vp1028_config = {
 
 static struct pci_device_id saa716x_budget_pci_table[] = {
 
-	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config) /* VP-1028 */
+	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
+	{
+		.vendor = 0,
+	}
 };
 MODULE_DEVICE_TABLE(pci, saa716x_budget_pci_table);
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 44af25c67731d..730fe55775175 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -131,7 +131,7 @@ static struct saa716x_config saa716x_vp6090_config = {
  * DVB-T Frontend: 1x TDA10046 + TDA8275
  * Analog Decoder: External SAA7136
  */
-#define SAA716x_MODEL_NXP_NEMO		"NEMO reference board" 
+#define SAA716x_MODEL_NXP_NEMO		"NEMO reference board"
 #define SAA716x_DEV_NXP_NEMO		"DVB-T + Analog"
 
 static int load_config_nemo(struct saa716x_dev *saa716x)
@@ -152,6 +152,9 @@ static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
+	{
+		.vendor = 0,
+	}
 };
 MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
 

From 10eb36952a231a863a09c15fa5b9a14804553319 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:01:55 +0400
Subject: [PATCH 038/364] saa716x: Rename Rd/Wr operations

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_aip.c  |   6 +-
 drivers/media/pci/saa716x/saa716x_boot.c | 110 +++++++++++------------
 drivers/media/pci/saa716x/saa716x_cgu.c  |  86 +++++++++---------
 drivers/media/pci/saa716x/saa716x_fgpi.c |  16 ++--
 drivers/media/pci/saa716x/saa716x_i2c.c  | 104 ++++++++++-----------
 drivers/media/pci/saa716x/saa716x_msi.c  |  38 ++++----
 drivers/media/pci/saa716x/saa716x_pci.c  |  52 +++++------
 drivers/media/pci/saa716x/saa716x_priv.h |   7 +-
 drivers/media/pci/saa716x/saa716x_reg.h  |  20 +++++
 drivers/media/pci/saa716x/saa716x_vip.c  |  12 +--
 10 files changed, 237 insertions(+), 214 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_aip.c b/drivers/media/pci/saa716x/saa716x_aip.c
index cc86d1de2b40b..9e31184fa0bdc 100644
--- a/drivers/media/pci/saa716x/saa716x_aip.c
+++ b/drivers/media/pci/saa716x/saa716x_aip.c
@@ -4,13 +4,13 @@
 
 int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev)
 {
-	return SAA716x_RD(dev, AI_CTL) == 0 ? 0 : -1;
+	return SAA716x_EPRD(dev, AI_CTL) == 0 ? 0 : -1;
 }
 EXPORT_SYMBOL_GPL(saa716x_aip_status);
 
 void saa716x_aip_disable(struct saa716x_dev *saa716x)
 {
-	SAA716x_WR(AI0, AI_CTL, 0x00);
-	SAA716x_WR(AI1, AI_CTL, 0x00);
+	SAA716x_EPWR(AI0, AI_CTL, 0x00);
+	SAA716x_EPWR(AI1, AI_CTL, 0x00);
 }
 EXPORT_SYMBOL_GPL(saa716x_aip_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 08176b7ce4318..823a799caeded 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -8,61 +8,61 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	 * DW_0 = 0x0001_2018
 	 * DW_1 = 0x0000_0000
 	 */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00000000);
+	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00000000);
 
 	/* Clear VI0 interrupt
 	 * DW_2 = 0x0000_0fe8
 	 * DW_3 = 0x0000_03ff
 	 */
-	SAA716x_WR(VI0, INT_CLR_STATUS, 0x000003ff);
+	SAA716x_EPWR(VI0, INT_CLR_STATUS, 0x000003ff);
 
 	/* Clear VI1 interrupt
 	 * DW_4 = 0x0000_1fe8
 	 * DW_5 = 0x0000_03ff
 	 */
-	SAA716x_WR(VI1, INT_CLR_STATUS, 0x000003ff);
+	SAA716x_EPWR(VI1, INT_CLR_STATUS, 0x000003ff);
 
 	/* CLear FGPI0 interrupt
 	 * DW_6 = 0x0000_2fe8
 	 * DW_7 = 0x0000_007f
 	 */
-	SAA716x_WR(FGPI0, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_EPWR(FGPI0, INT_CLR_STATUS, 0x0000007f);
 
 	/* Clear FGPI1 interrupt
 	 * DW_8 = 0x0000_3fe8
 	 * DW_9 = 0x0000_007f
 	 */
-	SAA716x_WR(FGPI1, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_EPWR(FGPI1, INT_CLR_STATUS, 0x0000007f);
 
 	/* Clear FGPI2 interrupt
 	 * DW_10 = 0x0000_4fe8
 	 * DW_11 = 0x0000_007f
 	 */
-	SAA716x_WR(FGPI2, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_EPWR(FGPI2, INT_CLR_STATUS, 0x0000007f);
 
 	/* Clear FGPI3 interrupt
 	 * DW_12 = 0x0000_5fe8
 	 * DW_13 = 0x0000_007f
 	 */
-	SAA716x_WR(FGPI3, INT_CLR_STATUS, 0x0000007f);
+	SAA716x_EPWR(FGPI3, INT_CLR_STATUS, 0x0000007f);
 
 	/* Clear AI0 interrupt
 	 * DW_14 = 0x0000_6020
 	 * DW_15 = 0x0000_000f
 	 */
-	SAA716x_WR(AI0, AI_INT_ACK, 0x0000000f);
+	SAA716x_EPWR(AI0, AI_INT_ACK, 0x0000000f);
 
 	/* Clear AI1 interrupt
 	 * DW_16 = 0x0000_7020
 	 * DW_17 = 0x0000_200f
 	 */
-	SAA716x_WR(AI1, AI_INT_ACK, 0x0000000f);
+	SAA716x_EPWR(AI1, AI_INT_ACK, 0x0000000f);
 
 	/* Set GREG boot_ready bit to 1
 	 * DW_18 = 0x0001_2018
 	 * DW_19 = 0x0000_2000
 	 */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00002000);
+	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00002000);
 
 	/* End of Boot script command
 	 * DW_20 = 0x0000_0006
@@ -70,7 +70,7 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	 * This seems very odd an address to trigger the
 	 * Boot Control State Machine !
 	 */
-	SAA716x_WR(VI0, 0x00000006, 0xffffffff);
+	SAA716x_EPWR(VI0, 0x00000006, 0xffffffff);
 
 	return 0;
 }
@@ -81,7 +81,7 @@ static void saa716x_int_boot(struct saa716x_dev *saa716x)
 	/* #1 Configure PCI COnfig space
 	 * GREG_JETSTR_CONFIG_0
 	 */
-	SAA716x_WR(GREG, GREG_SUBSYS_CONFIG, saa716x->pdev->subsystem_vendor);
+	SAA716x_EPWR(GREG, GREG_SUBSYS_CONFIG, saa716x->pdev->subsystem_vendor);
 
 	/* GREG_JETSTR_CONFIG_1
 	 * pmcsr_scale:7 = 0x00
@@ -96,7 +96,7 @@ static void saa716x_int_boot(struct saa716x_dev *saa716x)
 	 * BAR prefetch = no
 	 * MSI capable = 32 messages
 	 */
-	SAA716x_WR(GREG, GREG_MSI_BAR_PMCSR, 0x00001005);
+	SAA716x_EPWR(GREG, GREG_MSI_BAR_PMCSR, 0x00001005);
 
 	/* GREG_JETSTR_CONFIG_2
 	 * pmcsr_data:3 = 0x0
@@ -104,7 +104,7 @@ static void saa716x_int_boot(struct saa716x_dev *saa716x)
 	 * pmcsr_data:1 = 0x0
 	 * pmcsr_data:0 = 0x0
 	 */
-	SAA716x_WR(GREG, GREG_PMCSR_DATA_1, 0x00000000);
+	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_1, 0x00000000);
 
 	/* GREG_JETSTR_CONFIG_3
 	 * pmcsr_data:7 = 0x0
@@ -112,20 +112,20 @@ static void saa716x_int_boot(struct saa716x_dev *saa716x)
 	 * pmcsr_data:5 = 0x0
 	 * pmcsr_data:4 = 0x0
 	 */
-	SAA716x_WR(GREG, GREG_PMCSR_DATA_2, 0x00000000);
+	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_2, 0x00000000);
 
 	/* #2 Release GREG resets
 	 * ip_rst_an
 	 * dpa1_rst_an
 	 * jetsream_reset_an
 	 */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00000e00);
+	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00000e00);
 
 	/* #3 GPIO Setup
 	 * GPIO 25:24 = Output
 	 * GPIO Output "0" after Reset
 	 */
-	SAA716x_WR(GPIO, GPIO_OEN, 0xfcffffff);
+	SAA716x_EPWR(GPIO, GPIO_OEN, 0xfcffffff);
 
 	/* #4 Custom stuff goes in here */
 
@@ -133,55 +133,55 @@ static void saa716x_int_boot(struct saa716x_dev *saa716x)
 	 * except for PHY, Jetstream, DPA1, DCS, Boot, GREG
 	 * CGU_PCR_0_3: pss_mmu_clk:0 = 0x0
 	 */
-	SAA716x_WR(CGU, CGU_PCR_0_3, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_0_3, 0x00000006);
 
 	/* CGU_PCR_0_4: pss_dtl2mtl_mmu_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_0_4, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_0_4, 0x00000006);
 
 	/* CGU_PCR_0_5: pss_msi_ck:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_0_5, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_0_5, 0x00000006);
 
 	/* CGU_PCR_0_7: pss_gpio_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_0_7, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_0_7, 0x00000006);
 
 	/* CGU_PCR_2_1: spi_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_2_1, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_2_1, 0x00000006);
 
 	/* CGU_PCR_3_2: i2c_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_3_2, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_3_2, 0x00000006);
 
 	/* CGU_PCR_4_1: phi_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_4_1, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_4_1, 0x00000006);
 
 	/* CGU_PCR_5: vip0_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_5, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_5, 0x00000006);
 
 	/* CGU_PCR_6: vip1_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_6, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_6, 0x00000006);
 
 	/* CGU_PCR_7: fgpi0_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_7, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_7, 0x00000006);
 
 	/* CGU_PCR_8: fgpi1_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_8, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_8, 0x00000006);
 
 	/* CGU_PCR_9: fgpi2_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_9, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_9, 0x00000006);
 
 	/* CGU_PCR_10: fgpi3_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_10, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_10, 0x00000006);
 
 	/* CGU_PCR_11: ai0_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_11, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_11, 0x00000006);
 
 	/* CGU_PCR_12: ai1_clk:0 = 0x0 */
-	SAA716x_WR(CGU, CGU_PCR_12, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_12, 0x00000006);
 
 	/* #6 Set GREG boot_ready = 0x1 */
-	SAA716x_WR(GREG, GREG_RSTU_CTRL, 0x00002000);
+	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00002000);
 
 	/* #7 Disable GREG CGU Clock */
-	SAA716x_WR(CGU, CGU_PCR_0_6, 0x00000006);
+	SAA716x_EPWR(CGU, CGU_PCR_0_6, 0x00000006);
 
 	/* End of Bootscript command ?? */
 }
@@ -212,24 +212,24 @@ EXPORT_SYMBOL_GPL(saa716x_core_boot);
 int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 {
 	/* Reset all blocks */
-	SAA716x_WR(MSI, MSI_SW_RST, MSI_SW_RESET);
-	SAA716x_WR(MMU, MMU_SW_RST, MMU_SW_RESET);
-	SAA716x_WR(BAM, BAM_SW_RST, BAM_SW_RESET);
+	SAA716x_EPWR(MSI, MSI_SW_RST, MSI_SW_RESET);
+	SAA716x_EPWR(MMU, MMU_SW_RST, MMU_SW_RESET);
+	SAA716x_EPWR(BAM, BAM_SW_RST, BAM_SW_RESET);
 
 	switch (saa716x->pdev->device) {
 	case SAA7162:
 		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
-		SAA716x_WR(GPIO, GPIO_OEN, 0xfcffffff);
-		SAA716x_WR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
+		SAA716x_EPWR(GPIO, GPIO_OEN, 0xfcffffff);
+		SAA716x_EPWR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
 		msleep(10);
-		SAA716x_WR(GPIO, GPIO_WR,  0x03000000); /* Enable decoders */
+		SAA716x_EPWR(GPIO, GPIO_WR,  0x03000000); /* Enable decoders */
 		break;
 	case SAA7161:
 		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
-		SAA716x_WR(GPIO, GPIO_OEN, 0xfeffffff);
-		SAA716x_WR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
+		SAA716x_EPWR(GPIO, GPIO_OEN, 0xfeffffff);
+		SAA716x_EPWR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
 		msleep(10);
-		SAA716x_WR(GPIO, GPIO_WR,  0x01000000); /* Enable decoder */
+		SAA716x_EPWR(GPIO, GPIO_WR,  0x01000000); /* Enable decoder */
 		break;
 	case SAA7160:
 		saa716x->i2c_rate = SAA716x_I2C_RATE_100;
@@ -240,7 +240,7 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 	}
 
 	/* General setup for MMU */
-	SAA716x_WR(MMU, MMU_MODE, 0x14);
+	SAA716x_EPWR(MMU, MMU_MODE, 0x14);
 	dprintk(SAA716x_DEBUG, 1, "SAA%02x Jetpack Successfully initialized", saa716x->pdev->device);
 
 	return 0;
@@ -252,26 +252,26 @@ void saa716x_core_reset(struct saa716x_dev *saa716x)
 	dprintk(SAA716x_DEBUG, 1, "RESET Modules");
 
 	/* VIP */
-	SAA716x_WR(VI0, VI_MODE, SOFT_RESET);
-	SAA716x_WR(VI1, VI_MODE, SOFT_RESET);
+	SAA716x_EPWR(VI0, VI_MODE, SOFT_RESET);
+	SAA716x_EPWR(VI1, VI_MODE, SOFT_RESET);
 
 	/* FGPI */
-	SAA716x_WR(FGPI0, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-	SAA716x_WR(FGPI1, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-	SAA716x_WR(FGPI2, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-	SAA716x_WR(FGPI3, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI0, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI1, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI2, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI3, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
 
 	/* AIP */
-	SAA716x_WR(AI0, AI_CTL, AI_RESET);
-	SAA716x_WR(AI1, AI_CTL, AI_RESET);
+	SAA716x_EPWR(AI0, AI_CTL, AI_RESET);
+	SAA716x_EPWR(AI1, AI_CTL, AI_RESET);
 
 	/* BAM */
-	SAA716x_WR(BAM, BAM_SW_RST, BAM_SW_RESET);
+	SAA716x_EPWR(BAM, BAM_SW_RST, BAM_SW_RESET);
 
 	/* MMU */
-	SAA716x_WR(MMU, MMU_SW_RST, MMU_SW_RESET);
+	SAA716x_EPWR(MMU, MMU_SW_RST, MMU_SW_RESET);
 
 	/* MSI */
-	SAA716x_WR(MSI, MSI_SW_RST, MSI_SW_RESET);
+	SAA716x_EPWR(MSI, MSI_SW_RST, MSI_SW_RESET);
 }
 EXPORT_SYMBOL_GPL(saa716x_core_reset);
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index be4a96b1abf04..dec53d49fe51b 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -27,21 +27,21 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 		CGU_FDC_13,
 	};
 
-	SAA716x_WR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
-	SAA716x_WR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* MMU */
-	SAA716x_WR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* DTL2MTL */
-	SAA716x_WR(CGU, CGU_PCR_0_5, CGU_PCR_RUN); /* MSI */
-	SAA716x_WR(CGU, CGU_PCR_3_2, CGU_PCR_RUN); /* I2C */
-	SAA716x_WR(CGU, CGU_PCR_4_1, CGU_PCR_RUN); /* PHI */
-	SAA716x_WR(CGU, CGU_PCR_0_7, CGU_PCR_RUN); /* GPIO */
-	SAA716x_WR(CGU, CGU_PCR_2_1, CGU_PCR_RUN); /* SPI */
-	SAA716x_WR(CGU, CGU_PCR_1_1, CGU_PCR_RUN); /* DCS */
-	SAA716x_WR(CGU, CGU_PCR_3_1, CGU_PCR_RUN); /* BOOT */
+	SAA716x_EPWR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
+	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* MMU */
+	SAA716x_EPWR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* DTL2MTL */
+	SAA716x_EPWR(CGU, CGU_PCR_0_5, CGU_PCR_RUN); /* MSI */
+	SAA716x_EPWR(CGU, CGU_PCR_3_2, CGU_PCR_RUN); /* I2C */
+	SAA716x_EPWR(CGU, CGU_PCR_4_1, CGU_PCR_RUN); /* PHI */
+	SAA716x_EPWR(CGU, CGU_PCR_0_7, CGU_PCR_RUN); /* GPIO */
+	SAA716x_EPWR(CGU, CGU_PCR_2_1, CGU_PCR_RUN); /* SPI */
+	SAA716x_EPWR(CGU, CGU_PCR_1_1, CGU_PCR_RUN); /* DCS */
+	SAA716x_EPWR(CGU, CGU_PCR_3_1, CGU_PCR_RUN); /* BOOT */
 
 	dprintk(SAA716x_DEBUG, 1, "Initial Clocks setup");
 
 	for (i = 0; i < CGU_CLKS; i++) {
-		boot_div[i] = SAA716x_RD(CGU, CGU_FDC[i]);
+		boot_div[i] = SAA716x_EPRD(CGU, CGU_FDC[i]);
 
 		N  =  (boot_div[i] >> 11) & 0xff;
 		N *= -1;
@@ -57,52 +57,52 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 	}
 
 	/* VI 0 */
-	SAA716x_WR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
-	SAA716x_WR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
-	SAA716x_WR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
-	SAA716x_WR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
+	SAA716x_EPWR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
+	SAA716x_EPWR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
+	SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
+	SAA716x_EPWR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
 
 	/* VI 1 */
-	SAA716x_WR(CGU, CGU_PCR_6, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_6, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_6, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_6, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_6, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_6, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_6, CGU_ESR_FD_EN);
 
 	/* FGPI 0 */
-	SAA716x_WR(CGU, CGU_PCR_7, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_7, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_7, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_7, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN);
 
 	/* FGPI 1 */
-	SAA716x_WR(CGU, CGU_PCR_8, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_8, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_8, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_8, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN);
 
 	/* FGPI 2 */
-	SAA716x_WR(CGU, CGU_PCR_9, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_9, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_9, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_9, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN);
 
 	/* FGPI 3 */
-	SAA716x_WR(CGU, CGU_PCR_10, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_10, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_10, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_10, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN);
 
 	/* AI 0 */
-	SAA716x_WR(CGU, CGU_PCR_11, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_11, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_11, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_11, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_11, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_11, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_11, CGU_ESR_FD_EN);
 
 	/* AI 1 */
-	SAA716x_WR(CGU, CGU_PCR_12, CGU_PCR_RUN);
-	SAA716x_WR(CGU, CGU_SCR_12, CGU_SCR_ENF1);
-	SAA716x_WR(CGU, CGU_FS1_12, 0x00000000);
-	SAA716x_WR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
+	SAA716x_EPWR(CGU, CGU_PCR_12, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_12, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
 
 	msleep(50); /* wait for PLL */
 
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 64ba0370d740e..d7d268ae77bab 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -3,13 +3,13 @@
 
 void saa716x_fgpiint_disable(struct saa716x_dev *saa716x)
 {
-	SAA716x_WR(FGPI0, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_WR(FGPI1, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_WR(FGPI2, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_WR(FGPI3, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_WR(FGPI0, 0xfe8, 0x7f); /* clear status */
-	SAA716x_WR(FGPI1, 0xfe8, 0x7f); /* clear status */
-	SAA716x_WR(FGPI2, 0xfe8, 0x7f); /* clear status */
-	SAA716x_WR(FGPI3, 0xfe8, 0x7f); /* clear status */
+	SAA716x_EPWR(FGPI0, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_EPWR(FGPI1, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_EPWR(FGPI2, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_EPWR(FGPI3, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_EPWR(FGPI0, 0xfe8, 0x7f); /* clear status */
+	SAA716x_EPWR(FGPI1, 0xfe8, 0x7f); /* clear status */
+	SAA716x_EPWR(FGPI2, 0xfe8, 0x7f); /* clear status */
+	SAA716x_EPWR(FGPI3, 0xfe8, 0x7f); /* clear status */
 }
 EXPORT_SYMBOL_GPL(saa716x_fgpiint_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index e5edefc7a2258..09f23832b8826 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -16,15 +16,15 @@ static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
 
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc0); /* Start: SCL/SDA High */
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xc0); /* Start: SCL/SDA High */
 	msleep(10);
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0x80);
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0x80);
 	msleep(10);
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0x00);
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0x00);
 	msleep(10);
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0x80);
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0x80);
 	msleep(10);
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc0);
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xc0);
 
 	return;
 }
@@ -43,7 +43,7 @@ static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		err = -EIO;
 	}
 
-	stat = SAA716x_RD(I2C_DEV, I2C_STATUS);
+	stat = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	while (! (stat & I2C_TRANSMIT_CLEAR)) {
 		dprintk(SAA716x_ERROR, 1, "Waiting for TX FIFO to be empty");
 		msleep(5);
@@ -65,37 +65,37 @@ static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	int err;
 
 	/* Flush queue */
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xcc);
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xcc);
 
 	/* Disable all interrupts and clear status */
-	SAA716x_WR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
-	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+	SAA716x_EPWR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
 	/* Reset I2C Core and generate a delay */
-	SAA716x_WR(I2C_DEV, I2C_CONTROL, 0xc1);
+	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xc1);
 
 	msleep(100);
 
-	reg = SAA716x_RD(I2C_DEV, I2C_CONTROL);
+	reg = SAA716x_EPRD(I2C_DEV, I2C_CONTROL);
 	if (reg != 0xc0) {
 		dprintk(SAA716x_ERROR, 1, "Core RESET failed");
 		err = -EIO;
 		goto exit;
 	}
-	
+
 	/* I2C Rate Setup */
 	switch (i2c->i2c_rate) {
 	case SAA716x_I2C_RATE_400:
 		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 400k");
-		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, I2C_SDA_HOLD, 0x19);
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x19);
 		break;
 	case SAA716x_I2C_RATE_100:
 		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 100k");
-		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
-		SAA716x_WR(I2C_DEV, I2C_SDA_HOLD, 0x60);
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x60);
 		break;
 	default:
 		dprintk(SAA716x_ERROR, 1, "Unknown Rate (Rate=0x%02x)", i2c->i2c_rate);
@@ -103,14 +103,14 @@ static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	}
 
 	/* Disable all interrupts and clear status */
-	SAA716x_WR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
-	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+	SAA716x_EPWR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
 	/* enable interrupts: transaction done, arbitration, No Ack and I2C error */
-	SAA716x_WR(I2C_DEV, INT_SET_ENABLE, 0x00c7);
+	SAA716x_EPWR(I2C_DEV, INT_SET_ENABLE, 0x00c7);
 
 	/* Check interrupt enable status */
-	reg = SAA716x_RD(I2C_DEV, INT_ENABLE);
+	reg = SAA716x_EPRD(I2C_DEV, INT_ENABLE);
 	if (reg != 0xc7) {
 		dprintk(SAA716x_ERROR, 1, "Interrupt enable failed, Exiting !");
 		err = -EIO;
@@ -129,10 +129,10 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 data)
 	u32 reg;
 
 	/* Check FIFO status before TX */
-	reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (reg & SAA716x_I2C_TXBUSY) {
 		msleep(10);
-		reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 		if (reg & SAA716x_I2C_TXBUSY) {
 			dprintk(SAA716x_ERROR, 1, "FIFO full or Blocked");
 
@@ -150,7 +150,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 data)
 	}
 
 	/* Write to FIFO */
-	SAA716x_WR(I2C_DEV, TX_FIFO, data);
+	SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
 	err = saa716x_xfer_wait(i2c, I2C_DEV);
 	if (err < 0) {
 		err = saa716x_i2c_reinit(i2c, I2C_DEV);
@@ -176,10 +176,10 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
 	u32 reg;
 
 	/* Check FIFO status before RX */
-	reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (reg & SAA716x_I2C_RXBUSY) {
 		msleep(10);
-		reg = SAA716x_RD(I2C_DEV, I2C_STATUS);
+		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 		if (reg & SAA716x_I2C_RXBUSY) {
 			dprintk(SAA716x_ERROR, 1, "FIFO empty");
 
@@ -197,7 +197,7 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
 	}
 
 	/* Read from FIFO */
-	*data = SAA716x_RD(I2C_DEV, RX_FIFO);
+	*data = SAA716x_EPRD(I2C_DEV, RX_FIFO);
 
 	return 0;
 exit:
@@ -271,7 +271,7 @@ static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 	int i, err = 0;
 
 	/* Clear INT status before first byte */
-	SAA716x_WR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
 	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <W>[ ", __func__, msg->addr);
 	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr);
@@ -358,10 +358,10 @@ static int saa716x_i2c_busb_xfer(struct i2c_adapter *adapter, struct i2c_msg *ms
 
 void saa716x_i2cint_disable(struct saa716x_dev *saa716x)
 {
-	SAA716x_WR(I2C_A, INT_CLR_ENABLE, 0x1fff);
-	SAA716x_WR(I2C_B, INT_CLR_ENABLE, 0x1fff);
-	SAA716x_WR(I2C_A, INT_CLR_STATUS, 0x1fff);
-	SAA716x_WR(I2C_B, INT_CLR_STATUS, 0x1fff);
+	SAA716x_EPWR(I2C_A, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_EPWR(I2C_B, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_EPWR(I2C_A, INT_CLR_STATUS, 0x1fff);
+	SAA716x_EPWR(I2C_B, INT_CLR_STATUS, 0x1fff);
 }
 EXPORT_SYMBOL_GPL(saa716x_i2cint_disable);
 
@@ -429,10 +429,10 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 		i2c->i2c_dev	= I2C_DEV[i];
 		i2c->i2c_rate	= saa716x->i2c_rate;
- 
+
 		msleep(100);
 
-		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
+		reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
 		if (!(reg & 0xd)) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, saa716x_i2c[i].name);
 			err = -EIO;
@@ -440,37 +440,37 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		}
 
 		/* Flush queue */
-		SAA716x_WR(I2C_DEV[i], I2C_CONTROL, 0xcc);
+		SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xcc);
 
 		/* Disable all interrupts and clear status */
-		SAA716x_WR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
-		SAA716x_WR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
+		SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
+		SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
 
 		/* Reset I2C Core and generate a delay */
-		SAA716x_WR(I2C_DEV[i], I2C_CONTROL, 0xc1);
+		SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xc1);
 
 		msleep(100);
 
-		reg = SAA716x_RD(I2C_DEV[i], I2C_CONTROL);
+		reg = SAA716x_EPRD(I2C_DEV[i], I2C_CONTROL);
 		if (reg != 0xc0) {
 			dprintk(SAA716x_ERROR, 1, "Core RESET failed");
 			err = -EIO;
 			goto exit;
 		}
-		
+
 		/* I2C Rate Setup */
 		switch (i2c->i2c_rate) {
 		case SAA716x_I2C_RATE_400:
 			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 400k", i, saa716x_i2c[i].name);
-			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], I2C_SDA_HOLD, 0x19);
+			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+			SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x19);
 			break;
 		case SAA716x_I2C_RATE_100:
 			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 100k", i, saa716x_i2c[i].name);
-			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
-			SAA716x_WR(I2C_DEV[i], I2C_SDA_HOLD, 0x60);
+			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+			SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x60);
 			break;
 		default:
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Unknown Rate (Rate=0x%02x)", i, saa716x_i2c[i].name, i2c->i2c_rate);
@@ -478,8 +478,8 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		}
 
 		/* Disable all interrupts and clear status */
-		SAA716x_WR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
-		SAA716x_WR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
+		SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
+		SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
 
 		/* Enabled interrupts:
 		 * Master Transaction Done (),
@@ -489,14 +489,14 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		 * Master Transaction Data Request
 		 * (0xc7)
 		 */
-		SAA716x_WR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
+		SAA716x_EPWR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
 						       I2C_ERROR_IBE			| \
 						       I2C_ENABLE_MTNA			| \
 						       I2C_ENABLE_MAF			| \
 						       I2C_ENABLE_MTD);
 
 		/* Check interrupt enable status */
-		reg = SAA716x_RD(I2C_DEV[i], INT_ENABLE);
+		reg = SAA716x_EPRD(I2C_DEV[i], INT_ENABLE);
 		if (reg != 0xc7) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Interrupt enable failed, Exiting !", i, saa716x_i2c[i].name);
 			err = -EIO;
@@ -504,7 +504,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		}
 
 		/* Check status */
-		reg = SAA716x_RD(I2C_DEV[i], I2C_STATUS);
+		reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
 		if (!(reg & 0xd)) {
 			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s has bad state, Exiting !", i, saa716x_i2c[i].name);
 			err = -EIO;
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index a8ccd8649cea2..9fb9c0a085a5d 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -61,10 +61,10 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	};
 
 	/* let HW take care of MSI race */
-	SAA716x_WR(MSI, MSI_DELAY_TIMER, 0x0);
+	SAA716x_EPWR(MSI, MSI_DELAY_TIMER, 0x0);
 
 	/* INTA Polarity: Active High */
-	SAA716x_WR(MSI, MSI_INTA_POLARITY, MSI_INTA_POLARITY_HIGH);
+	SAA716x_EPWR(MSI, MSI_INTA_POLARITY, MSI_INTA_POLARITY_HIGH);
 
 	/*
 	 * IRQ Edge Rising: 25:24 = 0x01
@@ -72,34 +72,34 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	 * MSI ID: 4:0 = 0x00
 	 */
 	for (i = 0; i < MSI_CONFIG_REGS; i++)
-		SAA716x_WR(MSI, MSI_CONFIG_REG[i], MSI_INT_POL_EDGE_RISE);
+		SAA716x_EPWR(MSI, MSI_CONFIG_REG[i], MSI_INT_POL_EDGE_RISE);
 
 	/* get Status */
-	ena_l = SAA716x_RD(MSI, MSI_INT_ENA_L);
-	ena_h = SAA716x_RD(MSI, MSI_INT_ENA_H);
-	sta_l = SAA716x_RD(MSI, MSI_INT_STATUS_L);
-	sta_h = SAA716x_RD(MSI, MSI_INT_STATUS_H);
+	ena_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
+	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
+	sta_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
+	sta_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 
 	/* disable and clear enabled and asserted IRQ's */
 	if (sta_l)
-		SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, sta_l);
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, sta_l);
 
 	if (sta_h)
-		SAA716x_WR(MSI, MSI_INT_STATUS_CLR_H, sta_h);
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, sta_h);
 
 	if (ena_l)
-		SAA716x_WR(MSI, MSI_INT_ENA_CLR_L, ena_l);
+		SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, ena_l);
 
 	if (ena_h)
-		SAA716x_WR(MSI, MSI_INT_ENA_CLR_H, ena_h);
+		SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, ena_h);
 
 	msleep(5);
 
 	/* Check IRQ's really disabled */
-	ena_l = SAA716x_RD(MSI, MSI_INT_ENA_L);
-	ena_h = SAA716x_RD(MSI, MSI_INT_ENA_H);
-	sta_l = SAA716x_RD(MSI, MSI_INT_STATUS_L);
-	sta_h = SAA716x_RD(MSI, MSI_INT_STATUS_H);
+	ena_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
+	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
+	sta_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
+	sta_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 
 	if ((ena_l == 0) && (ena_h == 0) && (sta_l == 0) && (sta_h == 0))
 		return 0;
@@ -112,9 +112,9 @@ EXPORT_SYMBOL_GPL(saa716x_msi_init);
 
 void saa716x_msiint_disable(struct saa716x_dev *saa716x)
 {
-	SAA716x_WR(MSI, MSI_INT_ENA_L, 0x0);
-	SAA716x_WR(MSI, MSI_INT_ENA_H, 0x0);
-	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, 0xffffffff);
-	SAA716x_WR(MSI, MSI_INT_STATUS_CLR_L, 0x0000ffff);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_L, 0x0);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_H, 0x0);
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, 0xffffffff);
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, 0x0000ffff);
 }
 EXPORT_SYMBOL_GPL(saa716x_msiint_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 3d58a415e3876..45e4a5c287ea4 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -100,44 +100,44 @@ static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 	}
 
 	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
-		SAA716x_RD(VI0, INT_STATUS),
-		SAA716x_RD(VI1, INT_STATUS),
-		SAA716x_RD(VI0, INT_ENABLE),
-		SAA716x_RD(VI1, INT_ENABLE));
+		SAA716x_EPRD(VI0, INT_STATUS),
+		SAA716x_EPRD(VI1, INT_STATUS),
+		SAA716x_EPRD(VI0, INT_ENABLE),
+		SAA716x_EPRD(VI1, INT_ENABLE));
 
 	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
-		SAA716x_RD(FGPI0, INT_STATUS),
-		SAA716x_RD(FGPI1, INT_STATUS),
-		SAA716x_RD(FGPI0, INT_ENABLE),
-		SAA716x_RD(FGPI0, INT_ENABLE));
+		SAA716x_EPRD(FGPI0, INT_STATUS),
+		SAA716x_EPRD(FGPI1, INT_STATUS),
+		SAA716x_EPRD(FGPI0, INT_ENABLE),
+		SAA716x_EPRD(FGPI0, INT_ENABLE));
 
 	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
-		SAA716x_RD(FGPI2, INT_STATUS),
-		SAA716x_RD(FGPI3, INT_STATUS),
-		SAA716x_RD(FGPI2, INT_ENABLE),
-		SAA716x_RD(FGPI3, INT_ENABLE));
+		SAA716x_EPRD(FGPI2, INT_STATUS),
+		SAA716x_EPRD(FGPI3, INT_STATUS),
+		SAA716x_EPRD(FGPI2, INT_ENABLE),
+		SAA716x_EPRD(FGPI3, INT_ENABLE));
 
 	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
-		SAA716x_RD(AI0, AI_STATUS),
-		SAA716x_RD(AI1, AI_STATUS),
-		SAA716x_RD(AI0, AI_CTL),
-		SAA716x_RD(AI1, AI_CTL));
+		SAA716x_EPRD(AI0, AI_STATUS),
+		SAA716x_EPRD(AI1, AI_STATUS),
+		SAA716x_EPRD(AI0, AI_CTL),
+		SAA716x_EPRD(AI1, AI_CTL));
 
 	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
-		SAA716x_RD(MSI, MSI_INT_STATUS_L),
-		SAA716x_RD(MSI, MSI_INT_STATUS_H),
-		SAA716x_RD(MSI, MSI_INT_ENA_L),
-		SAA716x_RD(MSI, MSI_INT_ENA_H));
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
 
 	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
-		SAA716x_RD(I2C_A, INT_STATUS),
-		SAA716x_RD(I2C_B, INT_STATUS),
-		SAA716x_RD(I2C_A, INT_CLR_STATUS),
-		SAA716x_RD(I2C_B, INT_CLR_STATUS));
+		SAA716x_EPRD(I2C_A, INT_STATUS),
+		SAA716x_EPRD(I2C_B, INT_STATUS),
+		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
+		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
 
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
-		SAA716x_RD(DCS, DCSC_INT_STATUS),
-		SAA716x_RD(DCS, DCSC_INT_ENABLE));
+		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
+		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 
 	return IRQ_HANDLED;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 22deb515da0e7..715eaa98a9556 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -53,8 +53,11 @@
 		.driver_data	= (unsigned long) (__configptr)		\
 }
 
-#define SAA716x_WR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
-#define SAA716x_RD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
+#define SAA716x_EPWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
+#define SAA716x_EPRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
+
+#define SAA716x_RCWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
+#define SAA716x_RCRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
 
 struct saa716x_dev;
 
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index d00195615627d..c10491682e9c6 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -48,6 +48,18 @@
 #define HSP_RGB				(0x00000001 <<  2)
 #define HSP_MODE			(0x00000003 <<  0)
 
+#define RCRB_CTRL			0x004
+#define RCRB_CFG_ADDR			0x008
+#define RCRB_CFG_EXT_ADDR		0x00c
+#define RCRB_IO_ADDR			0x010
+#define RCRB_MEM_LADDR			0x014
+#define RCRB_MEM_UADDR			0x018
+#define RCRB_DATA			0x01c
+#define RCRB_MASK			0x020
+#define RCRB_MSG_HDR			0x040
+#define RCRB_MSG_PL0			0x044
+#define RCRB_MSG_PL1			0x048
+
 #define ID_MASK0			0x020
 #define VI_ID_MASK_0			(0x000000ff <<  8)
 #define VI_DATA_ID_0			(0x000000ff <<  0)
@@ -75,6 +87,14 @@
 #define VI_REVS				(0x00000001 <<  1)
 #define VI_REHS				(0x00000001 <<  0)
 
+#define TC76543210			0x800
+#define TCFEDCBA98			0x804
+#define PHYCFG				0x900
+#define CONFIG				0xfd4
+#define INT_ENABLE_CLR			0xfd8
+#define INT_ENABLE_SET			0xfdc
+
+
 #define INT_STATUS			0xfe0
 #define VI_STAT_FID_AUX			(0x00000001 << 31)
 #define VI_STAT_FID_VID			(0x00000001 << 30)
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 7e01f1ad12d06..9b22161a764bd 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -3,16 +3,16 @@
 
 void saa716x_vipint_disable(struct saa716x_dev *saa716x)
 {
-	SAA716x_WR(VI0, INT_ENABLE, 0); /* disable VI 0 IRQ */
-	SAA716x_WR(VI1, INT_ENABLE, 0); /* disable VI 1 IRQ */
-	SAA716x_WR(VI0, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
-	SAA716x_WR(VI1, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
+	SAA716x_EPWR(VI0, INT_ENABLE, 0); /* disable VI 0 IRQ */
+	SAA716x_EPWR(VI1, INT_ENABLE, 0); /* disable VI 1 IRQ */
+	SAA716x_EPWR(VI0, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
+	SAA716x_EPWR(VI1, INT_CLR_STATUS, 0x3ff); /* clear IRQ */
 }
 EXPORT_SYMBOL_GPL(saa716x_vipint_disable);
 
 void saa716x_vip_disable(struct saa716x_dev *saa716x)
 {
-       SAA716x_WR(VI0, VIP_POWER_DOWN, VI_PWR_DWN);
-       SAA716x_WR(VI1, VIP_POWER_DOWN, VI_PWR_DWN);
+       SAA716x_EPWR(VI0, VIP_POWER_DOWN, VI_PWR_DWN);
+       SAA716x_EPWR(VI1, VIP_POWER_DOWN, VI_PWR_DWN);
 }
 EXPORT_SYMBOL_GPL(saa716x_vip_disable);

From 4a07b2b989f03b6981d8798b6b468158d2c04758 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:02:43 +0400
Subject: [PATCH 039/364] saa716x: Fix usage of wrong datatypes

Thanks to Jacky for pointing this

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index dec53d49fe51b..5638c617f39a2 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -7,7 +7,8 @@
 
 int saa716x_cgu_init(struct saa716x_dev *saa716x)
 {
-	int M, N;
+	s16 M;
+	s8 N;
 	u8 i;
 	u32 boot_div[15], freq[15];
 	u32 CGU_FDC[15] = {

From 4b23e19272e603ad61bab7146858f413ae968f80 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:03:20 +0400
Subject: [PATCH 040/364] saa716x: CGU related fixes

From Jacky

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 5638c617f39a2..d251764fc29f5 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -2,7 +2,7 @@
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
 
-#define CGU_CLKS	15
+#define CGU_CLKS	14
 #define PLL_FREQ	2500
 
 int saa716x_cgu_init(struct saa716x_dev *saa716x)
@@ -10,8 +10,8 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 	s16 M;
 	s8 N;
 	u8 i;
-	u32 boot_div[15], freq[15];
-	u32 CGU_FDC[15] = {
+	u32 boot_div[14], freq[14];
+	u32 CGU_FDC[14] = {
 		CGU_FDC_0,
 		CGU_FDC_1,
 		CGU_FDC_2,
@@ -49,7 +49,7 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 		M  = ((boot_div[i] >> 3) & 0xff) + N;
 
 		if (M)
-			freq[i] = (N * PLL_FREQ) / M;
+			freq[i] = ((u32)N * PLL_FREQ) / (u32)M;
 		else
 			freq[i] = 0;
 
@@ -105,7 +105,7 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 	SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000);
 	SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
 
-	msleep(50); /* wait for PLL */
+	msleep(1000); /* wait for PLL */
 
 	return 0;
 }

From aa4be3f9a37c907f51c9865dc3971e7b7130aeb6 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:04:14 +0400
Subject: [PATCH 041/364] saa716x: Continue MSI-X implementation

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c |   4 +
 drivers/media/pci/saa716x/saa716x_hybrid.c |   4 +
 drivers/media/pci/saa716x/saa716x_pci.c    | 226 ++++++++++++++++++---
 drivers/media/pci/saa716x/saa716x_priv.h   |  13 +-
 4 files changed, 217 insertions(+), 30 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 89e1a43d00ee1..789a69b29c747 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -24,6 +24,9 @@ unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
 
+unsigned int int_type;
+module_param(int_type, int, 0644);
+MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
 
 #define DRIVER_NAME	"SAA716x Budget"
 
@@ -79,6 +82,7 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	}
 
 	saa716x->verbose	= verbose;
+	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 730fe55775175..c0a1b8a7a3321 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -19,6 +19,9 @@ unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
 
+unsigned int int_type;
+module_param(int_type, int, 0644);
+MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
 
 #define DRIVER_NAME	"SAA716x Hybrid"
 
@@ -36,6 +39,7 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	}
 
 	saa716x->verbose	= verbose;
+	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 45e4a5c287ea4..39e3717800429 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -5,6 +5,7 @@
 #include <linux/vmalloc.h>
 #include <linux/init.h>
 #include <linux/device.h>
+#include <linux/delay.h>
 
 #include <asm/irq.h>
 #include <linux/signal.h>
@@ -13,6 +14,7 @@
 
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
+#include "saa716x_msi.h"
 
 #define DRIVER_NAME				"SAA716x Core"
 
@@ -87,6 +89,24 @@ static const char *i2c_labels[] = {
 	"INTERRUPT_STFNF",
 };
 
+struct saa716x_msix_entry {
+	u8 desc[32];
+	irqreturn_t (*handler)(int irq, void *dev_id);
+};
+
+static irqreturn_t saa716x_msi_handler(int irq, void *dev_id)
+{
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t saa716x_i2c_handler(int irq, void *dev_id)
+{
+	return IRQ_HANDLED;
+}
+
+static struct saa716x_msix_entry saa716x_msix_handler[] = {
+	{ .desc = "SAA716x_I2C_HANDLER", .handler = saa716x_i2c_handler }
+};
 
 static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 {
@@ -142,10 +162,122 @@ static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+static int saa716x_enable_msi(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+	int err;
+
+	err = pci_enable_msi(pdev);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "MSI enable failed");
+		return err;
+	}
+
+	return 0;
+}
+
+static int saa716x_enable_msix(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+	int i, ret = 0;
+
+	for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++)
+		saa716x->msix_entries[i].entry = i;
+
+	ret = pci_enable_msix(pdev, saa716x->msix_entries, SAA716x_MSI_MAX_VECTORS);
+	if (ret < 0)
+		dprintk(SAA716x_ERROR, 1, "MSI-X request failed");
+	if (ret > 0)
+		dprintk(SAA716x_ERROR, 1, "Request exceeds available IRQ's");
+
+	return ret;
+}
+
+static int saa716x_request_irq(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+	int i, ret = 0;
+
+	if (saa716x->int_type == MODE_MSI)
+		ret = saa716x_enable_msi(saa716x);
+
+	else if (saa716x->int_type == MODE_MSI_X)
+		ret = saa716x_enable_msix(saa716x);
+
+	if (ret) {
+		dprintk(SAA716x_ERROR, 1, "INT-A Mode");
+		saa716x->int_type = MODE_INTA;
+	}
+
+	if (saa716x->int_type == MODE_MSI) {
+		ret = request_irq(pdev->irq,
+				  saa716x_msi_handler,
+				  IRQF_SHARED,
+				  DRIVER_NAME,
+				  saa716x);
+
+		if (ret) {
+			pci_disable_msi(pdev);
+			dprintk(SAA716x_ERROR, 1, "MSI registration failed");
+			ret = -EIO;
+		}
+	}
+
+	if (saa716x->int_type == MODE_MSI_X) {
+		for (i = 0; SAA716x_MSI_MAX_VECTORS; i++) {
+			ret = request_irq(saa716x->msix_entries[i].vector,
+					  saa716x_msix_handler[i].handler,
+					  IRQF_SHARED,
+					  saa716x_msix_handler[i].desc,
+					  saa716x);
+
+			dprintk(SAA716x_ERROR, 1, "%s @ 0x%p", saa716x_msix_handler[i].desc, saa716x_msix_handler[i].handler);
+			if (ret) {
+				dprintk(SAA716x_ERROR, 1, "%s MSI-X-%d registration failed", saa716x_msix_handler[i].desc, i);
+				return -1;
+			}
+		}
+	}
+
+	if (saa716x->int_type == MODE_INTA) {
+		ret = request_irq(pdev->irq,
+				  saa716x_pci_irq,
+				  IRQF_SHARED,
+				  DRIVER_NAME,
+				  saa716x);
+
+		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
+		ret = -ENODEV;
+	}
+
+	return ret;
+}
+
+static void saa716x_free_irq(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+	int i, vector;
+
+	if (saa716x->int_type == MODE_MSI_X) {
+
+		for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++) {
+			vector = saa716x->msix_entries[i].vector;
+			free_irq(vector, saa716x);
+		}
+
+		pci_disable_msix(pdev);
+
+	} else {
+		free_irq(pdev->irq, pdev);
+		if (saa716x->int_type == MODE_MSI)
+			pci_disable_msi(pdev);
+	}
+}
+
 int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
-	int err = 0, ret = -ENODEV, i, use_dac;
+	int err = 0, ret = -ENODEV, i, use_dac, pm_cap;
 	u32 msi_cap;
 	u8 revision;
 
@@ -172,34 +304,56 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 
 	pci_set_master(pdev);
 
-	for (i = 0; i < 6; i++) {
-		if (pci_resource_flags(pdev, i) & IORESOURCE_MEM) {
-			dprintk(SAA716x_DEBUG, 1, "Found IOMEM on BAR%d", i);
-			saa716x->addr = pci_resource_start(pdev, i);
-			saa716x->len  = pci_resource_len(pdev, i);
-			break;
-		}
+	pm_cap = pci_find_capability(pdev, PCI_CAP_ID_PM);
+	if (pm_cap == 0) {
+		dprintk(SAA716x_ERROR, 1, "Cannot find Power Management Capability");
+		err = -EIO;
+		goto fail1;
 	}
 
-	if (!request_mem_region(saa716x->addr, saa716x->len, DRIVER_NAME)) {
-		dprintk(SAA716x_ERROR, 1, "Request region failed");
+	if (!request_mem_region(pci_resource_start(pdev, 0),
+				pci_resource_len(pdev, 0),
+				DRIVER_NAME)) {
+
+		dprintk(SAA716x_ERROR, 1, "BAR0 Request failed");
 		ret = -ENODEV;
 		goto fail1;
 	}
 
-	saa716x->mmio = ioremap(saa716x->addr, saa716x->len);
+	if (!request_mem_region(pci_resource_start(pdev, 2),
+				pci_resource_len(pdev, 2),
+				DRIVER_NAME)) {
+
+		dprintk(SAA716x_ERROR, 1, "BAR2 Request failed");
+		release_mem_region(pci_resource_start(pdev, 0),
+				   pci_resource_len(pdev, 0));
+
+		ret = -ENODEV;
+		goto fail1;
+	}
+
+	saa716x->mmio = ioremap(pci_resource_start(pdev, 0),
+				pci_resource_len(pdev, 0));
+
 	if (!saa716x->mmio) {
-		dprintk(SAA716x_ERROR, 1, "IO remap failed");
+		dprintk(SAA716x_ERROR, 1, "Mem 0 remap failed");
+		ret = -ENODEV;
+		goto fail2;
+	}
+
+	saa716x->mmbd = ioremap(pci_resource_start(pdev, 2),
+				pci_resource_len(pdev, 2));
+
+	if (!saa716x->mmbd) {
+		dprintk(SAA716x_ERROR, 1, "Mem 1 remap failed");
 		ret = -ENODEV;
 		goto fail2;
 	}
 
-	err = request_irq(pdev->irq,
-			  saa716x_pci_irq,
-			  IRQF_SHARED | IRQF_DISABLED,
-			  DRIVER_NAME,
-			  saa716x);
+	for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++)
+		saa716x->msix_entries[i].entry = i;
 
+	err = saa716x_request_irq(saa716x);
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
 		ret = -ENODEV;
@@ -218,10 +372,10 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		saa716x->pdev->subsystem_device);
 
 	dprintk(SAA716x_ERROR, 0,
-		"irq: %d,\n    memory: 0x%02lx, mmio: 0x%p\n",
+		"irq: %d,\n    mmio: 0x%p mmbd: 0x%p\n",
 		saa716x->pdev->irq,
-		saa716x->addr,
-		saa716x->mmio);
+		saa716x->mmio,
+		saa716x->mmbd);
 
 	dprintk(SAA716x_ERROR, 0, "    SAA%02x %sBit, MSI %s, MSI-X=%d msgs",
 		saa716x->pdev->device,
@@ -229,19 +383,26 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		(((msi_cap >> 16) & 0x01) == 1 ? "Enabled" : "Disabled"),
 		(1 << ((msi_cap >> 17) & 0x07)));
 
-
 	pci_set_drvdata(pdev, saa716x);
 
 	return 0;
 
 fail3:
 	dprintk(SAA716x_ERROR, 1, "Err: IO Unmap");
+	if (saa716x->mmbd)
+		iounmap(saa716x->mmbd);
+
 	if (saa716x->mmio)
 		iounmap(saa716x->mmio);
 
 fail2:
 	dprintk(SAA716x_ERROR, 1, "Err: Release regions");
-	release_mem_region(saa716x->addr, saa716x->len);
+
+	release_mem_region(pci_resource_start(pdev, 2),
+			   pci_resource_len(pdev, 2));
+
+	release_mem_region(pci_resource_start(pdev, 0),
+			   pci_resource_len(pdev, 0));
 
 fail1:
 	dprintk(SAA716x_ERROR, 1, "Err: Disabling device");
@@ -257,14 +418,23 @@ void __devexit saa716x_pci_exit(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 
-	free_irq(pdev->irq, saa716x);
+	saa716x_free_irq(saa716x);
 
-	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem: 0x%p", saa716x->pdev->device, saa716x->mmio);
-	if (saa716x->mmio)
-		iounmap(saa716x->mmio);
+	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem0: 0x%p mem1: 0x%p",
+		saa716x->pdev->device,
+		saa716x->mmio,
+		saa716x->mmbd);
 
-	if (saa716x->addr)
-		release_mem_region(saa716x->addr, saa716x->len);
+	if (saa716x->mmbd) {
+		iounmap(saa716x->mmbd);
+		release_mem_region(pci_resource_start(pdev, 2),
+				   pci_resource_len(pdev, 2));
+	}
+	if (saa716x->mmio) {
+		iounmap(saa716x->mmio);
+		release_mem_region(pci_resource_start(pdev, 0),
+				   pci_resource_len(pdev, 0));
+	}
 
 	pci_disable_device(pdev);
 	pci_set_drvdata(pdev, NULL);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 715eaa98a9556..a340089b53b29 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -59,6 +59,9 @@
 #define SAA716x_RCWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
 #define SAA716x_RCRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
 
+
+#define SAA716x_MSI_MAX_VECTORS			16
+
 struct saa716x_dev;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
@@ -82,9 +85,15 @@ struct saa716x_dev {
 	u8 				revision;
 
 	/* PCI */
-	unsigned long			addr;
 	void __iomem			*mmio;
-	u32				len;
+	void __iomem			*mmbd;
+
+#define MODE_INTA	0
+#define MODE_MSI	1
+#define MODE_MSI_X	2
+	u8				int_type;
+
+	struct msix_entry		msix_entries[SAA716x_MSI_MAX_VECTORS];
 
 	/* I2C */
 	struct saa716x_i2c		i2c[2];

From 98d8db29fccf22de44443ad77a7f29be5b5579ab Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:04:57 +0400
Subject: [PATCH 042/364] saa716x: Add routines to handle clock related events

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 319 ++++++++++++++++++++++--
 1 file changed, 303 insertions(+), 16 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index d251764fc29f5..368439c7aa5af 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -5,28 +5,31 @@
 #define CGU_CLKS	14
 #define PLL_FREQ	2500
 
+u32 CGU_FDC[CGU_CLKS] = {
+	CGU_FDC_0,
+	CGU_FDC_1,
+	CGU_FDC_2,
+	CGU_FDC_3,
+	CGU_FDC_4,
+	CGU_FDC_5,
+	CGU_FDC_6,
+	CGU_FDC_7,
+	CGU_FDC_8,
+	CGU_FDC_9,
+	CGU_FDC_10,
+	CGU_FDC_11,
+	CGU_FDC_12,
+	CGU_FDC_13,
+};
+
+u32 CGU_FREQ[CGU_CLKS];
+
 int saa716x_cgu_init(struct saa716x_dev *saa716x)
 {
 	s16 M;
 	s8 N;
 	u8 i;
 	u32 boot_div[14], freq[14];
-	u32 CGU_FDC[14] = {
-		CGU_FDC_0,
-		CGU_FDC_1,
-		CGU_FDC_2,
-		CGU_FDC_3,
-		CGU_FDC_4,
-		CGU_FDC_5,
-		CGU_FDC_6,
-		CGU_FDC_7,
-		CGU_FDC_8,
-		CGU_FDC_9,
-		CGU_FDC_10,
-		CGU_FDC_11,
-		CGU_FDC_12,
-		CGU_FDC_13,
-	};
 
 	SAA716x_EPWR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
 	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* MMU */
@@ -110,3 +113,287 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_cgu_init);
+
+#define	PORT_ALL	0
+#define	PORT_VI0	1
+#define	PORT_VI1	2
+#define	PORT_FGPI0	3
+#define	PORT_FGPI1	4
+#define	PORT_FGPI2	5
+#define	PORT_FGPI3	6
+#define	PORT_AI0	7
+#define	PORT_AI1	8
+
+int saa716x_set_intclk(struct saa716x_dev *saa716x, u32 clk_domain)
+{
+	int delay = 1, err = 0;
+
+	switch (clk_domain) {
+	case PORT_VI0:
+		SAA716x_EPWR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
+		delay = 0;
+		break;
+
+	case PORT_VI1:
+		SAA716x_EPWR(CGU, CGU_PCR_6, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_6, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_6, CGU_ESR_FD_EN); /* Frac div */
+		delay = 0;
+		break;
+
+	case PORT_FGPI0:
+		SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN); /* Frac div */
+		break;
+
+	case PORT_FGPI1:
+		SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN); /* Frac div */
+		break;
+
+	case PORT_FGPI2:
+		SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN); /* Frac div */
+		break;
+
+	case PORT_FGPI3:
+		SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN); /* Frac div */
+		break;
+
+	case PORT_AI0:
+		SAA716x_EPWR(CGU, CGU_PCR_11, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_11, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_11, CGU_ESR_FD_EN); /* Frac div */
+		break;
+
+	case PORT_AI1:
+		SAA716x_EPWR(CGU, CGU_PCR_12, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_12, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN); /* Frac div */
+		break;
+
+	case PORT_ALL:
+		/* VI 0 */
+		SAA716x_EPWR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
+		SAA716x_EPWR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
+		SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
+		SAA716x_EPWR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
+
+		/* VI 1 */
+		SAA716x_EPWR(CGU, CGU_PCR_6, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_6, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_6, CGU_ESR_FD_EN);
+
+		/* FGPI 0 */
+		SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN);
+
+		/* FGPI 1 */
+		SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN);
+
+		/* FGPI 2 */
+		SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN);
+
+		/* FGPI 3 */
+		SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN);
+
+		/* AI 0 */
+		SAA716x_EPWR(CGU, CGU_PCR_11, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_11, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_11, CGU_ESR_FD_EN);
+
+		/* AI 1 */
+		SAA716x_EPWR(CGU, CGU_PCR_12, CGU_PCR_RUN);
+		SAA716x_EPWR(CGU, CGU_SCR_12, CGU_SCR_ENF1);
+		SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000);
+		SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
+		break;
+
+	default:
+		dprintk(SAA716x_ERROR, 1, "Unknown PORT: %d", clk_domain);
+		delay = 0;
+		err = -EINVAL;
+		break;
+	}
+
+	/* Wait for the PLL to be ready */
+	if (delay) {
+		dprintk(SAA716x_DEBUG, 1, "Set PORT%d internal clock", clk_domain);
+		msleep(1000);
+	}
+
+	return err;
+}
+
+int saa716x_set_extclk(struct saa716x_dev *saa716x, u32 port)
+{
+	int delay = 1, err = 0;
+
+	switch (port) {
+	case PORT_VI0:
+		SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000002);  /* select VIP0_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_5, 0x00000000);  /* disable divider */
+		delay = 0;
+		break;
+
+	case PORT_VI1:
+		SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000003);  /* select VIP1_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_6, 0x00000000);  /* disable divider */
+		delay = 0;
+		break;
+
+	case PORT_FGPI0:
+		SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000004);  /* select FGPI0_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_7, 0x00000000);  /* disable divider */
+		break;
+
+	case PORT_FGPI1:
+		SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000005);  /* select FGPI1_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_8, 0x00000000);  /* disable divider */
+		break;
+
+	case PORT_FGPI2:
+		SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000006);  /* select FGPI2_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_9, 0x00000000);  /* disable divider */
+		break;
+
+	case PORT_FGPI3:
+		SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000007);  /* select FGPI3_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_10, 0x00000000);  /* disable divider */
+		break;
+
+	case PORT_AI0:
+		SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000008);  /* select AI0_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_11, 0x00000000);  /* disable divider */
+		break;
+
+	case PORT_AI1:
+		SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000009);  /* select AI1_CLK */
+		SAA716x_EPWR(CGU, CGU_ESR_12, 0x00000000);  /* disable divider */
+		break;
+
+	default:
+		dprintk(SAA716x_DEBUG, 1, "Error: unsupported port: %d", port);
+		delay = 0;
+		err = -EINVAL;
+		break;
+	}
+
+	/* Wait for the PLL to be ready */
+	if (delay) {
+		dprintk(SAA716x_DEBUG, 1, "Set PORT%d internal clock", port);
+		msleep(1000);
+	}
+
+	return err;
+}
+
+enum saa716x_clk {
+	SAA716x_CLK_PSS		= 0,
+	SAA716x_CLK_DCS,
+	SAA716x_CLK_SPI,
+	SAA716x_CLK_I2C,
+	SAA716x_CLK_PHI,
+	SAA716x_CLK_VI0,
+	SAA716x_CLK_VI1,
+	SAA716x_CLK_FGPI0,
+	SAA716x_CLK_FGPI1,
+	SAA716x_CLK_FGPI2,
+	SAA716x_CLK_FGPI3,
+	SAA716x_CLK_AI0,
+	SAA716x_CLK_AI1,
+	SAA716x_CLK_PHY
+};
+
+int saa716x_set_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain, u32 frequency)
+{
+	u32 M = 1, N = 1;
+	u32 reset = 0, freq, cur_div;
+	s8 ucN, ucM, sub, add, lsb;
+	int i;
+
+	/* calculate a new divider */
+	do {
+		M = (N * PLL_FREQ) / frequency;
+		if (M == 0)
+			N++;
+	} while (M == 0);
+
+	/* calculate real frequency */
+	freq = (N * PLL_FREQ) / M;
+
+	ucN = 0xFF & N;
+	ucM = 0xFF & M;
+	sub = -ucN;
+	add = ucM - ucN;
+	lsb = 4; /* run */
+
+	/* enable stretching for N/M smaller than 1/2 */
+	if (((10 * N) / M) < 5)
+        	lsb |= 1; /* Add stretching */
+
+	cur_div   = sub & 0xff;
+	cur_div <<= 8;
+	cur_div  |= add & 0xff;
+	cur_div <<= 3;
+	cur_div  |= lsb;
+
+	dprintk(SAA716x_DEBUG, 1, "INFO: SetClockFrequency %d f %d set f %d, N = %d, M = %d, divider 0x%x",
+		clk_domain,
+		frequency,
+		freq,
+		N,
+		M,
+		cur_div);
+
+	/* add reset to the frequency divider, update register and wait */
+	SAA716x_EPWR(CGU, CGU_FDC[clk_domain], cur_div | 0x2);
+
+	/* monitor reset disable */
+	for (i = 0; i < CGU_CLKS; i++) {
+		msleep(10);
+		reset = SAA716x_EPRD(CGU, CGU_FREQ[clk_domain]);
+		if (cur_div == reset)
+			break;
+	}
+
+	/* if not changed, disable reset */
+	if (cur_div != reset)
+		SAA716x_EPWR(CGU, CGU_FREQ[clk_domain], cur_div);
+
+	return 0;
+}
+
+u32 saa716x_get_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain)
+{
+	return CGU_FREQ[clk_domain];
+}
+

From bbcfecd170d7e26e30aeade6755b3f761afc5f3c Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:05:58 +0400
Subject: [PATCH 043/364] saa716x: Add support for Avermedia HC82 PCIe
 expresscard

Thanks to Avermedia for sending device samples

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 17 +++++++++++++++++
 drivers/media/pci/saa716x/saa716x_hybrid.h |  5 ++++-
 2 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index c0a1b8a7a3321..e469d2c95ac0e 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -152,10 +152,27 @@ static struct saa716x_config saa716x_nemo_config = {
 };
 
 
+#define SAA716x_MODEL_AVERMEDIA_HC82	"Avermedia PCIe Expresscard HC82"
+#define SAA716x_DEV_AVERMEDIA_HC82	"DVB-T + ATSC + Analog"
+
+static int load_config_averhc82(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+	return ret;
+}
+
+static struct saa716x_config saa716x_averhc82_config = {
+	.model_name		= SAA716x_MODEL_AVERMEDIA_HC82,
+	.dev_type		= SAA716x_DEV_AVERMEDIA_HC82,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_averhc82,
+};
+
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
+	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
 	{
 		.vendor = 0,
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index 624e6dcebb2d1..4fdc2411e0e5c 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -1,7 +1,10 @@
 #ifndef __SAA716x_HYBRID_H
 #define __SAA716x_HYBRID_H
- 
+
 #define TWINHAN_TECHNOLOGIES	0x1822
+#define AVERMEDIA		0x1461
+
 #define TWINHAN_VP_6090		0x0027
+#define AVERMEDIA_HC82		0x2355
 
 #endif /* __SAA716x_HYBRID_H */

From 4818561209c5e0e149dac2b204198b1bed5909cb Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:06:44 +0400
Subject: [PATCH 044/364] saa716x: Disable BAR2 access

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c |  2 +-
 drivers/media/pci/saa716x/saa716x_pci.c    | 30 +++++++++++-----------
 drivers/media/pci/saa716x/saa716x_priv.h   |  2 +-
 3 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index e469d2c95ac0e..518ddb15ab28f 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -152,7 +152,7 @@ static struct saa716x_config saa716x_nemo_config = {
 };
 
 
-#define SAA716x_MODEL_AVERMEDIA_HC82	"Avermedia PCIe Expresscard HC82"
+#define SAA716x_MODEL_AVERMEDIA_HC82	"Avermedia HC82 Express-54"
 #define SAA716x_DEV_AVERMEDIA_HC82	"DVB-T + ATSC + Analog"
 
 static int load_config_averhc82(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 39e3717800429..4d3712c96d5eb 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -281,7 +281,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 	u32 msi_cap;
 	u8 revision;
 
-	dprintk(SAA716x_ERROR, 1, "found a %s PCI Express card", saa716x->config->model_name);
+	dprintk(SAA716x_ERROR, 1, "found a %s PCIe card", saa716x->config->model_name);
 
 	err = pci_enable_device(pdev);
 	if (err != 0) {
@@ -319,7 +319,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail1;
 	}
-
+#if 0
 	if (!request_mem_region(pci_resource_start(pdev, 2),
 				pci_resource_len(pdev, 2),
 				DRIVER_NAME)) {
@@ -331,7 +331,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail1;
 	}
-
+#endif
 	saa716x->mmio = ioremap(pci_resource_start(pdev, 0),
 				pci_resource_len(pdev, 0));
 
@@ -340,7 +340,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail2;
 	}
-
+#if 0
 	saa716x->mmbd = ioremap(pci_resource_start(pdev, 2),
 				pci_resource_len(pdev, 2));
 
@@ -349,7 +349,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail2;
 	}
-
+#endif
 	for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++)
 		saa716x->msix_entries[i].entry = i;
 
@@ -372,10 +372,9 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		saa716x->pdev->subsystem_device);
 
 	dprintk(SAA716x_ERROR, 0,
-		"irq: %d,\n    mmio: 0x%p mmbd: 0x%p\n",
+		"irq: %d,\n    mmio: 0x%p\n",
 		saa716x->pdev->irq,
-		saa716x->mmio,
-		saa716x->mmbd);
+		saa716x->mmio);
 
 	dprintk(SAA716x_ERROR, 0, "    SAA%02x %sBit, MSI %s, MSI-X=%d msgs",
 		saa716x->pdev->device,
@@ -389,18 +388,19 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 
 fail3:
 	dprintk(SAA716x_ERROR, 1, "Err: IO Unmap");
+#if 0
 	if (saa716x->mmbd)
 		iounmap(saa716x->mmbd);
-
+#endif
 	if (saa716x->mmio)
 		iounmap(saa716x->mmio);
 
 fail2:
 	dprintk(SAA716x_ERROR, 1, "Err: Release regions");
-
+#if 0
 	release_mem_region(pci_resource_start(pdev, 2),
 			   pci_resource_len(pdev, 2));
-
+#endif
 	release_mem_region(pci_resource_start(pdev, 0),
 			   pci_resource_len(pdev, 0));
 
@@ -420,16 +420,16 @@ void __devexit saa716x_pci_exit(struct saa716x_dev *saa716x)
 
 	saa716x_free_irq(saa716x);
 
-	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem0: 0x%p mem1: 0x%p",
+	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem0: 0x%p",
 		saa716x->pdev->device,
-		saa716x->mmio,
-		saa716x->mmbd);
-
+		saa716x->mmio);
+#if 0
 	if (saa716x->mmbd) {
 		iounmap(saa716x->mmbd);
 		release_mem_region(pci_resource_start(pdev, 2),
 				   pci_resource_len(pdev, 2));
 	}
+#endif
 	if (saa716x->mmio) {
 		iounmap(saa716x->mmio);
 		release_mem_region(pci_resource_start(pdev, 0),
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index a340089b53b29..b01af2ed38881 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -86,7 +86,7 @@ struct saa716x_dev {
 
 	/* PCI */
 	void __iomem			*mmio;
-	void __iomem			*mmbd;
+//	void __iomem			*mmbd;
 
 #define MODE_INTA	0
 #define MODE_MSI	1

From f65abefd6162d7336e48e66e7e37473e7a75928b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:07:31 +0400
Subject: [PATCH 045/364] saa716x: Code cleanup

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c |  1 -
 drivers/media/pci/saa716x/saa716x_pci.c    | 58 +++++-----------------
 drivers/media/pci/saa716x/saa716x_priv.h   |  1 -
 3 files changed, 13 insertions(+), 47 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 518ddb15ab28f..024cd1bcaa7f3 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -76,7 +76,6 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 
 	saa716x_core_reset(saa716x);
 	pci_read_config_dword(pdev, 0x06, &sts);
-	dprintk(SAA716x_ERROR, 0, "  INTx pending=%s", ((sts >> 2) & 0x01) == 1 ? "Yes": "None");
 
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 4d3712c96d5eb..80aaf0ed47815 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -198,11 +198,13 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 	struct pci_dev *pdev = saa716x->pdev;
 	int i, ret = 0;
 
-	if (saa716x->int_type == MODE_MSI)
+	if (saa716x->int_type == MODE_MSI) {
+		dprintk(SAA716x_DEBUG, 1, "Using MSI mode");
 		ret = saa716x_enable_msi(saa716x);
-
-	else if (saa716x->int_type == MODE_MSI_X)
+	} else if (saa716x->int_type == MODE_MSI_X) {
+		dprintk(SAA716x_DEBUG, 1, "Using MSI-X mode");
 		ret = saa716x_enable_msix(saa716x);
+	}
 
 	if (ret) {
 		dprintk(SAA716x_ERROR, 1, "INT-A Mode");
@@ -245,9 +247,10 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 				  IRQF_SHARED,
 				  DRIVER_NAME,
 				  saa716x);
-
-		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
-		ret = -ENODEV;
+		if (ret < 0) {
+			dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
+			ret = -ENODEV;
+		}
 	}
 
 	return ret;
@@ -319,19 +322,6 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail1;
 	}
-#if 0
-	if (!request_mem_region(pci_resource_start(pdev, 2),
-				pci_resource_len(pdev, 2),
-				DRIVER_NAME)) {
-
-		dprintk(SAA716x_ERROR, 1, "BAR2 Request failed");
-		release_mem_region(pci_resource_start(pdev, 0),
-				   pci_resource_len(pdev, 0));
-
-		ret = -ENODEV;
-		goto fail1;
-	}
-#endif
 	saa716x->mmio = ioremap(pci_resource_start(pdev, 0),
 				pci_resource_len(pdev, 0));
 
@@ -340,22 +330,13 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail2;
 	}
-#if 0
-	saa716x->mmbd = ioremap(pci_resource_start(pdev, 2),
-				pci_resource_len(pdev, 2));
 
-	if (!saa716x->mmbd) {
-		dprintk(SAA716x_ERROR, 1, "Mem 1 remap failed");
-		ret = -ENODEV;
-		goto fail2;
-	}
-#endif
 	for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++)
 		saa716x->msix_entries[i].entry = i;
 
 	err = saa716x_request_irq(saa716x);
 	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
+		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed, err=%d", err);
 		ret = -ENODEV;
 		goto fail3;
 	}
@@ -382,25 +363,18 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		(((msi_cap >> 16) & 0x01) == 1 ? "Enabled" : "Disabled"),
 		(1 << ((msi_cap >> 17) & 0x07)));
 
+	dprintk(SAA716x_ERROR, 0, "\n");
+
 	pci_set_drvdata(pdev, saa716x);
 
 	return 0;
 
 fail3:
 	dprintk(SAA716x_ERROR, 1, "Err: IO Unmap");
-#if 0
-	if (saa716x->mmbd)
-		iounmap(saa716x->mmbd);
-#endif
 	if (saa716x->mmio)
 		iounmap(saa716x->mmio);
-
 fail2:
 	dprintk(SAA716x_ERROR, 1, "Err: Release regions");
-#if 0
-	release_mem_region(pci_resource_start(pdev, 2),
-			   pci_resource_len(pdev, 2));
-#endif
 	release_mem_region(pci_resource_start(pdev, 0),
 			   pci_resource_len(pdev, 0));
 
@@ -423,13 +397,7 @@ void __devexit saa716x_pci_exit(struct saa716x_dev *saa716x)
 	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem0: 0x%p",
 		saa716x->pdev->device,
 		saa716x->mmio);
-#if 0
-	if (saa716x->mmbd) {
-		iounmap(saa716x->mmbd);
-		release_mem_region(pci_resource_start(pdev, 2),
-				   pci_resource_len(pdev, 2));
-	}
-#endif
+
 	if (saa716x->mmio) {
 		iounmap(saa716x->mmio);
 		release_mem_region(pci_resource_start(pdev, 0),
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index b01af2ed38881..7f4cfec371916 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -86,7 +86,6 @@ struct saa716x_dev {
 
 	/* PCI */
 	void __iomem			*mmio;
-//	void __iomem			*mmbd;
 
 #define MODE_INTA	0
 #define MODE_MSI	1

From d43a304143b7e8c21c840bd0afedf8ea1e9bec24 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:08:52 +0400
Subject: [PATCH 046/364] saa716x: Register SAA716x Adapter

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile       |   3 +-
 drivers/media/pci/saa716x/saa716x_adap.c | 184 +++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_priv.h |  17 +++
 3 files changed, 203 insertions(+), 1 deletion(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_adap.c

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 947c9f0cd1b16..a8e3bff84107e 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -5,7 +5,8 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_vip.o	\
 				    saa716x_aip.o	\
 				    saa716x_boot.o	\
-				    saa716x_fgpi.o
+				    saa716x_fgpi.o	\
+				    saa716x_adap.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
new file mode 100644
index 0000000000000..e4854eb13e98d
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -0,0 +1,184 @@
+#include "saa716x_priv.h"
+
+#include <linux/bitops.h>
+
+#include "dmxdev.h"
+#include "dvbdev.h"
+#include "dvb_demux.h"
+#include "dvb_frontend.h"
+
+void saa716x_dma_start(struct saa716x_dev *saa716x)
+{
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Start DMA engine");
+}
+
+void saa716x_dma_stop(struct saa716x_dev *saa716x)
+{
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Stop DMA engine");
+}
+
+static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
+{
+	struct dvb_demux *dvbdmx = dvbdmxfeed->demux;
+	struct saa716x_dev *saa716x = dvbdmx->priv;
+
+	dprintk(SAA716x_DEBUG, 1, "SAA716x DVB Start feed");
+	if (!dvbdmx->dmx.frontend) {
+		dprintk(SAA716x_DEBUG, 1, "no frontend ?");
+		return -EINVAL;
+	}
+	saa716x->feeds++;
+	dprintk(SAA716x_DEBUG, 1, "SAA716x start feed, feeds=%d",
+		saa716x->feeds);
+
+	if (saa716x->feeds == 1) {
+		dprintk(SAA716x_DEBUG, 1, "SAA716x start feed & dma");
+		printk("saa716x start feed & dma\n");
+		saa716x_dma_start(saa716x);
+	}
+
+	return saa716x->feeds;
+}
+
+static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
+{
+	struct dvb_demux *dvbdmx = dvbdmxfeed->demux;
+	struct saa716x_dev *saa716x = dvbdmx->priv;
+
+	dprintk(SAA716x_DEBUG, 1, "SAA716x DVB Stop feed");
+	if (!dvbdmx->dmx.frontend) {
+		dprintk(SAA716x_DEBUG, 1, "no frontend ?");
+		return -EINVAL;
+	}
+	saa716x->feeds--;
+	if (saa716x->feeds == 0) {
+		dprintk(SAA716x_DEBUG, 1, "saa716x stop feed and dma");
+		printk("saa716x stop feed and dma\n");
+		saa716x_dma_stop(saa716x);
+	}
+	return 0;
+}
+
+int __devinit saa716x_frontend_init(struct saa716x_dev *saa716x)
+{
+	dprintk(SAA716x_DEBUG, 1, "SAA716x frontend Init");
+	dprintk(SAA716x_DEBUG, 1, "Device ID=%02x", saa716x->pdev->subsystem_device);
+	switch (saa716x->pdev->subsystem_device) {
+	default:
+		dprintk(SAA716x_DEBUG, 1, "Unknown frontend:[0x%02x]",
+			saa716x->pdev->subsystem_device);
+
+		return -ENODEV;
+	}
+	if (saa716x->fe == NULL) {
+		dprintk(SAA716x_ERROR, 1, "!!! NO Frontends found !!!");
+		return -ENODEV;
+	} else {
+		if (dvb_register_frontend(&saa716x->dvb_adapter, saa716x->fe)) {
+			dprintk(SAA716x_ERROR, 1, "ERROR: Frontend registration failed");
+
+			if (saa716x->fe->ops.release)
+				saa716x->fe->ops.release(saa716x->fe);
+
+			saa716x->fe = NULL;
+			return -ENODEV;
+		}
+	}
+
+	return 0;
+}
+
+int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
+{
+	int result;
+
+	dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
+	if (dvb_register_adapter(&saa716x->dvb_adapter,
+				 "SAA716x dvb adapter", THIS_MODULE,
+				 &saa716x->pdev->dev) < 0) {
+
+		dprintk(SAA716x_ERROR, 1, "Error registering adapter");
+		return -ENODEV;
+	}
+	saa716x->dvb_adapter.priv = saa716x;
+	saa716x->demux.dmx.capabilities = DMX_TS_FILTERING	|
+					  DMX_SECTION_FILTERING	|
+					  DMX_MEMORY_BASED_FILTERING;
+
+	saa716x->demux.priv = saa716x;
+	saa716x->demux.filternum = 256;
+	saa716x->demux.feednum = 256;
+	saa716x->demux.start_feed = saa716x_dvb_start_feed;
+	saa716x->demux.stop_feed = saa716x_dvb_stop_feed;
+	saa716x->demux.write_to_decoder = NULL;
+	dprintk(SAA716x_DEBUG, 1, "dvb_dmx_init");
+	if ((result = dvb_dmx_init(&saa716x->demux)) < 0) {
+		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+		goto err0;
+	}
+	saa716x->dmxdev.filternum = 256;
+	saa716x->dmxdev.demux = &saa716x->demux.dmx;
+	saa716x->dmxdev.capabilities = 0;
+	dprintk(SAA716x_DEBUG, 1, "dvb_dmxdev_init");
+	if ((result = dvb_dmxdev_init(&saa716x->dmxdev,
+				      &saa716x->dvb_adapter)) < 0) {
+
+		dprintk(SAA716x_ERROR, 1, "dvb_dmxdev_init failed, ERROR=%d", result);
+		goto err1;
+	}
+	saa716x->fe_hw.source = DMX_FRONTEND_0;
+	if ((result = saa716x->demux.dmx.add_frontend(&saa716x->demux.dmx,
+						      &saa716x->fe_hw)) < 0) {
+
+		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+		goto err2;
+	}
+	saa716x->fe_mem.source = DMX_MEMORY_FE;
+	if ((result = saa716x->demux.dmx.add_frontend(&saa716x->demux.dmx,
+						      &saa716x->fe_mem)) < 0) {
+		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+		goto err3;
+	}
+	if ((result = saa716x->demux.dmx.connect_frontend(&saa716x->demux.dmx,
+							  &saa716x->fe_hw)) < 0) {
+
+		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+		goto err4;
+	}
+	dvb_net_init(&saa716x->dvb_adapter, &saa716x->dvb_net, &saa716x->demux.dmx);
+//	tasklet_init(&saa716x->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
+	saa716x_frontend_init(saa716x);
+
+	return 0;
+
+	/*	Error conditions ..	*/
+err4:
+	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_mem);
+err3:
+	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_hw);
+err2:
+	dvb_dmxdev_release(&saa716x->dmxdev);
+err1:
+	dvb_dmx_release(&saa716x->demux);
+err0:
+	dvb_unregister_adapter(&saa716x->dvb_adapter);
+
+	return result;
+}
+
+void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
+{
+//	tasklet_kill(&saa716x->tasklet);
+	dvb_net_release(&saa716x->dvb_net);
+	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_mem);
+	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_hw);
+	dvb_dmxdev_release(&saa716x->dmxdev);
+	dvb_dmx_release(&saa716x->demux);
+
+	if (saa716x->fe)
+		dvb_unregister_frontend(saa716x->fe);
+	dprintk(SAA716x_DEBUG, 1, "dvb_unregister_adapter");
+	dvb_unregister_adapter(&saa716x->dvb_adapter);
+
+	return;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 7f4cfec371916..a6933ad7ce9c1 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -13,6 +13,12 @@
 #include "saa716x_i2c.h"
 #include "saa716x_boot.h"
 
+#include "dvbdev.h"
+#include "dvb_demux.h"
+#include "dmxdev.h"
+#include "dvb_frontend.h"
+#include "dvb_net.h"
+
 #define SAA716x_ERROR		0
 #define SAA716x_NOTICE		1
 #define SAA716x_INFO		2
@@ -99,6 +105,17 @@ struct saa716x_dev {
 	u32				i2c_rate; /* init time */
 
 	/* DMA */
+
+	/* DVB */
+	struct dvb_adapter		dvb_adapter;
+	struct dvb_frontend		*fe;
+	struct dvb_demux		demux;
+	struct dmxdev			dmxdev;
+	struct dmx_frontend		fe_hw;
+	struct dmx_frontend		fe_mem;
+	struct dvb_net			dvb_net;
+
+	u8				feeds;
 };
 
 /* PCI */

From d823f92d1406dfdb1fb0b6f1ebc87d9592f8c214 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:09:48 +0400
Subject: [PATCH 047/364] saa716x: Add initial support for the second adapter

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 217 ++++++++++++---------
 drivers/media/pci/saa716x/saa716x_adap.h   |   7 +
 drivers/media/pci/saa716x/saa716x_budget.c |   1 +
 drivers/media/pci/saa716x/saa716x_hybrid.c |  11 ++
 drivers/media/pci/saa716x/saa716x_i2c.c    |   2 +-
 drivers/media/pci/saa716x/saa716x_i2c.h    |   2 +
 drivers/media/pci/saa716x/saa716x_priv.h   |  30 +--
 7 files changed, 162 insertions(+), 108 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_adap.h

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index e4854eb13e98d..2d3df455fab8d 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -1,5 +1,3 @@
-#include "saa716x_priv.h"
-
 #include <linux/bitops.h>
 
 #include "dmxdev.h"
@@ -7,6 +5,10 @@
 #include "dvb_demux.h"
 #include "dvb_frontend.h"
 
+#include "saa716x_priv.h"
+#include "saa716x_adap.h"
+#include "saa716x_i2c.h"
+
 void saa716x_dma_start(struct saa716x_dev *saa716x)
 {
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Start DMA engine");
@@ -19,68 +21,76 @@ void saa716x_dma_stop(struct saa716x_dev *saa716x)
 
 static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
 {
-	struct dvb_demux *dvbdmx = dvbdmxfeed->demux;
-	struct saa716x_dev *saa716x = dvbdmx->priv;
+	struct dvb_demux *dvbdmx		= dvbdmxfeed->demux;
+	struct saa716x_adapter *saa716x_adap	= dvbdmx->priv;
+	struct saa716x_dev *saa716x		= saa716x_adap->saa716x;
 
 	dprintk(SAA716x_DEBUG, 1, "SAA716x DVB Start feed");
 	if (!dvbdmx->dmx.frontend) {
 		dprintk(SAA716x_DEBUG, 1, "no frontend ?");
 		return -EINVAL;
 	}
-	saa716x->feeds++;
+	saa716x_adap->feeds++;
 	dprintk(SAA716x_DEBUG, 1, "SAA716x start feed, feeds=%d",
-		saa716x->feeds);
+		saa716x_adap->feeds);
 
-	if (saa716x->feeds == 1) {
+	if (saa716x_adap->feeds == 1) {
 		dprintk(SAA716x_DEBUG, 1, "SAA716x start feed & dma");
 		printk("saa716x start feed & dma\n");
 		saa716x_dma_start(saa716x);
 	}
 
-	return saa716x->feeds;
+	return saa716x_adap->feeds;
 }
 
 static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 {
-	struct dvb_demux *dvbdmx = dvbdmxfeed->demux;
-	struct saa716x_dev *saa716x = dvbdmx->priv;
+	struct dvb_demux *dvbdmx		= dvbdmxfeed->demux;
+	struct saa716x_adapter *saa716x_adap	= dvbdmx->priv;
+	struct saa716x_dev *saa716x		= saa716x_adap->saa716x;
 
 	dprintk(SAA716x_DEBUG, 1, "SAA716x DVB Stop feed");
 	if (!dvbdmx->dmx.frontend) {
 		dprintk(SAA716x_DEBUG, 1, "no frontend ?");
 		return -EINVAL;
 	}
-	saa716x->feeds--;
-	if (saa716x->feeds == 0) {
+	saa716x_adap->feeds--;
+	if (saa716x_adap->feeds == 0) {
 		dprintk(SAA716x_DEBUG, 1, "saa716x stop feed and dma");
 		printk("saa716x stop feed and dma\n");
 		saa716x_dma_stop(saa716x);
 	}
+
 	return 0;
 }
 
-int __devinit saa716x_frontend_init(struct saa716x_dev *saa716x)
+int __devinit saa716x_frontend_init(struct saa716x_adapter *saa716x_adap, int count)
 {
-	dprintk(SAA716x_DEBUG, 1, "SAA716x frontend Init");
-	dprintk(SAA716x_DEBUG, 1, "Device ID=%02x", saa716x->pdev->subsystem_device);
+	struct saa716x_dev *saa716x = saa716x_adap->saa716x;
+
+	int i;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 	switch (saa716x->pdev->subsystem_device) {
 	default:
-		dprintk(SAA716x_DEBUG, 1, "Unknown frontend:[0x%02x]",
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Unknown frontend:[0x%02x]",
+			count,
 			saa716x->pdev->subsystem_device);
 
 		return -ENODEV;
 	}
-	if (saa716x->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "!!! NO Frontends found !!!");
+	if (saa716x_adap->fe == NULL) {
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d)!!! NO Frontends found !!!", count);
 		return -ENODEV;
 	} else {
-		if (dvb_register_frontend(&saa716x->dvb_adapter, saa716x->fe)) {
-			dprintk(SAA716x_ERROR, 1, "ERROR: Frontend registration failed");
+		if (dvb_register_frontend(&saa716x_adap->dvb_adapter, saa716x_adap->fe)) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) ERROR: Frontend registration failed", count);
 
-			if (saa716x->fe->ops.release)
-				saa716x->fe->ops.release(saa716x->fe);
+			if (saa716x_adap->fe->ops.release)
+				saa716x_adap->fe->ops.release(saa716x_adap->fe);
 
-			saa716x->fe = NULL;
+			saa716x_adap->fe = NULL;
 			return -ENODEV;
 		}
 	}
@@ -90,95 +100,116 @@ int __devinit saa716x_frontend_init(struct saa716x_dev *saa716x)
 
 int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 {
-	int result;
+	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	int result, i;
 
-	dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
-	if (dvb_register_adapter(&saa716x->dvb_adapter,
-				 "SAA716x dvb adapter", THIS_MODULE,
-				 &saa716x->pdev->dev) < 0) {
+	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
-		dprintk(SAA716x_ERROR, 1, "Error registering adapter");
-		return -ENODEV;
-	}
-	saa716x->dvb_adapter.priv = saa716x;
-	saa716x->demux.dmx.capabilities = DMX_TS_FILTERING	|
-					  DMX_SECTION_FILTERING	|
-					  DMX_MEMORY_BASED_FILTERING;
-
-	saa716x->demux.priv = saa716x;
-	saa716x->demux.filternum = 256;
-	saa716x->demux.feednum = 256;
-	saa716x->demux.start_feed = saa716x_dvb_start_feed;
-	saa716x->demux.stop_feed = saa716x_dvb_stop_feed;
-	saa716x->demux.write_to_decoder = NULL;
-	dprintk(SAA716x_DEBUG, 1, "dvb_dmx_init");
-	if ((result = dvb_dmx_init(&saa716x->demux)) < 0) {
-		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
-		goto err0;
-	}
-	saa716x->dmxdev.filternum = 256;
-	saa716x->dmxdev.demux = &saa716x->demux.dmx;
-	saa716x->dmxdev.capabilities = 0;
-	dprintk(SAA716x_DEBUG, 1, "dvb_dmxdev_init");
-	if ((result = dvb_dmxdev_init(&saa716x->dmxdev,
-				      &saa716x->dvb_adapter)) < 0) {
-
-		dprintk(SAA716x_ERROR, 1, "dvb_dmxdev_init failed, ERROR=%d", result);
-		goto err1;
-	}
-	saa716x->fe_hw.source = DMX_FRONTEND_0;
-	if ((result = saa716x->demux.dmx.add_frontend(&saa716x->demux.dmx,
-						      &saa716x->fe_hw)) < 0) {
+		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
+		if (dvb_register_adapter(&saa716x_adap->dvb_adapter,
+					 "SAA716x dvb adapter", THIS_MODULE,
+					 &saa716x->pdev->dev) < 0) {
 
-		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
-		goto err2;
-	}
-	saa716x->fe_mem.source = DMX_MEMORY_FE;
-	if ((result = saa716x->demux.dmx.add_frontend(&saa716x->demux.dmx,
-						      &saa716x->fe_mem)) < 0) {
-		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
-		goto err3;
-	}
-	if ((result = saa716x->demux.dmx.connect_frontend(&saa716x->demux.dmx,
-							  &saa716x->fe_hw)) < 0) {
+			dprintk(SAA716x_ERROR, 1, "Error registering adapter");
+			return -ENODEV;
+		}
+		saa716x_adap->dvb_adapter.priv		= saa716x_adap;
+		saa716x_adap->demux.dmx.capabilities	= DMX_TS_FILTERING	|
+							  DMX_SECTION_FILTERING	|
+							  DMX_MEMORY_BASED_FILTERING;
+
+		saa716x_adap->demux.priv		= saa716x_adap;
+		saa716x_adap->demux.filternum		= 256;
+		saa716x_adap->demux.feednum		= 256;
+		saa716x_adap->demux.start_feed		= saa716x_dvb_start_feed;
+		saa716x_adap->demux.stop_feed		= saa716x_dvb_stop_feed;
+		saa716x_adap->demux.write_to_decoder	= NULL;
+
+		dprintk(SAA716x_DEBUG, 1, "dvb_dmx_init");
+		if ((result = dvb_dmx_init(&saa716x_adap->demux)) < 0) {
+			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			goto err0;
+		}
+
+		saa716x_adap->dmxdev.filternum		= 256;
+		saa716x_adap->dmxdev.demux		= &saa716x_adap->demux.dmx;
+		saa716x_adap->dmxdev.capabilities	= 0;
+
+		dprintk(SAA716x_DEBUG, 1, "dvb_dmxdev_init");
+		if ((result = dvb_dmxdev_init(&saa716x_adap->dmxdev,
+					      &saa716x_adap->dvb_adapter)) < 0) {
+
+			dprintk(SAA716x_ERROR, 1, "dvb_dmxdev_init failed, ERROR=%d", result);
+			goto err1;
+		}
+		saa716x_adap->fe_hw.source = DMX_FRONTEND_0;
+		if ((result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx,
+								   &saa716x_adap->fe_hw)) < 0) {
+
+			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			goto err2;
+		}
+		saa716x_adap->fe_mem.source = DMX_MEMORY_FE;
+		if ((result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx,
+								   &saa716x_adap->fe_mem)) < 0) {
+			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			goto err3;
+		}
+		if ((result = saa716x_adap->demux.dmx.connect_frontend(&saa716x_adap->demux.dmx,
+								       &saa716x_adap->fe_hw)) < 0) {
 
-		dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
-		goto err4;
+			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			goto err4;
+		}
+		dvb_net_init(&saa716x_adap->dvb_adapter, &saa716x_adap->dvb_net, &saa716x_adap->demux.dmx);
+//		tasklet_init(&saa716x_adap->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
+		dprintk(SAA716x_DEBUG, 1, "Frontend Init");
+		saa716x_adap->saa716x = saa716x;
+		saa716x_frontend_init(saa716x_adap, i);
+		saa716x_adap++;
 	}
-	dvb_net_init(&saa716x->dvb_adapter, &saa716x->dvb_net, &saa716x->demux.dmx);
-//	tasklet_init(&saa716x->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
-	saa716x_frontend_init(saa716x);
 
 	return 0;
 
-	/*	Error conditions ..	*/
+	/* Error conditions */
 err4:
-	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_mem);
+	saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 err3:
-	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_hw);
+	saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 err2:
-	dvb_dmxdev_release(&saa716x->dmxdev);
+	dvb_dmxdev_release(&saa716x_adap->dmxdev);
 err1:
-	dvb_dmx_release(&saa716x->demux);
+	dvb_dmx_release(&saa716x_adap->demux);
 err0:
-	dvb_unregister_adapter(&saa716x->dvb_adapter);
+	dvb_unregister_adapter(&saa716x_adap->dvb_adapter);
 
 	return result;
 }
+EXPORT_SYMBOL(saa716x_dvb_init);
 
 void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 {
-//	tasklet_kill(&saa716x->tasklet);
-	dvb_net_release(&saa716x->dvb_net);
-	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_mem);
-	saa716x->demux.dmx.remove_frontend(&saa716x->demux.dmx, &saa716x->fe_hw);
-	dvb_dmxdev_release(&saa716x->dmxdev);
-	dvb_dmx_release(&saa716x->demux);
-
-	if (saa716x->fe)
-		dvb_unregister_frontend(saa716x->fe);
-	dprintk(SAA716x_DEBUG, 1, "dvb_unregister_adapter");
-	dvb_unregister_adapter(&saa716x->dvb_adapter);
+	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	int i;
+
+	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
+
+//		tasklet_kill(&saa716x->tasklet);
+		dvb_net_release(&saa716x_adap->dvb_net);
+		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
+		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+		dvb_dmxdev_release(&saa716x_adap->dmxdev);
+		dvb_dmx_release(&saa716x_adap->demux);
+
+		if (saa716x_adap->fe)
+			dvb_unregister_frontend(saa716x_adap->fe);
+
+		dprintk(SAA716x_DEBUG, 1, "dvb_unregister_adapter");
+		dvb_unregister_adapter(&saa716x_adap->dvb_adapter);
+
+		saa716x_adap++;
+	}
 
 	return;
 }
+EXPORT_SYMBOL(saa716x_dvb_exit);
diff --git a/drivers/media/pci/saa716x/saa716x_adap.h b/drivers/media/pci/saa716x/saa716x_adap.h
new file mode 100644
index 0000000000000..e6c2b4bbfc021
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_adap.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_ADAP_H
+#define __SAA716x_ADAP_H
+
+extern int saa716x_dvb_init(struct saa716x_dev *saa716x);
+extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_ADAP_H */
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 789a69b29c747..85f9062d01956 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -19,6 +19,7 @@
 #include "saa716x_msi.h"
 #include "saa716x_reg.h"
 #include "saa716x_budget.h"
+#include "saa716x_adap.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 024cd1bcaa7f3..2a7e2860ddb00 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -12,7 +12,9 @@
 #include <linux/init.h>
 #include <linux/device.h>
 
+
 #include "saa716x_priv.h"
+#include "saa716x_adap.h"
 #include "saa716x_hybrid.h"
 
 unsigned int verbose;
@@ -83,8 +85,16 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail3;
 	}
 
+	err = saa716x_dvb_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		goto fail4;
+	}
+
 	return 0;
 
+fail4:
+	saa716x_dvb_exit(saa716x);
 fail3:
 	saa716x_i2c_exit(saa716x);
 fail2:
@@ -100,6 +110,7 @@ static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 
+	saa716x_dvb_exit(saa716x);
 	saa716x_i2c_exit(saa716x);
 	saa716x_pci_exit(saa716x);
 	kfree(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 09f23832b8826..b2a355519259f 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -1,6 +1,7 @@
 #include <linux/delay.h>
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
+#include "saa716x_i2c.h"
 
 #define SAA716x_I2C_TXFAIL	(I2C_ERROR_IBE		| \
 				 I2C_ACK_INTER_MTNA	| \
@@ -400,7 +401,6 @@ static struct i2c_adapter saa716x_i2c[] = {
 	},
 };
 
-#define SAA716x_I2C_ADAPTERS	2
 
 int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index bb1da6642a302..3e6de9ae8d066 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_I2C_H
 #define __SAA716x_I2C_H
 
+#define SAA716x_I2C_ADAPTERS	2
+
 struct saa716x_dev;
 
 enum saa716x_i2c_rate {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index a6933ad7ce9c1..f6a07614de7fc 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -81,6 +81,20 @@ struct saa716x_config {
 	saa716x_load_config_t		load_config;
 };
 
+struct saa716x_adapter {
+	struct dvb_adapter		dvb_adapter;
+	struct dvb_frontend		*fe;
+	struct dvb_demux		demux;
+	struct dmxdev			dmxdev;
+	struct dmx_frontend		fe_hw;
+	struct dmx_frontend		fe_mem;
+	struct dvb_net			dvb_net;
+
+	struct saa716x_dev		*saa716x;
+
+	u8				feeds;
+};
+
 struct saa716x_dev {
 	struct saa716x_config		*config;
 	struct pci_dev			*pdev;
@@ -104,18 +118,10 @@ struct saa716x_dev {
 	struct saa716x_i2c		i2c[2];
 	u32				i2c_rate; /* init time */
 
-	/* DMA */
+	struct saa716x_adapter		saa716x_adap[2];
 
-	/* DVB */
-	struct dvb_adapter		dvb_adapter;
-	struct dvb_frontend		*fe;
-	struct dvb_demux		demux;
-	struct dmxdev			dmxdev;
-	struct dmx_frontend		fe_hw;
-	struct dmx_frontend		fe_mem;
-	struct dvb_net			dvb_net;
+	/* DMA */
 
-	u8				feeds;
 };
 
 /* PCI */
@@ -135,10 +141,6 @@ extern void saa716x_spi_exit(struct saa716x_dev *saa716x);
 extern int saa716x_dma_init(struct saa716x_dev *saa716x);
 extern void saa716x_dma_exit(struct saa716x_dev *saa716x);
 
-/* DVB */
-extern int saa716x_dvb_init(struct saa716x_dev *saa716x);
-extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
-
 /* AUDIO */
 extern int saa716x_audio_init(struct saa716x_dev *saa716x);
 extern void saa716x_audio_exit(struct saa716x_dev *saa716x);

From 4e22a7395084df9e824da5bf8a09587b1f1cb49b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:10:33 +0400
Subject: [PATCH 048/364] saa716x: Initialize adapters on the budget device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 85f9062d01956..68bfff84ad49e 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -123,12 +123,21 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
 		goto fail3;
 	}
+
+	err = saa716x_dvb_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		goto fail4;
+	}
+
 #if 0
 	/* Experiments */
 	read_eeprom(saa716x);
 #endif
 	return 0;
 
+fail4:
+	saa716x_dvb_exit(saa716x);
 fail3:
 	saa716x_i2c_exit(saa716x);
 fail2:
@@ -143,6 +152,7 @@ static void __devexit saa716x_budget_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 
+	saa716x_dvb_exit(saa716x);
 	saa716x_i2c_exit(saa716x);
 	saa716x_pci_exit(saa716x);
 	kfree(saa716x);

From 74fa796e49173cf3dc6616727f17c801baf189fb Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:11:32 +0400
Subject: [PATCH 049/364] saa716x: Register only the relevant adapters for a
 specific device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 6 ++----
 drivers/media/pci/saa716x/saa716x_budget.c | 1 +
 drivers/media/pci/saa716x/saa716x_hybrid.c | 5 ++++-
 drivers/media/pci/saa716x/saa716x_priv.h   | 3 +++
 4 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 2d3df455fab8d..fc52c726f1bb0 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -68,8 +68,6 @@ int __devinit saa716x_frontend_init(struct saa716x_adapter *saa716x_adap, int co
 {
 	struct saa716x_dev *saa716x = saa716x_adap->saa716x;
 
-	int i;
-
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 	switch (saa716x->pdev->subsystem_device) {
@@ -103,7 +101,7 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	int result, i;
 
-	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
+	for (i = 0; i < saa716x->config->adapters; i++) {
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
 		if (dvb_register_adapter(&saa716x_adap->dvb_adapter,
@@ -192,7 +190,7 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	int i;
 
-	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
+	for (i = 0; i < saa716x->config->adapters; i++) {
 
 //		tasklet_kill(&saa716x->tasklet);
 		dvb_net_release(&saa716x_adap->dvb_net);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 68bfff84ad49e..cc8af045e1922 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -174,6 +174,7 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp1028,
+	.adapters		= 1,
 };
 
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 2a7e2860ddb00..650f6d4dea3f6 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -137,6 +137,7 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp6090,
+	.adapters		= 2,
 };
 
 
@@ -159,11 +160,12 @@ static struct saa716x_config saa716x_nemo_config = {
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_nemo,
+	.adapters		= 1,
 };
 
 
 #define SAA716x_MODEL_AVERMEDIA_HC82	"Avermedia HC82 Express-54"
-#define SAA716x_DEV_AVERMEDIA_HC82	"DVB-T + ATSC + Analog"
+#define SAA716x_DEV_AVERMEDIA_HC82	"DVB-T + Analog"
 
 static int load_config_averhc82(struct saa716x_dev *saa716x)
 {
@@ -176,6 +178,7 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.dev_type		= SAA716x_DEV_AVERMEDIA_HC82,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_averhc82,
+	.adapters		= 1,
 };
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index f6a07614de7fc..ac2dbb58719e9 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -79,6 +79,9 @@ struct saa716x_config {
 	enum saa716x_boot_mode		boot_mode;
 
 	saa716x_load_config_t		load_config;
+
+	int				adapters;
+	int				frontends;
 };
 
 struct saa716x_adapter {

From 8d700c8f23ca3cc5cb41bd4415914869b98a8f94 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:12:27 +0400
Subject: [PATCH 050/364] saa716x: Add Avermedia HC82 specific device
 configuration

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 3 +++
 drivers/media/pci/saa716x/saa716x_priv.h   | 3 +++
 2 files changed, 6 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 650f6d4dea3f6..3a112e3f5c7fc 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -179,6 +179,9 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_averhc82,
 	.adapters		= 1,
+	.demodulator_addr	= 0x1f,
+	.tuner_addr		= 0xc0,
+	.decoder_addr		= 0x42,
 };
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index ac2dbb58719e9..24464ab69ca50 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -82,6 +82,9 @@ struct saa716x_config {
 
 	int				adapters;
 	int				frontends;
+	u8				demodulator_addr;
+	u8				tuner_addr,
+	u8				decoder_addr,
 };
 
 struct saa716x_adapter {

From 79d145cb0159e44854d76c9131b237aa66eedff9 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:13:36 +0400
Subject: [PATCH 051/364] saa716x: Fix typo

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 24464ab69ca50..a7a70bf47419f 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -83,8 +83,8 @@ struct saa716x_config {
 	int				adapters;
 	int				frontends;
 	u8				demodulator_addr;
-	u8				tuner_addr,
-	u8				decoder_addr,
+	u8				tuner_addr;
+	u8				decoder_addr;
 };
 
 struct saa716x_adapter {

From 2215147da3434f75fa848fcbe186a30aef2319d1 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:14:24 +0400
Subject: [PATCH 052/364] saa716x: Register an array of devices

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index a7a70bf47419f..3ae451cf096f6 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -69,8 +69,10 @@
 #define SAA716x_MSI_MAX_VECTORS			16
 
 struct saa716x_dev;
+struct saa716x_adapter;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
+typedef int (*saa716x_frontend_attach)(struct saa716x_adapter *adapter);
 
 struct saa716x_config {
 	char				*model_name;
@@ -85,6 +87,9 @@ struct saa716x_config {
 	u8				demodulator_addr;
 	u8				tuner_addr;
 	u8				decoder_addr;
+
+	saa716x_frontend_attach		frontend_attach_a[8];
+	saa716x_frontend_attach		frontend_attach_b[8];
 };
 
 struct saa716x_adapter {

From 3753d1d1524fae74e046047c82e73600731f4afb Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:15:07 +0400
Subject: [PATCH 053/364] saa716x: Add support for the Avermedia H788 device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 21 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_hybrid.h |  1 +
 2 files changed, 22 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 3a112e3f5c7fc..8072e8526bd4e 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -184,11 +184,32 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.decoder_addr		= 0x42,
 };
 
+#define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"
+#define SAA716x_DEV_AVERMEDIA_H788	"DVB-T + Analaog"
+
+static int load_config_averh788(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+	return ret;
+}
+
+static struct saa716x_config saa716x_averh788_config = {
+	.model_name		= SAA716x_MODEL_AVERMEDIA_H788,
+	.dev_type		= SAA716x_DEV_AVERMEDIA_H788,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_averh788,
+	.adapters		= 1,
+	.demodulator_addr	= 0x1f,
+	.tuner_addr		= 0xc0,
+	.decoder_addr		= 0x42,
+};
+
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
+	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_H788, SAA7160, &saa716x_averh788_config),
 	{
 		.vendor = 0,
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index 4fdc2411e0e5c..ff8cb7f816278 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -6,5 +6,6 @@
 
 #define TWINHAN_VP_6090		0x0027
 #define AVERMEDIA_HC82		0x2355
+#define AVERMEDIA_H788		0x1455
 
 #endif /* __SAA716x_HYBRID_H */

From c9dab68b1f34f1cbdca8c6694018268e425a679f Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:15:55 +0400
Subject: [PATCH 054/364] saa716x: Add support for the Azurewave VP-6002 device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 18 ++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_budget.h |  1 +
 2 files changed, 19 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index cc8af045e1922..3f466e15a19a5 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -177,10 +177,28 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.adapters		= 1,
 };
 
+static int load_config_vp6002(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+
+	return ret;
+}
+
+#define SAA716x_MODEL_TWINHAN_VP6002	"Twinhan/Azurewave VP-6002"
+#define SAA716x_DEV_TWINHAN_VP6002	"DVB-S"
+
+static struct saa716x_config saa716x_vp6002_config = {
+	.model_name		= SAA716x_MODEL_TWINHAN_VP6002,
+	.dev_type		= SAA716x_DEV_TWINHAN_VP6002,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_vp6002,
+	.adapters		= 1,
+};
 
 static struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
+	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
 	{
 		.vendor = 0,
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 027171f799c02..38d94a6b2ee1f 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -3,5 +3,6 @@
  
 #define TWINHAN_TECHNOLOGIES	0x1822
 #define TWINHAN_VP_1028		0x0044
+#define TWINHAN_VP_6002		0x0047
 
 #endif /* __SAA716x_BUDGET_H */

From 918892386891ea456d071878a60e02762481139a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:16:51 +0400
Subject: [PATCH 055/364] saa716x: Usea separate frontend_attach for each of
 the devices

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 41 ++++----------------
 drivers/media/pci/saa716x/saa716x_budget.c | 23 ++++++++++-
 drivers/media/pci/saa716x/saa716x_hybrid.c | 44 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_priv.h   |  4 +-
 4 files changed, 74 insertions(+), 38 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index fc52c726f1bb0..869344fceded0 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -64,44 +64,13 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	return 0;
 }
 
-int __devinit saa716x_frontend_init(struct saa716x_adapter *saa716x_adap, int count)
-{
-	struct saa716x_dev *saa716x = saa716x_adap->saa716x;
-
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-	switch (saa716x->pdev->subsystem_device) {
-	default:
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Unknown frontend:[0x%02x]",
-			count,
-			saa716x->pdev->subsystem_device);
-
-		return -ENODEV;
-	}
-	if (saa716x_adap->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d)!!! NO Frontends found !!!", count);
-		return -ENODEV;
-	} else {
-		if (dvb_register_frontend(&saa716x_adap->dvb_adapter, saa716x_adap->fe)) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) ERROR: Frontend registration failed", count);
-
-			if (saa716x_adap->fe->ops.release)
-				saa716x_adap->fe->ops.release(saa716x_adap->fe);
-
-			saa716x_adap->fe = NULL;
-			return -ENODEV;
-		}
-	}
-
-	return 0;
-}
-
 int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	struct saa716x_config *config = saa716x->config;
 	int result, i;
 
-	for (i = 0; i < saa716x->config->adapters; i++) {
+	for (i = 0; i < config->adapters; i++) {
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
 		if (dvb_register_adapter(&saa716x_adap->dvb_adapter,
@@ -163,7 +132,11 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 //		tasklet_init(&saa716x_adap->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
 		dprintk(SAA716x_DEBUG, 1, "Frontend Init");
 		saa716x_adap->saa716x = saa716x;
-		saa716x_frontend_init(saa716x_adap, i);
+		if (config->frontend_attach)
+			config->frontend_attach(saa716x_adap, i);
+		else
+			dprintk(SAA716x_ERROR, 1, "Frontend attach = NULL");
+
 		saa716x_adap++;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 3f466e15a19a5..79e2809420a70 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -160,7 +160,6 @@ static void __devexit saa716x_budget_pci_remove(struct pci_dev *pdev)
 
 static int load_config_vp1028(struct saa716x_dev *saa716x)
 {
-//	int ret = -ENODEV;
 	int ret = 0;
 
 	return ret;
@@ -169,12 +168,23 @@ static int load_config_vp1028(struct saa716x_dev *saa716x)
 #define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
 #define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
 
+static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
 static struct saa716x_config saa716x_vp1028_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp1028,
 	.adapters		= 1,
+	.frontend_attach	= saa716x_vp1028_frontend_attach,
 };
 
 static int load_config_vp6002(struct saa716x_dev *saa716x)
@@ -187,12 +197,23 @@ static int load_config_vp6002(struct saa716x_dev *saa716x)
 #define SAA716x_MODEL_TWINHAN_VP6002	"Twinhan/Azurewave VP-6002"
 #define SAA716x_DEV_TWINHAN_VP6002	"DVB-S"
 
+static int saa716x_vp6002_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
 static struct saa716x_config saa716x_vp6002_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6002,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6002,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp6002,
 	.adapters		= 1,
+	.frontend_attach	= saa716x_vp6002_frontend_attach,
 };
 
 static struct pci_device_id saa716x_budget_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 8072e8526bd4e..62dd92386f7ad 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -132,12 +132,23 @@ static int load_config_vp6090(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
 static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp6090,
 	.adapters		= 2,
+	.frontend_attach	= saa716x_vp6090_frontend_attach,
 };
 
 
@@ -155,12 +166,23 @@ static int load_config_nemo(struct saa716x_dev *saa716x)
     return ret;
 }
 
+static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
 static struct saa716x_config saa716x_nemo_config = {
 	.model_name		= SAA716x_MODEL_NXP_NEMO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_nemo,
 	.adapters		= 1,
+	.frontend_attach	= saa716x_nemo_frontend_attach,
 };
 
 
@@ -173,6 +195,16 @@ static int load_config_averhc82(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
 static struct saa716x_config saa716x_averhc82_config = {
 	.model_name		= SAA716x_MODEL_AVERMEDIA_HC82,
 	.dev_type		= SAA716x_DEV_AVERMEDIA_HC82,
@@ -182,6 +214,7 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.demodulator_addr	= 0x1f,
 	.tuner_addr		= 0xc0,
 	.decoder_addr		= 0x42,
+	.frontend_attach	= saa716x_averhc82_frontend_attach,
 };
 
 #define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"
@@ -193,6 +226,16 @@ static int load_config_averh788(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+static int saa716x_averh88_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
 static struct saa716x_config saa716x_averh788_config = {
 	.model_name		= SAA716x_MODEL_AVERMEDIA_H788,
 	.dev_type		= SAA716x_DEV_AVERMEDIA_H788,
@@ -202,6 +245,7 @@ static struct saa716x_config saa716x_averh788_config = {
 	.demodulator_addr	= 0x1f,
 	.tuner_addr		= 0xc0,
 	.decoder_addr		= 0x42,
+	.frontend_attach	= saa716x_averh88_frontend_attach,
 };
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 3ae451cf096f6..1aae40ba3d5bd 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -72,7 +72,6 @@ struct saa716x_dev;
 struct saa716x_adapter;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
-typedef int (*saa716x_frontend_attach)(struct saa716x_adapter *adapter);
 
 struct saa716x_config {
 	char				*model_name;
@@ -88,8 +87,7 @@ struct saa716x_config {
 	u8				tuner_addr;
 	u8				decoder_addr;
 
-	saa716x_frontend_attach		frontend_attach_a[8];
-	saa716x_frontend_attach		frontend_attach_b[8];
+	int (*frontend_attach)(struct saa716x_adapter *adapter, int count);
 };
 
 struct saa716x_adapter {

From 685dce813ee0f930f786ee7952b0ef08cb29b3fc Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:18:01 +0400
Subject: [PATCH 056/364] saa716x: Use a separate IRQ handler for separate
 modules

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 57 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_hybrid.c | 59 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_pci.c    |  5 +-
 drivers/media/pci/saa716x/saa716x_priv.h   |  1 +
 4 files changed, 121 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 79e2809420a70..4f0832812f79f 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -158,6 +158,61 @@ static void __devexit saa716x_budget_pci_remove(struct pci_dev *pdev)
 	kfree(saa716x);
 }
 
+static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
+{
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
+	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+		SAA716x_EPRD(VI0, INT_STATUS),
+		SAA716x_EPRD(VI1, INT_STATUS),
+		SAA716x_EPRD(VI0, INT_ENABLE),
+		SAA716x_EPRD(VI1, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+		SAA716x_EPRD(FGPI0, INT_STATUS),
+		SAA716x_EPRD(FGPI1, INT_STATUS),
+		SAA716x_EPRD(FGPI0, INT_ENABLE),
+		SAA716x_EPRD(FGPI0, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
+		SAA716x_EPRD(FGPI2, INT_STATUS),
+		SAA716x_EPRD(FGPI3, INT_STATUS),
+		SAA716x_EPRD(FGPI2, INT_ENABLE),
+		SAA716x_EPRD(FGPI3, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+		SAA716x_EPRD(AI0, AI_STATUS),
+		SAA716x_EPRD(AI1, AI_STATUS),
+		SAA716x_EPRD(AI0, AI_CTL),
+		SAA716x_EPRD(AI1, AI_CTL));
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
+
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+		SAA716x_EPRD(I2C_A, INT_STATUS),
+		SAA716x_EPRD(I2C_B, INT_STATUS),
+		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
+		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
+		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
+		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
+
+	return IRQ_HANDLED;
+}
+
+
 static int load_config_vp1028(struct saa716x_dev *saa716x)
 {
 	int ret = 0;
@@ -185,6 +240,7 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.load_config		= &load_config_vp1028,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp1028_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
 };
 
 static int load_config_vp6002(struct saa716x_dev *saa716x)
@@ -214,6 +270,7 @@ static struct saa716x_config saa716x_vp6002_config = {
 	.load_config		= &load_config_vp6002,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6002_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
 };
 
 static struct pci_device_id saa716x_budget_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 62dd92386f7ad..24abfa6db2b42 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -14,6 +14,7 @@
 
 
 #include "saa716x_priv.h"
+#include "saa716x_reg.h"
 #include "saa716x_adap.h"
 #include "saa716x_hybrid.h"
 
@@ -116,6 +117,60 @@ static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
 	kfree(saa716x);
 }
 
+static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
+{
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
+	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+		SAA716x_EPRD(VI0, INT_STATUS),
+		SAA716x_EPRD(VI1, INT_STATUS),
+		SAA716x_EPRD(VI0, INT_ENABLE),
+		SAA716x_EPRD(VI1, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+		SAA716x_EPRD(FGPI0, INT_STATUS),
+		SAA716x_EPRD(FGPI1, INT_STATUS),
+		SAA716x_EPRD(FGPI0, INT_ENABLE),
+		SAA716x_EPRD(FGPI0, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
+		SAA716x_EPRD(FGPI2, INT_STATUS),
+		SAA716x_EPRD(FGPI3, INT_STATUS),
+		SAA716x_EPRD(FGPI2, INT_ENABLE),
+		SAA716x_EPRD(FGPI3, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+		SAA716x_EPRD(AI0, AI_STATUS),
+		SAA716x_EPRD(AI1, AI_STATUS),
+		SAA716x_EPRD(AI0, AI_CTL),
+		SAA716x_EPRD(AI1, AI_CTL));
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
+
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+		SAA716x_EPRD(I2C_A, INT_STATUS),
+		SAA716x_EPRD(I2C_B, INT_STATUS),
+		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
+		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
+		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
+		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
+
+	return IRQ_HANDLED;
+}
+
 
 /*
  * Twinhan/Azurewave VP-6090
@@ -149,6 +204,7 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.load_config		= &load_config_vp6090,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_vp6090_frontend_attach,
+	.irq_handler		= saa716x_hybrid_pci_irq,
 };
 
 
@@ -183,6 +239,7 @@ static struct saa716x_config saa716x_nemo_config = {
 	.load_config		= &load_config_nemo,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_nemo_frontend_attach,
+	.irq_handler		= saa716x_hybrid_pci_irq,
 };
 
 
@@ -215,6 +272,7 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.tuner_addr		= 0xc0,
 	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averhc82_frontend_attach,
+	.irq_handler		= saa716x_hybrid_pci_irq,
 };
 
 #define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"
@@ -246,6 +304,7 @@ static struct saa716x_config saa716x_averh788_config = {
 	.tuner_addr		= 0xc0,
 	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averh88_frontend_attach,
+	.irq_handler		= saa716x_hybrid_pci_irq,
 };
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 80aaf0ed47815..698ae064f5ce3 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -108,6 +108,7 @@ static struct saa716x_msix_entry saa716x_msix_handler[] = {
 	{ .desc = "SAA716x_I2C_HANDLER", .handler = saa716x_i2c_handler }
 };
 
+#if 0
 static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
@@ -161,6 +162,7 @@ static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
 
 	return IRQ_HANDLED;
 }
+#endif
 
 static int saa716x_enable_msi(struct saa716x_dev *saa716x)
 {
@@ -196,6 +198,7 @@ static int saa716x_enable_msix(struct saa716x_dev *saa716x)
 static int saa716x_request_irq(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
+	struct saa716x_config *config = saa716x->config;
 	int i, ret = 0;
 
 	if (saa716x->int_type == MODE_MSI) {
@@ -243,7 +246,7 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 
 	if (saa716x->int_type == MODE_INTA) {
 		ret = request_irq(pdev->irq,
-				  saa716x_pci_irq,
+				  config->irq_handler,
 				  IRQF_SHARED,
 				  DRIVER_NAME,
 				  saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 1aae40ba3d5bd..a86f6157868f3 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -88,6 +88,7 @@ struct saa716x_config {
 	u8				decoder_addr;
 
 	int (*frontend_attach)(struct saa716x_adapter *adapter, int count);
+	irqreturn_t (*irq_handler)(int irq, void *dev_id);
 };
 
 struct saa716x_adapter {

From 6c63b1706c33a27839034d5327effe0319481ee5 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:18:51 +0400
Subject: [PATCH 057/364] saa716x: Try to attach the demodulator

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 29 +++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 24abfa6db2b42..38f3812b7742a 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -16,8 +16,11 @@
 #include "saa716x_priv.h"
 #include "saa716x_reg.h"
 #include "saa716x_adap.h"
+#include "saa716x_i2c.h"
 #include "saa716x_hybrid.h"
 
+#include "zl10353.h"
+
 unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
@@ -252,14 +255,38 @@ static int load_config_averhc82(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+static struct zl10353_config saa716x_averhc82_zl10353_config = {
+	.demod_address		= 0x1f,
+	.adc_clock		= 450560,
+	.if2			= 361667,
+	.no_tuner		= 1,
+	.parallel_ts		= 1,
+};
+
 static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	return -ENODEV;
+	adapter->fe = zl10353_attach(&saa716x_averhc82_zl10353_config, &i2c->i2c_adapter);
+	if (adapter->fe) {
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) ZL10353 demodulator succesfully attached", count);
+	} else {
+		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
+			dprintk(SAA716x_ERROR, 1, "ERROR: Frontend registration failed");
+
+			if (adapter->fe->ops.release)
+				adapter->fe->ops.release(adapter->fe);
+
+			adapter->fe = NULL;
+			return -ENODEV;
+		}
+	}
+
+	return 0;
 }
 
 static struct saa716x_config saa716x_averhc82_config = {

From 8d69ce7677cfa65a16e05c73d243b8f47357c2e4 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:19:37 +0400
Subject: [PATCH 058/364] saa716x: Fix typo in register definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_reg.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index c10491682e9c6..c9460d2cde286 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -954,9 +954,9 @@
 #define CGU_ESR_1_1			0x1d4
 #define CGU_ESR_2_0			0x1d8
 #define CGU_ESR_2_1			0x1dc
-#define CGU_ESR_2_2			0x1e0
-#define CGU_ESR_3_0			0x1e4
-#define CGU_ESR_3_1			0x1e8
+#define CGU_ESR_3_0			0x1e0
+#define CGU_ESR_3_1			0x1e4
+#define CGU_ESR_3_2			0x1e8
 #define CGU_ESR_4_0			0x1ec
 #define CGU_ESR_4_1			0x1f0
 #define CGU_ESR_5			0x1f4

From 1159a55283fc37fe77823e50aba9d1ba03aae9dc Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:21:54 +0400
Subject: [PATCH 059/364] saa716x: Updates and Code simplification  -
 Initialize the I2C clock  - Disable core reset for hybrid cards

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c    | 410 ++++++++++-----------
 drivers/media/pci/saa716x/saa716x_hybrid.c |  10 +-
 drivers/media/pci/saa716x/saa716x_reg.h    |  10 +-
 3 files changed, 215 insertions(+), 215 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 368439c7aa5af..ff527e1fba74b 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -24,6 +24,95 @@ u32 CGU_FDC[CGU_CLKS] = {
 
 u32 CGU_FREQ[CGU_CLKS];
 
+enum saa716x_clk {
+	SAA716x_CLK_PSS		= 0,
+	SAA716x_CLK_DCS,
+	SAA716x_CLK_SPI,
+	SAA716x_CLK_I2C,
+	SAA716x_CLK_PHI,
+	SAA716x_CLK_VI0,
+	SAA716x_CLK_VI1,
+	SAA716x_CLK_FGPI0,
+	SAA716x_CLK_FGPI1,
+	SAA716x_CLK_FGPI2,
+	SAA716x_CLK_FGPI3,
+	SAA716x_CLK_AI0,
+	SAA716x_CLK_AI1,
+	SAA716x_CLK_PHY
+};
+
+u32 saa716x_get_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain)
+{
+	return CGU_FREQ[clk_domain];
+}
+
+int saa716x_set_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain, u32 frequency)
+{
+	u32 M = 1, N = 1;
+	u32 reset = 0, freq, cur_div;
+	s8 ucN, ucM, sub, add, lsb;
+	int i;
+
+	/* calculate a new divider */
+	do {
+		M = (N * PLL_FREQ) / frequency;
+		if (M == 0)
+			N++;
+	} while (M == 0);
+
+	/* calculate real frequency */
+	freq = (N * PLL_FREQ) / M;
+
+	ucN = 0xFF & N;
+	ucM = 0xFF & M;
+	sub = -ucN;
+	add = ucM - ucN;
+	lsb = CGU_FDC_RUN1; /* run */
+
+	/* enable stretching for N/M smaller than 1/2 */
+	if (((10 * N) / M) < 5)
+        	lsb |= CGU_FDC_STRETCH; /* Add stretching */
+
+	cur_div   = sub & 0xff;
+	cur_div <<= 8;
+
+	cur_div  |= add & 0xff;
+	cur_div <<= 3;
+	cur_div  |= lsb;
+
+	dprintk(SAA716x_DEBUG, 1, "INFO: SetFDC %d f %d set f %d, N = %d, M = %d, divider 0x%x",
+		clk_domain,
+		frequency,
+		freq,
+		N,
+		M,
+		cur_div);
+
+	/* add reset to the frequency divider, update register and wait */
+	SAA716x_EPWR(CGU, CGU_FDC[clk_domain], cur_div | CGU_FDC_RESET);
+
+	/* monitor reset disable */
+	for (i = 0; i < CGU_CLKS; i++) {
+		msleep(10);
+		reset = SAA716x_EPRD(CGU, CGU_FREQ[clk_domain]);
+		if (cur_div == reset)
+			break;
+	}
+
+	/* if not changed, disable reset */
+	if (cur_div != reset)
+		SAA716x_EPWR(CGU, CGU_FREQ[clk_domain], cur_div);
+
+	return 0;
+}
+
+#define SAA716x_CGU_CLKRUN(__reg) do {						\
+	SAA716x_EPWR(CGU, CGU_PCR_##__reg, CGU_PCR_RUN); /* Run */		\
+	SAA716x_EPWR(CGU, CGU_SCR_##__reg, CGU_SCR_ENF1); /* Switch */		\
+	SAA716x_EPWR(CGU, CGU_FS1_##__reg, 0x00000000); /* PLL Clk */		\
+	SAA716x_EPWR(CGU, CGU_ESR_##__reg, CGU_ESR_FD_EN); /* Frac div */	\
+} while (0)
+
 int saa716x_cgu_init(struct saa716x_dev *saa716x)
 {
 	s16 M;
@@ -31,6 +120,89 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 	u8 i;
 	u32 boot_div[14], freq[14];
 
+#if 0
+	/* 1. PLL to FS1 */
+	SAA716x_EPWR(CGU, CGU_FS1_0, CGU_FS1_PLL); /* PSS */
+	SAA716x_EPWR(CGU, CGU_FS1_1, CGU_FS1_PLL); /* DCS */
+	SAA716x_EPWR(CGU, CGU_FS1_3, CGU_FS1_PLL); /* Boot/I2C */
+	SAA716x_EPWR(CGU, CGU_FS1_7, CGU_FS1_PLL); /* FGPI_0 */
+	SAA716x_EPWR(CGU, CGU_FS1_8, CGU_FS1_PLL); /* FGPI_1 */
+	SAA716x_EPWR(CGU, CGU_FS1_9, CGU_FS1_PLL); /* FGPI_2 */
+	SAA716x_EPWR(CGU, CGU_FS1_10, CGU_FS1_PLL); /* FGPI_3 */
+	SAA716x_EPWR(CGU, CGU_FS1_13, CGU_FS1_PLL); /* Phy */
+
+	/* 2. FS1 to all */
+	SAA716x_EPWR(CGU, CGU_SCR_0, CGU_SCR_ENF1); /* PSS */
+	SAA716x_EPWR(CGU, CGU_SCR_1, CGU_SCR_ENF1); /* DCS */
+	SAA716x_EPWR(CGU, CGU_SCR_3, CGU_SCR_ENF1); /* Boot/I2C */
+	SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1); /* FGPI_0 */
+	SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1); /* FGPI_1 */
+	SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1); /* FGPI_2 */
+	SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1); /* FGPI_3 */
+	SAA716x_EPWR(CGU, CGU_SCR_13, CGU_SCR_ENF1); /* Phy */
+
+	/* 3. setup clock divider */
+	saa716x_set_clk(saa716x, SAA716x_CLK_PSS,  125); /* PSS */
+	saa716x_set_clk(saa716x, SAA716x_CLK_DCS,  125); /* DCS */
+	saa716x_set_clk(saa716x, SAA716x_CLK_I2C,   25); /* Boot/I2C */
+	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI0, 25); /* FGPI_0 */
+	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI1, 25); /* FGPI_1 */
+	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI2, 25); /* FGPI_2 */
+	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI3, 25); /* FGPI_3 */
+	saa716x_set_clk(saa716x, SAA716x_CLK_PHY,  125); /* Phy */
+
+	/* 4. enable clock divider */
+	SAA716x_EPWR(CGU, CGU_ESR_0_0, CGU_ESR_FD_EN); /* Base 0 */
+	SAA716x_EPWR(CGU, CGU_ESR_0_1, CGU_ESR_FD_EN); /* PSS PCIe Core */
+	SAA716x_EPWR(CGU, CGU_ESR_0_2, CGU_ESR_FD_EN); /* PSS Adapter */
+	SAA716x_EPWR(CGU, CGU_ESR_0_3, CGU_ESR_FD_EN); /* PSS MMU */
+	SAA716x_EPWR(CGU, CGU_ESR_0_4, CGU_ESR_FD_EN); /* PSS DTL2MTL */
+	SAA716x_EPWR(CGU, CGU_ESR_0_5, CGU_ESR_FD_EN); /* MSI */
+	SAA716x_EPWR(CGU, CGU_ESR_0_6, CGU_ESR_FD_EN); /* GREG */
+	SAA716x_EPWR(CGU, CGU_ESR_0_7, CGU_ESR_FD_EN); /* GPIO */
+	SAA716x_EPWR(CGU, CGU_ESR_1_0, CGU_ESR_FD_EN); /* Base 1 */
+	SAA716x_EPWR(CGU, CGU_ESR_1_1, CGU_ESR_FD_EN); /* DCS */
+	SAA716x_EPWR(CGU, CGU_ESR_2_0, CGU_ESR_FD_EN); /* Base 2 */
+	SAA716x_EPWR(CGU, CGU_ESR_3_0, CGU_ESR_FD_EN); /* Base 3 */
+	SAA716x_EPWR(CGU, CGU_ESR_3_1, CGU_ESR_FD_EN); /* Boot */
+	SAA716x_EPWR(CGU, CGU_ESR_3_2, CGU_ESR_FD_EN); /* I2C */
+	SAA716x_EPWR(CGU, CGU_ESR_4_0, CGU_ESR_FD_EN); /* Base 4 */
+	SAA716x_EPWR(CGU, CGU_ESR_4_1, 0); /* Phy */
+	SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN); /* FGPI_0 */
+	SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN); /* FGPI_1 */
+	SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN); /* FGPI_2 */
+	SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN); /* FGPI_3 */
+	SAA716x_EPWR(CGU, CGU_ESR_13, 0); /* PCIe */
+
+	/* 5. enable module clocks */
+	SAA716x_EPWR(CGU, CGU_PCR_0_0, CGU_PCR_RUN); /* Base 0 */
+	SAA716x_EPWR(CGU, CGU_PCR_0_1, CGU_PCR_RUN); /* PSS PCIe Core */
+	SAA716x_EPWR(CGU, CGU_PCR_0_2, CGU_PCR_RUN); /* PSS Adapter */
+	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* PSS MMU */
+	SAA716x_EPWR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* PSS DTL2MTL */
+	SAA716x_EPWR(CGU, CGU_PCR_0_5, CGU_PCR_RUN); /* MSI */
+	SAA716x_EPWR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
+	SAA716x_EPWR(CGU, CGU_PCR_0_7, CGU_PCR_RUN); /* GPIO */
+	SAA716x_EPWR(CGU, CGU_PCR_1_0, CGU_PCR_RUN); /* Base 1 */
+	SAA716x_EPWR(CGU, CGU_PCR_1_1, CGU_PCR_RUN); /* DCS */
+	SAA716x_EPWR(CGU, CGU_PCR_2_0, CGU_PCR_RUN); /* Base 2 */
+	SAA716x_EPWR(CGU, CGU_PCR_2_1, 0); /* SPI */
+	SAA716x_EPWR(CGU, CGU_PCR_3_0, CGU_PCR_RUN); /* Base 3 */
+	SAA716x_EPWR(CGU, CGU_PCR_3_1, CGU_PCR_RUN); /* Boot */
+	SAA716x_EPWR(CGU, CGU_PCR_3_2, CGU_PCR_RUN); /* I2C */
+	SAA716x_EPWR(CGU, CGU_PCR_4_0, CGU_PCR_RUN); /* Base 4 */
+	SAA716x_EPWR(CGU, CGU_PCR_4_1, 0); /* Phy */
+	SAA716x_EPWR(CGU, CGU_PCR_5, 0); /* VI_0 */
+	SAA716x_EPWR(CGU, CGU_PCR_6, 0); /* VI_1 */
+	SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN); /* FGPI_0 */
+	SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN); /* FGPI_1 */
+	SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN); /* FGPI_2 */
+	SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN); /* FGPI_3 */
+	SAA716x_EPWR(CGU, CGU_PCR_11, 0); /* AI_0 */
+	SAA716x_EPWR(CGU, CGU_PCR_12, 0); /* AI_1 */
+	SAA716x_EPWR(CGU, CGU_PCR_13, 0); /* PCIe */
+#endif
+
 	SAA716x_EPWR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
 	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* MMU */
 	SAA716x_EPWR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* DTL2MTL */
@@ -60,53 +232,20 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 			i, M, freq[i]);
 	}
 
-	/* VI 0 */
-	SAA716x_EPWR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
-	SAA716x_EPWR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
-	SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
-	SAA716x_EPWR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
-
-	/* VI 1 */
-	SAA716x_EPWR(CGU, CGU_PCR_6, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_6, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_6, CGU_ESR_FD_EN);
-
-	/* FGPI 0 */
-	SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN);
-
-	/* FGPI 1 */
-	SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN);
-
-	/* FGPI 2 */
-	SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN);
-
-	/* FGPI 3 */
-	SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN);
-
-	/* AI 0 */
-	SAA716x_EPWR(CGU, CGU_PCR_11, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_11, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_11, CGU_ESR_FD_EN);
-
-	/* AI 1 */
-	SAA716x_EPWR(CGU, CGU_PCR_12, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_12, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
+	/* I2C */
+	SAA716x_EPWR(CGU, CGU_PCR_3_2, CGU_PCR_RUN);
+	SAA716x_EPWR(CGU, CGU_SCR_3, CGU_SCR_ENF1);
+	SAA716x_EPWR(CGU, CGU_FS1_3, 0x00000000);
+	SAA716x_EPWR(CGU, CGU_ESR_3_2, CGU_ESR_FD_EN);
+
+	SAA716x_CGU_CLKRUN(5); /* VI_0 */
+	SAA716x_CGU_CLKRUN(6); /* VI_1 */
+	SAA716x_CGU_CLKRUN(7); /* FGPI_0 */
+	SAA716x_CGU_CLKRUN(8); /* FGPI_1 */
+	SAA716x_CGU_CLKRUN(9); /* FGPI_2 */
+	SAA716x_CGU_CLKRUN(10); /* FGPI_3 */
+	SAA716x_CGU_CLKRUN(11); /* AI_0 */
+	SAA716x_CGU_CLKRUN(12); /* AI_1 */
 
 	msleep(1000); /* wait for PLL */
 
@@ -130,111 +269,48 @@ int saa716x_set_intclk(struct saa716x_dev *saa716x, u32 clk_domain)
 
 	switch (clk_domain) {
 	case PORT_VI0:
-		SAA716x_EPWR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(5); /* VI_0 */
 		delay = 0;
 		break;
 
 	case PORT_VI1:
-		SAA716x_EPWR(CGU, CGU_PCR_6, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_6, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_6, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(6); /* VI_1 */
 		delay = 0;
 		break;
 
 	case PORT_FGPI0:
-		SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(7); /* FGPI_0 */
 		break;
 
 	case PORT_FGPI1:
-		SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(8); /* FGPI_1 */
 		break;
 
 	case PORT_FGPI2:
-		SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(9); /* FGPI_2 */
 		break;
 
 	case PORT_FGPI3:
-		SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(10); /* FGPI_3 */
 		break;
 
 	case PORT_AI0:
-		SAA716x_EPWR(CGU, CGU_PCR_11, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_11, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_11, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(11); /* AI_0 */
 		break;
 
 	case PORT_AI1:
-		SAA716x_EPWR(CGU, CGU_PCR_12, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_12, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN); /* Frac div */
+		SAA716x_CGU_CLKRUN(12); /* AI_1 */
 		break;
 
 	case PORT_ALL:
-		/* VI 0 */
-		SAA716x_EPWR(CGU, CGU_PCR_5, CGU_PCR_RUN); /* Run */
-		SAA716x_EPWR(CGU, CGU_SCR_5, CGU_SCR_ENF1); /* Switch */
-		SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000000); /* PLL Clk */
-		SAA716x_EPWR(CGU, CGU_ESR_5, CGU_ESR_FD_EN); /* Frac div */
-
-		/* VI 1 */
-		SAA716x_EPWR(CGU, CGU_PCR_6, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_6, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_6, CGU_ESR_FD_EN);
-
-		/* FGPI 0 */
-		SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN);
-
-		/* FGPI 1 */
-		SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN);
-
-		/* FGPI 2 */
-		SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN);
-
-		/* FGPI 3 */
-		SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN);
-
-		/* AI 0 */
-		SAA716x_EPWR(CGU, CGU_PCR_11, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_11, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_11, CGU_ESR_FD_EN);
-
-		/* AI 1 */
-		SAA716x_EPWR(CGU, CGU_PCR_12, CGU_PCR_RUN);
-		SAA716x_EPWR(CGU, CGU_SCR_12, CGU_SCR_ENF1);
-		SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000000);
-		SAA716x_EPWR(CGU, CGU_ESR_12, CGU_ESR_FD_EN);
+		SAA716x_CGU_CLKRUN(5); /* VI_0 */
+		SAA716x_CGU_CLKRUN(6); /* VI_1 */
+		SAA716x_CGU_CLKRUN(7); /* FGPI_0 */
+		SAA716x_CGU_CLKRUN(8); /* FGPI_1 */
+		SAA716x_CGU_CLKRUN(9); /* FGPI_2 */
+		SAA716x_CGU_CLKRUN(10); /* FGPI_3 */
+		SAA716x_CGU_CLKRUN(11); /* AI_0 */
+		SAA716x_CGU_CLKRUN(12); /* AI_1 */
 		break;
 
 	default:
@@ -315,85 +391,3 @@ int saa716x_set_extclk(struct saa716x_dev *saa716x, u32 port)
 
 	return err;
 }
-
-enum saa716x_clk {
-	SAA716x_CLK_PSS		= 0,
-	SAA716x_CLK_DCS,
-	SAA716x_CLK_SPI,
-	SAA716x_CLK_I2C,
-	SAA716x_CLK_PHI,
-	SAA716x_CLK_VI0,
-	SAA716x_CLK_VI1,
-	SAA716x_CLK_FGPI0,
-	SAA716x_CLK_FGPI1,
-	SAA716x_CLK_FGPI2,
-	SAA716x_CLK_FGPI3,
-	SAA716x_CLK_AI0,
-	SAA716x_CLK_AI1,
-	SAA716x_CLK_PHY
-};
-
-int saa716x_set_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain, u32 frequency)
-{
-	u32 M = 1, N = 1;
-	u32 reset = 0, freq, cur_div;
-	s8 ucN, ucM, sub, add, lsb;
-	int i;
-
-	/* calculate a new divider */
-	do {
-		M = (N * PLL_FREQ) / frequency;
-		if (M == 0)
-			N++;
-	} while (M == 0);
-
-	/* calculate real frequency */
-	freq = (N * PLL_FREQ) / M;
-
-	ucN = 0xFF & N;
-	ucM = 0xFF & M;
-	sub = -ucN;
-	add = ucM - ucN;
-	lsb = 4; /* run */
-
-	/* enable stretching for N/M smaller than 1/2 */
-	if (((10 * N) / M) < 5)
-        	lsb |= 1; /* Add stretching */
-
-	cur_div   = sub & 0xff;
-	cur_div <<= 8;
-	cur_div  |= add & 0xff;
-	cur_div <<= 3;
-	cur_div  |= lsb;
-
-	dprintk(SAA716x_DEBUG, 1, "INFO: SetClockFrequency %d f %d set f %d, N = %d, M = %d, divider 0x%x",
-		clk_domain,
-		frequency,
-		freq,
-		N,
-		M,
-		cur_div);
-
-	/* add reset to the frequency divider, update register and wait */
-	SAA716x_EPWR(CGU, CGU_FDC[clk_domain], cur_div | 0x2);
-
-	/* monitor reset disable */
-	for (i = 0; i < CGU_CLKS; i++) {
-		msleep(10);
-		reset = SAA716x_EPRD(CGU, CGU_FREQ[clk_domain]);
-		if (cur_div == reset)
-			break;
-	}
-
-	/* if not changed, disable reset */
-	if (cur_div != reset)
-		SAA716x_EPWR(CGU, CGU_FREQ[clk_domain], cur_div);
-
-	return 0;
-}
-
-u32 saa716x_get_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain)
-{
-	return CGU_FREQ[clk_domain];
-}
-
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 38f3812b7742a..ff6d8d716b3c4 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -80,7 +80,7 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
-	saa716x_core_reset(saa716x);
+//	saa716x_core_reset(saa716x);
 	pci_read_config_dword(pdev, 0x06, &sts);
 
 	err = saa716x_i2c_init(saa716x);
@@ -271,10 +271,12 @@ static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	adapter->fe = zl10353_attach(&saa716x_averhc82_zl10353_config, &i2c->i2c_adapter);
-	if (adapter->fe) {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) ZL10353 demodulator succesfully attached", count);
+//	adapter->fe = zl10353_attach(&saa716x_averhc82_zl10353_config, &i2c->i2c_adapter);
+	if (adapter->fe == NULL) {
+		dprintk(SAA716x_ERROR, 1, "No Frontend found");
+		return -ENODEV;
 	} else {
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) ZL10353 demodulator succesfully attached", count);
 		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
 			dprintk(SAA716x_ERROR, 1, "ERROR: Frontend registration failed");
 
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index c9460d2cde286..fec19fd2b99f0 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -853,6 +853,8 @@
 #define CGU_FS1_11			0x064
 #define CGU_FS1_12			0x068
 #define CGU_FS1_13			0x06c
+#define CGU_FS1_PLL			(0x00000000 <<  0)
+
 
 #define CGU_FS2_0			0x070
 #define CGU_FS2_1			0x074
@@ -984,9 +986,11 @@
 #define CGU_FDC_11			0x244
 #define CGU_FDC_12			0x248
 #define CGU_FDC_13			0x24c
-
-
-
+#define CGU_FDC_STRETCH			(0x00000001 <<  0)
+#define CGU_FDC_RESET			(0x00000001 <<  1)
+#define CGU_FDC_RUN1			(0x00000001 <<  2)
+#define CGU_FDC_MADD			(0x000000ff <<  3)
+#define CGU_FDC_MSUB			(0x000000ff << 11)
 
 /* -------------- DCS Registers -------------- */
 

From 6faaa3b0fb30a2d93dc97e8d2da6e92db99fa31d Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:22:51 +0400
Subject: [PATCH 060/364] saa716x: Check device revision for I2C bus orderring

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index b2a355519259f..515d74970dec0 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -408,9 +408,17 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	struct saa716x_i2c *i2c = saa716x->i2c;
 	int i, err = 0;
 
-	u32 I2C_DEV[2] = {I2C_B, I2C_A};
+	u32 I2C_DEV[2];
 	u32 reg;
 
+	if (saa716x->revision > 2) {
+		I2C_DEV[0] = I2C_A;
+		I2C_DEV[1] = I2C_B;
+	} else {
+		I2C_DEV[0] = I2C_B;
+		I2C_DEV[1] = I2C_A;
+	}
+
 	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core", saa716x->pdev->device);
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 		dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, saa716x_i2c[i].name);

From 4647de1a203997aeb51b7772edbd05be1b1ee3e8 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:24:12 +0400
Subject: [PATCH 061/364] saa716x: Add support for the NXP Atlantis reference
 design

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 34 ++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index ff6d8d716b3c4..65f8b7b23bda5 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -210,6 +210,39 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.irq_handler		= saa716x_hybrid_pci_irq,
 };
 
+/*
+ * NXP Reference design (Atlantis)
+ * 2x DVB-T Frontend: 2x TDA10046
+ * Analog Decoder: 2x Internal
+ */
+#define SAA716x_MODEL_NXP_ATLANTIS	"Atlantis reference board"
+#define SAA716x_DEV_NXP_ATLANTIS	"2x DVB-T + 2x Analog"
+
+static int load_config_atlantis(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+	return ret;
+}
+
+static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
+static struct saa716x_config saa716x_atlantis_config = {
+	.model_name		= SAA716x_MODEL_NXP_ATLANTIS,
+	.dev_type		= SAA716x_DEV_NXP_ATLANTIS,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_atlantis,
+	.adapters		= 2,
+	.frontend_attach	= saa716x_atlantis_frontend_attach,
+	.irq_handler		= saa716x_hybrid_pci_irq,
+};
 
 /*
  * NXP Reference design (NEMO)
@@ -339,6 +372,7 @@ static struct saa716x_config saa716x_averh788_config = {
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
+	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7162, &saa716x_atlantis_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_H788, SAA7160, &saa716x_averh788_config),

From 5e101b639f4ad58bfc391f57971e9e4a9d6f22e8 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:25:22 +0400
Subject: [PATCH 062/364] saa716x: Free IRQ before module unload

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 698ae064f5ce3..b9f21a780daa7 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -274,7 +274,7 @@ static void saa716x_free_irq(struct saa716x_dev *saa716x)
 		pci_disable_msix(pdev);
 
 	} else {
-		free_irq(pdev->irq, pdev);
+		free_irq(pdev->irq, saa716x);
 		if (saa716x->int_type == MODE_MSI)
 			pci_disable_msi(pdev);
 	}

From 8ed587770d8e78f0a5d0ba46f2ffcb5e1c0f1964 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:26:03 +0400
Subject: [PATCH 063/364] saa716x: Code reorganization

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 300 ++++++++++++------------
 drivers/media/pci/saa716x/saa716x_i2c.h |   7 +-
 2 files changed, 158 insertions(+), 149 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 515d74970dec0..077790714fe2c 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -206,10 +206,9 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
 	return err;
 }
 
-static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
+static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u8 I2C_DEV)
 {
 	struct saa716x_dev *saa716x	= i2c->saa716x;
-	u32 I2C_DEV			= i2c->i2c_dev;
 	u8 rxd;
 	int i, err = 0;
 
@@ -264,10 +263,9 @@ static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 	return err;
 }
 
-static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
+static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u8 I2C_DEV)
 {
 	struct saa716x_dev *saa716x	= i2c->saa716x;
-	u32 I2C_DEV			= i2c->i2c_dev;
 
 	int i, err = 0;
 
@@ -309,46 +307,28 @@ static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg)
 	return err;
 }
 
-static int saa716x_i2c_busa_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
+static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
 {
-	struct saa716x_i2c *i2c = i2c_get_adapdata(adapter);
-	int ret = 0, i;
-
-	i2c = &i2c[0];
-	mutex_lock(&i2c->i2c_lock);
-	for (i = 0; i < num; i++) {
-		if (msgs[i].flags & I2C_M_RD)
-			ret = saa716x_i2c_read(i2c, &msgs[i]);
-		else
-			ret = saa716x_i2c_write(i2c, &msgs[i]);
-
-		if (ret < 0)
-			goto bail_out;
-	}
-	mutex_unlock(&i2c->i2c_lock);
-	return num;
-
-bail_out:
-	mutex_unlock(&i2c->i2c_lock);
-	return ret;
-}
+	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
+	struct saa716x_dev *saa716x	= i2c->saa716x;
+	u8 DEV				= i2c->i2c_dev;
 
-static int saa716x_i2c_busb_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
-{
-	struct saa716x_i2c *i2c = i2c_get_adapdata(adapter);
 	int ret = 0, i;
 
-	i2c = &i2c[1];
+	dprintk(SAA716x_DEBUG, 0, "\n");
+	dprintk(SAA716x_DEBUG, 1, "Bus(%d) I2C transfer", DEV);
 	mutex_lock(&i2c->i2c_lock);
+
 	for (i = 0; i < num; i++) {
 		if (msgs[i].flags & I2C_M_RD)
-			ret = saa716x_i2c_read(i2c, &msgs[i]);
+			ret = saa716x_i2c_read(i2c, &msgs[i], DEV);
 		else
-			ret = saa716x_i2c_write(i2c, &msgs[i]);
+			ret = saa716x_i2c_write(i2c, &msgs[i], DEV);
 
 		if (ret < 0)
 			goto bail_out;
 	}
+
 	mutex_unlock(&i2c->i2c_lock);
 	return num;
 
@@ -371,41 +351,18 @@ static u32 saa716x_i2c_func(struct i2c_adapter *adapter)
 	return I2C_FUNC_SMBUS_EMUL;
 }
 
-static struct i2c_algorithm saa716x_algo[] = {
-	{
-		.master_xfer	= saa716x_i2c_busa_xfer,
-		.functionality	= saa716x_i2c_func,
-	}, {
-		.master_xfer	= saa716x_i2c_busb_xfer,
-		.functionality	= saa716x_i2c_func,
-	},
+static const struct i2c_algorithm saa716x_algo = {
+	.master_xfer	= saa716x_i2c_xfer,
+	.functionality	= saa716x_i2c_func,
 };
 
-
 #define I2C_HW_B_SAA716x		0x12
 
-static struct i2c_adapter saa716x_i2c[] = {
-
-	{
-		.owner	= THIS_MODULE,
-		.name	= "SAA716x I2C Core 0",
-		.id	= I2C_HW_B_SAA716x,
-		.class	= I2C_CLASS_TV_DIGITAL,
-		.algo	= &saa716x_algo[0],
-	}, {
-		.owner	= THIS_MODULE,
-		.name	= "SAA716x I2C Core 1",
-		.id	= I2C_HW_B_SAA716x,
-		.class	= I2C_CLASS_TV_DIGITAL,
-		.algo	= &saa716x_algo[1],
-	},
-};
-
-
 int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 {
-	struct pci_dev *pdev	= saa716x->pdev;
-	struct saa716x_i2c *i2c = saa716x->i2c;
+	struct pci_dev *pdev		= saa716x->pdev;
+	struct saa716x_i2c *i2c		= saa716x->i2c;
+	struct i2c_adapter *adapter	= NULL;
 	int i, err = 0;
 
 	u32 I2C_DEV[2];
@@ -421,105 +378,147 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core", saa716x->pdev->device);
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
-		dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, saa716x_i2c[i].name);
+
 		mutex_init(&i2c->i2c_lock);
 		init_waitqueue_head(&i2c->i2c_wq);
 
-		memcpy(&i2c->i2c_adapter, &saa716x_i2c[i], sizeof (struct i2c_adapter));
-		i2c_set_adapdata(&i2c->i2c_adapter, saa716x_i2c);
-		i2c->i2c_adapter.dev.parent = &pdev->dev;
-
-		err = i2c_add_adapter(&i2c->i2c_adapter);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, saa716x_i2c[i].name);
-			goto exit;
-		}
-
 		i2c->i2c_dev	= I2C_DEV[i];
 		i2c->i2c_rate	= saa716x->i2c_rate;
+		adapter		= &i2c->i2c_adapter;
 
-		msleep(100);
+		if (adapter != NULL) {
 
-		reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
-		if (!(reg & 0xd)) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, saa716x_i2c[i].name);
-			err = -EIO;
-			goto exit;
-		}
+			i2c_set_adapdata(adapter, i2c);
 
-		/* Flush queue */
-		SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xcc);
+			strcpy(adapter->name, SAA716x_I2C_ADAPTER(i));
 
-		/* Disable all interrupts and clear status */
-		SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
-		SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
+			adapter->owner		= THIS_MODULE;
+			adapter->class		= I2C_CLASS_TV_DIGITAL;
+			adapter->algo		= &saa716x_algo;
+			adapter->algo_data 	= NULL;
+			adapter->id		= I2C_HW_B_SAA716x;
+			adapter->timeout	= 500; /* FIXME ! */
+			adapter->retries	= 3; /* FIXME ! */
+			adapter->dev.parent	= &pdev->dev;
 
-		/* Reset I2C Core and generate a delay */
-		SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xc1);
+			dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, adapter->name);
+			err = i2c_add_adapter(adapter);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, adapter->name);
+				goto exit;
+			}
 
-		msleep(100);
+			msleep(100);
 
-		reg = SAA716x_EPRD(I2C_DEV[i], I2C_CONTROL);
-		if (reg != 0xc0) {
-			dprintk(SAA716x_ERROR, 1, "Core RESET failed");
-			err = -EIO;
-			goto exit;
-		}
+			reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
+			if (!(reg & 0xd)) {
+				dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, adapter->name);
+				err = -EIO;
+				goto exit;
+			}
 
-		/* I2C Rate Setup */
-		switch (i2c->i2c_rate) {
-		case SAA716x_I2C_RATE_400:
-			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 400k", i, saa716x_i2c[i].name);
-			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-			SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x19);
-			break;
-		case SAA716x_I2C_RATE_100:
-			dprintk(SAA716x_DEBUG, 1, "Initializing Adapter (%d) %s @ 100k", i, saa716x_i2c[i].name);
-			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-			SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
-			SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x60);
-			break;
-		default:
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Unknown Rate (Rate=0x%02x)", i, saa716x_i2c[i].name, i2c->i2c_rate);
-			break;
-		}
+			/* Flush queue */
+			SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xcc);
 
-		/* Disable all interrupts and clear status */
-		SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
-		SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
-
-		/* Enabled interrupts:
-		 * Master Transaction Done (),
-		 * Master Arbitration Failure,
-		 * Master Transaction No Ack,
-		 * I2C Error IBE
-		 * Master Transaction Data Request
-		 * (0xc7)
-		 */
-		SAA716x_EPWR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
-						       I2C_ERROR_IBE			| \
-						       I2C_ENABLE_MTNA			| \
-						       I2C_ENABLE_MAF			| \
-						       I2C_ENABLE_MTD);
-
-		/* Check interrupt enable status */
-		reg = SAA716x_EPRD(I2C_DEV[i], INT_ENABLE);
-		if (reg != 0xc7) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s Interrupt enable failed, Exiting !", i, saa716x_i2c[i].name);
-			err = -EIO;
-			goto exit;
-		}
+			/* Disable all interrupts and clear status */
+			SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
+			SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
 
-		/* Check status */
-		reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
-		if (!(reg & 0xd)) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s has bad state, Exiting !", i, saa716x_i2c[i].name);
-			err = -EIO;
-			goto exit;
-		}
+			/* Reset I2C Core and generate a delay */
+			SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xc1);
+
+			msleep(100);
+
+			reg = SAA716x_EPRD(I2C_DEV[i], I2C_CONTROL);
+			if (reg != 0xc0) {
+				dprintk(SAA716x_ERROR, 1, "Core RESET failed");
+				err = -EIO;
+				goto exit;
+			}
+
+			/* I2C Rate Setup */
+			switch (i2c->i2c_rate) {
+			case SAA716x_I2C_RATE_400:
+
+				dprintk(SAA716x_DEBUG, 1,
+					"Initializing Adapter (%d) %s @ 400k",
+					i,
+					adapter->name);
+
+				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
+				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+				SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x19);
+				break;
+
+			case SAA716x_I2C_RATE_100:
+
+				dprintk(SAA716x_DEBUG, 1,
+					"Initializing Adapter (%d) %s @ 100k",
+					i,
+					adapter->name);
 
-		i2c->saa716x = saa716x;
+				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
+				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+				SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x60);
+				break;
+
+			default:
+
+				dprintk(SAA716x_ERROR, 1,
+					"Adapter (%d) %s Unknown Rate (Rate=0x%02x)",
+					i,
+					adapter->name,
+					i2c->i2c_rate);
+
+				break;
+			}
+
+			/* Disable all interrupts and clear status */
+			SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
+			SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
+
+			/* Enabled interrupts:
+			* Master Transaction Done (),
+			* Master Arbitration Failure,
+			* Master Transaction No Ack,
+			* I2C Error IBE
+			* Master Transaction Data Request
+			* (0xc7)
+			*/
+			SAA716x_EPWR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
+							I2C_ERROR_IBE			| \
+							I2C_ENABLE_MTNA			| \
+							I2C_ENABLE_MAF			| \
+							I2C_ENABLE_MTD);
+
+			/* Check interrupt enable status */
+			reg = SAA716x_EPRD(I2C_DEV[i], INT_ENABLE);
+			if (reg != 0xc7) {
+
+				dprintk(SAA716x_ERROR, 1,
+					"Adapter (%d) %s Interrupt enable failed, Exiting !",
+					i,
+					adapter->name);
+
+				err = -EIO;
+				goto exit;
+			}
+
+			/* Check status */
+			reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
+			if (!(reg & 0xd)) {
+
+				dprintk(SAA716x_ERROR, 1,
+					"Adapter (%d) %s has bad state, Exiting !",
+					i,
+					adapter->name);
+
+				err = -EIO;
+				goto exit;
+			}
+
+			i2c->saa716x = saa716x;
+		}
 		i2c++;
 	}
 
@@ -533,15 +532,20 @@ EXPORT_SYMBOL_GPL(saa716x_i2c_init);
 
 int __devexit saa716x_i2c_exit(struct saa716x_dev *saa716x)
 {
-	struct saa716x_i2c *i2c = saa716x->i2c;
+	struct saa716x_i2c *i2c		= saa716x->i2c;
+	struct i2c_adapter *adapter	= NULL;
 	int i, err = 0;
 
 	dprintk(SAA716x_DEBUG, 1, "Removing SAA%02x I2C Core", saa716x->pdev->device);
+
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
-		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, saa716x_i2c[i].name);
-		err = i2c_del_adapter(&i2c->i2c_adapter);
+
+		adapter = &i2c->i2c_adapter;
+		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
+
+		err = i2c_del_adapter(adapter);
 		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s remove failed", i, saa716x_i2c[i].name);
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s remove failed", i, adapter->name);
 			goto exit;
 		}
 		i2c++;
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 3e6de9ae8d066..ded26976f5b9f 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -3,6 +3,11 @@
 
 #define SAA716x_I2C_ADAPTERS	2
 
+#define SAA716x_I2C_ADAPTER(__dev) ((	\
+	(__dev == 1) ?			\
+		"SAA716x I2C Core 1" :	\
+		"SAA716x I2C Core 0"))
+
 struct saa716x_dev;
 
 enum saa716x_i2c_rate {
@@ -14,7 +19,7 @@ struct saa716x_i2c {
 	struct i2c_adapter		i2c_adapter;
 	struct mutex			i2c_lock;
 	struct saa716x_dev		*saa716x;
-	u32				i2c_dev;
+	u8				i2c_dev;
 
 	enum saa716x_i2c_rate		i2c_rate; /* run time */
 	wait_queue_head_t		i2c_wq;

From b2b7eb883fe31030f73fb74c93a9bfec26ae2933 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:26:49 +0400
Subject: [PATCH 064/364] saa716x: Add support for the KNC1 Dual S2 device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 31 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_budget.h |  5 +++-
 2 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 4f0832812f79f..989ec2400aba0 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -273,10 +273,41 @@ static struct saa716x_config saa716x_vp6002_config = {
 	.irq_handler		= saa716x_budget_pci_irq,
 };
 
+static int load_config_knc1_duals2(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+
+	return ret;
+}
+
+#define SAA716x_MODEL_KNC1_DUALS2	"KNC One Dual S2"
+#define SAA716x_DEV_KNC1_DUALS2		"1xDVB-S + 1xDVB-S/S2"
+
+static int saa716x_knc1_duals2_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
+static struct saa716x_config saa716x_knc1_duals2_config = {
+	.model_name		= SAA716x_MODEL_KNC1_DUALS2,
+	.dev_type		= SAA716x_DEV_KNC1_DUALS2,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_knc1_duals2,
+	.adapters		= 2,
+	.frontend_attach	= saa716x_knc1_duals2_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
+};
+
 static struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
+	MAKE_ENTRY(KNC_One,		 KNC_Dual_S2,	  SAA7160, &saa716x_knc1_duals2_config),
 	{
 		.vendor = 0,
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 38d94a6b2ee1f..14d03e238c231 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -1,8 +1,11 @@
 #ifndef __SAA716x_BUDGET_H
 #define __SAA716x_BUDGET_H
- 
+
 #define TWINHAN_TECHNOLOGIES	0x1822
 #define TWINHAN_VP_1028		0x0044
 #define TWINHAN_VP_6002		0x0047
 
+#define KNC_One			0x1894
+#define KNC_Dual_S2		0x0110
+
 #endif /* __SAA716x_BUDGET_H */

From cc54e2ea4dd6f647da9989c774055797a390e4d9 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:27:34 +0400
Subject: [PATCH 065/364] saa716x: Add support for the VP-3071 DVB-T dual
 device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 29 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_budget.h |  1 +
 2 files changed, 30 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 989ec2400aba0..2ad3963647471 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -212,6 +212,34 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+static int load_config_vp3071(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+
+	return ret;
+}
+
+#define SAA716x_MODEL_TWINHAN_VP3071	"Twinhan/Azurewave VP-3071"
+#define SAA716x_DEV_TWINHAN_VP3071	"2x DVB-T"
+
+static int saa716x_vp3071_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
+static struct saa716x_config saa716x_vp3071_config = {
+	.model_name		= SAA716x_MODEL_TWINHAN_VP3071,
+	.dev_type		= SAA716x_DEV_TWINHAN_VP3071,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_vp3071,
+	.adapters		= 2,
+	.frontend_attach	= saa716x_vp3071_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
+};
 
 static int load_config_vp1028(struct saa716x_dev *saa716x)
 {
@@ -306,6 +334,7 @@ static struct saa716x_config saa716x_knc1_duals2_config = {
 static struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
+	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
 	MAKE_ENTRY(KNC_One,		 KNC_Dual_S2,	  SAA7160, &saa716x_knc1_duals2_config),
 	{
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 14d03e238c231..572cd6f856635 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -2,6 +2,7 @@
 #define __SAA716x_BUDGET_H
 
 #define TWINHAN_TECHNOLOGIES	0x1822
+#define TWINHAN_VP_3071		0x0039
 #define TWINHAN_VP_1028		0x0044
 #define TWINHAN_VP_6002		0x0047
 

From f42599d526065d59f8c07dd944a60fb3cca6e47d Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:28:30 +0400
Subject: [PATCH 066/364] saa716x: Add GPIO control functions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |  3 +-
 drivers/media/pci/saa716x/saa716x_adap.c   | 41 +++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_adap.h   |  2 +
 drivers/media/pci/saa716x/saa716x_budget.c |  1 +
 drivers/media/pci/saa716x/saa716x_gpio.c   | 47 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_gpio.h   | 15 +++++++
 drivers/media/pci/saa716x/saa716x_priv.h   |  4 ++
 drivers/media/pci/saa716x/saa716x_reg.h    | 34 +++++++++++++++-
 8 files changed, 144 insertions(+), 3 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_gpio.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_gpio.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index a8e3bff84107e..7bd275c52184c 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -6,7 +6,8 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_aip.o	\
 				    saa716x_boot.o	\
 				    saa716x_fgpi.o	\
-				    saa716x_adap.o
+				    saa716x_adap.o	\
+				    saa716x_gpio.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 869344fceded0..166560bd269fe 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -8,6 +8,7 @@
 #include "saa716x_priv.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
+#include "saa716x_gpio.h"
 
 void saa716x_dma_start(struct saa716x_dev *saa716x)
 {
@@ -184,3 +185,43 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 	return;
 }
 EXPORT_SYMBOL(saa716x_dvb_exit);
+
+int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 control)
+{
+	struct saa716x_adapter *adapter = saa716x->saa716x_adap;
+	struct saa716x_config  *config	= saa716x->config;
+
+	int i;
+
+	for (i = 0; i < config->adapters; i++); {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", i);
+
+		saa716x_gpio_ctl(saa716x, adapter->power_ctl);
+		saa716x_gpio_bits(saa716x, adapter->power_ctl);
+
+		adapter++;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(saa716x_frontend_power);
+
+int saa716x_frontend_reset(struct saa716x_dev *saa716x)
+{
+	struct saa716x_adapter *adapter = saa716x->saa716x_adap;
+	struct saa716x_config  *config	= saa716x->config;
+
+	int i;
+
+	for (i = 0; i < config->adapters; i++) {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", i);
+
+		saa716x_gpio_ctl(saa716x, adapter->reset_ctl);
+		saa716x_gpio_bits(saa716x, adapter->reset_ctl);
+
+		adapter++;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(saa716x_frontend_reset);
diff --git a/drivers/media/pci/saa716x/saa716x_adap.h b/drivers/media/pci/saa716x/saa716x_adap.h
index e6c2b4bbfc021..b30430502cd19 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.h
+++ b/drivers/media/pci/saa716x/saa716x_adap.h
@@ -3,5 +3,7 @@
 
 extern int saa716x_dvb_init(struct saa716x_dev *saa716x);
 extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
+extern int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 control);
+extern int saa716x_frontend_reset(struct saa716x_dev *saa716x);
 
 #endif /* __SAA716x_ADAP_H */
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 2ad3963647471..9b4a623529ab9 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -20,6 +20,7 @@
 #include "saa716x_reg.h"
 #include "saa716x_budget.h"
 #include "saa716x_adap.h"
+#include "saa716x_gpio.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
new file mode 100644
index 0000000000000..e2a06323026e8
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -0,0 +1,47 @@
+#include "saa716x_priv.h"
+#include "saa716x_reg.h"
+#include "saa716x_gpio.h"
+
+u32 saa716x_gpio_rd(struct saa716x_dev *saa716x)
+{
+	return SAA716x_EPRD(GPIO, GPIO_RD);
+}
+
+void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data)
+{
+	SAA716x_EPWR(GPIO, GPIO_WR, data);
+}
+
+void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 out)
+{
+	unsigned long flags;
+	u32 reg;
+
+	spin_lock_irqsave(&saa716x->gpio_lock, flags);
+
+	reg  = SAA716x_EPRD(GPIO, GPIO_OEN);
+	reg &= ~out;
+	/* TODO ! add maskable config bits in here */
+	/* reg |= (config->mask & out) */
+	reg |= out;
+	SAA716x_EPWR(GPIO, GPIO_OEN, reg);
+
+	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
+}
+
+void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits)
+{
+	unsigned long flags;
+	u32 reg;
+
+	spin_lock_irqsave(&saa716x->gpio_lock, flags);
+
+	reg  = SAA716x_EPRD(GPIO, GPIO_WR);
+	reg &= ~bits;
+	/* TODO ! add maskable config bits in here */
+	/* reg |= (config->mask & bits) */
+	reg |= bits;
+	SAA716x_EPWR(GPIO, GPIO_WR, reg);
+
+	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
+}
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
new file mode 100644
index 0000000000000..2a17c09a629eb
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -0,0 +1,15 @@
+#ifndef __SAA716x_GPIO_H
+#define __SAA716x_GPIO_H
+
+#define BOOT_MODE	GPIO_31 | GPIO_30
+#define AV_UNIT_B	GPIO_25
+#define AV_UNIT_A	GPIO_24
+#define AV_INTR_B	GPIO_01
+#define AV_INTR_A	GPIO_00
+
+extern u32 saa716x_gpio_rd(struct saa716x_dev *saa716x);
+extern void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data);
+extern void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 out);
+extern void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits);
+
+#endif /* __SAA716x_GPIO_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index a86f6157868f3..90e2691eaf2d2 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -103,6 +103,9 @@ struct saa716x_adapter {
 	struct saa716x_dev		*saa716x;
 
 	u8				feeds;
+
+	u32				power_ctl;
+	u32				reset_ctl;
 };
 
 struct saa716x_dev {
@@ -130,6 +133,7 @@ struct saa716x_dev {
 
 	struct saa716x_adapter		saa716x_adap[2];
 
+	spinlock_t			gpio_lock;
 	/* DMA */
 
 };
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index fec19fd2b99f0..97a79a21c9c0d 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -807,8 +807,38 @@
 #define GPIO_SW_RST			0xff0
 #define GPIO_SW_RESET			(0x00000001 <<  0)
 
-
-
+#define GPIO_31				(1 << 31)
+#define GPIO_30				(1 << 30)
+#define GPIO_29				(1 << 29)
+#define GPIO_28				(1 << 28)
+#define GPIO_27				(1 << 27)
+#define GPIO_26				(1 << 26)
+#define GPIO_25				(1 << 25)
+#define GPIO_24				(1 << 24)
+#define GPIO_23				(1 << 23)
+#define GPIO_22				(1 << 22)
+#define GPIO_21				(1 << 21)
+#define GPIO_20				(1 << 20)
+#define GPIO_19				(1 << 19)
+#define GPIO_18				(1 << 18)
+#define GPIO_17				(1 << 17)
+#define GPIO_16				(1 << 16)
+#define GPIO_15				(1 << 15)
+#define GPIO_14				(1 << 14)
+#define GPIO_13				(1 << 13)
+#define GPIO_12				(1 << 12)
+#define GPIO_11				(1 << 11)
+#define GPIO_10				(1 << 10)
+#define GPIO_09				(1 <<  9)
+#define GPIO_08				(1 <<  8)
+#define GPIO_07				(1 <<  7)
+#define GPIO_06				(1 <<  6)
+#define GPIO_05				(1 <<  5)
+#define GPIO_04				(1 <<  4)
+#define GPIO_03				(1 <<  3)
+#define GPIO_02				(1 <<  2)
+#define GPIO_01				(1 <<  1)
+#define GPIO_00				(1 <<  0)
 
 /* -------------- PHI0 Registers -------------- */
 

From c24e83eca5a4a382fe97ca953105d413ecb60d28 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:29:31 +0400
Subject: [PATCH 067/364] saa716x: Use power and reset controls within a
 sig\ngle loop

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 83 ++++++++++++------------
 drivers/media/pci/saa716x/saa716x_adap.h |  2 -
 2 files changed, 43 insertions(+), 42 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 166560bd269fe..40bad8ac42f8f 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -65,6 +65,30 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	return 0;
 }
 
+static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 control)
+{
+//	struct saa716x_config  *config	= saa716x->config;
+	struct saa716x_adapter *adapter = &saa716x->saa716x_adap[DEV];
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
+	saa716x_gpio_ctl(saa716x, adapter->power_ctl);
+	saa716x_gpio_bits(saa716x, adapter->power_ctl);
+
+	return 0;
+}
+
+static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
+{
+//	struct saa716x_config  *config	= saa716x->config;
+	struct saa716x_adapter *adapter = &saa716x->saa716x_adap[DEV];
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
+	saa716x_gpio_ctl(saa716x, adapter->reset_ctl);
+	saa716x_gpio_bits(saa716x, adapter->reset_ctl);
+
+	return 0;
+}
+
 int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
@@ -110,29 +134,46 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "dvb_dmxdev_init failed, ERROR=%d", result);
 			goto err1;
 		}
+
 		saa716x_adap->fe_hw.source = DMX_FRONTEND_0;
+
 		if ((result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx,
 								   &saa716x_adap->fe_hw)) < 0) {
 
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err2;
 		}
+
 		saa716x_adap->fe_mem.source = DMX_MEMORY_FE;
+
 		if ((result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx,
 								   &saa716x_adap->fe_mem)) < 0) {
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err3;
 		}
+
 		if ((result = saa716x_adap->demux.dmx.connect_frontend(&saa716x_adap->demux.dmx,
 								       &saa716x_adap->fe_hw)) < 0) {
 
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err4;
 		}
+
 		dvb_net_init(&saa716x_adap->dvb_adapter, &saa716x_adap->dvb_net, &saa716x_adap->demux.dmx);
 //		tasklet_init(&saa716x_adap->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
 		dprintk(SAA716x_DEBUG, 1, "Frontend Init");
 		saa716x_adap->saa716x = saa716x;
+
+		if ((result = saa716x_frontend_power(saa716x, i, 1)) < 0) {
+			dprintk(SAA716x_ERROR, 1, "SAA716x frontend powerup failed");
+			goto err5;
+		}
+
+		if ((result = saa716x_frontend_reset(saa716x, i)) < 0) {
+			dprintk(SAA716x_ERROR, 1, "SAA716x frontend reset failed");
+			goto err5;
+		}
+
 		if (config->frontend_attach)
 			config->frontend_attach(saa716x_adap, i);
 		else
@@ -144,6 +185,8 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 	return 0;
 
 	/* Error conditions */
+err5:
+	saa716x_frontend_power(saa716x, i, 0);
 err4:
 	saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 err3:
@@ -185,43 +228,3 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 	return;
 }
 EXPORT_SYMBOL(saa716x_dvb_exit);
-
-int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 control)
-{
-	struct saa716x_adapter *adapter = saa716x->saa716x_adap;
-	struct saa716x_config  *config	= saa716x->config;
-
-	int i;
-
-	for (i = 0; i < config->adapters; i++); {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", i);
-
-		saa716x_gpio_ctl(saa716x, adapter->power_ctl);
-		saa716x_gpio_bits(saa716x, adapter->power_ctl);
-
-		adapter++;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL(saa716x_frontend_power);
-
-int saa716x_frontend_reset(struct saa716x_dev *saa716x)
-{
-	struct saa716x_adapter *adapter = saa716x->saa716x_adap;
-	struct saa716x_config  *config	= saa716x->config;
-
-	int i;
-
-	for (i = 0; i < config->adapters; i++) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", i);
-
-		saa716x_gpio_ctl(saa716x, adapter->reset_ctl);
-		saa716x_gpio_bits(saa716x, adapter->reset_ctl);
-
-		adapter++;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL(saa716x_frontend_reset);
diff --git a/drivers/media/pci/saa716x/saa716x_adap.h b/drivers/media/pci/saa716x/saa716x_adap.h
index b30430502cd19..e6c2b4bbfc021 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.h
+++ b/drivers/media/pci/saa716x/saa716x_adap.h
@@ -3,7 +3,5 @@
 
 extern int saa716x_dvb_init(struct saa716x_dev *saa716x);
 extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
-extern int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 control);
-extern int saa716x_frontend_reset(struct saa716x_dev *saa716x);
 
 #endif /* __SAA716x_ADAP_H */

From 66a2e30fb178d035d47ba22e1561abe7e094a86e Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:30:55 +0400
Subject: [PATCH 068/364] saa716x: Use a configuration per adapter

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 18 ++++++++++--------
 drivers/media/pci/saa716x/saa716x_budget.c | 12 ++++++++++++
 drivers/media/pci/saa716x/saa716x_priv.h   | 10 +++++++---
 3 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 40bad8ac42f8f..90426741e07e5 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -67,24 +67,26 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 
 static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 control)
 {
-//	struct saa716x_config  *config	= saa716x->config;
-	struct saa716x_adapter *adapter = &saa716x->saa716x_adap[DEV];
+	struct saa716x_adapter *adapter		= &saa716x->saa716x_adap[DEV];
+	struct saa716x_config *config		= saa716x->config;
+	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
-	saa716x_gpio_ctl(saa716x, adapter->power_ctl);
-	saa716x_gpio_bits(saa716x, adapter->power_ctl);
+	saa716x_gpio_ctl(saa716x, adap_cfg->power_ctl);
+	saa716x_gpio_bits(saa716x, adap_cfg->power_ctl);
 
 	return 0;
 }
 
 static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
 {
-//	struct saa716x_config  *config	= saa716x->config;
-	struct saa716x_adapter *adapter = &saa716x->saa716x_adap[DEV];
+	struct saa716x_adapter *adapter		= &saa716x->saa716x_adap[DEV];
+	struct saa716x_config *config		= saa716x->config;
+	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
-	saa716x_gpio_ctl(saa716x, adapter->reset_ctl);
-	saa716x_gpio_bits(saa716x, adapter->reset_ctl);
+	saa716x_gpio_ctl(saa716x, adap_cfg->reset_ctl);
+	saa716x_gpio_bits(saa716x, adap_cfg->reset_ctl);
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9b4a623529ab9..e871bc7ad46e9 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -240,6 +240,18 @@ static struct saa716x_config saa716x_vp3071_config = {
 	.adapters		= 2,
 	.frontend_attach	= saa716x_vp3071_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
+
+	.adap_config		= {
+		{
+			/* Adapter 0 */
+			.power_ctl	= GPIO_08 | GPIO_17,
+			.reset_ctl	= GPIO_14,
+		},{
+			/* Adapter 1 */
+			.power_ctl	= GPIO_09 | GPIO_17,
+			.reset_ctl	= GPIO_15,
+		}
+	}
 };
 
 static int load_config_vp1028(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 90e2691eaf2d2..49ba2be9a4463 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -73,6 +73,11 @@ struct saa716x_adapter;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 
+struct saa716x_adap_config {
+	u32				power_ctl;
+	u32				reset_ctl;
+};
+
 struct saa716x_config {
 	char				*model_name;
 	char				*dev_type;
@@ -89,6 +94,8 @@ struct saa716x_config {
 
 	int (*frontend_attach)(struct saa716x_adapter *adapter, int count);
 	irqreturn_t (*irq_handler)(int irq, void *dev_id);
+
+	struct saa716x_adap_config	adap_config[2];
 };
 
 struct saa716x_adapter {
@@ -103,9 +110,6 @@ struct saa716x_adapter {
 	struct saa716x_dev		*saa716x;
 
 	u8				feeds;
-
-	u32				power_ctl;
-	u32				reset_ctl;
 };
 
 struct saa716x_dev {

From e54b82aa0f7458be2c3b34dda016e399e9291053 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:31:41 +0400
Subject: [PATCH 069/364] saa716x: VP-1028: add power, reset configuration

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index e871bc7ad46e9..0077d711e9c4d 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -282,6 +282,13 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp1028_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
+
+	.adap_config		= {
+		{ /* Adapter 0 */
+			.power_ctl	= GPIO_10,
+			.reset_ctl	= GPIO_12,
+		}
+	}
 };
 
 static int load_config_vp6002(struct saa716x_dev *saa716x)

From 9df09835c4d75ad823a3e6a551f4f8049032d2f5 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:32:24 +0400
Subject: [PATCH 070/364] saa716x: H788: Add power, reset configuration

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 65f8b7b23bda5..48f24e36be3c6 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -367,6 +367,14 @@ static struct saa716x_config saa716x_averh788_config = {
 	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averh88_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+
+	.adap_config		= {
+		{ /* Adapter 0 */
+			.power_ctl	= GPIO_14,
+			.reset_ctl	= GPIO_15,
+		}
+	}
+
 };
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {

From a282771446c7d5fc9bf52e05f557244708e9b6e2 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:33:16 +0400
Subject: [PATCH 071/364] saa716x: HC82: Add power, reset configuration

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 48f24e36be3c6..9d7bd7391998b 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -335,6 +335,13 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averhc82_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+
+	.adap_config		= {
+		{ /* Adapter 0 */
+			.power_ctl	= GPIO_06 | GPIO_15,
+			.reset_ctl	= GPIO_05,
+		}
+	}
 };
 
 #define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"

From b0febf3ee1fe724b1544b5106975292e25d3e570 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:37:10 +0400
Subject: [PATCH 072/364] saa716x: Display Bus status

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 077790714fe2c..487cdddae00e8 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -13,6 +13,24 @@
 #define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
 				 I2C_RECEIVE_CLEAR)
 
+static char* state[] = {
+	"Idle",
+	"DoneStop",
+	"Busy",
+	"TOscl",
+	"TOarb",
+	"DoneWrite",
+	"DoneRead",
+	"DoneWriteTO",
+	"DoneReadTO",
+	"NoDevice",
+	"NoACK",
+	"BUSErr",
+	"ArbLost",
+	"SEQErr",
+	"STErr"
+};
+
 static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
@@ -46,7 +64,9 @@ static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	stat = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	while (! (stat & I2C_TRANSMIT_CLEAR)) {
-		dprintk(SAA716x_ERROR, 1, "Waiting for TX FIFO to be empty");
+		dprintk(SAA716x_ERROR, 1, "Bus (%d) Waiting for TX FIFO to be empty (status=%02x <%s>)",
+			I2C_DEV, stat, state[stat]);
+
 		msleep(5);
 		timeout++;
 		if (timeout > 500) {

From 4bd5a6b62acd81a38207401999c41925473bbb45 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:38:09 +0400
Subject: [PATCH 073/364] saa716x: Bug: Address needs to be shifted one bit

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c |  5 ++---
 drivers/media/pci/saa716x/saa716x_i2c.c    | 12 ++++++------
 2 files changed, 8 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 0077d711e9c4d..9e482d840dd40 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -35,7 +35,7 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 static int read_eeprom_byte(struct saa716x_dev *saa716x, u8 *data, u8 len)
 {
 	struct saa716x_i2c *i2c = saa716x->i2c;
-	struct i2c_adapter *adapter = &i2c[0].i2c_adapter;
+	struct i2c_adapter *adapter = &i2c[1].i2c_adapter;
 
 	int err;
 
@@ -131,10 +131,9 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		goto fail4;
 	}
 
-#if 0
 	/* Experiments */
 	read_eeprom(saa716x);
-#endif
+
 	return 0;
 
 fail4:
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 487cdddae00e8..1b497363c1c4f 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -64,12 +64,12 @@ static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	stat = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	while (! (stat & I2C_TRANSMIT_CLEAR)) {
-		dprintk(SAA716x_ERROR, 1, "Bus (%d) Waiting for TX FIFO to be empty (status=%02x <%s>)",
+		dprintk(SAA716x_ERROR, 0, "\n        Bus (%d) Waiting for TX FIFO to be empty (status=%02x <%s>)",
 			I2C_DEV, stat, state[stat]);
 
 		msleep(5);
 		timeout++;
-		if (timeout > 500) {
+		if (timeout > 200) {
 			dprintk(SAA716x_ERROR, 1, "TX FIFO empty timeout");
 			saa716x_term_xfer(i2c, I2C_DEV);
 			err = -EIO;
@@ -232,10 +232,10 @@ static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg,
 	u8 rxd;
 	int i, err = 0;
 
-	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <R>[ ", __func__, msg->addr);
+	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <R>[ ", __func__, msg->addr << 1);
 
 	/* Write */
-	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr | 0x01);
+	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr << 1 | 0x01);
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "Transfer failed");
 		err = -EIO;
@@ -292,8 +292,8 @@ static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg,
 	/* Clear INT status before first byte */
 	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
-	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <W>[ ", __func__, msg->addr);
-	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr);
+	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <W>[ ", __func__, msg->addr << 1);
+	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr << 1);
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "Transfer failed");
 		err = -EIO;

From dec7ad954d31fdf24a8ddb63fd174710ac529865 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:38:50 +0400
Subject: [PATCH 074/364] saa716x: Initial go at DMA routines

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile      |   1 +
 drivers/media/pci/saa716x/saa716x_dma.c | 293 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_dma.h |  36 +++
 3 files changed, 330 insertions(+)
 create mode 100644 drivers/media/pci/saa716x/saa716x_dma.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_dma.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 7bd275c52184c..760e2c0e66ee4 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -2,6 +2,7 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_i2c.o	\
 				    saa716x_cgu.o	\
 				    saa716x_msi.o	\
+				    saa716x_dma.o	\
 				    saa716x_vip.o	\
 				    saa716x_aip.o	\
 				    saa716x_boot.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
new file mode 100644
index 0000000000000..a867449292fa0
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -0,0 +1,293 @@
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/scatterlist.h>
+#include <asm/page.h>
+#include <asm/pgtable.h>
+
+#include "saa716x_priv.h"
+#include "saa716x_dma.h"
+
+/*  Allocates one page of memory, which is stores the data of one
+ *  716x page table. The result gets stored in the passed DMA buffer
+ *  structure.
+ */
+static int saa716x_allocate_ptable(struct saa716x_dmabuf *dmabuf)
+{
+	struct saa716x_dev *saa716x	= dmabuf->saa716x;
+	struct pci_dev *pdev		= saa716x->pdev;
+
+	dprintk(SAA716x_DEBUG, 1, "SG Page table allocate");
+	dmabuf->mem_ptab_virt = (void *) __get_free_page(GFP_KERNEL);
+
+	if (dmabuf->mem_ptab_virt == NULL) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Out of pages !");
+		return -ENOMEM;
+	}
+
+	*dmabuf->mem_ptab_phys = dma_map_single(&pdev->dev,
+						dmabuf->mem_ptab_virt,
+						SAA716x_PAGE_SIZE,
+						DMA_TO_DEVICE);
+
+	if (dmabuf->mem_ptab_phys == NULL) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: map memory failed !");
+		return -ENOMEM;
+	}
+
+	BUG_ON(!(((u32) dmabuf->mem_ptab_phys % SAA716x_PAGE_SIZE) == 0));
+
+	return 0;
+}
+
+static void saa716x_free_ptable(struct saa716x_dmabuf *dmabuf)
+{
+	struct saa716x_dev *saa716x	= dmabuf->saa716x;
+	struct pci_dev *pdev		= saa716x->pdev;
+
+	BUG_ON(dmabuf == NULL);
+	dprintk(SAA716x_DEBUG, 1, "SG Page table free");
+
+	/* free physical PCI memory */
+	if (dmabuf->mem_ptab_phys != NULL) {
+		dma_unmap_single(&pdev->dev,
+				 *dmabuf->mem_ptab_phys,
+				 SAA716x_PAGE_SIZE,
+				 DMA_TO_DEVICE);
+
+		dmabuf->mem_ptab_phys = NULL;
+	}
+
+	/* free kernel memory */
+	if (dmabuf->mem_ptab_virt != NULL) {
+		free_page((unsigned long) dmabuf->mem_ptab_virt);
+		dmabuf->mem_ptab_virt = NULL;
+	}
+}
+
+static void saa716x_dmabuf_sgfree(struct saa716x_dmabuf *dmabuf)
+{
+	struct saa716x_dev *saa716x = dmabuf->saa716x;
+
+	BUG_ON(dmabuf == NULL);
+	dprintk(SAA716x_DEBUG, 1, "SG free");
+
+	dmabuf->mem_virt = NULL;
+	if (dmabuf->mem_virt_noalign != NULL) {
+		if (dmabuf->dma_type == SAA716x_DMABUF_INT)
+			vfree(dmabuf->mem_virt_noalign);
+
+		dmabuf->mem_virt_noalign = NULL;
+	}
+
+	if (dmabuf->sg_list != NULL) {
+		kfree(dmabuf->sg_list);
+		dmabuf->sg_list = NULL;
+	}
+}
+
+/*
+ * Create a SG, when an allocated buffer is passed to it,
+ * otherwise the needed memory gets allocated by itself
+ */
+static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int size)
+{
+	struct saa716x_dev *saa716x	= dmabuf->saa716x;
+	struct scatterlist *list;
+	struct page *pg;
+
+	int i, pages;
+
+	BUG_ON(!(size > 0));
+	BUG_ON(dmabuf == NULL);
+	dprintk(SAA716x_DEBUG, 1, "SG allocate");
+
+	if ((size % SAA716x_PAGE_SIZE) != 0) /* calculate required pages */
+		pages = size / SAA716x_PAGE_SIZE + 1;
+	else
+		pages = size / SAA716x_PAGE_SIZE;
+
+	/* Allocate memory for SG list */
+	dmabuf->sg_list = kzalloc(sizeof (struct scatterlist) * pages, GFP_KERNEL);
+	if (dmabuf->sg_list == NULL) {
+		dprintk(SAA716x_ERROR, 1, "Failed to allocate memory for scatterlist.");
+		return -ENOMEM;
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "Initializing SG table");
+	sg_init_table(dmabuf->sg_list, pages);
+
+	if (buf == NULL) {
+
+		/* allocate memory, unaligned */
+		dmabuf->mem_virt_noalign = vmalloc((pages + 1) * SAA716x_PAGE_SIZE);
+		if (dmabuf->mem_virt_noalign == NULL) {
+			dprintk(SAA716x_ERROR, 1, "Failed to allocate memory for buffer");
+			return -ENOMEM;
+		}
+
+		/* align memory to page */
+		dmabuf->mem_virt = (void *) PAGE_ALIGN (((u32) dmabuf->mem_virt_noalign));
+
+		BUG_ON(!((((u32) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
+	} else {
+		dmabuf->mem_virt = buf;
+	}
+
+	dmabuf->list_len = pages; /* scatterlist length */
+	list = dmabuf->sg_list;
+
+	dprintk(SAA716x_DEBUG, 1, "Allocating SG pages");
+	for (i = 0; i < pages; i++) {
+		if (buf == NULL)
+			pg = vmalloc_to_page(dmabuf->mem_virt + i * SAA716x_PAGE_SIZE);
+		else
+			pg = virt_to_page(dmabuf->mem_virt + i * SAA716x_PAGE_SIZE);
+
+		BUG_ON(pg == NULL);
+		sg_set_page(&list[i], pg, SAA716x_PAGE_SIZE, 0);
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "Done!");
+	return 0;
+}
+
+/*  Fill the "page table" page with the pointers to the specified SG buffer */
+static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scatterlist *sg_list, int pages, int offset)
+{
+	struct saa716x_dev *saa716x	= dmabuf->saa716x;
+	struct pci_dev *pdev		= saa716x->pdev;
+	struct scatterlist *sg_cur;
+
+	u32 *page;
+	int i, j, k;
+	dma_addr_t addr = 0;
+
+	BUG_ON(dmabuf == NULL);
+	BUG_ON(sg_list == NULL);
+	BUG_ON(pages == 0);
+	dprintk(SAA716x_DEBUG, 1, "SG page fill");
+
+	/* make page writable for the PC */
+	dma_sync_single_for_cpu(&pdev->dev, *dmabuf->mem_ptab_phys, SAA716x_PAGE_SIZE, DMA_TO_DEVICE);
+	page = dmabuf->mem_ptab_virt;
+
+	/* create page table */
+	for (i = 0; i < pages; i++) {
+		sg_cur = &sg_list[i];
+		BUG_ON(!((sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE));
+
+		if (i == 0)
+			dmabuf->offset = (sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE;
+		else
+			BUG_ON(sg_cur->offset != 0);
+
+		for (j = 0; (j * SAA716x_PAGE_SIZE) < sg_dma_len(sg_cur); j++) {
+
+			if ((offset + sg_cur->offset) >= SAA716x_PAGE_SIZE) {
+				offset -= SAA716x_PAGE_SIZE;
+				continue;
+			}
+
+			addr = ((u8 )sg_dma_address(sg_cur)) + (j * SAA716x_PAGE_SIZE) - sg_cur->offset;
+
+			BUG_ON(addr == 0);
+			page[k * 2] = (u32 )addr; /* Low */
+			page[k * 2 + 1] = (u32 )(((u64) addr) >> 32); /* High */
+			BUG_ON(page[k * 2] % SAA716x_PAGE_SIZE);
+			k++;
+		}
+	}
+
+	for (; k < (SAA716x_PAGE_SIZE / 8); k++) {
+		page[k * 2] = (u32 ) addr;
+		page[k * 2 + 1] = (u32 ) (((u64 ) addr) >> 32);
+	}
+
+	/* make "page table" page writable for the PC */
+	dma_sync_single_for_device(&pdev->dev,
+				   *dmabuf->mem_ptab_phys,
+				   SAA716x_PAGE_SIZE,
+				   DMA_TO_DEVICE);
+
+}
+
+void saa716x_dmabufsync_dev(struct saa716x_dmabuf *dmabuf)
+{
+	struct saa716x_dev *saa716x	= dmabuf->saa716x;
+	struct pci_dev *pdev		= saa716x->pdev;
+
+	dprintk(SAA716x_DEBUG, 1, "DMABUF sync DEVICE");
+	BUG_ON(dmabuf->sg_list == NULL);
+
+	dma_sync_sg_for_device(&pdev->dev,
+			       dmabuf->sg_list,
+			       dmabuf->list_len,
+			       DMA_FROM_DEVICE);
+
+}
+
+void saa716x_dmabufsync_cpu(struct saa716x_dmabuf *dmabuf)
+{
+	struct saa716x_dev *saa716x	= dmabuf->saa716x;
+	struct pci_dev *pdev		= saa716x->pdev;
+
+	dprintk(SAA716x_DEBUG, 1, "DMABUF sync CPU");
+	BUG_ON(dmabuf->sg_list == NULL);
+
+	dma_sync_sg_for_cpu(&pdev->dev,
+			    dmabuf->sg_list,
+			    dmabuf->list_len,
+			    DMA_FROM_DEVICE);
+}
+
+/* Allocates a DMA buffer for the specified external linear buffer. */
+int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dmabuf, int size)
+{
+	struct pci_dev *pdev		= saa716x->pdev;
+
+	int ret;
+
+	BUG_ON(saa716x == NULL);
+	BUG_ON(dmabuf == NULL);
+	BUG_ON(! (size > 0));
+
+	dmabuf->dma_type		= SAA716x_DMABUF_INT;
+
+	dmabuf->mem_virt_noalign	= NULL;
+	dmabuf->mem_virt		= NULL;
+	dmabuf->mem_ptab_phys		= NULL;
+	dmabuf->mem_ptab_virt		= NULL;
+
+	dmabuf->list_len		= 0;
+	dmabuf->saa716x			= saa716x;
+
+	/* Allocate page table */
+	ret = saa716x_allocate_ptable(dmabuf);
+	if (ret < 0) {
+		dprintk(SAA716x_ERROR, 1, "PT alloc failed, Out of memory");
+		goto err1;
+	}
+
+	/* Allocate buffer as SG */
+	ret = saa716x_dmabuf_sgalloc(dmabuf, NULL, size);
+	if (ret < 0) {
+		dprintk(SAA716x_ERROR, 1, "SG alloc failed");
+		goto err2;
+	}
+
+	ret = dma_map_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len, DMA_FROM_DEVICE);
+	if (ret < 0) {
+		dprintk(SAA716x_ERROR, 1, "SG map failed");
+		goto err3;
+	}
+
+	saa716x_dmabuf_sgpagefill(dmabuf, dmabuf->sg_list, ret, 0);
+
+	return 0;
+err3:
+	saa716x_dmabuf_sgfree(dmabuf);
+err2:
+	saa716x_free_ptable(dmabuf);
+err1:
+	return ret;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_dma.h b/drivers/media/pci/saa716x/saa716x_dma.h
new file mode 100644
index 0000000000000..d80e5fe9d8f74
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_dma.h
@@ -0,0 +1,36 @@
+#ifndef __SAA716x_DMA_H
+#define __SAA716x_DMA_H
+
+#define SAA716x_PAGE_SIZE	4096
+
+enum saa716x_dma_type {
+	SAA716x_DMABUF_EXT_LIN, /* Linear external */
+	SAA716x_DMABUF_EXT_SG, /* SG external */
+	SAA716x_DMABUF_INT /* Linear internal */
+};
+
+struct saa716x_dev;
+
+struct saa716x_dmabuf {
+	enum saa716x_dma_type	dma_type;
+
+	void			*mem_virt_noalign;
+	void			*mem_virt; /* page aligned */
+	dma_addr_t		*mem_ptab_phys;
+	void			*mem_ptab_virt;
+	void			*sg_list; /* SG list */
+
+	struct saa716x_dev	*saa716x;
+
+	int			list_len; /* buffer len */
+	int			offset; /* page offset */
+};
+
+extern int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x,
+				struct saa716x_dmabuf *dmabuf,
+				int size);
+
+extern void saa716x_dmabufsync_dev(struct saa716x_dmabuf *dmabuf);
+extern void saa716x_dmabufsync_cpu(struct saa716x_dmabuf *dmabuf);
+
+#endif /* __SAA716x_DMA_H */

From 5ba77f945e41ac1b57ce4f1829b8cdb61c001381 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:39:34 +0400
Subject: [PATCH 075/364] saa716x: Print warning, if MSI module is not
 supported

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c | 9 ++++++++-
 drivers/media/pci/saa716x/saa716x_reg.h | 2 +-
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 9fb9c0a085a5d..9b47ddfc836cd 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -6,7 +6,7 @@
 
 int saa716x_msi_init(struct saa716x_dev *saa716x)
 {
-	u32 ena_l, ena_h, sta_l, sta_h;
+	u32 ena_l, ena_h, sta_l, sta_h, mid;
 	int i;
 	u32 MSI_CONFIG_REG[49] = {
 		MSI_CONFIG0,
@@ -60,6 +60,13 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 		MSI_CONFIG48
 	};
 
+	dprintk(SAA716x_DEBUG, 1, "Initializing MSI ..");
+
+	/* get module id & version */
+	mid = SAA716x_EPRD(MSI, MSI_MODULE_ID);
+	if (mid != 0x30100)
+		dprintk(SAA716x_ERROR, 1, "MSI Id<%04x> is not supported", mid);
+
 	/* let HW take care of MSI race */
 	SAA716x_EPWR(MSI, MSI_DELAY_TIMER, 0x0);
 
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 97a79a21c9c0d..99e0945af4062 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -621,7 +621,7 @@
 #define MSI_SW_RST			0xff0
 #define MSI_SW_RESET			(0x0001 <<  0)
 
-
+#define MSI_MODULE_ID			0xffc
 
 
 /* -------------- I2C Registers -------------- */

From 987dec666865471d614b06411550e4d741c0a569 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:40:43 +0400
Subject: [PATCH 076/364] saa716x: Handle MSI in a generic manner

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c  | 270 ++++++++++++++++++-----
 drivers/media/pci/saa716x/saa716x_msi.h  |  76 +++++++
 drivers/media/pci/saa716x/saa716x_pci.c  |  69 +-----
 drivers/media/pci/saa716x/saa716x_priv.h |   8 +
 drivers/media/pci/saa716x/saa716x_reg.h  |   3 +
 5 files changed, 310 insertions(+), 116 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 9b47ddfc836cd..bf2637b00287e 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -1,64 +1,122 @@
 #include <linux/delay.h>
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
+#include "saa716x_msi.h"
 
-#define MSI_CONFIG_REGS		49
+#define SAA716x_MSI_VECTORS		50
+
+static const char *vector_name[] = {
+	"TAGACK_VI0_0",
+	"TAGACK_VI0_1",
+	"TAGACK_VI0_2",
+	"TAGACK_VI1_0",
+	"TAGACK_VI1_1",
+	"TAGACK_VI1_2",
+	"TAGACK_FGPI_0",
+	"TAGACK_FGPI_1",
+	"TAGACK_FGPI_2",
+	"TAGACK_FGPI_3",
+	"TAGACK_AI_0",
+	"TAGACK_AI_1",
+	"OVRFLW_VI0_0",
+	"OVRFLW_VI0_1",
+	"OVRFLW_VI0_2",
+	"OVRFLW_VI1_0",
+	"OVRFLW_VI1_1",
+	"OVRFLW_VI1_2",
+	"OVRFLW_FGPI_O",
+	"OVRFLW_FGPI_1",
+	"OVRFLW_FGPI_2",
+	"OVRFLW_FGPI_3",
+	"OVRFLW_AI_0",
+	"OVRFLW_AI_1",
+	"AVINT_VI0",
+	"AVINT_VI1",
+	"AVINT_FGPI_0",
+	"AVINT_FGPI_1",
+	"AVINT_FGPI_2",
+	"AVINT_FGPI_3",
+	"AVINT_AI_0",
+	"AVINT_AI_1",
+	"UNMAPD_TC_INT",
+	"EXTINT_0",
+	"EXTINT_1",
+	"EXTINT_2",
+	"EXTINT_3",
+	"EXTINT_4",
+	"EXTINT_5",
+	"EXTINT_6",
+	"EXTINT_7",
+	"EXTINT_8",
+	"EXTINT_9",
+	"EXTINT_10",
+	"EXTINT_11",
+	"EXTINT_12",
+	"EXTINT_13",
+	"EXTINT_14",
+	"EXTINT_15",
+	"I2CINT_0",
+	"I2CINT_1"
+};
+
+static u32 MSI_CONFIG_REG[51] = {
+	MSI_CONFIG0,
+	MSI_CONFIG1,
+	MSI_CONFIG2,
+	MSI_CONFIG3,
+	MSI_CONFIG4,
+	MSI_CONFIG5,
+	MSI_CONFIG6,
+	MSI_CONFIG7,
+	MSI_CONFIG8,
+	MSI_CONFIG9,
+	MSI_CONFIG10,
+	MSI_CONFIG11,
+	MSI_CONFIG12,
+	MSI_CONFIG13,
+	MSI_CONFIG14,
+	MSI_CONFIG15,
+	MSI_CONFIG16,
+	MSI_CONFIG17,
+	MSI_CONFIG18,
+	MSI_CONFIG19,
+	MSI_CONFIG20,
+	MSI_CONFIG21,
+	MSI_CONFIG22,
+	MSI_CONFIG23,
+	MSI_CONFIG24,
+	MSI_CONFIG25,
+	MSI_CONFIG26,
+	MSI_CONFIG27,
+	MSI_CONFIG28,
+	MSI_CONFIG29,
+	MSI_CONFIG30,
+	MSI_CONFIG31,
+	MSI_CONFIG32,
+	MSI_CONFIG33,
+	MSI_CONFIG34,
+	MSI_CONFIG35,
+	MSI_CONFIG36,
+	MSI_CONFIG37,
+	MSI_CONFIG38,
+	MSI_CONFIG39,
+	MSI_CONFIG40,
+	MSI_CONFIG41,
+	MSI_CONFIG42,
+	MSI_CONFIG43,
+	MSI_CONFIG44,
+	MSI_CONFIG45,
+	MSI_CONFIG46,
+	MSI_CONFIG47,
+	MSI_CONFIG48,
+	MSI_CONFIG49,
+	MSI_CONFIG50
+};
 
 int saa716x_msi_init(struct saa716x_dev *saa716x)
 {
 	u32 ena_l, ena_h, sta_l, sta_h, mid;
 	int i;
-	u32 MSI_CONFIG_REG[49] = {
-		MSI_CONFIG0,
-		MSI_CONFIG1,
-		MSI_CONFIG2,
-		MSI_CONFIG3,
-		MSI_CONFIG4,
-		MSI_CONFIG5,
-		MSI_CONFIG6,
-		MSI_CONFIG7,
-		MSI_CONFIG8,
-		MSI_CONFIG9,
-		MSI_CONFIG10,
-		MSI_CONFIG11,
-		MSI_CONFIG12,
-		MSI_CONFIG13,
-		MSI_CONFIG14,
-		MSI_CONFIG15,
-		MSI_CONFIG16,
-		MSI_CONFIG17,
-		MSI_CONFIG18,
-		MSI_CONFIG19,
-		MSI_CONFIG20,
-		MSI_CONFIG21,
-		MSI_CONFIG22,
-		MSI_CONFIG23,
-		MSI_CONFIG24,
-		MSI_CONFIG25,
-		MSI_CONFIG26,
-		MSI_CONFIG27,
-		MSI_CONFIG28,
-		MSI_CONFIG29,
-		MSI_CONFIG30,
-		MSI_CONFIG31,
-		MSI_CONFIG32,
-		MSI_CONFIG33,
-		MSI_CONFIG34,
-		MSI_CONFIG35,
-		MSI_CONFIG36,
-		MSI_CONFIG37,
-		MSI_CONFIG38,
-		MSI_CONFIG39,
-		MSI_CONFIG40,
-		MSI_CONFIG41,
-		MSI_CONFIG42,
-		MSI_CONFIG43,
-		MSI_CONFIG44,
-		MSI_CONFIG45,
-		MSI_CONFIG46,
-		MSI_CONFIG47,
-		MSI_CONFIG48
-	};
 
 	dprintk(SAA716x_DEBUG, 1, "Initializing MSI ..");
 
@@ -78,7 +136,7 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	 * Traffic Class: 18:16 = 0x00
 	 * MSI ID: 4:0 = 0x00
 	 */
-	for (i = 0; i < MSI_CONFIG_REGS; i++)
+	for (i = 0; i < SAA716x_MSI_VECTORS; i++)
 		SAA716x_EPWR(MSI, MSI_CONFIG_REG[i], MSI_INT_POL_EDGE_RISE);
 
 	/* get Status */
@@ -125,3 +183,109 @@ void saa716x_msiint_disable(struct saa716x_dev *saa716x)
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, 0x0000ffff);
 }
 EXPORT_SYMBOL_GPL(saa716x_msiint_disable);
+
+
+/* Map the given vector Id to the hardware bitmask. */
+static void saa716x_map_vector(struct saa716x_dev *saa716x, int vector, u32 *mask_l, u32 *mask_h)
+{
+	u32 tmp = 1;
+
+	if (vector < 32) {
+		/* Bits 0 - 31 */
+		tmp   <<= vector;
+		*mask_l = tmp;
+		*mask_h	= 0;
+	} else {
+		/* Bits 32 - 48 */
+		tmp <<= vector - 32;
+		*mask_l = 0;
+		*mask_h = tmp;
+	}
+}
+
+int saa716x_add_irqvector(struct saa716x_dev *saa716x,
+			  int vector,
+			  enum saa716x_edge edge,
+			  irqreturn_t (*handler)(int irq, void *dev_id),
+			  char *desc)
+{
+	struct saa716x_msix_entry *msix_handler = NULL;
+
+	u32 config, mask_l, mask_h;
+
+	BUG_ON(saa716x == NULL);
+	BUG_ON(vector > SAA716x_MSI_VECTORS);
+	dprintk(SAA716x_DEBUG, 1, "Adding Vector %d <%s>", vector, vector_name[vector]);
+
+	if ((vector > 32) && (vector < 49)) {
+		config = SAA716x_EPRD(MSI, MSI_CONFIG_REG[vector]);
+		config &= 0xfcffffff; /* clear polarity */
+
+		switch (edge) {
+		default:
+		case SAA716x_EDGE_RISING:
+			SAA716x_EPWR(MSI, MSI_CONFIG_REG[vector], config | 0x01000000);
+			break;
+
+		case SAA716x_EDGE_FALLING:
+			SAA716x_EPWR(MSI, MSI_CONFIG_REG[vector], config | 0x02000000);
+			break;
+
+		case SAA716x_EDGE_ANY:
+			SAA716x_EPWR(MSI, MSI_CONFIG_REG[vector], config | 0x03000000);
+			break;
+		}
+	}
+
+	saa716x_map_vector(saa716x, vector, &mask_l, &mask_h);
+
+	/* add callback */
+	msix_handler = &saa716x->saa716x_msix_handler[saa716x->handlers];
+	strcpy(msix_handler->desc, desc);
+	msix_handler->vector = vector;
+	msix_handler->handler = handler;
+	saa716x->handlers++;
+
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, mask_l);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, mask_h);
+
+	return 0;
+}
+
+int saa716x_remove_irqvector(struct saa716x_dev *saa716x, int vector)
+{
+	struct saa716x_msix_entry *msix_handler;
+	int i;
+	u32 mask_l, mask_h;
+
+	msix_handler = &saa716x->saa716x_msix_handler[saa716x->handlers];
+	BUG_ON(msix_handler == NULL);
+	dprintk(SAA716x_DEBUG, 1, "Removing Vector %d <%s>", vector, vector_name[vector]);
+
+	/* loop through the registered handlers */
+	for (i = 0; i < saa716x->handlers; i++) {
+
+		/* we found our vector */
+		if (msix_handler->vector == vector) {
+			BUG_ON(msix_handler->handler == NULL); /* no handler yet */
+			dprintk(SAA716x_DEBUG, 1, "Vector %d <%s> removed",
+				msix_handler->vector,
+				msix_handler->desc);
+
+			/* check whether it is already released */
+			if (msix_handler->handler) {
+				msix_handler->vector = 0;
+				msix_handler->handler = NULL;
+				saa716x->handlers--;
+			}
+		}
+	}
+
+	saa716x_map_vector(saa716x, vector, &mask_l, &mask_h);
+
+	/* disable vector */
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, mask_l);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, mask_h);
+
+	return 0;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
index 2320e575f3236..c459f2ae080b8 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.h
+++ b/drivers/media/pci/saa716x/saa716x_msi.h
@@ -1,7 +1,83 @@
 #ifndef __SAA716x_MSI_H
 #define __SAA716x_MSI_H
 
+#define	TAGACK_VI0_0		0x000
+#define	TAGACK_VI0_1		0x001
+#define	TAGACK_VI0_2		0x002
+#define	TAGACK_VI1_0		0x003
+#define	TAGACK_VI1_1		0x004
+#define	TAGACK_VI1_2		0x005
+#define	TAGACK_FGPI_0		0x006
+#define	TAGACK_FGPI_1		0x007
+#define	TAGACK_FGPI_2		0x008
+#define	TAGACK_FGPI_3		0x009
+#define	TAGACK_AI_0		0x00a
+#define	TAGACK_AI_1		0x00b
+#define	OVRFLW_VI0_0		0x00c
+#define	OVRFLW_VI0_1		0x00d
+#define	OVRFLW_VI0_2		0x00e
+#define	OVRFLW_VI1_0		0x00f
+#define	OVRFLW_VI1_1		0x010
+#define	OVRFLW_VI1_2		0x011
+#define	OVRFLW_FGPI_O		0x012
+#define	OVRFLW_FGPI_1		0x013
+#define	OVRFLW_FGPI_2		0x014
+#define	OVRFLW_FGPI_3		0x015
+#define	OVRFLW_AI_0		0x016
+#define	OVRFLW_AI_1		0x017
+#define	AVINT_VI0		0x018
+#define	AVINT_VI1		0x019
+#define	AVINT_FGPI_0		0x01a
+#define	AVINT_FGPI_1		0x01b
+#define	AVINT_FGPI_2		0x01c
+#define	AVINT_FGPI_3		0x01d
+#define	AVINT_AI_0		0x01e
+#define	AVINT_AI_1		0x01f
+#define	UNMAPD_TC_INT		0x020
+#define	EXTINT_0		0x021
+#define	EXTINT_1		0x022
+#define	EXTINT_2		0x023
+#define	EXTINT_3		0x024
+#define	EXTINT_4		0x025
+#define	EXTINT_5		0x026
+#define EXTINT_6		0x027
+#define	EXTINT_7		0x028
+#define	EXTINT_8		0x029
+#define	EXTINT_9		0x02a
+#define	EXTINT_10		0x02b
+#define	EXTINT_11		0x02c
+#define	EXTINT_12		0x02d
+#define	EXTINT_13		0x02e
+#define	EXTINT_14		0x02f
+#define	EXTINT_15		0x030
+#define	I2CINT_0		0x031
+#define	I2CINT_1		0x032
+
+#define SAA716x_TC0		0x000
+#define SAA716x_TC1		0x001
+#define SAA716x_TC2		0x002
+#define SAA716x_TC3		0x003
+#define SAA716x_TC4		0x004
+#define SAA716x_TC5		0x005
+#define SAA716x_TC6		0x006
+#define SAA716x_TC7		0x007
+
+
+enum saa716x_edge {
+	SAA716x_EDGE_RISING	= 1,
+	SAA716x_EDGE_FALLING	= 2,
+	SAA716x_EDGE_ANY	= 3
+};
+
 extern int saa716x_msi_init(struct saa716x_dev *saa716x);
 extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
 
+extern int saa716x_add_irqvector(struct saa716x_dev *saa716x,
+				 int vector,
+				 enum saa716x_edge edge,
+				 irqreturn_t (*handler)(int irq, void *dev_id),
+				 char *desc);
+
+extern int saa716x_remove_irqvector(struct saa716x_dev *saa716x, int vector);
+
 #endif /* __SAA716x_MSI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index b9f21a780daa7..7e51a7a87f07c 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -18,60 +18,6 @@
 
 #define DRIVER_NAME				"SAA716x Core"
 
-static const char *msi_labels[] = {
-	"MSI_INT_TAGACK_VI0_0",
-	"MSI_INT_TAGACK_VI0_1",
-	"MSI_INT_TAGACK_VI0_2",
-	"MSI_INT_TAGACK_VI1_0",
-	"MSI_INT_TAGACK_VI1_1",
-	"MSI_INT_TAGACK_VI1_2",
-	"MSI_INT_TAGACK_FGPI_0",
-	"MSI_INT_TAGACK_FGPI_1",
-	"MSI_INT_TAGACK_FGPI_2",
-	"MSI_INT_TAGACK_FGPI_3",
-	"MSI_INT_TAGACK_AI_0",
-	"MSI_INT_TAGACK_AI_1",
-	"MSI_INT_OVRFLW_VI0_0",
-	"MSI_INT_OVRFLW_VI0_1",
-	"MSI_INT_OVRFLW_VI0_2",
-	"MSI_INT_OVRFLW_VI1_0",
-	"MSI_INT_OVRFLW_VI1_1",
-	"MSI_INT_OVRFLW_VI1_2",
-	"MSI_INT_OVRFLW_FGPI_O",
-	"MSI_INT_OVRFLW_FGPI_1",
-	"MSI_INT_OVRFLW_FGPI_2",
-	"MSI_INT_OVRFLW_FGPI_3",
-	"MSI_INT_OVRFLW_AI_0",
-	"MSI_INT_OVRFLW_AI_1",
-	"MSI_INT_AVINT_VI0",
-	"MSI_INT_AVINT_VI1",
-	"MSI_INT_AVINT_FGPI_0",
-	"MSI_INT_AVINT_FGPI_1",
-	"MSI_INT_AVINT_FGPI_2",
-	"MSI_INT_AVINT_FGPI_3",
-	"MSI_INT_AVINT_AI_0",
-	"MSI_INT_AVINT_AI_1",
-
-	"MSI_INT_UNMAPD_TC_INT",
-	"MSI_INT_EXTINT_0",
-	"MSI_INT_EXTINT_1",
-	"MSI_INT_EXTINT_2",
-	"MSI_INT_EXTINT_3",
-	"MSI_INT_EXTINT_4",
-	"MSI_INT_EXTINT_5",
-	"MSI_INT_EXTINT_6",
-	"MSI_INT_EXTINT_7",
-	"MSI_INT_EXTINT_8",
-	"MSI_INT_EXTINT_9",
-	"MSI_INT_EXTINT_10",
-	"MSI_INT_EXTINT_11",
-	"MSI_INT_EXTINT_12",
-	"MSI_INT_EXTINT_13",
-	"MSI_INT_EXTINT_14",
-	"MSI_INT_EXTINT_15",
-	"MSI_INT_I2CINT_0",
-	"MSI_INT_I2CINT_1"
-};
 
 static const char *i2c_labels[] = {
 	"INTERRUPT_MTD"
@@ -89,16 +35,12 @@ static const char *i2c_labels[] = {
 	"INTERRUPT_STFNF",
 };
 
-struct saa716x_msix_entry {
-	u8 desc[32];
-	irqreturn_t (*handler)(int irq, void *dev_id);
-};
-
 static irqreturn_t saa716x_msi_handler(int irq, void *dev_id)
 {
 	return IRQ_HANDLED;
 }
 
+#if 0
 static irqreturn_t saa716x_i2c_handler(int irq, void *dev_id)
 {
 	return IRQ_HANDLED;
@@ -107,6 +49,7 @@ static irqreturn_t saa716x_i2c_handler(int irq, void *dev_id)
 static struct saa716x_msix_entry saa716x_msix_handler[] = {
 	{ .desc = "SAA716x_I2C_HANDLER", .handler = saa716x_i2c_handler }
 };
+#endif
 
 #if 0
 static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
@@ -231,14 +174,14 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 	if (saa716x->int_type == MODE_MSI_X) {
 		for (i = 0; SAA716x_MSI_MAX_VECTORS; i++) {
 			ret = request_irq(saa716x->msix_entries[i].vector,
-					  saa716x_msix_handler[i].handler,
+					  saa716x->saa716x_msix_handler[i].handler,
 					  IRQF_SHARED,
-					  saa716x_msix_handler[i].desc,
+					  saa716x->saa716x_msix_handler[i].desc,
 					  saa716x);
 
-			dprintk(SAA716x_ERROR, 1, "%s @ 0x%p", saa716x_msix_handler[i].desc, saa716x_msix_handler[i].handler);
+			dprintk(SAA716x_ERROR, 1, "%s @ 0x%p", saa716x->saa716x_msix_handler[i].desc, saa716x->saa716x_msix_handler[i].handler);
 			if (ret) {
-				dprintk(SAA716x_ERROR, 1, "%s MSI-X-%d registration failed", saa716x_msix_handler[i].desc, i);
+				dprintk(SAA716x_ERROR, 1, "%s MSI-X-%d registration failed", saa716x->saa716x_msix_handler[i].desc, i);
 				return -1;
 			}
 		}
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 49ba2be9a4463..169b9279e372f 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -68,6 +68,12 @@
 
 #define SAA716x_MSI_MAX_VECTORS			16
 
+struct saa716x_msix_entry {
+	int vector;
+	u8 desc[32];
+	irqreturn_t (*handler)(int irq, void *dev_id);
+};
+
 struct saa716x_dev;
 struct saa716x_adapter;
 
@@ -130,6 +136,8 @@ struct saa716x_dev {
 	u8				int_type;
 
 	struct msix_entry		msix_entries[SAA716x_MSI_MAX_VECTORS];
+	struct saa716x_msix_entry	saa716x_msix_handler[56];
+	u8				handlers; /* no. of active handlers */
 
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 99e0945af4062..fc0bd791cdef0 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -546,6 +546,9 @@
 #define MSI_CONFIG46			0x0c0
 #define MSI_CONFIG47			0x0c4
 #define MSI_CONFIG48			0x0c8
+#define MSI_CONFIG49			0x0cc
+#define MSI_CONFIG50			0x0d0
+
 #define MSI_INT_POL_EDGE_RISE		(0x00000001 << 24)
 #define MSI_INT_POL_EDGE_FALL		(0x00000002 << 24)
 #define MSI_INT_POL_EDGE_ANY		(0x00000003 << 24)

From 432e5d0f2a0d1276295a846bc4f6eb886e3156a5 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:41:21 +0400
Subject: [PATCH 077/364] saa716x: Add PHI port definitions

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_reg.h | 62 ++++++++++++++++++++++++-
 1 file changed, 61 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index fc0bd791cdef0..174dee3de95a1 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -22,6 +22,8 @@
 	CGU	0x00013000
 	DCS	0x00014000
 	GREG	0x00012000
+
+	PHI_1	0x00020000
 */
 
 /* -------------- VIP Registers -------------- */
@@ -843,11 +845,69 @@
 #define GPIO_01				(1 <<  1)
 #define GPIO_00				(1 <<  0)
 
-/* -------------- PHI0 Registers -------------- */
+/* -------------- PHI_0 Registers -------------- */
+
+#define	PHI_0				0x0000f000
+
+#define PHI_0_MODE			0x0000
+#define PHI_0_CONFIG_0			0x0008
+#define PHI_0_CONFIG_1			0x000c
+#define PHI_0_CONFIG_2			0x0010
+#define PHI_0_CONFIG_3			0x0014
+
+#define PHI_0_POLARITY			0x0038
+#define PHI_0_TIMEOUT			0x003c
+#define PHI_0_SW_RST			0x0ff0
+
+#define PHI_0_RW_0_0			0x1000
+#define PHI_0_RW_0_511			0x17fc
+
+#define PHI_0_RW_1_0			0x1800
+#define PHI_0_RW_1_511			0x1ffc
+
+#define PHI_0_RW_2_0			0x2000
+#define PHI_0_RW_2_511			0x27fc
+
+#define PHI_0_RW_3_0			0x2800
+#define PHI_0_RW_3_511			0x2ffc
+
+/* -------------- PHI_1 Registers -------------- */
+
+#define	PHI_1				0x00020000
+
+#define PHI_1_MODE			0x00004
+#define PHI_1_CONFIG_0			0x00018
+#define PHI_1_CONFIG_1			0x0001c
+#define PHI_1_CONFIG_2			0x00020
+#define PHI_1_CONFIG_3			0x00024
+#define PHI_1_CONFIG_4			0x00028
+#define PHI_1_CONFIG_5			0x0002c
+#define PHI_1_CONFIG_6			0x00030
+#define PHI_1_CONFIG_7			0x00034
+
+#define PHI_1_RW_0_0			0x00000
+#define PHI_1_RW_0_16383		0x0fffc
+
+#define PHI_1_RW_1_0			0x1000
+#define PHI_1_RW_1_16383		0x1ffc
+
+#define PHI_1_RW_2_0			0x2000
+#define PHI_1_RW_2_16383		0x2ffc
+
+#define PHI_1_RW_3_0			0x3000
+#define PHI_1_RW_3_16383		0x3ffc
 
+#define PHI_1_RW_4_0			0x4000
+#define PHI_1_RW_4_16383		0x4ffc
 
+#define PHI_1_RW_5_0			0x5000
+#define PHI_1_RW_5_16383		0x5ffc
 
+#define PHI_1_RW_6_0			0x6000
+#define PHI_1_RW_6_16383		0x6ffc
 
+#define PHI_1_RW_7_0			0x7000
+#define PHI_1_RW_7_16383		0x7ffc
 
 /* -------------- CGU Registers -------------- */
 

From bd5080510ca606c0d28fc3e41636caaba8212ec2 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:42:06 +0400
Subject: [PATCH 078/364] saa716x: Initialize PHI bus

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile      |  1 +
 drivers/media/pci/saa716x/saa716x_phi.c | 72 +++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_phi.h | 34 +++++++++++
 drivers/media/pci/saa716x/saa716x_reg.h | 78 ++++++++++++-------------
 4 files changed, 146 insertions(+), 39 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_phi.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_phi.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 760e2c0e66ee4..b5eb61dd1e8fc 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -5,6 +5,7 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_dma.o	\
 				    saa716x_vip.o	\
 				    saa716x_aip.o	\
+				    saa716x_phi.o	\
 				    saa716x_boot.o	\
 				    saa716x_fgpi.o	\
 				    saa716x_adap.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
new file mode 100644
index 0000000000000..0befd3ad187bc
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -0,0 +1,72 @@
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+#include "saa716x_phi.h"
+
+
+
+u32 PHI_0_REGS[] = {
+	PHI_0_MODE,
+	PHI_0_0_CONFIG,
+	PHI_0_1_CONFIG,
+	PHI_0_2_CONFIG,
+	PHI_0_3_CONFIG
+};
+
+u32 PHI_1_REGS[] = {
+	PHI_1_MODE,
+	PHI_1_0_CONFIG,
+	PHI_1_1_CONFIG,
+	PHI_1_2_CONFIG,
+	PHI_1_3_CONFIG,
+	PHI_1_4_CONFIG,
+	PHI_1_5_CONFIG,
+	PHI_1_6_CONFIG,
+	PHI_1_7_CONFIG
+};
+
+#define PHI_BASE(__port)	((				\
+	(__port == PHI_1) ?					\
+		PHI_1_BASE :					\
+		PHI_0_BASE					\
+))
+
+#define PHI_APERTURE(_port)	((				\
+	(__port == PHI_1) ?					\
+		PHI_1_APERTURE:					\
+		PHI_0_APERTURE					\
+))
+
+#define PHI_REG(__port, __reg)	((				\
+	(__port == PHI_1) ?					\
+		PHI_1_REGS[__reg] :				\
+		PHI_0_REGS[__reg]				\
+))
+
+#define PHI_SLAVE(__port, __slave)	((			\
+	PHI_BASE(__port) + (__slave * (PHI_APERTURE(__port)))	\
+))
+
+/* // Read SAA716x registers
+ * SAA716x_EPRD(PHI_0, PHI_REG(__port, __reg))
+ * SAA716x_EPWR(PHI_1, PHI_REG(__port, __reg), __data)
+ *
+ * // Read slave registers
+ * SAA716x_EPRD(PHI_0, PHI_SLAVE(__port, __slave, __offset))
+ * SAA716x_EPWR(PHI_1, PHI_SLAVE(__port, __slave, _offset), __data)
+ */
+
+int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave)
+{
+	int i;
+
+	/* Reset */
+	SAA716x_EPWR(PHI_0, PHI_SW_RST, 0x1);
+
+	for (i = 0; i < 20; i++) {
+		msleep(1);
+		if (!(SAA716x_EPRD(PHI_0, PHI_SW_RST)))
+			break;
+	}
+
+	return 0;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
new file mode 100644
index 0000000000000..8c8fc6ea3450c
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -0,0 +1,34 @@
+#ifndef __SAA716x_PHI_H
+#define __SAA716x_PHI_H
+
+/* PHI SLAVE */
+#define PHI_SLAVE_0		0
+#define PHI_SLAVE_1		1
+#define PHI_SLAVE_2		2
+#define PHI_SLAVE_3		3
+#define PHI_SLAVE_4		4
+#define PHI_SLAVE_5		5
+#define PHI_SLAVE_6		6
+#define PHI_SLAVE_7		7
+
+/* PHI_REG */
+#define PHI_MODE		0
+#define PHI_CONFIG_0		1
+#define PHI_CONFIG_1		2
+#define PHI_CONFIG_2		3
+#define PHI_CONFIG_3		4
+#define PHI_CONFIG_4		5
+#define PHI_CONFIG_5		6
+#define PHI_CONFIG_6		7
+#define PHI_CONFIG_7		8
+
+#define PHI_0_BASE		0x1000
+#define PHI_0_APERTURE		0x0800
+
+#define PHI_1_BASE		0x0000
+#define PHI_1_APERTURE		0xfffc
+
+
+extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
+
+#endif /* __SAA716x_PHI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 174dee3de95a1..5ffe9fcae88a0 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -850,64 +850,64 @@
 #define	PHI_0				0x0000f000
 
 #define PHI_0_MODE			0x0000
-#define PHI_0_CONFIG_0			0x0008
-#define PHI_0_CONFIG_1			0x000c
-#define PHI_0_CONFIG_2			0x0010
-#define PHI_0_CONFIG_3			0x0014
+#define PHI_0_0_CONFIG			0x0008
+#define PHI_0_1_CONFIG			0x000c
+#define PHI_0_2_CONFIG			0x0010
+#define PHI_0_3_CONFIG			0x0014
 
-#define PHI_0_POLARITY			0x0038
-#define PHI_0_TIMEOUT			0x003c
-#define PHI_0_SW_RST			0x0ff0
+#define PHI_POLARITY			0x0038
+#define PHI_TIMEOUT			0x003c
+#define PHI_SW_RST			0x0ff0
 
-#define PHI_0_RW_0_0			0x1000
-#define PHI_0_RW_0_511			0x17fc
+#define PHI_0_0_RW_0			0x1000
+#define PHI_0_0_RW_511			0x17fc
 
-#define PHI_0_RW_1_0			0x1800
-#define PHI_0_RW_1_511			0x1ffc
+#define PHI_0_1_RW_0			0x1800
+#define PHI_0_1_RW_511			0x1ffc
 
-#define PHI_0_RW_2_0			0x2000
-#define PHI_0_RW_2_511			0x27fc
+#define PHI_0_2_RW_0			0x2000
+#define PHI_0_2_RW_511			0x27fc
 
-#define PHI_0_RW_3_0			0x2800
-#define PHI_0_RW_3_511			0x2ffc
+#define PHI_0_3_RW_0			0x2800
+#define PHI_0_3_RW_511			0x2ffc
 
 /* -------------- PHI_1 Registers -------------- */
 
 #define	PHI_1				0x00020000
 
 #define PHI_1_MODE			0x00004
-#define PHI_1_CONFIG_0			0x00018
-#define PHI_1_CONFIG_1			0x0001c
-#define PHI_1_CONFIG_2			0x00020
-#define PHI_1_CONFIG_3			0x00024
-#define PHI_1_CONFIG_4			0x00028
-#define PHI_1_CONFIG_5			0x0002c
-#define PHI_1_CONFIG_6			0x00030
-#define PHI_1_CONFIG_7			0x00034
+#define PHI_1_0_CONFIG			0x00018
+#define PHI_1_1_CONFIG			0x0001c
+#define PHI_1_2_CONFIG			0x00020
+#define PHI_1_3_CONFIG			0x00024
+#define PHI_1_4_CONFIG			0x00028
+#define PHI_1_5_CONFIG			0x0002c
+#define PHI_1_6_CONFIG			0x00030
+#define PHI_1_7_CONFIG			0x00034
 
-#define PHI_1_RW_0_0			0x00000
-#define PHI_1_RW_0_16383		0x0fffc
+#define PHI_1_0_RW_0			0x00000
+#define PHI_1_0_RW_16383		0x0fffc
 
-#define PHI_1_RW_1_0			0x1000
-#define PHI_1_RW_1_16383		0x1ffc
+#define PHI_1_1_RW_0			0x1000
+#define PHI_1_1_RW_16383		0x1ffc
 
-#define PHI_1_RW_2_0			0x2000
-#define PHI_1_RW_2_16383		0x2ffc
+#define PHI_1_2_RW_0			0x2000
+#define PHI_1_2_RW_16383		0x2ffc
 
-#define PHI_1_RW_3_0			0x3000
-#define PHI_1_RW_3_16383		0x3ffc
+#define PHI_1_3_RW_0			0x3000
+#define PHI_1_3_RW_16383		0x3ffc
 
-#define PHI_1_RW_4_0			0x4000
-#define PHI_1_RW_4_16383		0x4ffc
+#define PHI_1_4_RW_0			0x4000
+#define PHI_1_4_RW_16383		0x4ffc
 
-#define PHI_1_RW_5_0			0x5000
-#define PHI_1_RW_5_16383		0x5ffc
+#define PHI_1_5_RW_0			0x5000
+#define PHI_1_5_RW_16383		0x5ffc
 
-#define PHI_1_RW_6_0			0x6000
-#define PHI_1_RW_6_16383		0x6ffc
+#define PHI_1_6_RW_0			0x6000
+#define PHI_1_6_RW_16383		0x6ffc
 
-#define PHI_1_RW_7_0			0x7000
-#define PHI_1_RW_7_16383		0x7ffc
+#define PHI_1_7_RW_0			0x7000
+#define PHI_1_7_RW_16383		0x7ffc
 
 /* -------------- CGU Registers -------------- */
 

From 44ebabe847b295fc0a0a94359c6823a6afe8d1a3 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:42:56 +0400
Subject: [PATCH 079/364] saa716x: Add GREG routines

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile       |  3 +-
 drivers/media/pci/saa716x/saa716x_greg.c | 38 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_greg.h |  7 +++++
 3 files changed, 47 insertions(+), 1 deletion(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_greg.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_greg.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index b5eb61dd1e8fc..ee95b13f4aaaa 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -9,7 +9,8 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_boot.o	\
 				    saa716x_fgpi.o	\
 				    saa716x_adap.o	\
-				    saa716x_gpio.o
+				    saa716x_gpio.o	\
+				    saa716x_greg.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_greg.c b/drivers/media/pci/saa716x/saa716x_greg.c
new file mode 100644
index 0000000000000..ba80c17d21f30
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_greg.c
@@ -0,0 +1,38 @@
+#include "saa716x_reg.h"
+#include "saa716x_priv.h"
+#include "saa716x_greg.h"
+
+static u32 g_save[12];
+
+void saa716x_greg_save(struct saa716x_dev *saa716x)
+{
+	g_save[0] = SAA716x_EPRD(GREG, GREG_SUBSYS_CONFIG);
+	g_save[1] = SAA716x_EPRD(GREG, GREG_MSI_BAR_PMCSR);
+	g_save[2] = SAA716x_EPRD(GREG, GREG_PMCSR_DATA_1);
+	g_save[3] = SAA716x_EPRD(GREG, GREG_PMCSR_DATA_2);
+	g_save[4] = SAA716x_EPRD(GREG, GREG_VI_CTRL);
+	g_save[5] = SAA716x_EPRD(GREG, GREG_FGPI_CTRL);
+	g_save[6] = SAA716x_EPRD(GREG, GREG_RSTU_CTRL);
+	g_save[7] = SAA716x_EPRD(GREG, GREG_I2C_CTRL);
+	g_save[8] = SAA716x_EPRD(GREG, GREG_OVFLW_CTRL);
+	g_save[9] = SAA716x_EPRD(GREG, GREG_TAG_ACK_FLEN);
+
+	g_save[10] = SAA716x_EPRD(GREG, GREG_VIDEO_IN_CTRL);
+}
+
+void saa716x_greg_restore(struct saa716x_dev *saa716x)
+{
+	SAA716x_EPWR(GREG, GREG_SUBSYS_CONFIG, g_save[0]);
+	SAA716x_EPWR(GREG, GREG_MSI_BAR_PMCSR, g_save[1]);
+	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_1, g_save[2]);
+	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_2, g_save[3]);
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, g_save[4]);
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, g_save[5]);
+	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, g_save[6]);
+	SAA716x_EPWR(GREG, GREG_I2C_CTRL, g_save[7]);
+	SAA716x_EPWR(GREG, GREG_OVFLW_CTRL, g_save[8]);
+	SAA716x_EPWR(GREG, GREG_TAG_ACK_FLEN, g_save[9]);
+
+	SAA716x_EPWR(GREG, GREG_VIDEO_IN_CTRL, g_save[10]);
+
+}
diff --git a/drivers/media/pci/saa716x/saa716x_greg.h b/drivers/media/pci/saa716x/saa716x_greg.h
new file mode 100644
index 0000000000000..dea3565b502f1
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_greg.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_GREG_H
+#define __SAA716x_GREG_H
+
+extern void saa716x_greg_save(struct saa716x_dev *saa716x);
+extern void saa716x_greg_restore(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_GREG_H */

From 1e0bf0c5e2494b75f3d9ee9e91bb756582ca6d22 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:43:49 +0400
Subject: [PATCH 080/364] saa716x: Reorganize CGU related routines

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c  | 701 ++++++++++++++---------
 drivers/media/pci/saa716x/saa716x_cgu.h  |  59 ++
 drivers/media/pci/saa716x/saa716x_priv.h |   5 +-
 3 files changed, 483 insertions(+), 282 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_cgu.h

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index ff527e1fba74b..9d485f532edcf 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -2,10 +2,7 @@
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
 
-#define CGU_CLKS	14
-#define PLL_FREQ	2500
-
-u32 CGU_FDC[CGU_CLKS] = {
+u32 cgu_clk[14] = {
 	CGU_FDC_0,
 	CGU_FDC_1,
 	CGU_FDC_2,
@@ -19,193 +16,37 @@ u32 CGU_FDC[CGU_CLKS] = {
 	CGU_FDC_10,
 	CGU_FDC_11,
 	CGU_FDC_12,
-	CGU_FDC_13,
+	CGU_FDC_13
 };
 
-u32 CGU_FREQ[CGU_CLKS];
-
-enum saa716x_clk {
-	SAA716x_CLK_PSS		= 0,
-	SAA716x_CLK_DCS,
-	SAA716x_CLK_SPI,
-	SAA716x_CLK_I2C,
-	SAA716x_CLK_PHI,
-	SAA716x_CLK_VI0,
-	SAA716x_CLK_VI1,
-	SAA716x_CLK_FGPI0,
-	SAA716x_CLK_FGPI1,
-	SAA716x_CLK_FGPI2,
-	SAA716x_CLK_FGPI3,
-	SAA716x_CLK_AI0,
-	SAA716x_CLK_AI1,
-	SAA716x_CLK_PHY
+char *clk_desc[14] = {
+	"Clk PSS",
+	"Clk DCS",
+	"Clk SPI",
+	"Clk I2C/Boot",
+	"Clk PHI",
+	"Clk VI0",
+	"Clk VI1",
+	"Clk FGPI0",
+	"Clk FGPI1",
+	"Clk FGPI2",
+	"Clk FGPI3",
+	"Clk AI0",
+	"Clk AI1",
+	"Clk Phy"
 };
 
-u32 saa716x_get_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain)
-{
-	return CGU_FREQ[clk_domain];
-}
-
-int saa716x_set_clk(struct saa716x_dev *saa716x, enum saa716x_clk clk_domain, u32 frequency)
+int saa716x_getbootscript_setup(struct saa716x_dev *saa716x)
 {
-	u32 M = 1, N = 1;
-	u32 reset = 0, freq, cur_div;
-	s8 ucN, ucM, sub, add, lsb;
-	int i;
-
-	/* calculate a new divider */
-	do {
-		M = (N * PLL_FREQ) / frequency;
-		if (M == 0)
-			N++;
-	} while (M == 0);
-
-	/* calculate real frequency */
-	freq = (N * PLL_FREQ) / M;
-
-	ucN = 0xFF & N;
-	ucM = 0xFF & M;
-	sub = -ucN;
-	add = ucM - ucN;
-	lsb = CGU_FDC_RUN1; /* run */
-
-	/* enable stretching for N/M smaller than 1/2 */
-	if (((10 * N) / M) < 5)
-        	lsb |= CGU_FDC_STRETCH; /* Add stretching */
-
-	cur_div   = sub & 0xff;
-	cur_div <<= 8;
-
-	cur_div  |= add & 0xff;
-	cur_div <<= 3;
-	cur_div  |= lsb;
-
-	dprintk(SAA716x_DEBUG, 1, "INFO: SetFDC %d f %d set f %d, N = %d, M = %d, divider 0x%x",
-		clk_domain,
-		frequency,
-		freq,
-		N,
-		M,
-		cur_div);
-
-	/* add reset to the frequency divider, update register and wait */
-	SAA716x_EPWR(CGU, CGU_FDC[clk_domain], cur_div | CGU_FDC_RESET);
-
-	/* monitor reset disable */
-	for (i = 0; i < CGU_CLKS; i++) {
-		msleep(10);
-		reset = SAA716x_EPRD(CGU, CGU_FREQ[clk_domain]);
-		if (cur_div == reset)
-			break;
-	}
-
-	/* if not changed, disable reset */
-	if (cur_div != reset)
-		SAA716x_EPWR(CGU, CGU_FREQ[clk_domain], cur_div);
+	struct saa716x_cgu *cgu = &saa716x->cgu;
 
-	return 0;
-}
-
-#define SAA716x_CGU_CLKRUN(__reg) do {						\
-	SAA716x_EPWR(CGU, CGU_PCR_##__reg, CGU_PCR_RUN); /* Run */		\
-	SAA716x_EPWR(CGU, CGU_SCR_##__reg, CGU_SCR_ENF1); /* Switch */		\
-	SAA716x_EPWR(CGU, CGU_FS1_##__reg, 0x00000000); /* PLL Clk */		\
-	SAA716x_EPWR(CGU, CGU_ESR_##__reg, CGU_ESR_FD_EN); /* Frac div */	\
-} while (0)
-
-int saa716x_cgu_init(struct saa716x_dev *saa716x)
-{
-	s16 M;
-	s8 N;
 	u8 i;
-	u32 boot_div[14], freq[14];
-
-#if 0
-	/* 1. PLL to FS1 */
-	SAA716x_EPWR(CGU, CGU_FS1_0, CGU_FS1_PLL); /* PSS */
-	SAA716x_EPWR(CGU, CGU_FS1_1, CGU_FS1_PLL); /* DCS */
-	SAA716x_EPWR(CGU, CGU_FS1_3, CGU_FS1_PLL); /* Boot/I2C */
-	SAA716x_EPWR(CGU, CGU_FS1_7, CGU_FS1_PLL); /* FGPI_0 */
-	SAA716x_EPWR(CGU, CGU_FS1_8, CGU_FS1_PLL); /* FGPI_1 */
-	SAA716x_EPWR(CGU, CGU_FS1_9, CGU_FS1_PLL); /* FGPI_2 */
-	SAA716x_EPWR(CGU, CGU_FS1_10, CGU_FS1_PLL); /* FGPI_3 */
-	SAA716x_EPWR(CGU, CGU_FS1_13, CGU_FS1_PLL); /* Phy */
-
-	/* 2. FS1 to all */
-	SAA716x_EPWR(CGU, CGU_SCR_0, CGU_SCR_ENF1); /* PSS */
-	SAA716x_EPWR(CGU, CGU_SCR_1, CGU_SCR_ENF1); /* DCS */
-	SAA716x_EPWR(CGU, CGU_SCR_3, CGU_SCR_ENF1); /* Boot/I2C */
-	SAA716x_EPWR(CGU, CGU_SCR_7, CGU_SCR_ENF1); /* FGPI_0 */
-	SAA716x_EPWR(CGU, CGU_SCR_8, CGU_SCR_ENF1); /* FGPI_1 */
-	SAA716x_EPWR(CGU, CGU_SCR_9, CGU_SCR_ENF1); /* FGPI_2 */
-	SAA716x_EPWR(CGU, CGU_SCR_10, CGU_SCR_ENF1); /* FGPI_3 */
-	SAA716x_EPWR(CGU, CGU_SCR_13, CGU_SCR_ENF1); /* Phy */
-
-	/* 3. setup clock divider */
-	saa716x_set_clk(saa716x, SAA716x_CLK_PSS,  125); /* PSS */
-	saa716x_set_clk(saa716x, SAA716x_CLK_DCS,  125); /* DCS */
-	saa716x_set_clk(saa716x, SAA716x_CLK_I2C,   25); /* Boot/I2C */
-	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI0, 25); /* FGPI_0 */
-	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI1, 25); /* FGPI_1 */
-	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI2, 25); /* FGPI_2 */
-	saa716x_set_clk(saa716x, SAA716x_CLK_FGPI3, 25); /* FGPI_3 */
-	saa716x_set_clk(saa716x, SAA716x_CLK_PHY,  125); /* Phy */
-
-	/* 4. enable clock divider */
-	SAA716x_EPWR(CGU, CGU_ESR_0_0, CGU_ESR_FD_EN); /* Base 0 */
-	SAA716x_EPWR(CGU, CGU_ESR_0_1, CGU_ESR_FD_EN); /* PSS PCIe Core */
-	SAA716x_EPWR(CGU, CGU_ESR_0_2, CGU_ESR_FD_EN); /* PSS Adapter */
-	SAA716x_EPWR(CGU, CGU_ESR_0_3, CGU_ESR_FD_EN); /* PSS MMU */
-	SAA716x_EPWR(CGU, CGU_ESR_0_4, CGU_ESR_FD_EN); /* PSS DTL2MTL */
-	SAA716x_EPWR(CGU, CGU_ESR_0_5, CGU_ESR_FD_EN); /* MSI */
-	SAA716x_EPWR(CGU, CGU_ESR_0_6, CGU_ESR_FD_EN); /* GREG */
-	SAA716x_EPWR(CGU, CGU_ESR_0_7, CGU_ESR_FD_EN); /* GPIO */
-	SAA716x_EPWR(CGU, CGU_ESR_1_0, CGU_ESR_FD_EN); /* Base 1 */
-	SAA716x_EPWR(CGU, CGU_ESR_1_1, CGU_ESR_FD_EN); /* DCS */
-	SAA716x_EPWR(CGU, CGU_ESR_2_0, CGU_ESR_FD_EN); /* Base 2 */
-	SAA716x_EPWR(CGU, CGU_ESR_3_0, CGU_ESR_FD_EN); /* Base 3 */
-	SAA716x_EPWR(CGU, CGU_ESR_3_1, CGU_ESR_FD_EN); /* Boot */
-	SAA716x_EPWR(CGU, CGU_ESR_3_2, CGU_ESR_FD_EN); /* I2C */
-	SAA716x_EPWR(CGU, CGU_ESR_4_0, CGU_ESR_FD_EN); /* Base 4 */
-	SAA716x_EPWR(CGU, CGU_ESR_4_1, 0); /* Phy */
-	SAA716x_EPWR(CGU, CGU_ESR_7, CGU_ESR_FD_EN); /* FGPI_0 */
-	SAA716x_EPWR(CGU, CGU_ESR_8, CGU_ESR_FD_EN); /* FGPI_1 */
-	SAA716x_EPWR(CGU, CGU_ESR_9, CGU_ESR_FD_EN); /* FGPI_2 */
-	SAA716x_EPWR(CGU, CGU_ESR_10, CGU_ESR_FD_EN); /* FGPI_3 */
-	SAA716x_EPWR(CGU, CGU_ESR_13, 0); /* PCIe */
-
-	/* 5. enable module clocks */
-	SAA716x_EPWR(CGU, CGU_PCR_0_0, CGU_PCR_RUN); /* Base 0 */
-	SAA716x_EPWR(CGU, CGU_PCR_0_1, CGU_PCR_RUN); /* PSS PCIe Core */
-	SAA716x_EPWR(CGU, CGU_PCR_0_2, CGU_PCR_RUN); /* PSS Adapter */
-	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* PSS MMU */
-	SAA716x_EPWR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* PSS DTL2MTL */
-	SAA716x_EPWR(CGU, CGU_PCR_0_5, CGU_PCR_RUN); /* MSI */
-	SAA716x_EPWR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
-	SAA716x_EPWR(CGU, CGU_PCR_0_7, CGU_PCR_RUN); /* GPIO */
-	SAA716x_EPWR(CGU, CGU_PCR_1_0, CGU_PCR_RUN); /* Base 1 */
-	SAA716x_EPWR(CGU, CGU_PCR_1_1, CGU_PCR_RUN); /* DCS */
-	SAA716x_EPWR(CGU, CGU_PCR_2_0, CGU_PCR_RUN); /* Base 2 */
-	SAA716x_EPWR(CGU, CGU_PCR_2_1, 0); /* SPI */
-	SAA716x_EPWR(CGU, CGU_PCR_3_0, CGU_PCR_RUN); /* Base 3 */
-	SAA716x_EPWR(CGU, CGU_PCR_3_1, CGU_PCR_RUN); /* Boot */
-	SAA716x_EPWR(CGU, CGU_PCR_3_2, CGU_PCR_RUN); /* I2C */
-	SAA716x_EPWR(CGU, CGU_PCR_4_0, CGU_PCR_RUN); /* Base 4 */
-	SAA716x_EPWR(CGU, CGU_PCR_4_1, 0); /* Phy */
-	SAA716x_EPWR(CGU, CGU_PCR_5, 0); /* VI_0 */
-	SAA716x_EPWR(CGU, CGU_PCR_6, 0); /* VI_1 */
-	SAA716x_EPWR(CGU, CGU_PCR_7, CGU_PCR_RUN); /* FGPI_0 */
-	SAA716x_EPWR(CGU, CGU_PCR_8, CGU_PCR_RUN); /* FGPI_1 */
-	SAA716x_EPWR(CGU, CGU_PCR_9, CGU_PCR_RUN); /* FGPI_2 */
-	SAA716x_EPWR(CGU, CGU_PCR_10, CGU_PCR_RUN); /* FGPI_3 */
-	SAA716x_EPWR(CGU, CGU_PCR_11, 0); /* AI_0 */
-	SAA716x_EPWR(CGU, CGU_PCR_12, 0); /* AI_1 */
-	SAA716x_EPWR(CGU, CGU_PCR_13, 0); /* PCIe */
-#endif
+	s8 N = 0;
+	s16 M = 0;
 
 	SAA716x_EPWR(CGU, CGU_PCR_0_6, CGU_PCR_RUN); /* GREG */
-	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* MMU */
-	SAA716x_EPWR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* DTL2MTL */
+	SAA716x_EPWR(CGU, CGU_PCR_0_3, CGU_PCR_RUN); /* PSS_MMU */
+	SAA716x_EPWR(CGU, CGU_PCR_0_4, CGU_PCR_RUN); /* PSS_DTL2MTL */
 	SAA716x_EPWR(CGU, CGU_PCR_0_5, CGU_PCR_RUN); /* MSI */
 	SAA716x_EPWR(CGU, CGU_PCR_3_2, CGU_PCR_RUN); /* I2C */
 	SAA716x_EPWR(CGU, CGU_PCR_4_1, CGU_PCR_RUN); /* PHI */
@@ -214,180 +55,482 @@ int saa716x_cgu_init(struct saa716x_dev *saa716x)
 	SAA716x_EPWR(CGU, CGU_PCR_1_1, CGU_PCR_RUN); /* DCS */
 	SAA716x_EPWR(CGU, CGU_PCR_3_1, CGU_PCR_RUN); /* BOOT */
 
-	dprintk(SAA716x_DEBUG, 1, "Initial Clocks setup");
-
+	/* get all dividers */
 	for (i = 0; i < CGU_CLKS; i++) {
-		boot_div[i] = SAA716x_EPRD(CGU, CGU_FDC[i]);
+		cgu->clk_boot_div[i] = SAA716x_EPRD(CGU, cgu_clk[i]);
+		cgu->clk_curr_div[i] = cgu->clk_boot_div[i];
 
-		N  =  (boot_div[i] >> 11) & 0xff;
+		N = (cgu->clk_boot_div[i] >> 11) & 0xff;
 		N *= -1;
-		M  = ((boot_div[i] >> 3) & 0xff) + N;
+		M = ((cgu->clk_boot_div[i] >>  3) & 0xff) + N;
 
 		if (M)
-			freq[i] = ((u32)N * PLL_FREQ) / (u32)M;
+			cgu->clk_freq[i] = (u32 ) N * PLL_FREQ / (u32 ) M;
 		else
-			freq[i] = 0;
+			cgu->clk_freq[i] = 0;
 
-		dprintk(SAA716x_DEBUG, 1, "Clock %d, M=%d, Frequency=%d",
-			i, M, freq[i]);
+		dprintk(SAA716x_DEBUG, 1, "Domain %d: %s <0x%x> --> N=%d, M=%d, freq=%d",
+			i, clk_desc[i], cgu->clk_boot_div[i], N, M, cgu->clk_freq[i]);
 	}
-
-	/* I2C */
-	SAA716x_EPWR(CGU, CGU_PCR_3_2, CGU_PCR_RUN);
-	SAA716x_EPWR(CGU, CGU_SCR_3, CGU_SCR_ENF1);
-	SAA716x_EPWR(CGU, CGU_FS1_3, 0x00000000);
-	SAA716x_EPWR(CGU, CGU_ESR_3_2, CGU_ESR_FD_EN);
-
-	SAA716x_CGU_CLKRUN(5); /* VI_0 */
-	SAA716x_CGU_CLKRUN(6); /* VI_1 */
-	SAA716x_CGU_CLKRUN(7); /* FGPI_0 */
-	SAA716x_CGU_CLKRUN(8); /* FGPI_1 */
-	SAA716x_CGU_CLKRUN(9); /* FGPI_2 */
-	SAA716x_CGU_CLKRUN(10); /* FGPI_3 */
-	SAA716x_CGU_CLKRUN(11); /* AI_0 */
-	SAA716x_CGU_CLKRUN(12); /* AI_1 */
-
-	msleep(1000); /* wait for PLL */
+	/* store clock settings */
+	cgu->clk_vi_0[0] = cgu->clk_freq[CLK_DOMAIN_VI0];
+	cgu->clk_vi_0[1] = cgu->clk_freq[CLK_DOMAIN_VI0];
+	cgu->clk_vi_0[2] = cgu->clk_freq[CLK_DOMAIN_VI0];
+	cgu->clk_vi_1[0] = cgu->clk_freq[CLK_DOMAIN_VI1];
+	cgu->clk_vi_1[1] = cgu->clk_freq[CLK_DOMAIN_VI1];
+	cgu->clk_vi_1[2] = cgu->clk_freq[CLK_DOMAIN_VI1];
 
 	return 0;
 }
-EXPORT_SYMBOL_GPL(saa716x_cgu_init);
-
-#define	PORT_ALL	0
-#define	PORT_VI0	1
-#define	PORT_VI1	2
-#define	PORT_FGPI0	3
-#define	PORT_FGPI1	4
-#define	PORT_FGPI2	5
-#define	PORT_FGPI3	6
-#define	PORT_AI0	7
-#define	PORT_AI1	8
-
-int saa716x_set_intclk(struct saa716x_dev *saa716x, u32 clk_domain)
+
+int saa716x_set_clk_internal(struct saa716x_dev *saa716x, u32 port)
 {
-	int delay = 1, err = 0;
+	struct saa716x_cgu *cgu = &saa716x->cgu;
 
-	switch (clk_domain) {
-	case PORT_VI0:
-		SAA716x_CGU_CLKRUN(5); /* VI_0 */
-		delay = 0;
+	u8 delay = 1;
+
+	switch (port) {
+	case PORT_VI0_VIDEO:
+		cgu->clk_int_port[PORT_VI0_VIDEO] = 1;
+
+		if (!cgu->clk_int_port[PORT_VI0_VBI]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_CGU_CLKRUN(5);
 		break;
 
-	case PORT_VI1:
-		SAA716x_CGU_CLKRUN(6); /* VI_1 */
-		delay = 0;
+	case PORT_VI0_VBI:
+		cgu->clk_int_port[PORT_VI0_VBI] = 1;
+
+		if (!cgu->clk_int_port[PORT_VI0_VIDEO]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_CGU_CLKRUN(5);
+		break;
+
+	case PORT_VI1_VIDEO:
+		cgu->clk_int_port[PORT_VI1_VIDEO] = 1;
+
+		if (!cgu->clk_int_port[PORT_VI1_VBI]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_CGU_CLKRUN(6);
+		break;
+
+	case PORT_VI1_VBI:
+		cgu->clk_int_port[PORT_VI1_VBI] = 1;
+
+		if (!cgu->clk_int_port[PORT_VI1_VIDEO]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_CGU_CLKRUN(6);
 		break;
 
 	case PORT_FGPI0:
-		SAA716x_CGU_CLKRUN(7); /* FGPI_0 */
+		cgu->clk_int_port[PORT_FGPI0] = 1;
+		SAA716x_CGU_CLKRUN(7);
 		break;
 
 	case PORT_FGPI1:
-		SAA716x_CGU_CLKRUN(8); /* FGPI_1 */
+		cgu->clk_int_port[PORT_FGPI1] = 1;
+		SAA716x_CGU_CLKRUN(8);
 		break;
 
 	case PORT_FGPI2:
-		SAA716x_CGU_CLKRUN(9); /* FGPI_2 */
+		cgu->clk_int_port[PORT_FGPI2] = 1;
+		SAA716x_CGU_CLKRUN(9);
 		break;
 
 	case PORT_FGPI3:
-		SAA716x_CGU_CLKRUN(10); /* FGPI_3 */
+		cgu->clk_int_port[PORT_FGPI3] = 1;
+		SAA716x_CGU_CLKRUN(10);
 		break;
 
 	case PORT_AI0:
-		SAA716x_CGU_CLKRUN(11); /* AI_0 */
+		cgu->clk_int_port[PORT_AI0] = 1;
+		SAA716x_CGU_CLKRUN(11);
 		break;
 
 	case PORT_AI1:
-		SAA716x_CGU_CLKRUN(12); /* AI_1 */
+		cgu->clk_int_port[PORT_AI1] = 1;
+		SAA716x_CGU_CLKRUN(12);
 		break;
 
 	case PORT_ALL:
-		SAA716x_CGU_CLKRUN(5); /* VI_0 */
-		SAA716x_CGU_CLKRUN(6); /* VI_1 */
-		SAA716x_CGU_CLKRUN(7); /* FGPI_0 */
-		SAA716x_CGU_CLKRUN(8); /* FGPI_1 */
-		SAA716x_CGU_CLKRUN(9); /* FGPI_2 */
-		SAA716x_CGU_CLKRUN(10); /* FGPI_3 */
-		SAA716x_CGU_CLKRUN(11); /* AI_0 */
-		SAA716x_CGU_CLKRUN(12); /* AI_1 */
+		SAA716x_CGU_CLKRUN(5);
+		SAA716x_CGU_CLKRUN(6);
+		SAA716x_CGU_CLKRUN(7);
+		SAA716x_CGU_CLKRUN(8);
+		SAA716x_CGU_CLKRUN(9);
+		SAA716x_CGU_CLKRUN(10);
+		SAA716x_CGU_CLKRUN(11);
+		SAA716x_CGU_CLKRUN(12);
+
+		cgu->clk_int_port[PORT_VI0_VIDEO] = 1;
+		cgu->clk_int_port[PORT_VI0_VBI] = 1;
+		cgu->clk_int_port[PORT_VI1_VIDEO] = 1;
+		cgu->clk_int_port[PORT_VI1_VBI] = 1;
+		cgu->clk_int_port[PORT_FGPI0] = 1;
+		cgu->clk_int_port[PORT_FGPI1] = 1;
+		cgu->clk_int_port[PORT_FGPI2] = 1;
+		cgu->clk_int_port[PORT_FGPI3] = 1;
+		cgu->clk_int_port[PORT_AI0] = 1;
+		cgu->clk_int_port[PORT_AI1] = 1;
+
+		delay = 0;
 		break;
 
 	default:
-		dprintk(SAA716x_ERROR, 1, "Unknown PORT: %d", clk_domain);
-		delay = 0;
-		err = -EINVAL;
+		dprintk(SAA716x_ERROR, 1, "Unknown port <%02x>", port);
 		break;
 	}
 
-	/* Wait for the PLL to be ready */
-	if (delay) {
-		dprintk(SAA716x_DEBUG, 1, "Set PORT%d internal clock", clk_domain);
+	/* wait for PLL */
+	if (delay)
 		msleep(1000);
-	}
 
-	return err;
+	return 0;
 }
 
-int saa716x_set_extclk(struct saa716x_dev *saa716x, u32 port)
+int saa716x_set_clk_external(struct saa716x_dev *saa716x, u32 port)
 {
-	int delay = 1, err = 0;
+	struct saa716x_cgu *cgu = &saa716x->cgu;
+
+	u8 delay = 1;
 
 	switch (port) {
-	case PORT_VI0:
-		SAA716x_EPWR(CGU, CGU_FS1_5, 0x00000002);  /* select VIP0_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_5, 0x00000000);  /* disable divider */
-		delay = 0;
+	case PORT_VI0_VIDEO:
+		cgu->clk_int_port[PORT_VI0_VIDEO] = 0;
+
+		if (!cgu->clk_int_port[PORT_VI0_VBI]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_EPWR(CGU, CGU_FS1_5, 0x2); /* VI 0 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_5, 0x0); /* disable divider */
 		break;
 
-	case PORT_VI1:
-		SAA716x_EPWR(CGU, CGU_FS1_6, 0x00000003);  /* select VIP1_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_6, 0x00000000);  /* disable divider */
-		delay = 0;
+	case PORT_VI0_VBI:
+		cgu->clk_int_port[PORT_VI0_VBI] = 0;
+
+		if (!cgu->clk_int_port[PORT_VI0_VIDEO]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_EPWR(CGU, CGU_FS1_5, 0x2); /* VI 0 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_5, 0x0); /* disable divider */
+		break;
+
+	case PORT_VI1_VIDEO:
+		cgu->clk_int_port[PORT_VI1_VIDEO] = 0;
+
+		if (!cgu->clk_int_port[PORT_VI1_VBI]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_EPWR(CGU, CGU_FS1_6, 0x3); /* VI 1 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_6, 0x0); /* disable divider */
+		break;
+
+	case PORT_VI1_VBI:
+		cgu->clk_int_port[PORT_VI1_VBI] = 0;
+
+		if (!cgu->clk_int_port[PORT_VI1_VIDEO]) {
+			delay = 0;
+			break;
+		}
+
+		SAA716x_EPWR(CGU, CGU_FS1_6, 0x3); /* VI 1 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_6, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI0:
-		SAA716x_EPWR(CGU, CGU_FS1_7, 0x00000004);  /* select FGPI0_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_7, 0x00000000);  /* disable divider */
+		cgu->clk_int_port[PORT_FGPI0] = 1;
+
+		SAA716x_EPWR(CGU, CGU_FS1_7, 0x4); /* FGPI 0 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_7, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI1:
-		SAA716x_EPWR(CGU, CGU_FS1_8, 0x00000005);  /* select FGPI1_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_8, 0x00000000);  /* disable divider */
+		cgu->clk_int_port[PORT_FGPI1] = 1;
+
+		SAA716x_EPWR(CGU, CGU_FS1_8, 0x5); /* FGPI 1 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_8, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI2:
-		SAA716x_EPWR(CGU, CGU_FS1_9, 0x00000006);  /* select FGPI2_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_9, 0x00000000);  /* disable divider */
+		cgu->clk_int_port[PORT_FGPI2] = 1;
+
+		SAA716x_EPWR(CGU, CGU_FS1_9, 0x6); /* FGPI 2 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_9, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI3:
-		SAA716x_EPWR(CGU, CGU_FS1_10, 0x00000007);  /* select FGPI3_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_10, 0x00000000);  /* disable divider */
+		cgu->clk_int_port[PORT_FGPI3] = 1;
+
+		SAA716x_EPWR(CGU, CGU_FS1_10, 0x7); /* FGPI 3 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_10, 0x0); /* disable divider */
 		break;
 
 	case PORT_AI0:
-		SAA716x_EPWR(CGU, CGU_FS1_11, 0x00000008);  /* select AI0_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_11, 0x00000000);  /* disable divider */
+		cgu->clk_int_port[PORT_AI0] = 1;
+
+		SAA716x_EPWR(CGU, CGU_FS1_11, 0x8); /* AI 0 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_11, 0x0); /* disable divider */
 		break;
 
 	case PORT_AI1:
-		SAA716x_EPWR(CGU, CGU_FS1_12, 0x00000009);  /* select AI1_CLK */
-		SAA716x_EPWR(CGU, CGU_ESR_12, 0x00000000);  /* disable divider */
+		cgu->clk_int_port[PORT_AI1] = 1;
+
+		SAA716x_EPWR(CGU, CGU_FS1_12, 0x9); /* AI 1 clk */
+		SAA716x_EPWR(CGU, CGU_ESR_12, 0x0); /* disable divider */
 		break;
 
 	default:
-		dprintk(SAA716x_DEBUG, 1, "Error: unsupported port: %d", port);
+		dprintk(SAA716x_ERROR, 1, "Unknown port <%02x>", port);
 		delay = 0;
-		err = -EINVAL;
 		break;
+
 	}
 
-	/* Wait for the PLL to be ready */
-	if (delay) {
-		dprintk(SAA716x_DEBUG, 1, "Set PORT%d internal clock", port);
+	if (delay)
 		msleep(1000);
+
+	return 0;
+}
+
+int saa716x_get_clk(struct saa716x_dev *saa716x,
+		    enum saa716x_clk_domain domain,
+		    u32 *frequency)
+{
+	struct saa716x_cgu *cgu = &saa716x->cgu;
+
+	switch (domain) {
+	case CLK_DOMAIN_PSS:
+	case CLK_DOMAIN_DCS:
+	case CLK_DOMAIN_SPI:
+	case CLK_DOMAIN_I2C:
+	case CLK_DOMAIN_PHI:
+	case CLK_DOMAIN_VI0:
+	case CLK_DOMAIN_VI1:
+	case CLK_DOMAIN_FGPI0:
+	case CLK_DOMAIN_FGPI1:
+	case CLK_DOMAIN_FGPI2:
+	case CLK_DOMAIN_FGPI3:
+	case CLK_DOMAIN_AI0:
+	case CLK_DOMAIN_AI1:
+	case CLK_DOMAIN_PHY:
+		*frequency = cgu->clk_freq[domain];
+		break;
+
+	case CLK_DOMAIN_VI0VBI:
+		*frequency = cgu->clk_freq[CLK_DOMAIN_VI0];
+		break;
+
+	case CLK_DOMAIN_VI1VBI:
+		*frequency =cgu->clk_freq[CLK_DOMAIN_VI1];
+		break;
+	default:
+		dprintk(SAA716x_ERROR, 1, "Error Clock domain <%02x>", domain);
+		break;
+	}
+
+	return 0;
+}
+
+int saa716x_set_clk(struct saa716x_dev *saa716x,
+		    enum saa716x_clk_domain domain,
+		    u32 frequency)
+{
+	struct saa716x_cgu *cgu = &saa716x->cgu;
+
+	u32 M = 1, N = 1, reset, i;
+	s8 N_tmp, M_tmp, sub, add, lsb;
+
+
+	if (cgu->clk_freq_min > frequency)
+		frequency = cgu->clk_freq_min;
+
+	if (cgu->clk_freq_max < frequency)
+		frequency = cgu->clk_freq_max;
+
+	switch (domain) {
+	case CLK_DOMAIN_PSS:
+	case CLK_DOMAIN_DCS:
+	case CLK_DOMAIN_SPI:
+	case CLK_DOMAIN_I2C:
+	case CLK_DOMAIN_PHI:
+	case CLK_DOMAIN_FGPI0:
+	case CLK_DOMAIN_FGPI1:
+	case CLK_DOMAIN_FGPI2:
+	case CLK_DOMAIN_FGPI3:
+	case CLK_DOMAIN_AI0:
+	case CLK_DOMAIN_AI1:
+	case CLK_DOMAIN_PHY:
+
+		if (frequency == cgu->clk_freq[domain])
+			return 0; /* same frequency */
+		break;
+
+	case CLK_DOMAIN_VI0:
+
+		if (frequency == cgu->clk_vi_0[1]) {
+			return 0;
+
+		} else if (frequency == cgu->clk_vi_0[0]) {
+			cgu->clk_vi_0[1] = frequency; /* store */
+
+			if (frequency == cgu->clk_vi_0[2])
+				return 0;
+
+		} else {
+			cgu->clk_vi_0[1] = frequency;
+
+			if (frequency != cgu->clk_vi_0[2])
+				return 0;
+
+		}
+		break;
+
+	case CLK_DOMAIN_VI1:
+		if (frequency == cgu->clk_vi_1[1]) {
+			return 0;
+
+		} else if (frequency == cgu->clk_vi_1[0]) {
+			cgu->clk_vi_1[1] = frequency; /* store */
+
+			if (frequency == cgu->clk_vi_1[2])
+				return 0;
+
+		} else {
+			cgu->clk_vi_1[1] = frequency;
+
+			if (frequency != cgu->clk_vi_1[2])
+				return 0;
+
+		}
+		break;
+
+	case CLK_DOMAIN_VI0VBI:
+		if (frequency == cgu->clk_vi_0[2]) {
+			return 0;
+
+		} else if (frequency == cgu->clk_vi_0[0]) {
+			cgu->clk_vi_0[2] = frequency; /* store */
+
+			if (frequency == cgu->clk_vi_0[1])
+				return 0;
+
+		} else {
+			cgu->clk_vi_0[2] = frequency; /* store */
+
+			if (frequency != cgu->clk_vi_0[1])
+				return 0;
+
+		}
+		domain = CLK_DOMAIN_VI0; /* change domain */
+		break;
+
+	case CLK_DOMAIN_VI1VBI:
+		if (frequency == cgu->clk_vi_1[2]) {
+			return 0;
+
+		} else if (frequency == cgu->clk_vi_1[0]) {
+			cgu->clk_vi_1[2] = frequency; /* store */
+
+			if (frequency == cgu->clk_vi_1[1])
+				return 0;
+
+		} else {
+			cgu->clk_vi_1[2] = frequency; /* store */
+
+			if (frequency != cgu->clk_vi_1[1])
+				return 0;
+
+		}
+		domain = CLK_DOMAIN_VI1; /* change domain */
+		break;
+	}
+
+	/* calculate divider */
+	do {
+		M = (N * PLL_FREQ) / frequency;
+		if (M == 0)
+			N++;
+
+	} while (M == 0);
+
+	/* calculate frequency */
+	cgu->clk_freq[domain] = (N * PLL_FREQ) / M;
+
+	N_tmp = N & 0xff;
+	M_tmp = M & 0xff;
+	sub = -N_tmp;
+	add = M_tmp - N_tmp;
+	lsb = 4; /* run */
+
+	if (((10 * N) / M) < 5)
+		lsb |= 1; /* stretch */
+
+	/* store new divider */
+	cgu->clk_curr_div[domain] = sub & 0xff;
+	cgu->clk_curr_div[domain] <<= 8;
+	cgu->clk_curr_div[domain] = add & 0xff;
+	cgu->clk_curr_div[domain] <<= 3;
+	cgu->clk_curr_div[domain]  |= lsb;
+
+	dprintk(SAA716x_DEBUG, 1, "Domain <0x%02x> Frequency <%d> Set Freq <%d> N=%d M=%d Divider <0x%02x>",
+		domain,
+		frequency,
+		cgu->clk_freq[domain],
+		N,
+		M,
+		cgu->clk_curr_div[domain]);
+
+	reset = 0;
+
+	/* Reset */
+	SAA716x_EPWR(CGU, cgu_clk[domain], cgu->clk_curr_div[domain] | 0x2);
+
+	/* Reset disable */
+	for (i = 0; i < 1000; i++) {
+		msleep(10);
+		reset = SAA716x_EPRD(CGU, cgu_clk[domain]);
+
+		if (cgu->clk_curr_div[domain == reset])
+			break;
 	}
 
-	return err;
+	if (cgu->clk_curr_div[domain] != reset)
+		SAA716x_EPWR(CGU, cgu_clk[domain], cgu->clk_curr_div[domain]);
+
+	return 0;
+}
+
+int saa716x_cgu_init(struct saa716x_dev *saa716x)
+{
+	struct saa716x_cgu *cgu = &saa716x->cgu;
+
+	cgu->clk_freq_min = PLL_FREQ / 255;
+	if (PLL_FREQ > (cgu->clk_freq_min * 255))
+		cgu->clk_freq_min++;
+
+	cgu->clk_freq_max = PLL_FREQ;
+
+	saa716x_getbootscript_setup(saa716x);
+	saa716x_set_clk_internal(saa716x, PORT_ALL);
+
+	return 0;
 }
+EXPORT_SYMBOL(saa716x_cgu_init);
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.h b/drivers/media/pci/saa716x/saa716x_cgu.h
new file mode 100644
index 0000000000000..05332b9d2d194
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_cgu.h
@@ -0,0 +1,59 @@
+#ifndef __SAA716x_CGU_H
+#define __SAA716x_CGU_H
+
+#define PLL_FREQ	2500
+
+#define SAA716x_CGU_CLKRUN(__reg)  do {						\
+	SAA716x_EPWR(CGU, CGU_PCR_##__reg, CGU_PCR_RUN); /* Run */		\
+	SAA716x_EPWR(CGU, CGU_SCR_##__reg, CGU_SCR_ENF1); /* Switch */		\
+	SAA716x_EPWR(CGU, CGU_FS1_##__reg, 0x00000000); /* PLL Clk */		\
+	SAA716x_EPWR(CGU, CGU_ESR_##__reg, CGU_ESR_FD_EN); /* Frac div */	\
+} while (0)
+
+enum saa716x_clk_domain {
+	CLK_DOMAIN_PSS		= 0,
+	CLK_DOMAIN_DCS		= 1,
+	CLK_DOMAIN_SPI		= 2,
+	CLK_DOMAIN_I2C		= 3,
+	CLK_DOMAIN_PHI		= 4,
+	CLK_DOMAIN_VI0		= 5,
+	CLK_DOMAIN_VI1		= 6,
+	CLK_DOMAIN_FGPI0	= 7,
+	CLK_DOMAIN_FGPI1	= 8,
+	CLK_DOMAIN_FGPI2	= 9,
+	CLK_DOMAIN_FGPI3	= 10,
+	CLK_DOMAIN_AI0		= 11,
+	CLK_DOMAIN_AI1		= 12,
+	CLK_DOMAIN_PHY		= 13,
+	CLK_DOMAIN_VI0VBI	= 14,
+	CLK_DOMAIN_VI1VBI	= 15
+};
+
+#define PORT_VI0_VIDEO		0
+#define PORT_VI0_VBI		2
+#define	PORT_VI1_VIDEO		3
+#define PORT_VI1_VBI		5
+#define PORT_FGPI0		6
+#define	PORT_FGPI1		7
+#define PORT_FGPI2		8
+#define PORT_FGPI3		9
+#define PORT_AI0		10
+#define PORT_AI1		11
+#define PORT_ALL		12
+
+#define CGU_CLKS	14
+
+struct saa716x_cgu {
+	u8	clk_int_port[12];
+	u32	clk_vi_0[3];
+	u32	clk_vi_1[3];
+	u32	clk_boot_div[CGU_CLKS];
+	u32	clk_curr_div[CGU_CLKS];
+	u32	clk_freq[CGU_CLKS];
+	u32	clk_freq_min;
+	u32	clk_freq_max;
+};
+
+extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_CGU_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 169b9279e372f..11809e4922fd4 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -12,6 +12,7 @@
 #include <linux/i2c.h>
 #include "saa716x_i2c.h"
 #include "saa716x_boot.h"
+#include "saa716x_cgu.h"
 
 #include "dvbdev.h"
 #include "dvb_demux.h"
@@ -144,6 +145,7 @@ struct saa716x_dev {
 	u32				i2c_rate; /* init time */
 
 	struct saa716x_adapter		saa716x_adap[2];
+	struct saa716x_cgu		cgu;
 
 	spinlock_t			gpio_lock;
 	/* DMA */
@@ -175,9 +177,6 @@ extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 
-/* CGU */
-extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
-
 /* FGPI */
 extern void saa716x_fgpiint_disable(struct saa716x_dev *saa716x);
 

From f132428b394144323565b604627f43e2f0fbb1a9 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:44:29 +0400
Subject: [PATCH 081/364] saa716x: Do not initialize the CGU twice

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 1 -
 1 file changed, 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 823a799caeded..d9ccf151bf974 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -193,7 +193,6 @@ int saa716x_core_boot(struct saa716x_dev *saa716x)
 	switch (config->boot_mode) {
 	case SAA716x_EXT_BOOT:
 		dprintk(SAA716x_DEBUG, 1, "Using External Boot from config");
-		saa716x_cgu_init(saa716x);
 		saa716x_ext_boot(saa716x);
 		break;
 	case SAA716x_INT_BOOT:

From 29a405aebbb674abf048a2984bb59d68c02d07c0 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:45:11 +0400
Subject: [PATCH 082/364] saa716x: Add more debug info, initialize handler
 count

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c |  4 ++--
 drivers/media/pci/saa716x/saa716x_msi.c | 12 ++++++++++--
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 9d485f532edcf..4ba857e1e1720 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -69,8 +69,8 @@ int saa716x_getbootscript_setup(struct saa716x_dev *saa716x)
 		else
 			cgu->clk_freq[i] = 0;
 
-		dprintk(SAA716x_DEBUG, 1, "Domain %d: %s <0x%x> --> N=%d, M=%d, freq=%d",
-			i, clk_desc[i], cgu->clk_boot_div[i], N, M, cgu->clk_freq[i]);
+		dprintk(SAA716x_DEBUG, 1, "Domain %d: %s <0x%02x> Divider: 0x%x --> N=%d, M=%d, freq=%d",
+			i, clk_desc[i], cgu_clk[i], cgu->clk_boot_div[i], N, M, cgu->clk_freq[i]);
 	}
 	/* store clock settings */
 	cgu->clk_vi_0[0] = cgu->clk_freq[CLK_DOMAIN_VI0];
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index bf2637b00287e..573e16c721215 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -119,6 +119,7 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	int i;
 
 	dprintk(SAA716x_DEBUG, 1, "Initializing MSI ..");
+	saa716x->handlers = 0;
 
 	/* get module id & version */
 	mid = SAA716x_EPRD(MSI, MSI_MODULE_ID);
@@ -166,10 +167,15 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	sta_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
 	sta_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 
-	if ((ena_l == 0) && (ena_h == 0) && (sta_l == 0) && (sta_h == 0))
+	if ((ena_l == 0) && (ena_h == 0) && (sta_l == 0) && (sta_h == 0)) {
+		dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x> sta_l <%02x> sta_h <%02x>",
+			ena_l, ena_h, sta_l, sta_h);
+
 		return 0;
-	else
+	} else {
+		dprintk(SAA716x_DEBUG, 1, "I/O error");
 		return -EIO;
+	}
 
 	return 0;
 }
@@ -177,6 +183,8 @@ EXPORT_SYMBOL_GPL(saa716x_msi_init);
 
 void saa716x_msiint_disable(struct saa716x_dev *saa716x)
 {
+	dprintk(SAA716x_DEBUG, 1, "Disabling Interrupts ...");
+
 	SAA716x_EPWR(MSI, MSI_INT_ENA_L, 0x0);
 	SAA716x_EPWR(MSI, MSI_INT_ENA_H, 0x0);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, 0xffffffff);

From 44ff6220c1755e76f1582b368bd34cbf59ffdd89 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:45:52 +0400
Subject: [PATCH 083/364] saa716x: Add/remove I2C MSI vectors

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 55 +++++++++++++++++++++++++
 1 file changed, 55 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 1b497363c1c4f..7032dfc8257b3 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -2,6 +2,7 @@
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
 #include "saa716x_i2c.h"
+#include "saa716x_msi.h"
 
 #define SAA716x_I2C_TXFAIL	(I2C_ERROR_IBE		| \
 				 I2C_ACK_INTER_MTNA	| \
@@ -31,6 +32,32 @@ static char* state[] = {
 	"STErr"
 };
 
+static irqreturn_t saa716x_i2c_irq(int irq, void *dev_id)
+{
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
+	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
+	}
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
+
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
+		SAA716x_EPRD(I2C_A, INT_STATUS),
+		SAA716x_EPRD(I2C_B, INT_STATUS),
+		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
+		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+
+	return IRQ_HANDLED;
+}
+
+
 static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
@@ -378,11 +405,30 @@ static const struct i2c_algorithm saa716x_algo = {
 
 #define I2C_HW_B_SAA716x		0x12
 
+struct saa716x_i2cvec {
+	u32			vector;
+	enum saa716x_edge	edge;
+	irqreturn_t (*handler)(int irq, void *dev_id);
+};
+
+static const struct saa716x_i2cvec i2c_vec[] = {
+	{
+		.vector		= I2CINT_0,
+		.edge		= SAA716x_EDGE_RISING,
+		.handler	= saa716x_i2c_irq
+	}, {
+		.vector 	= I2CINT_1,
+		.edge		= SAA716x_EDGE_RISING,
+		.handler	= saa716x_i2c_irq
+	}
+};
+
 int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev		= saa716x->pdev;
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *adapter	= NULL;
+
 	int i, err = 0;
 
 	u32 I2C_DEV[2];
@@ -537,6 +583,12 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 				goto exit;
 			}
 
+			saa716x_add_irqvector(saa716x,
+					      i2c_vec[i].vector,
+					      i2c_vec[i].edge,
+					      i2c_vec[i].handler,
+					      SAA716x_I2C_ADAPTER(i));
+
 			i2c->saa716x = saa716x;
 		}
 		i2c++;
@@ -561,6 +613,9 @@ int __devexit saa716x_i2c_exit(struct saa716x_dev *saa716x)
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
 		adapter = &i2c->i2c_adapter;
+
+		saa716x_remove_irqvector(saa716x, i2c_vec[i].vector);
+
 		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
 
 		err = i2c_del_adapter(adapter);

From 726def3ade8cc37e32aea303fa0705b84af382b0 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:46:30 +0400
Subject: [PATCH 084/364] saa716x: Add interrupt debugging

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 573e16c721215..ca471bf61a8bf 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -219,7 +219,7 @@ int saa716x_add_irqvector(struct saa716x_dev *saa716x,
 {
 	struct saa716x_msix_entry *msix_handler = NULL;
 
-	u32 config, mask_l, mask_h;
+	u32 config, mask_l, mask_h, ena_l, ena_h;
 
 	BUG_ON(saa716x == NULL);
 	BUG_ON(vector > SAA716x_MSI_VECTORS);
@@ -257,6 +257,10 @@ int saa716x_add_irqvector(struct saa716x_dev *saa716x,
 	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, mask_l);
 	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, mask_h);
 
+	ena_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
+	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
+	dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x>", ena_l, ena_h);
+
 	return 0;
 }
 

From b053953a6d24265010a8926a2cc7fcedccde14ac Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:47:06 +0400
Subject: [PATCH 085/364] saa716x: Return error on MSI enable failure

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 7e51a7a87f07c..bbccf627ad91e 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -118,7 +118,7 @@ static int saa716x_enable_msi(struct saa716x_dev *saa716x)
 		return err;
 	}
 
-	return 0;
+	return err;
 }
 
 static int saa716x_enable_msix(struct saa716x_dev *saa716x)

From 7530c266e6da44a5afeebad91c9396232816b22c Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:50:42 +0400
Subject: [PATCH 086/364] saa716x: Initialize FPGI pagetables

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 75 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_fgpi.h |  8 +++
 drivers/media/pci/saa716x/saa716x_msi.c  |  4 ++
 drivers/media/pci/saa716x/saa716x_reg.h  | 40 +++++++------
 4 files changed, 108 insertions(+), 19 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_fgpi.h

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index d7d268ae77bab..79896465679d8 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -1,5 +1,45 @@
 #include "saa716x_reg.h"
 #include "saa716x_priv.h"
+#include "saa716x_fgpi.h"
+#include "saa716x_dma.h"
+
+static const u32 mmu_pta_base[] = {
+	MMU_PTA_BASE0,
+	MMU_PTA_BASE1,
+	MMU_PTA_BASE2,
+	MMU_PTA_BASE3,
+	MMU_PTA_BASE4,
+	MMU_PTA_BASE5,
+	MMU_PTA_BASE6,
+	MMU_PTA_BASE7,
+	MMU_PTA_BASE8,
+	MMU_PTA_BASE9,
+	MMU_PTA_BASE10,
+	MMU_PTA_BASE11,
+	MMU_PTA_BASE12,
+	MMU_PTA_BASE13,
+	MMU_PTA_BASE14,
+	MMU_PTA_BASE15,
+};
+
+static const u32 mmu_dma_cfg[] = {
+	MMU_DMA_CONFIG0,
+	MMU_DMA_CONFIG1,
+	MMU_DMA_CONFIG2,
+	MMU_DMA_CONFIG3,
+	MMU_DMA_CONFIG4,
+	MMU_DMA_CONFIG5,
+	MMU_DMA_CONFIG6,
+	MMU_DMA_CONFIG7,
+	MMU_DMA_CONFIG8,
+	MMU_DMA_CONFIG9,
+	MMU_DMA_CONFIG10,
+	MMU_DMA_CONFIG11,
+	MMU_DMA_CONFIG12,
+	MMU_DMA_CONFIG13,
+	MMU_DMA_CONFIG14,
+	MMU_DMA_CONFIG15,
+};
 
 void saa716x_fgpiint_disable(struct saa716x_dev *saa716x)
 {
@@ -13,3 +53,38 @@ void saa716x_fgpiint_disable(struct saa716x_dev *saa716x)
 	SAA716x_EPWR(FGPI3, 0xfe8, 0x7f); /* clear status */
 }
 EXPORT_SYMBOL_GPL(saa716x_fgpiint_disable);
+
+static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
+{
+	struct saa716x_dev *saa716x = dmabuf->saa716x;
+
+	u32 dma_ch, config, i;
+
+	BUG_ON(dmabuf->mem_ptab_phys == NULL);
+
+	for (i = 0; i < FGPI_BUFFERS; i++)
+		BUG_ON(dmabuf[i].mem_ptab_phys);
+
+	dma_ch = mmu_pta_base[channel]; /* DMA x */
+	config = mmu_dma_cfg[channel]; /* DMACONFIGx */
+
+	SAA716x_EPWR(MMU, config, (FGPI_BUFFERS - 1));
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, dma_ch + MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+
+	return 0;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
new file mode 100644
index 0000000000000..7a803e8cc36c4
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -0,0 +1,8 @@
+#ifndef __SAA716x_FGPI_H
+#define __SAA716x_FGPI_H
+
+#define FGPI_BUFFERS		8
+#define PTA_LSB(__mem)		((u32 ) *(__mem))
+#define PTA_MSB(__mem)		((u32 ) (*(__mem) >> 32))
+
+#endif /* __SAA716x_FGPI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index ca471bf61a8bf..bdd2e1ff4d239 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -261,6 +261,10 @@ int saa716x_add_irqvector(struct saa716x_dev *saa716x,
 	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
 	dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x>", ena_l, ena_h);
 
+	/* debug */
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_SET_L, mask_l);
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_SET_H, mask_h);
+
 	return 0;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 5ffe9fcae88a0..db1a37124c3e0 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -467,25 +467,27 @@
 #define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
 #define MMU_PTA_BASE15			0x404 /* DMA 15 */
 
-#define MMU_PTA0_LSB			MMU_PTA_BASE + 0x00
-#define MMU_PTA0_MSB			MMU_PTA_BASE + 0x04
-#define MMU_PTA1_LSB			MMU_PTA_BASE + 0x08
-#define MMU_PTA1_MSB			MMU_PTA_BASE + 0x0c
-#define MMU_PTA2_LSB			MMU_PTA_BASE + 0x10
-#define MMU_PTA2_MSB			MMU_PTA_BASE + 0x14
-#define MMU_PTA3_LSB			MMU_PTA_BASE + 0x18
-#define MMU_PTA3_MSB			MMU_PTA_BASE + 0x1c
-#define MMU_PTA4_LSB			MMU_PTA_BASE + 0x20
-#define MMU_PTA4_MSB			MMU_PTA_BASE + 0x24
-#define MMU_PTA5_LSB			MMU_PTA_BASE + 0x28
-#define MMU_PTA5_MSB			MMU_PTA_BASE + 0x2c
-#define MMU_PTA6_LSB			MMU_PTA_BASE + 0x30
-#define MMU_PTA6_MSB			MMU_PTA_BASE + 0x34
-#define MMU_PTA7_LSB			MMU_PTA_BASE + 0x38
-#define MMU_PTA7_MSB			MMU_PTA_BASE + 0x3c
-
-
-
+#define MMU_PTA_BASE			0x044 /* DMA 0 */
+#define MMU_PTA_OFFSET			0x40
+
+#define PTA_BASE(__ch)			(MMU_PTA_BASE + (MMU_PTA_OFFSET * __ch))
+
+#define MMU_PTA0_LSB(__ch)		PTA_BASE(__ch) + 0x00
+#define MMU_PTA0_MSB(__ch)		PTA_BASE(__ch) + 0x04
+#define MMU_PTA1_LSB(__ch)		PTA_BASE(__ch) + 0x08
+#define MMU_PTA1_MSB(__ch)		PTA_BASE(__ch) + 0x0c
+#define MMU_PTA2_LSB(__ch)		PTA_BASE(__ch) + 0x10
+#define MMU_PTA2_MSB(__ch)		PTA_BASE(__ch) + 0x14
+#define MMU_PTA3_LSB(__ch)		PTA_BASE(__ch) + 0x18
+#define MMU_PTA3_MSB(__ch)		PTA_BASE(__ch) + 0x1c
+#define MMU_PTA4_LSB(__ch)		PTA_BASE(__ch) + 0x20
+#define MMU_PTA4_MSB(__ch)		PTA_BASE(__ch) + 0x24
+#define MMU_PTA5_LSB(__ch)		PTA_BASE(__ch) + 0x28
+#define MMU_PTA5_MSB(__ch)		PTA_BASE(__ch) + 0x2c
+#define MMU_PTA6_LSB(__ch)		PTA_BASE(__ch) + 0x30
+#define MMU_PTA6_MSB(__ch)		PTA_BASE(__ch) + 0x34
+#define MMU_PTA7_LSB(__ch)		PTA_BASE(__ch) + 0x38
+#define MMU_PTA7_MSB(__ch)		PTA_BASE(__ch) + 0x3c
 
 
 /* -------------- MSI Registers -------------- */

From 594bb48e4db56eb93f67b524ee8ecf8f4f5ff7b2 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:51:41 +0400
Subject: [PATCH 087/364] saa716x: Setup FGPI parameters

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 140 +++++++++++++++++++++--
 drivers/media/pci/saa716x/saa716x_fgpi.h |  83 ++++++++++++++
 drivers/media/pci/saa716x/saa716x_priv.h |   3 -
 drivers/media/pci/saa716x/saa716x_reg.h  |   5 +-
 4 files changed, 218 insertions(+), 13 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 79896465679d8..d14dd0fe57864 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -41,16 +41,30 @@ static const u32 mmu_dma_cfg[] = {
 	MMU_DMA_CONFIG15,
 };
 
-void saa716x_fgpiint_disable(struct saa716x_dev *saa716x)
+static const u32 fgpi_ch[] = {
+	FGPI0,
+	FGPI1,
+	FGPI2,
+	FGPI3
+};
+
+static const u32 bamdma_bufmode[] = {
+	BAM_FGPI0_DMA_BUF_MODE,
+	BAM_FGPI1_DMA_BUF_MODE,
+	BAM_FGPI2_DMA_BUF_MODE,
+	BAM_FGPI3_DMA_BUF_MODE
+};
+
+void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel)
 {
-	SAA716x_EPWR(FGPI0, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_EPWR(FGPI1, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_EPWR(FGPI2, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_EPWR(FGPI3, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_EPWR(FGPI0, 0xfe8, 0x7f); /* clear status */
-	SAA716x_EPWR(FGPI1, 0xfe8, 0x7f); /* clear status */
-	SAA716x_EPWR(FGPI2, 0xfe8, 0x7f); /* clear status */
-	SAA716x_EPWR(FGPI3, 0xfe8, 0x7f); /* clear status */
+	struct saa716x_dev *saa716x = dmabuf->saa716x;
+
+	u32 fgpi_port;
+
+	fgpi_port = fgpi_ch[channel];
+
+	SAA716x_EPWR(fgpi_port, 0xfe4, 0); /* disable FGPI IRQ */
+	SAA716x_EPWR(fgpi_port, 0xfe8, 0x7f); /* clear status */
 }
 EXPORT_SYMBOL_GPL(saa716x_fgpiint_disable);
 
@@ -88,3 +102,111 @@ static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
 
 	return 0;
 }
+
+u32 saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
+			   struct fgpi_stream_params *stream_params,
+			   int channel)
+{
+	struct saa716x_dev *saa716x = dmabuf->saa716x;
+
+	u32 fgpi_port, buf_mode, val, mid;
+	u32 D1_XY_END, offst_1, offst_2;
+	int i = 0;
+
+	fgpi_port = fgpi_ch[channel];
+	buf_mode = bamdma_bufmode[channel];
+
+	/* Reset FGPI block */
+	SAA716x_EPWR(fgpi_port, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+
+	/* Reset DMA channel */
+	SAA716x_EPWR(BAM, BAM_DMA_BUF_MODE(channel), 0x00000040);
+	saa716x_init_ptables(dmabuf, channel);
+
+
+	/* monitor BAM reset */
+	val = SAA716x_EPRD(BAM, buf_mode);
+	while (val && (i < 100)) {
+		msleep(30);
+		val = SAA716x_EPRD(BAM, buf_mode);
+		i++;
+	}
+
+	if (val) {
+		dprintk(SAA716x_ERROR, 1, "Error: BAM FGPI Reset failed!");
+		return -EIO;
+	}
+
+	/* set buffer count */
+	SAA716x_EPWR(BAM, buf_mode, FGPI_BUFFERS - 1);
+
+	/* initialize all available address offsets */
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_0(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_1(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_2(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_3(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_4(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_5(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_6(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_7(channel), 0x0);
+
+	/* get module ID */
+	mid = SAA716x_EPRD(fgpi_port, FGPI_MODULE_ID);
+	if (mid != 0x14b0100)
+		dprintk(SAA716x_ERROR, 1, "FGPI Id<%04x> is not supported", mid);
+
+	/* Initialize FGPI block */
+	SAA716x_EPWR(fgpi_port, FGPI_REC_SIZE, stream_params->samples * (stream_params->bits / 8));
+	SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch);
+
+	switch (stream_params->stream_type) {
+	case FGPI_TRANSPORT_STREAM:
+		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000080);
+		SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
+		break;
+
+	case FGPI_PROGRAM_STREAM:
+		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000088);
+		SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
+		break;
+
+	case FGPI_VIDEO_STREAM:
+		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000088);
+		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_START, 0x00000002);
+
+		if ((stream_params->stream_flags & FGPI_INTERLACED) &&
+		    (stream_params->stream_flags & FGPI_ODD_FIELD) &&
+		    (stream_params->stream_flags & FGPI_EVEN_FIELD)) {
+
+			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines / 2);
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, 768 * 4); /* interlaced stride of 2 lines */
+
+			D1_XY_END  = (stream_params->samples << 16);
+			D1_XY_END |= (stream_params->lines / 2) + 2;
+
+			if (stream_params->stream_flags & FGPI_PAL)
+				offst_1 = 768 * 2;
+			else
+				offst_2 = 768 * 2;
+
+		} else {
+			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, 768 * 2); /* stride of 1 line */
+
+			D1_XY_END  = stream_params->samples << 16;
+			D1_XY_END |= stream_params->lines + 2;
+		}
+
+		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_END, D1_XY_END);
+		break;
+
+	default:
+		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000080);
+		break;
+	}
+
+	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, ((channel + 6) << 21) + offst_1);
+	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, ((channel + 6) << 21) + offst_2);
+
+	return 0;
+}
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index 7a803e8cc36c4..ffd152653658a 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -5,4 +5,87 @@
 #define PTA_LSB(__mem)		((u32 ) *(__mem))
 #define PTA_MSB(__mem)		((u32 ) (*(__mem) >> 32))
 
+#define BAM_DMA_BUF_MODE_BASE		0x0d8
+#define BAM_DMA_BUF_MODE_OFFSET		0x24
+
+#define BAM_DMA_BUF_MODE(__ch)		(BAM_DMA_BUF_MODE_BASE + (BAM_DMA_BUF_MODE_OFFSET * __ch))
+
+#define BAM_FGPI_ADDR_OFFST_BASE	0x0dc
+#define BAM_FGPI_ADDR_OFFST_OFFSET	0x24
+
+#define BAM_FGPI_ADDR_OFFSET(__ch)	(BAM_FGPI_ADDR_OFFST_BASE + (BAM_FGPI_ADDR_OFFST_OFFSET * __ch))
+
+#define BAM_FGPI_ADDR_OFFST_0(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x00
+#define BAM_FGPI_ADDR_OFFST_1(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x04
+#define BAM_FGPI_ADDR_OFFST_2(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x08
+#define BAM_FGPI_ADDR_OFFST_3(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x0c
+#define BAM_FGPI_ADDR_OFFST_4(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x10
+#define BAM_FGPI_ADDR_OFFST_5(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x14
+#define BAM_FGPI_ADDR_OFFST_6(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x18
+#define BAM_FGPI_ADDR_OFFST_7(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x1c
+
+struct saa716x_dmabuf;
+
+/*
+ * Port supported streams
+ *
+ * FGPI_AUDIO_STREAM
+ * FGPI_VIDEO_STREAM
+ * FGPI_VBI_STREAM
+ * FGPI_TRANSPORT_STREAM
+ * FGPI_PROGRAM_STREAM
+ */
+enum fgpi_stream_type {
+	FGPI_AUDIO_STREAM	= 0x01,
+	FGPI_VIDEO_STREAM	= 0x02,
+	FGPI_VBI_STREAM		= 0x04,
+	FGPI_TRANSPORT_STREAM	= 0x08,
+	FGPI_PROGRAM_STREAM	= 0x10
+};
+
+/*
+ * Stream port flags
+ *
+ * FGPI_ODD_FIELD
+ * FGPI_EVEN_FIELD
+ * FGPI_HD_0
+ * FGPI_HD_1
+ * FGPI_PAL
+ * FGPI_NTSC
+ */
+enum fgpi_stream_flags {
+	FGPI_ODD_FIELD		= 0x0001,
+	FGPI_EVEN_FIELD		= 0x0002,
+	FGPI_INTERLACED		= 0x0004,
+	FGPI_HD0		= 0x0010,
+	FGPI_HD1		= 0x0020,
+	FGPI_PAL		= 0x0040,
+	FGPI_NTSC		= 0x0080,
+	FGPI_NO_SCALER		= 0x0100,
+};
+
+/*
+ * Stream port parameters
+ * bits: Bits per sample
+ * samples: samples perline
+ * lines: number of lines
+ * pitch: stream pitch in bytes
+ * offset: offset to first valid line
+ */
+struct fgpi_stream_params {
+	u32			bits;
+	u32			samples;
+	u32			lines;
+
+	s32			pitch;
+
+	u32			offset;
+	u32			page_tables;
+
+	enum fgpi_stream_flags	stream_flags;
+	enum fgpi_stream_type	stream_type;
+};
+
+extern void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel);
+
 #endif /* __SAA716x_FGPI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 11809e4922fd4..dbd385cad77cb 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -177,7 +177,4 @@ extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 
-/* FGPI */
-extern void saa716x_fgpiint_disable(struct saa716x_dev *saa716x);
-
 #endif /* __SAA716x_PRIV_H */
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index db1a37124c3e0..41672236d4eba 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -181,6 +181,8 @@
 #define FGPI_NUM_RECORD_2		0x01c
 #define FGPI_THRESHOLD_1		0x020
 #define FGPI_THRESHOLD_2		0x024
+#define FGPI_D1_XY_START		0x028
+#define FGPI_D1_XY_END			0x02c
 
 #define INT_STATUS			0xfe0
 #define FGPI_BUF1_ACTIVE		(0x00000001 <<  7)
@@ -225,7 +227,8 @@
 #define FGPI_INTERFACE			0xff4
 #define FGPI_DISABLE_BUS_IF		(0x00000001 <<  0)
 
-
+#define FGPI_MOD_ID_EXT			0xff8
+#define FGPI_MODULE_ID			0xffc
 
 
 /* -------------- AI Registers ---------------- */

From c0b7d170bf3edd35bf8765b4e04fb568f3d9c232 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:53:05 +0400
Subject: [PATCH 088/364] saa716x: Use a separate module to handle Full fledged
 cards

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig      |  45 ++++-
 drivers/media/pci/saa716x/Makefile     |   1 +
 drivers/media/pci/saa716x/saa716x_ff.c | 242 +++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_ff.h |   7 +
 4 files changed, 287 insertions(+), 8 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff.h

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 8b136a8059d61..5107ae824ae7a 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -1,24 +1,53 @@
 config DVB_SAA716X_CORE
-	tristate "SAA7160/2 PCI Express bridge based devices"
+	tristate "SAA7160/1/2 PCI Express bridge based devices"
 	depends on PCI && I2C
 
 	help
-	  Support for PCI cards based on the SAA7160/2 PCI Express bridge.
+	  Support for PCI cards based on the SAA7160/1/2 PCI Express bridge.
 
 	  Say Y if you own such a device and want to use it.
 
 config DVB_SAA716X_BUDGET
-	tristate "SAA7160/2 based Budget PCIe cards (DVB only)"
+	tristate "SAA7160/1/2 based Budget PCIe cards (DVB only)"
 	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
 
 	help
-	  Support for the SAA7160/2 based Budget PCIe DVB cards
-	  Currently supported devices are
+	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
+	  Currently supported devices are:
+
+	  * KNC1 Dual S2 (DVB-S, DVB-S/S2)
+	  * Twinhan/Azurewave VP-1028 (DVB-S)
+	  * Twinhan/Azurewave VP-3071 (DVB-T x2)
+	  * Twinhan/Azurewave VP-6002 (DVB-S)
+
+	  Say Y if you own such a device and want to use it.
 
 config DVB_SAA716X_HYBRID
-	tristate "SAA7160/2 based Hybrid PCIe cards (DVB + Analog)"
+	tristate "SAA7160/1/2 based Hybrid PCIe cards (DVB + Analog)"
+	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
+
+	help
+	  Support for the SAA7160/1/2 based Hybrid PCIe DVB cards
+	  Currently supported devices are:
+
+	  * Avermedia H-788 (DVB-T)
+	  * Avermedia HC-82 (DVB-T)
+	  * NXP Reference (Atlantis) (DVB-T x2)
+	  * NXP Reference (Nemo) (DVB-T)
+	  * Twinhan/Azurewave VP-6090 (DVB-S x2, DVB-T x2)
+
+	  Say Y if you own such a device and want to use it.
+
+config DVB_SAA716X_FF
+	tristate "SAA7160/1/2 based Full Fledged PCIe cards"
 	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
 
 	help
-	  Support for the SAA7160/2 based Hybrid PCIe DVB cards
-	  Currently supported devices are
+	  Support for the SAA7160/1/2 based  Full fledged PCIe DVB cards
+	  These cards do feature a hardware MPEG decoder and other
+	  peripherals. Also known as Premium cards.
+	  Currently supported devices are:
+
+	  * Technotrend S2 6400 Dual S2 HD (DVB-S/S2 x2)
+
+	  Say Y if you own such a device and want to use it.
\ No newline at end of file
diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index ee95b13f4aaaa..fab6663ef5491 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -15,5 +15,6 @@ saa716x_core-objs		 := saa716x_pci.o	\
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
+obj-$(CONFIG_DVB_SAA716X_FF)	  += saa716x_ff.o
 
 EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
new file mode 100644
index 0000000000000..52c0bb5b0168e
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -0,0 +1,242 @@
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/mutex.h>
+
+#include <asm/io.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+#include <linux/kmod.h>
+#include <linux/vmalloc.h>
+#include <linux/init.h>
+#include <linux/device.h>
+
+#include <linux/i2c.h>
+#include "saa716x_priv.h"
+#include "saa716x_vip.h"
+#include "saa716x_aip.h"
+#include "saa716x_msi.h"
+#include "saa716x_reg.h"
+#include "saa716x_ff.h"
+#include "saa716x_adap.h"
+#include "saa716x_gpio.h"
+
+unsigned int verbose;
+module_param(verbose, int, 0644);
+MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
+
+unsigned int int_type;
+module_param(int_type, int, 0644);
+MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
+
+#define DRIVER_NAME	"SAA716x FF"
+
+static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+{
+	struct saa716x_dev *saa716x;
+	int err = 0;
+
+	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	if (saa716x == NULL) {
+		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
+		err = -ENOMEM;
+		goto fail0;
+	}
+
+	saa716x->verbose	= verbose;
+	saa716x->int_type	= int_type;
+	saa716x->pdev		= pdev;
+	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
+
+	err = saa716x_pci_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
+		goto fail1;
+	}
+
+	err = saa716x_cgu_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		goto fail1;
+	}
+
+	err = saa716x_core_boot(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
+		goto fail2;
+	}
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
+
+	err = saa716x_msi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
+		goto fail2;
+	}
+
+	err = saa716x_jetpack_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
+		goto fail1;
+	}
+
+	err = saa716x_i2c_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		goto fail3;
+	}
+
+	err = saa716x_dvb_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		goto fail4;
+	}
+
+	return 0;
+
+fail4:
+	saa716x_dvb_exit(saa716x);
+fail3:
+	saa716x_i2c_exit(saa716x);
+fail2:
+	saa716x_pci_exit(saa716x);
+fail1:
+	kfree(saa716x);
+fail0:
+	return err;
+}
+
+static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
+{
+	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
+
+	saa716x_dvb_exit(saa716x);
+	saa716x_i2c_exit(saa716x);
+	saa716x_pci_exit(saa716x);
+	kfree(saa716x);
+}
+
+static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
+{
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
+	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
+	}
+
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
+		SAA716x_EPRD(VI0, INT_STATUS),
+		SAA716x_EPRD(VI1, INT_STATUS),
+		SAA716x_EPRD(VI0, INT_ENABLE),
+		SAA716x_EPRD(VI1, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
+		SAA716x_EPRD(FGPI0, INT_STATUS),
+		SAA716x_EPRD(FGPI1, INT_STATUS),
+		SAA716x_EPRD(FGPI0, INT_ENABLE),
+		SAA716x_EPRD(FGPI0, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
+		SAA716x_EPRD(FGPI2, INT_STATUS),
+		SAA716x_EPRD(FGPI3, INT_STATUS),
+		SAA716x_EPRD(FGPI2, INT_ENABLE),
+		SAA716x_EPRD(FGPI3, INT_ENABLE));
+
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
+		SAA716x_EPRD(AI0, AI_STATUS),
+		SAA716x_EPRD(AI1, AI_STATUS),
+		SAA716x_EPRD(AI0, AI_CTL),
+		SAA716x_EPRD(AI1, AI_CTL));
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
+
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
+		SAA716x_EPRD(I2C_A, INT_STATUS),
+		SAA716x_EPRD(I2C_B, INT_STATUS),
+		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
+		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
+		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
+		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
+
+	return IRQ_HANDLED;
+}
+
+static int load_config_s26400(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+
+	return ret;
+}
+
+#define SAA716x_MODEL_S2_6400_DUAL	"Technotrend S2 6400 Dual S2 Premium"
+#define SAA716x_DEV_S2_6400_DUAL	"2x DVB-S/S2 + Hardware decode"
+
+static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+
+	return -ENODEV;
+}
+
+static struct saa716x_config saa716x_s26400_config = {
+	.model_name		= SAA716x_MODEL_S2_6400_DUAL,
+	.dev_type		= SAA716x_DEV_S2_6400_DUAL,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_s26400,
+	.adapters		= 2,
+	.frontend_attach	= saa716x_s26400_frontend_attach,
+	.irq_handler		= saa716x_ff_pci_irq,
+
+	.adap_config		= {
+		{
+			/* Adapter 0 */
+		},{
+			/* Adapter 1 */
+		}
+	}
+};
+
+
+static struct pci_device_id saa716x_ff_pci_table[] = {
+
+	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM, SAA7160, &saa716x_s26400_config), /* S2 6400 Dual */
+	{
+		.vendor = 0,
+	}
+};
+MODULE_DEVICE_TABLE(pci, saa716x_ff_pci_table);
+
+static struct pci_driver saa716x_ff_pci_driver = {
+	.name			= DRIVER_NAME,
+	.id_table		= saa716x_ff_pci_table,
+	.probe			= saa716x_ff_pci_probe,
+	.remove			= saa716x_ff_pci_remove,
+};
+
+static int __devinit saa716x_ff_init(void)
+{
+	return pci_register_driver(&saa716x_ff_pci_driver);
+}
+
+static void __devexit saa716x_ff_exit(void)
+{
+	return pci_unregister_driver(&saa716x_ff_pci_driver);
+}
+
+module_init(saa716x_ff_init);
+module_exit(saa716x_ff_exit);
+
+MODULE_DESCRIPTION("SAA716x FF driver");
+MODULE_AUTHOR("Manu Abraham");
+MODULE_LICENSE("GPL");
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
new file mode 100644
index 0000000000000..c01c0308960eb
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_FF_H
+#define __SAA716x_FF_H
+
+#define TECHNOTREND			0x13c2
+#define S2_6400_DUAL_S2_PREMIUM		0x3009
+
+#endif /* __SAA716x_FF_H */

From 3cd081620643009a7fc9a8a0efccf638850879af Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:54:03 +0400
Subject: [PATCH 089/364] saa716x: NULL terminate PCI ID list

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 4 +---
 drivers/media/pci/saa716x/saa716x_ff.c     | 4 +---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 4 +---
 3 files changed, 3 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9e482d840dd40..c71b81390c224 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -356,9 +356,7 @@ static struct pci_device_id saa716x_budget_pci_table[] = {
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
 	MAKE_ENTRY(KNC_One,		 KNC_Dual_S2,	  SAA7160, &saa716x_knc1_duals2_config),
-	{
-		.vendor = 0,
-	}
+	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_budget_pci_table);
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 52c0bb5b0168e..7edf97975014d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -211,9 +211,7 @@ static struct saa716x_config saa716x_s26400_config = {
 static struct pci_device_id saa716x_ff_pci_table[] = {
 
 	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM, SAA7160, &saa716x_s26400_config), /* S2 6400 Dual */
-	{
-		.vendor = 0,
-	}
+	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_ff_pci_table);
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 9d7bd7391998b..1e63a1c07a01e 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -391,9 +391,7 @@ static struct pci_device_id saa716x_hybrid_pci_table[] = {
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_H788, SAA7160, &saa716x_averh788_config),
-	{
-		.vendor = 0,
-	}
+	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
 

From 4489a04176517acfe68cd54e252fe4fff79c2d2d Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:54:41 +0400
Subject: [PATCH 090/364] saa716x: Read the mask bits instead

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 4 ++--
 drivers/media/pci/saa716x/saa716x_ff.c     | 4 ++--
 drivers/media/pci/saa716x/saa716x_hybrid.c | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index c71b81390c224..56a867d30f4f7 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -202,8 +202,8 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
-		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+		SAA716x_EPRD(I2C_A, INT_ENABLE),
+		SAA716x_EPRD(I2C_B, INT_ENABLE));
 
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 7edf97975014d..709d43c773dfb 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -160,8 +160,8 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
-		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+		SAA716x_EPRD(I2C_A, INT_ENABLE),
+		SAA716x_EPRD(I2C_B, INT_ENABLE));
 
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 1e63a1c07a01e..16c30f2d57dae 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -164,8 +164,8 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
-		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
+		SAA716x_EPRD(I2C_A, INT_ENABLE),
+		SAA716x_EPRD(I2C_B, INT_ENABLE));
 
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),

From fae61d9c6685b45c4d73703a4adf9eb128661748 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:55:25 +0400
Subject: [PATCH 091/364] saa716x: Reduce a bit of noise in the handler debug
 mode

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 14 +++++++-------
 drivers/media/pci/saa716x/saa716x_hybrid.c | 14 +++++++-------
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 56a867d30f4f7..3591cecfcebed 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -169,43 +169,43 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 		return IRQ_NONE;
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(VI0, INT_STATUS),
 		SAA716x_EPRD(VI1, INT_STATUS),
 		SAA716x_EPRD(VI0, INT_ENABLE),
 		SAA716x_EPRD(VI1, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(FGPI0, INT_STATUS),
 		SAA716x_EPRD(FGPI1, INT_STATUS),
 		SAA716x_EPRD(FGPI0, INT_ENABLE),
 		SAA716x_EPRD(FGPI0, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
 		SAA716x_EPRD(FGPI2, INT_STATUS),
 		SAA716x_EPRD(FGPI3, INT_STATUS),
 		SAA716x_EPRD(FGPI2, INT_ENABLE),
 		SAA716x_EPRD(FGPI3, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(AI0, AI_STATUS),
 		SAA716x_EPRD(AI1, AI_STATUS),
 		SAA716x_EPRD(AI0, AI_CTL),
 		SAA716x_EPRD(AI1, AI_CTL));
 
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
 		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
 		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
 		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
 		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
 
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
 		SAA716x_EPRD(I2C_A, INT_ENABLE),
 		SAA716x_EPRD(I2C_B, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 16c30f2d57dae..d8e2084e20663 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -131,43 +131,43 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 		return IRQ_NONE;
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(VI0, INT_STATUS),
 		SAA716x_EPRD(VI1, INT_STATUS),
 		SAA716x_EPRD(VI0, INT_ENABLE),
 		SAA716x_EPRD(VI1, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(FGPI0, INT_STATUS),
 		SAA716x_EPRD(FGPI1, INT_STATUS),
 		SAA716x_EPRD(FGPI0, INT_ENABLE),
 		SAA716x_EPRD(FGPI0, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
 		SAA716x_EPRD(FGPI2, INT_STATUS),
 		SAA716x_EPRD(FGPI3, INT_STATUS),
 		SAA716x_EPRD(FGPI2, INT_ENABLE),
 		SAA716x_EPRD(FGPI3, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(AI0, AI_STATUS),
 		SAA716x_EPRD(AI1, AI_STATUS),
 		SAA716x_EPRD(AI0, AI_CTL),
 		SAA716x_EPRD(AI1, AI_CTL));
 
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
 		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
 		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
 		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
 		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
 
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
 		SAA716x_EPRD(I2C_A, INT_ENABLE),
 		SAA716x_EPRD(I2C_B, INT_ENABLE));
 
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 

From 347347a52af44c9ae6154fcf8be214b2160f932b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:56:17 +0400
Subject: [PATCH 092/364] saa716x: Sleep a little while before enabling
 interrupts again

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 7032dfc8257b3..18c658631ada5 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -551,6 +551,8 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			* Master Transaction Data Request
 			* (0xc7)
 			*/
+			msleep(5);
+
 			SAA716x_EPWR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
 							I2C_ERROR_IBE			| \
 							I2C_ENABLE_MTNA			| \

From 5c301d3b5b74d09096273583e89c4adf7bc0a487 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:57:09 +0400
Subject: [PATCH 093/364] saa716x: Use individual handlers

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c |  30 +++-
 drivers/media/pci/saa716x/saa716x_ff.c     |   2 -
 drivers/media/pci/saa716x/saa716x_hybrid.c |  76 ++++++++--
 drivers/media/pci/saa716x/saa716x_i2c.c    |  69 ++++++++-
 drivers/media/pci/saa716x/saa716x_i2c.h    |   1 +
 drivers/media/pci/saa716x/saa716x_msi.c    | 167 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_msi.h    |   3 +
 drivers/media/pci/saa716x/saa716x_pci.c    |  84 -----------
 drivers/media/pci/saa716x/saa716x_priv.h   |   1 +
 9 files changed, 325 insertions(+), 108 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 3591cecfcebed..d3184daad582f 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -161,14 +161,33 @@ static void __devexit saa716x_budget_pci_remove(struct pci_dev *pdev)
 static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
-	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+
+	u32 stat_h, stat_l, mask_h, mask_l;
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
 		return IRQ_NONE;
 	}
 
+	stat_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
+	stat_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
+	mask_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
+	mask_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+		stat_l, stat_h, mask_l, mask_h);
+
+	if (!((stat_l & mask_l) || (stat_h & mask_h)))
+		return IRQ_NONE;
+
+	if (stat_l)
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, stat_l);
+
+	if (stat_h)
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
+
+	saa716x_msi_event(saa716x, stat_l, stat_h);
+#if 0
 	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(VI0, INT_STATUS),
 		SAA716x_EPRD(VI1, INT_STATUS),
@@ -193,12 +212,6 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 		SAA716x_EPRD(AI0, AI_CTL),
 		SAA716x_EPRD(AI1, AI_CTL));
 
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
-
 	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
@@ -208,6 +221,7 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
+#endif
 
 	return IRQ_HANDLED;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 709d43c773dfb..b8b850f380ac0 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -119,8 +119,6 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
-	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index d8e2084e20663..36b6a14c3c5b7 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -17,6 +17,7 @@
 #include "saa716x_reg.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
+#include "saa716x_msi.h"
 #include "saa716x_hybrid.h"
 
 #include "zl10353.h"
@@ -31,6 +32,45 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x Hybrid"
 
+static int read_eeprom_byte(struct saa716x_dev *saa716x, u8 *data, u8 len)
+{
+	struct saa716x_i2c *i2c = saa716x->i2c;
+	struct i2c_adapter *adapter = &i2c[1].i2c_adapter;
+
+	int err;
+
+	struct i2c_msg msg[] = {
+		{.addr = 0x50, .flags = 0,		.buf = data, .len = 1},
+		{.addr = 0x50, .flags = I2C_M_RD,	.buf = data, .len = len},
+	};
+
+	err = i2c_transfer(adapter, msg, 2);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "<err=%d, d0=0x%02x, d1=0x%02x>", err, data[0], data[1]);
+		return err;
+	}
+
+	return 0;
+}
+
+static int read_eeprom(struct saa716x_dev *saa716x)
+{
+	u8 buf[32];
+	int i, err = 0;
+
+	err = read_eeprom_byte(saa716x, buf, 32);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
+		return err;
+	}
+	dprintk(SAA716x_DEBUG, 0, "EEPROM=[");
+	for (i = 0; i < 32; i++)
+		dprintk(SAA716x_DEBUG, 0, " %02x", buf[i]);
+
+	dprintk(SAA716x_DEBUG, 0, " ]\n");
+	return 0;
+}
+
 static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
@@ -95,6 +135,10 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail4;
 	}
 
+	msleep(500);
+	/* Experiments */
+	read_eeprom(saa716x);
+
 	return 0;
 
 fail4:
@@ -123,14 +167,33 @@ static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
 static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
-	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
+
+	u32 stat_h, stat_l, mask_h, mask_l;
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
 		return IRQ_NONE;
 	}
 
+	stat_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
+	stat_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
+	mask_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
+	mask_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+		stat_l, stat_h, mask_l, mask_h);
+
+	if (!((stat_l & mask_l) || (stat_h & mask_h)))
+		return IRQ_NONE;
+
+	if (stat_l)
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, stat_l);
+
+	if (stat_h)
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
+
+	saa716x_msi_event(saa716x, stat_l, stat_h);
+#if 0
 	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(VI0, INT_STATUS),
 		SAA716x_EPRD(VI1, INT_STATUS),
@@ -155,12 +218,6 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 		SAA716x_EPRD(AI0, AI_CTL),
 		SAA716x_EPRD(AI1, AI_CTL));
 
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
-
 	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
 		SAA716x_EPRD(I2C_A, INT_STATUS),
 		SAA716x_EPRD(I2C_B, INT_STATUS),
@@ -170,6 +227,7 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
+#endif
 
 	return IRQ_HANDLED;
 }
@@ -299,7 +357,7 @@ static struct zl10353_config saa716x_averhc82_zl10353_config = {
 static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[count];
+//	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 18c658631ada5..3ee52f16fb224 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -14,7 +14,7 @@
 #define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
 				 I2C_RECEIVE_CLEAR)
 
-static char* state[] = {
+static const char* state[] = {
 	"Idle",
 	"DoneStop",
 	"Busy",
@@ -32,11 +32,69 @@ static char* state[] = {
 	"STErr"
 };
 
+int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus)
+{
+	u32 stat, mask;
+	u32 *I2C_DEV;
+
+	BUG_ON(saa716x == NULL);
+	I2C_DEV = saa716x->I2C_DEV;
+
+	stat = SAA716x_EPRD(I2C_DEV[bus], INT_STATUS);
+	mask = SAA716x_EPRD(I2C_DEV[bus], INT_ENABLE);
+	dprintk(SAA716x_DEBUG, 0, "Bus(%d) I2C event: Status=<%s> --> Stat=<%02x> Mask=<%02x>",
+		bus, state[stat], stat, mask);
+
+	if (!(stat & mask))
+		return -1;
+
+	SAA716x_EPWR(I2C_DEV[bus], INT_CLR_STATUS, stat);
+
+	if (stat & I2C_INTERRUPT_STFNF)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_STFNF> ");
+
+	if (stat & I2C_INTERRUPT_MTFNF)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTFNF> ");
+
+	if (stat & I2C_INTERRUPT_RFDA)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_RFDA> ");
+
+	if (stat & I2C_INTERRUPTE_RFF)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_RFF> ");
+
+	if (stat & I2C_SLAVE_INTERRUPT_STDR)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_STDR> ");
+
+	if (stat & I2C_MASTER_INTERRUPT_MTDR)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTDR> ");
+
+	if (stat & I2C_ERROR_IBE)
+		dprintk(SAA716x_DEBUG, 0, "<ERROR_IBE> ");
+
+	if (stat & I2C_MODE_CHANGE_INTER_MSMC)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MSMC> ");
+
+	if (stat & I2C_SLAVE_RECEIVE_INTER_SRSD)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_SRSD> ");
+
+	if (stat & I2C_SLAVE_TRANSMIT_INTER_STSD)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_STSD> ");
+
+	if (stat & I2C_ACK_INTER_MTNA)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTNA> ");
+
+	if (stat & I2C_FAILURE_INTER_MAF)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MAF> ");
+
+	if (stat & I2C_INTERRUPT_MTD)
+		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTD> ");
+
+	return 0;
+}
+
 static irqreturn_t saa716x_i2c_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
-	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
@@ -430,9 +488,10 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	struct i2c_adapter *adapter	= NULL;
 
 	int i, err = 0;
-
-	u32 I2C_DEV[2];
 	u32 reg;
+	u32 *I2C_DEV;
+
+	I2C_DEV = saa716x->I2C_DEV;
 
 	if (saa716x->revision > 2) {
 		I2C_DEV[0] = I2C_A;
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index ded26976f5b9f..317dfae03df93 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -29,5 +29,6 @@ struct saa716x_i2c {
 extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
 extern int saa716x_i2c_exit(struct saa716x_dev *saa716x);
 extern void saa716x_i2cint_disable(struct saa716x_dev *saa716x);
+extern int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus);
 
 #endif /* __SAA716x_I2C_H */
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index bdd2e1ff4d239..2ced5e6174c6e 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -113,6 +113,173 @@ static u32 MSI_CONFIG_REG[51] = {
 	MSI_CONFIG50
 };
 
+int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h)
+{
+	dprintk(SAA716x_DEBUG, 0, "%s: MSI event ", __func__);
+
+	if (stat_l & MSI_INT_TAGACK_VI0_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[0]);
+
+	if (stat_l & MSI_INT_TAGACK_VI0_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[1]);
+
+	if (stat_l & MSI_INT_TAGACK_VI0_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[2]);
+
+	if (stat_l & MSI_INT_TAGACK_VI1_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[3]);
+
+	if (stat_l & MSI_INT_TAGACK_VI1_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[4]);
+
+	if (stat_l & MSI_INT_TAGACK_VI1_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[5]);
+
+	if (stat_l & MSI_INT_TAGACK_FGPI_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[6]);
+
+	if (stat_l & MSI_INT_TAGACK_FGPI_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[7]);
+
+	if (stat_l & MSI_INT_TAGACK_FGPI_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[8]);
+
+	if (stat_l & MSI_INT_TAGACK_FGPI_3)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[9]);
+
+	if (stat_l & MSI_INT_TAGACK_AI_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[10]);
+
+	if (stat_l & MSI_INT_TAGACK_AI_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[11]);
+
+	if (stat_l & MSI_INT_OVRFLW_VI0_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[12]);
+
+	if (stat_l & MSI_INT_OVRFLW_VI0_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[13]);
+
+	if (stat_l & MSI_INT_OVRFLW_VI0_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[14]);
+
+	if (stat_l & MSI_INT_OVRFLW_VI1_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[15]);
+
+	if (stat_l & MSI_INT_OVRFLW_VI1_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[16]);
+
+	if (stat_l & MSI_INT_OVRFLW_VI1_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[17]);
+
+	if (stat_l & MSI_INT_OVRFLW_FGPI_O)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[18]);
+
+	if (stat_l & MSI_INT_OVRFLW_FGPI_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[19]);
+
+	if (stat_l & MSI_INT_OVRFLW_FGPI_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[20]);
+
+	if (stat_l & MSI_INT_OVRFLW_FGPI_3)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[21]);
+
+	if (stat_l & MSI_INT_OVRFLW_AI_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[22]);
+
+	if (stat_l & MSI_INT_OVRFLW_AI_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[23]);
+
+	if (stat_l & MSI_INT_AVINT_VI0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[24]);
+
+	if (stat_l & MSI_INT_AVINT_VI1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[25]);
+
+	if (stat_l & MSI_INT_AVINT_FGPI_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[26]);
+
+	if (stat_l & MSI_INT_AVINT_FGPI_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[27]);
+
+	if (stat_l & MSI_INT_AVINT_FGPI_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[28]);
+
+	if (stat_l & MSI_INT_AVINT_FGPI_3)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[29]);
+
+	if (stat_l & MSI_INT_AVINT_AI_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[30]);
+
+	if (stat_l & MSI_INT_AVINT_AI_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[31]);
+
+	if (stat_h & MSI_INT_UNMAPD_TC_INT)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[32]);
+
+	if (stat_h & MSI_INT_EXTINT_0)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[33]);
+
+	if (stat_h & MSI_INT_EXTINT_1)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[34]);
+
+	if (stat_h & MSI_INT_EXTINT_2)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[35]);
+
+	if (stat_h & MSI_INT_EXTINT_3)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[36]);
+
+	if (stat_h & MSI_INT_EXTINT_4)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[37]);
+
+	if (stat_h & MSI_INT_EXTINT_5)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[38]);
+
+	if (stat_h & MSI_INT_EXTINT_6)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[39]);
+
+	if (stat_h & MSI_INT_EXTINT_7)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[40]);
+
+	if (stat_h & MSI_INT_EXTINT_8)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[41]);
+
+	if (stat_h & MSI_INT_EXTINT_9)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[42]);
+
+	if (stat_h & MSI_INT_EXTINT_10)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[43]);
+
+	if (stat_h & MSI_INT_EXTINT_11)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[44]);
+
+	if (stat_h & MSI_INT_EXTINT_12)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[45]);
+
+	if (stat_h & MSI_INT_EXTINT_13)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[46]);
+
+	if (stat_h & MSI_INT_EXTINT_14)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[47]);
+
+	if (stat_h & MSI_INT_EXTINT_15)
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[48]);
+
+	if (stat_h & MSI_INT_I2CINT_0) {
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[49]);
+		saa716x_i2c_irqevent(saa716x, 0);
+	}
+
+	if (stat_h & MSI_INT_I2CINT_1) {
+		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[50]);
+		saa716x_i2c_irqevent(saa716x, 1);
+	}
+
+	dprintk(SAA716x_DEBUG, 0, "\n");
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_msi_event);
+
 int saa716x_msi_init(struct saa716x_dev *saa716x)
 {
 	u32 ena_l, ena_h, sta_l, sta_h, mid;
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
index c459f2ae080b8..5d0206dd64878 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.h
+++ b/drivers/media/pci/saa716x/saa716x_msi.h
@@ -69,6 +69,9 @@ enum saa716x_edge {
 	SAA716x_EDGE_ANY	= 3
 };
 
+
+extern int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h);
+
 extern int saa716x_msi_init(struct saa716x_dev *saa716x);
 extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index bbccf627ad91e..9bf4f407cb6c8 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -18,95 +18,11 @@
 
 #define DRIVER_NAME				"SAA716x Core"
 
-
-static const char *i2c_labels[] = {
-	"INTERRUPT_MTD"
-	"FAILURE_INTER_MAF",
-	"ACK_INTER_MTNA",
-	"SLAVE_TRANSMIT_INTER_STSD",
-	"SLAVE_RECEIVE_INTER_SRSD",
-	"MODE_CHANGE_INTER_MSMC",
-	"I2C_ERROR_IBE",
-	"MASTER_INTERRUPT_MTDR",
-	"SLAVE_INTERRUPT_STDR",
-	"INTERRUPTE_RFF",
-	"INTERRUPT_RFDA",
-	"INTERRUPT_MTFNF",
-	"INTERRUPT_STFNF",
-};
-
 static irqreturn_t saa716x_msi_handler(int irq, void *dev_id)
 {
 	return IRQ_HANDLED;
 }
 
-#if 0
-static irqreturn_t saa716x_i2c_handler(int irq, void *dev_id)
-{
-	return IRQ_HANDLED;
-}
-
-static struct saa716x_msix_entry saa716x_msix_handler[] = {
-	{ .desc = "SAA716x_I2C_HANDLER", .handler = saa716x_i2c_handler }
-};
-#endif
-
-#if 0
-static irqreturn_t saa716x_pci_irq(int irq, void *dev_id)
-{
-	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	struct saa716x_i2c *i2c_a	= &saa716x->i2c[0];
-	struct saa716x_i2c *i2c_b	= &saa716x->i2c[1];
-
-	if (unlikely(saa716x == NULL)) {
-		printk("%s: saa716x=NULL", __func__);
-		return IRQ_NONE;
-	}
-
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
-		SAA716x_EPRD(VI0, INT_STATUS),
-		SAA716x_EPRD(VI1, INT_STATUS),
-		SAA716x_EPRD(VI0, INT_ENABLE),
-		SAA716x_EPRD(VI1, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=0x%02x 1=0x%02x, CTL 1=0x%02x 2=0x%02x",
-		SAA716x_EPRD(FGPI0, INT_STATUS),
-		SAA716x_EPRD(FGPI1, INT_STATUS),
-		SAA716x_EPRD(FGPI0, INT_ENABLE),
-		SAA716x_EPRD(FGPI0, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=0x%02x 3=0x%02x, CTL 2=0x%02x 3=0x%02x",
-		SAA716x_EPRD(FGPI2, INT_STATUS),
-		SAA716x_EPRD(FGPI3, INT_STATUS),
-		SAA716x_EPRD(FGPI2, INT_ENABLE),
-		SAA716x_EPRD(FGPI3, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
-		SAA716x_EPRD(AI0, AI_STATUS),
-		SAA716x_EPRD(AI1, AI_STATUS),
-		SAA716x_EPRD(AI0, AI_CTL),
-		SAA716x_EPRD(AI1, AI_CTL));
-
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=0x%02x H=0x%02x, CTL L=0x%02x H=0x%02x",
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
-
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=0x%02x 1=0x%02x, CTL 0=0x%02x 1=0x%02x",
-		SAA716x_EPRD(I2C_A, INT_STATUS),
-		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
-		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
-
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=0x%02x, CTL=0x%02x",
-		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
-		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
-
-	return IRQ_HANDLED;
-}
-#endif
-
 static int saa716x_enable_msi(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index dbd385cad77cb..5e1a886cae58a 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -143,6 +143,7 @@ struct saa716x_dev {
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
 	u32				i2c_rate; /* init time */
+	u32				I2C_DEV[2];
 
 	struct saa716x_adapter		saa716x_adap[2];
 	struct saa716x_cgu		cgu;

From 82de00277a153035606fcf65d9ce163f74c5261b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:57:59 +0400
Subject: [PATCH 094/364] saa716x: Transmit D is programmed, not S data

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 3ee52f16fb224..e680a0a3cd0cb 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -9,7 +9,7 @@
 				 I2C_FAILURE_INTER_MAF)
 
 #define SAA716x_I2C_TXBUSY	(I2C_TRANSMIT		| \
-				 I2C_TRANSMIT_S_PROG)
+				 I2C_TRANSMIT_PROG)
 
 #define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
 				 I2C_RECEIVE_CLEAR)

From da2a4d6753e59500545821e615db2c5a11c8a445 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:58:32 +0400
Subject: [PATCH 095/364] saa716x: Print return values

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 9bf4f407cb6c8..81f551f565484 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -30,7 +30,7 @@ static int saa716x_enable_msi(struct saa716x_dev *saa716x)
 
 	err = pci_enable_msi(pdev);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "MSI enable failed");
+		dprintk(SAA716x_ERROR, 1, "MSI enable failed <%d>", err);
 		return err;
 	}
 
@@ -47,9 +47,9 @@ static int saa716x_enable_msix(struct saa716x_dev *saa716x)
 
 	ret = pci_enable_msix(pdev, saa716x->msix_entries, SAA716x_MSI_MAX_VECTORS);
 	if (ret < 0)
-		dprintk(SAA716x_ERROR, 1, "MSI-X request failed");
+		dprintk(SAA716x_ERROR, 1, "MSI-X request failed <%d>", ret);
 	if (ret > 0)
-		dprintk(SAA716x_ERROR, 1, "Request exceeds available IRQ's");
+		dprintk(SAA716x_ERROR, 1, "Request exceeds available IRQ's <%d>", ret);
 
 	return ret;
 }
@@ -97,7 +97,7 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 
 			dprintk(SAA716x_ERROR, 1, "%s @ 0x%p", saa716x->saa716x_msix_handler[i].desc, saa716x->saa716x_msix_handler[i].handler);
 			if (ret) {
-				dprintk(SAA716x_ERROR, 1, "%s MSI-X-%d registration failed", saa716x->saa716x_msix_handler[i].desc, i);
+				dprintk(SAA716x_ERROR, 1, "%s MSI-X-%d registration failed <%d>", saa716x->saa716x_msix_handler[i].desc, i, ret);
 				return -1;
 			}
 		}
@@ -110,7 +110,7 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 				  DRIVER_NAME,
 				  saa716x);
 		if (ret < 0) {
-			dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed");
+			dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed <%d>", ret);
 			ret = -ENODEV;
 		}
 	}

From bb02c3e52bd39d63d41ca64fc47aeae31a7e7604 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:59:14 +0400
Subject: [PATCH 096/364] saa716x: Use adapter ordering

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 90426741e07e5..5d7cc220ad7b6 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -10,6 +10,9 @@
 #include "saa716x_i2c.h"
 #include "saa716x_gpio.h"
 
+DVB_DEFINE_MOD_OPT_ADAPTER_NR(adapter_nr);
+
+
 void saa716x_dma_start(struct saa716x_dev *saa716x)
 {
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Start DMA engine");
@@ -101,8 +104,10 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
 		if (dvb_register_adapter(&saa716x_adap->dvb_adapter,
-					 "SAA716x dvb adapter", THIS_MODULE,
-					 &saa716x->pdev->dev) < 0) {
+					 "SAA716x dvb adapter",
+					 THIS_MODULE,
+					 &saa716x->pdev->dev,
+					 adapter_nr) < 0) {
 
 			dprintk(SAA716x_ERROR, 1, "Error registering adapter");
 			return -ENODEV;

From 40bf42c4dd2e57b133cecbed61b37580791058f5 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 16:59:50 +0400
Subject: [PATCH 097/364] saa716x: Disable debugging

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 2ced5e6174c6e..a707f727e52f1 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -428,10 +428,11 @@ int saa716x_add_irqvector(struct saa716x_dev *saa716x,
 	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
 	dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x>", ena_l, ena_h);
 
+#if 0
 	/* debug */
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_SET_L, mask_l);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_SET_H, mask_h);
-
+#endif
 	return 0;
 }
 

From 38f0fe671fec8924558e5c20546781d8d7b0b54f Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:35:03 +0400
Subject: [PATCH 098/364] osd.h: Kickstart the TT S2 6400 Dual HD Premium - OSD
 update

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 include/uapi/linux/dvb/osd.h | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/include/uapi/linux/dvb/osd.h b/include/uapi/linux/dvb/osd.h
index e163508b9ae8b..ca31285dada48 100644
--- a/include/uapi/linux/dvb/osd.h
+++ b/include/uapi/linux/dvb/osd.h
@@ -142,4 +142,20 @@ typedef struct osd_cap_s {
 #define OSD_SEND_CMD            _IOW('o', 160, osd_cmd_t)
 #define OSD_GET_CAPABILITY      _IOR('o', 161, osd_cap_t)
 
+typedef struct osd_raw_cmd_s {
+	void __user *cmd_data;
+	int cmd_len;
+	void __user *result_data;
+	int result_len;
+} osd_raw_cmd_t;
+
+typedef struct osd_raw_data_s {
+	void __user *data_buffer;
+	int data_length;
+	int data_handle;
+} osd_raw_data_t;
+
+#define OSD_RAW_CMD            _IOWR('o', 162, osd_raw_cmd_t)
+#define OSD_RAW_DATA           _IOWR('o', 163, osd_raw_data_t)
+
 #endif

From 8202d7c9140eed0d87bfdc73aa7132cced9a2fc4 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:37:45 +0400
Subject: [PATCH 099/364] saa716x: Kickstart the TT S2 6400 Dual HD Premium

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c |  18 +-
 drivers/media/pci/saa716x/saa716x_ff.c   | 663 ++++++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_ff.h   |  53 ++
 drivers/media/pci/saa716x/saa716x_gpio.c |  44 ++
 drivers/media/pci/saa716x/saa716x_gpio.h |   5 +
 drivers/media/pci/saa716x/saa716x_i2c.c  |   3 +
 drivers/media/pci/saa716x/saa716x_phi.c  |  52 ++
 drivers/media/pci/saa716x/saa716x_phi.h  |   3 +
 drivers/media/pci/saa716x/saa716x_priv.h |   1 +
 drivers/media/pci/saa716x/saa716x_reg.h  |  30 +
 10 files changed, 864 insertions(+), 8 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 5d7cc220ad7b6..b11d55b972c4d 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -74,9 +74,12 @@ static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 contro
 	struct saa716x_config *config		= saa716x->config;
 	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
-	saa716x_gpio_ctl(saa716x, adap_cfg->power_ctl);
-	saa716x_gpio_bits(saa716x, adap_cfg->power_ctl);
+	if (adap_cfg->power_ctl != 0)
+	{
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
+		saa716x_gpio_ctl(saa716x, adap_cfg->power_ctl);
+		saa716x_gpio_bits(saa716x, adap_cfg->power_ctl);
+	}
 
 	return 0;
 }
@@ -87,9 +90,12 @@ static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
 	struct saa716x_config *config		= saa716x->config;
 	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
-	saa716x_gpio_ctl(saa716x, adap_cfg->reset_ctl);
-	saa716x_gpio_bits(saa716x, adap_cfg->reset_ctl);
+	if (adap_cfg->reset_ctl != 0)
+	{
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
+		saa716x_gpio_ctl(saa716x, adap_cfg->reset_ctl);
+		saa716x_gpio_bits(saa716x, adap_cfg->reset_ctl);
+	}
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index b8b850f380ac0..743407ef947e1 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -7,10 +7,12 @@
 #include <asm/io.h>
 #include <asm/pgtable.h>
 #include <asm/page.h>
+#include <asm/byteorder.h>
 #include <linux/kmod.h>
 #include <linux/vmalloc.h>
 #include <linux/init.h>
 #include <linux/device.h>
+#include <linux/firmware.h>
 
 #include <linux/i2c.h>
 #include "saa716x_priv.h"
@@ -21,6 +23,9 @@
 #include "saa716x_ff.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
+#include "saa716x_phi.h"
+
+#include <linux/dvb/osd.h>
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -32,10 +37,18 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x FF"
 
+static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x);
+static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x);
+static int saa716x_ff_osd_init(struct saa716x_dev *saa716x);
+static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x);
+static int sti7109_send_cmd(struct sti7109_dev * sti7109, const uint8_t * data, int length);
+
 static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
+	struct sti7109_dev *sti7109;
 	int err = 0;
+	uint32_t value;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -86,16 +99,172 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail3;
 	}
 
+	err = saa716x_phi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
+		goto fail3;
+	}
+
+	/* prepare the sti7109 device struct */
+	sti7109 = kzalloc(sizeof(struct sti7109_dev), GFP_KERNEL);
+	if (!sti7109) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x: out of memory");
+		goto fail3;
+	}
+
+	sti7109->dev = saa716x;
+	saa716x->priv = sti7109;
+
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS1);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN);
+	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
+	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
+
+	/* hold ST in reset */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND, 0);
+
+	/* enable board power */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 1);
+	msleep(100);
+
+	err = saa716x_ff_fpga_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF FPGA Initialization failed");
+		goto fail4;
+	}
+
+	/* enable interrupts from ST7109 -> PC */
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICTRL, 0x3);
+
+	value = SAA716x_EPRD(MSI, MSI_CONFIG33);
+	value &= 0xFCFFFFFF;
+	value |= MSI_INT_POL_EDGE_FALL;
+	SAA716x_EPWR(MSI, MSI_CONFIG33, value);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_EXTINT_0);
+
+	err = saa716x_ff_st7109_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF STi7109 initialization failed");
+		goto fail4;
+	}
+
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
-		goto fail4;
+		goto fail5;
+	}
+
+	err = saa716x_ff_osd_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
+		goto fail6;
+	}
+
+	if (0)
+	{
+		uint8_t data[32];
+
+		memset(data, 0, sizeof(data));
+		data[0] = 0;
+		data[1] = 13;
+		data[2] = 0;
+		// command group
+		data[3] = 4;
+		// command id
+		data[4] = 0;
+		data[5] = 10; // create display
+		// width
+		data[6] = 0;
+		data[7] = 0;
+		data[8] = 0x07;
+		data[9] = 0x80;
+		// height
+		data[10] = 0;
+		data[11] = 0;
+		data[12] = 0x04;
+		data[13] = 0x38;
+		// color type
+		data[14] = 4;
+		sti7109_send_cmd(sti7109, data, 15);
+
+		msleep(100);
+
+		memset(data, 0, sizeof(data));
+		data[0] = 0;
+		data[1] = 28;
+		data[2] = 0;
+		// command group
+		data[3] = 4;
+		// command id
+		data[4] = 0;
+		data[5] = 71; // draw rectangle
+		// display handle
+		data[6] = 0;
+		data[7] = 0;
+		data[8] = 0;
+		data[9] = 0;
+		// x
+		data[10] = 0;
+		data[11] = 0;
+		data[12] = 0;
+		data[13] = 100;
+		// y
+		data[14] = 0;
+		data[15] = 0;
+		data[16] = 0;
+		data[17] = 200;
+		// w
+		data[18] = 0;
+		data[19] = 0;
+		data[20] = 0x02;
+		data[21] = 0x00;
+		// h
+		data[22] = 0;
+		data[23] = 0;
+		data[24] = 0x01;
+		data[25] = 0x00;
+		// color
+		data[26] = 0xFF;
+		data[27] = 0xFF;
+		data[28] = 0x00;
+		data[29] = 0x00;
+		sti7109_send_cmd(sti7109, data, 30);
+
+		msleep(100);
+
+		memset(data, 0, sizeof(data));
+		data[0] = 0;
+		data[1] = 8;
+		data[2] = 0;
+		// command group
+		data[3] = 4;
+		// command id
+		data[4] = 0;
+		data[5] = 15; // render display
+		// handle
+		data[6] = 0;
+		data[7] = 0;
+		data[8] = 0;
+		data[9] = 0;
+		sti7109_send_cmd(sti7109, data, 10);
 	}
 
 	return 0;
 
-fail4:
+fail6:
+	saa716x_ff_osd_exit(saa716x);
+fail5:
 	saa716x_dvb_exit(saa716x);
+fail4:
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
+
+	/* disable board power */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
+
+	kfree(sti7109);
 fail3:
 	saa716x_i2c_exit(saa716x);
 fail2:
@@ -109,8 +278,19 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	saa716x_ff_osd_exit(saa716x);
 
 	saa716x_dvb_exit(saa716x);
+
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
+
+	/* disable board power */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
+
+	kfree(sti7109);
+
 	saa716x_i2c_exit(saa716x);
 	saa716x_pci_exit(saa716x);
 	kfree(saa716x);
@@ -119,6 +299,8 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	uint32_t msiStatusH;
+	uint32_t phiISR;
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
@@ -165,9 +347,486 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, SAA716x_EPRD(MSI, MSI_INT_STATUS_L));
+
+	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
+
+	if (msiStatusH & MSI_INT_EXTINT_0)
+	{
+		struct sti7109_dev * sti7109;
+
+		sti7109 = saa716x->priv;
+
+		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
+		dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
+		if (phiISR & ISR_CMD_MASK)
+		{
+			uint32_t value;
+			uint32_t length;
+			dprintk(SAA716x_INFO, 1, "CMD interrupt source");
+
+			value = SAA716x_EPRD(PHI_1, 0);
+			value = __cpu_to_be32(value);
+			length = (value >> 16) + 2;
+
+			dprintk(SAA716x_INFO, 1, "CMD length: %d", length);
+
+			if (length > MAX_RESULT_LEN)
+			{
+				dprintk(SAA716x_ERROR, 1, "CMD length %d > %d", length, MAX_RESULT_LEN);
+				length = MAX_RESULT_LEN;
+			}
+			saa716x_phi_read(saa716x, 0, sti7109->result_data, length);
+			sti7109->result_len = length;
+			sti7109->result_avail = 1;
+			wake_up(&sti7109->result_avail_wq);
+
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CMD_MASK);
+		}
+		if (phiISR & ISR_READY_MASK)
+		{
+			dprintk(SAA716x_INFO, 1, "READY interrupt source");
+			sti7109->cmd_ready = 1;
+			wake_up(&sti7109->cmd_ready_wq);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_READY_MASK);
+		}
+		if (phiISR & ISR_BLOCK_MASK)
+		{
+			dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");
+			sti7109->block_done = 1;
+			wake_up(&sti7109->block_done_wq);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BLOCK_MASK);
+		}
+		if (phiISR & ISR_DATA_MASK)
+		{
+			dprintk(SAA716x_INFO, 1, "DATA interrupt source");
+			sti7109->data_ready = 1;
+			wake_up(&sti7109->data_ready_wq);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DATA_MASK);
+		}
+	}
+
 	return IRQ_HANDLED;
 }
 
+static void saa716x_spi_write(struct saa716x_dev *saa716x, const uint8_t * data, int length)
+{
+	int i;
+	uint32_t value;
+	int rounds;
+
+	for (i = 0; i < length; i++)
+	{
+		SAA716x_EPWR(SPI, SPI_DATA, data[i]);
+		rounds = 0;
+		value = SAA716x_EPRD(SPI, SPI_STATUS);
+		while ((value & SPI_TRANSFER_FLAG) == 0 && rounds < 5000)
+		{
+			value = SAA716x_EPRD(SPI, SPI_STATUS);
+			rounds++;
+		}
+	}
+}
+
+static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
+{
+	int fpgaInit;
+	int fpgaDone;
+	int rounds;
+	int ret;
+	const struct firmware *fw;
+
+	/* request the FPGA firmware, this will block until someone uploads it */
+	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
+	if (ret) {
+		if (ret == -ENOENT) {
+			printk(KERN_ERR "dvb-ttpremium: could not load FPGA firmware,"
+			       " file not found: dvb-ttpremium-fpga-01.fw\n");
+			printk(KERN_ERR "dvb-ttpremium: usually this should be in "
+			       "/usr/lib/hotplug/firmware or /lib/firmware\n");
+		} else
+			printk(KERN_ERR "dvb-ttpremium: cannot request firmware"
+			       " (error %i)\n", ret);
+		return -EINVAL;
+	}
+
+	/* set FPGA PROGRAMN high */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN, 1);
+	msleep(10);
+
+	/* set FPGA PROGRAMN low to set it into configuration mode */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN, 0);
+	msleep(10);
+
+	/* set FPGA PROGRAMN high to start configuration process */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN, 1);
+
+	rounds = 0;
+	fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
+	while (fpgaInit == 0 && rounds < 5000)
+	{
+		//msleep(1);
+		fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
+		rounds++;
+	}
+	dprintk(SAA716x_INFO, 1, "SAA716x FPGA INITN=%d, rounds=%d", fpgaInit, rounds);
+
+	SAA716x_EPWR(SPI, SPI_CLOCK_COUNTER, 0x08);
+	SAA716x_EPWR(SPI, SPI_CONTROL_REG, SPI_MODE_SELECT);
+
+	msleep(10);
+
+	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
+	dprintk(SAA716x_INFO, 1, "SAA716x FPGA DONE=%d", fpgaDone);
+	dprintk(SAA716x_INFO, 1, "SAA716x FPGA write bitstream");
+	saa716x_spi_write(saa716x, fw->data, fw->size);
+	dprintk(SAA716x_INFO, 1, "SAA716x FPGA write bitstream done");
+	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
+	dprintk(SAA716x_INFO, 1, "SAA716x FPGA DONE=%d", fpgaDone);
+
+	release_firmware(fw);
+
+	if (!fpgaDone)
+	{
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
+{
+	int i;
+	int length;
+	uint32_t requestedBlock;
+	uint32_t writtenBlock;
+	uint32_t numBlocks;
+	uint32_t blockSize;
+	uint32_t lastBlockSize;
+	uint64_t startTime;
+	uint64_t currentTime;
+	uint64_t waitTime;
+	int ret;
+	const struct firmware *fw;
+
+	/* request the st7109 loader, this will block until someone uploads it */
+	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
+	if (ret) {
+		if (ret == -ENOENT) {
+			printk(KERN_ERR "dvb-ttpremium: could not load ST7109 loader,"
+			       " file not found: dvb-ttpremium-loader-01.fw\n");
+			printk(KERN_ERR "dvb-ttpremium: usually this should be in "
+			       "/usr/lib/hotplug/firmware or /lib/firmware\n");
+		} else
+			printk(KERN_ERR "dvb-ttpremium: cannot request firmware"
+			       " (error %i)\n", ret);
+		return -EINVAL;
+	}
+
+	saa716x_phi_write(saa716x, 0, fw->data, fw->size);
+	msleep(10);
+
+	release_firmware(fw);
+
+	/* take ST out of reset */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND, 1);
+
+	startTime = jiffies;
+	waitTime = 0;
+	do
+	{
+		requestedBlock = SAA716x_EPRD(PHI_1, 0x3ffc);
+		if (requestedBlock == 1)
+		{
+			break;
+		}
+		currentTime = jiffies;
+		waitTime = currentTime - startTime;
+	} while (waitTime < (1 * HZ));
+
+	if (waitTime >= 1 * HZ)
+	{
+		dprintk(SAA716x_ERROR, 1, "STi7109 seems to be DEAD!");
+		return -1;
+	}
+	dprintk(SAA716x_INFO, 1, "STi7109 ready after %llu ticks", waitTime);
+
+	/* request the st7109 firmware, this will block until someone uploads it */
+	ret = request_firmware(&fw, "dvb-ttpremium-st7109-01.fw", &saa716x->pdev->dev);
+	if (ret) {
+		if (ret == -ENOENT) {
+			printk(KERN_ERR "dvb-ttpremium: could not load ST7109 firmware,"
+			       " file not found: dvb-ttpremium-st7109-01.fw\n");
+			printk(KERN_ERR "dvb-ttpremium: usually this should be in "
+			       "/usr/lib/hotplug/firmware or /lib/firmware\n");
+		} else
+			printk(KERN_ERR "dvb-ttpremium: cannot request firmware"
+			       " (error %i)\n", ret);
+		return -EINVAL;
+	}
+
+	dprintk(SAA716x_INFO, 1, "SAA716x download ST7109 firmware");
+	writtenBlock = 0;
+	blockSize = 0x3c00;
+	length = fw->size;
+	numBlocks = length / blockSize;
+	lastBlockSize = length % blockSize;
+	for (i = 0; i < length; i += blockSize)
+	{
+		writtenBlock++;
+		/* write one block (last may differ from blockSize) */
+		if (lastBlockSize && writtenBlock == (numBlocks + 1))
+		{
+			saa716x_phi_write(saa716x, 0, &fw->data[i], lastBlockSize);
+		}
+		else
+		{
+			saa716x_phi_write(saa716x, 0, &fw->data[i], blockSize);
+		}
+		SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
+		startTime = jiffies;
+		waitTime = 0;
+		do
+		{
+			requestedBlock = SAA716x_EPRD(PHI_1, 0x3ffc);
+			if (requestedBlock == (writtenBlock + 1))
+			{
+				break;
+			}
+			currentTime = jiffies;
+			waitTime = currentTime - startTime;
+		} while (waitTime < (1 * HZ));
+
+		if (waitTime >= 1 * HZ)
+		{
+			dprintk(SAA716x_ERROR, 1, "STi7109 seems to be DEAD!");
+			release_firmware(fw);
+			return -1;
+		}
+	}
+	writtenBlock++;
+	writtenBlock |= 0x80000000;
+	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
+
+	dprintk(SAA716x_INFO, 1, "SAA716x download ST7109 firmware done");
+
+	release_firmware(fw);
+
+	return 0;
+}
+
+static int sti7109_send_cmd(struct sti7109_dev * sti7109, const uint8_t * data, int length)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+
+	timeout = 10 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq, sti7109->cmd_ready == 1, timeout);
+	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
+		return -EIO;
+	}
+
+	sti7109->cmd_ready = 0;
+	sti7109->result_avail = 0;
+	saa716x_phi_write(saa716x, 0x0000, data, length);
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
+	return 0;
+}
+
+static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq, sti7109->cmd_ready == 1, timeout);
+	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
+		return -EIO;
+	}
+
+	sti7109->cmd_ready = 0;
+	sti7109->result_avail = 0;
+	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
+
+	if (cmd->result_len > 0)
+	{
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(sti7109->result_avail_wq, sti7109->result_avail == 1, timeout);
+		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
+			cmd->result_len = 0;
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1, "timed out waiting for command result");
+			return -EIO;
+		}
+		if (sti7109->result_len > 0)
+		{
+			if (sti7109->result_len > cmd->result_len)
+			{
+				memcpy(cmd->result_data, sti7109->result_data, cmd->result_len);
+			}
+			else
+			{
+				memcpy(cmd->result_data, sti7109->result_data, sti7109->result_len);
+				cmd->result_len = sti7109->result_len;
+			}
+		}
+	}
+	return 0;
+}
+
+static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+	uint16_t blockSize;
+	uint16_t lastBlockSize;
+	uint16_t numBlocks;
+	uint16_t blockIndex;
+	uint8_t blockHeader[SIZE_BLOCK_HEADER];
+	uint8_t * blockPtr;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq, sti7109->data_ready == 1, timeout);
+	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
+		return -EIO;
+	}
+	sti7109->data_ready = 0;
+
+	/* 8 bytes is the size of the block header. Block header structure is:
+	 * 16 bit - block index
+	 * 16 bit - number of blocks
+	 * 16 bit - current block data size
+	 * 16 bit - block handle. This is used to reference the data in the command that uses it.
+	 */
+	blockSize = SIZE_BLOCK_DATA - SIZE_BLOCK_HEADER;
+	numBlocks = data->data_length / blockSize;
+	lastBlockSize = data->data_length % blockSize;
+	if (lastBlockSize > 0)
+	{
+		numBlocks++;
+	}
+	blockHeader[2] = (uint8_t) (numBlocks >> 8);
+	blockHeader[3] = (uint8_t) numBlocks;
+	blockHeader[6] = (uint8_t) (sti7109->data_handle >> 8);
+	blockHeader[7] = (uint8_t) sti7109->data_handle;
+	blockPtr = (uint8_t *) data->data_buffer;
+	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++)
+	{
+		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
+		{
+			blockSize = lastBlockSize;
+		}
+
+		blockHeader[0] = (uint8_t) (blockIndex >> 8);
+		blockHeader[1] = (uint8_t) blockIndex;
+		blockHeader[4] = (uint8_t) (blockSize >> 8);
+		blockHeader[5] = (uint8_t) blockSize;
+
+		sti7109->block_done = 0;
+		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA, blockHeader, SIZE_BLOCK_HEADER);
+		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + SIZE_BLOCK_HEADER, blockPtr, blockSize);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
+
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(sti7109->block_done_wq, sti7109->block_done == 1, timeout);
+		if (timeout == -ERESTARTSYS || sti7109->block_done == 0) {
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+			return -EIO;
+		}
+		blockPtr += blockSize;
+	}
+	data->data_handle = sti7109->data_handle;
+	sti7109->data_handle++;
+	return 0;
+}
+
+static int dvb_osd_ioctl(struct inode *inode, struct file *file,
+			 unsigned int cmd, void *parg)
+{
+	struct dvb_device *dvbdev = file->private_data;
+	struct sti7109_dev *sti7109 = dvbdev->priv;
+
+	if (cmd == OSD_RAW_CMD)
+	{
+		return sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
+	}
+	else if (cmd == OSD_RAW_DATA)
+	{
+		return sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
+	}
+
+	return -EINVAL;
+}
+
+static struct file_operations dvb_osd_fops = {
+	.owner		= THIS_MODULE,
+	.ioctl		= dvb_generic_ioctl,
+	.open		= dvb_generic_open,
+	.release	= dvb_generic_release,
+};
+
+static struct dvb_device dvbdev_osd = {
+	.priv		= NULL,
+	.users		= 1,
+	.writers	= 1,
+	.fops		= &dvb_osd_fops,
+	.kernel_ioctl	= dvb_osd_ioctl,
+};
+
+static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
+{
+	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	init_waitqueue_head(&sti7109->cmd_ready_wq);
+	sti7109->cmd_ready = 0;
+
+	init_waitqueue_head(&sti7109->result_avail_wq);
+	sti7109->result_avail = 0;
+
+	sti7109->data_handle = 0;
+	init_waitqueue_head(&sti7109->data_ready_wq);
+	sti7109->data_ready = 0;
+	init_waitqueue_head(&sti7109->block_done_wq);
+	sti7109->block_done = 0;
+
+	dvb_register_device(&saa716x_adap->dvb_adapter, &sti7109->osd_dev,
+			    &dvbdev_osd, sti7109, DVB_DEVICE_OSD);
+	return 0;
+}
+
+static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x)
+{
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	dvb_unregister_device(sti7109->osd_dev);
+	return 0;
+}
+
 static int load_config_s26400(struct saa716x_dev *saa716x)
 {
 	int ret = 0;
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index c01c0308960eb..b8788608e9963 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -4,4 +4,57 @@
 #define TECHNOTREND			0x13c2
 #define S2_6400_DUAL_S2_PREMIUM		0x3009
 
+#define TT_PREMIUM_GPIO_POWER_ENABLE	27
+#define TT_PREMIUM_GPIO_RESET_BACKEND	26
+#define TT_PREMIUM_GPIO_FPGA_CS1	17
+#define TT_PREMIUM_GPIO_FPGA_CS0	16
+#define TT_PREMIUM_GPIO_FPGA_PROGRAMN	15
+#define TT_PREMIUM_GPIO_FPGA_DONE	14
+#define TT_PREMIUM_GPIO_FPGA_INITN	13
+
+/* fpga interrupt register addresses */
+#define FPGA_ADDR_PHI_ICTRL	0x8000 /* PHI General control of the PC => STB interrupt controller */
+#define FPGA_ADDR_PHI_ISR	0x8010 /* PHI Interrupt Status Register */
+#define FPGA_ADDR_PHI_ISET	0x8020 /* PHI Interrupt Set Register */
+#define FPGA_ADDR_PHI_ICLR	0x8030 /* PHI Interrupt Clear Register */
+#define FPGA_ADDR_EMI_ICTRL	0x8100 /* EMI General control of the STB => PC interrupt controller */
+#define FPGA_ADDR_EMI_ISR	0x8110 /* EMI Interrupt Status Register */
+#define FPGA_ADDR_EMI_ISET	0x8120 /* EMI Interrupt Set Register */
+#define FPGA_ADDR_EMI_ICLR	0x8130 /* EMI Interrupt Clear Register */
+
+#define ISR_CMD_MASK		0x0001 /* interrupt source for normal cmds (osd, fre, av, ...) */
+#define ISR_READY_MASK		0x0002 /* interrupt source for command acknowledge */
+#define ISR_BLOCK_MASK		0x0004 /* interrupt source for single block transfers and acknowledge */
+#define ISR_DATA_MASK		0x0008 /* interrupt source for data transfer acknowledge */
+
+#define ADDR_CMD_DATA		0x0000 /* address for cmd data in fpga dpram */
+#define ADDR_BLOCK_DATA		0x0600 /* address for block data in fpga dpram */
+
+#define SIZE_CMD_DATA		0x0600 /* maximum size for command data (1,5 kB) */
+#define SIZE_BLOCK_DATA		0x3800 /* maximum size for block data (14 kB) */
+
+#define SIZE_BLOCK_HEADER	8      /* block header size */
+
+#define MAX_RESULT_LEN		64
+
+/* place to store all the necessary device information */
+struct sti7109_dev {
+	struct saa716x_dev	*dev;
+	struct dvb_device	*osd_dev;
+
+	wait_queue_head_t	cmd_ready_wq;
+	int			cmd_ready;
+
+	wait_queue_head_t	result_avail_wq;
+	int			result_avail;
+	uint8_t			result_data[MAX_RESULT_LEN];
+	uint32_t		result_len;
+
+	uint16_t		data_handle;
+	wait_queue_head_t	data_ready_wq;
+	int			data_ready;
+	wait_queue_head_t	block_done_wq;
+	int			block_done;
+};
+
 #endif /* __SAA716x_FF_H */
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index e2a06323026e8..243f3f4a7abdf 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -45,3 +45,47 @@ void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits)
 
 	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
 }
+
+void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio)
+{
+	uint32_t value;
+
+	value = SAA716x_EPRD(GPIO, GPIO_OEN);
+	value &= ~(1 << gpio);
+	SAA716x_EPWR(GPIO, GPIO_OEN, value);
+}
+EXPORT_SYMBOL_GPL(saa716x_gpio_set_output);
+
+void saa716x_gpio_set_input(struct saa716x_dev *saa716x, int gpio)
+{
+	uint32_t value;
+
+	value = SAA716x_EPRD(GPIO, GPIO_OEN);
+	value |= 1 << gpio;
+	SAA716x_EPWR(GPIO, GPIO_OEN, value);
+}
+EXPORT_SYMBOL_GPL(saa716x_gpio_set_input);
+
+void saa716x_gpio_write(struct saa716x_dev *saa716x, int gpio, int set)
+{
+	uint32_t value;
+
+	value = SAA716x_EPRD(GPIO, GPIO_WR);
+	if (set)
+		value |= 1 << gpio;
+	else
+		value &= ~(1 << gpio);
+	SAA716x_EPWR(GPIO, GPIO_WR, value);
+}
+EXPORT_SYMBOL_GPL(saa716x_gpio_write);
+
+int saa716x_gpio_read(struct saa716x_dev *saa716x, int gpio)
+{
+	uint32_t value;
+
+	value = SAA716x_EPRD(GPIO, GPIO_RD);
+	if (value & (1 << gpio))
+		return 1;
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_gpio_read);
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index 2a17c09a629eb..080b90f2c13b0 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -12,4 +12,9 @@ extern void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data);
 extern void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 out);
 extern void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits);
 
+extern void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio);
+extern void saa716x_gpio_set_input(struct saa716x_dev *saa716x, int gpio);
+extern void saa716x_gpio_write(struct saa716x_dev *saa716x, int gpio, int set);
+extern int saa716x_gpio_read(struct saa716x_dev *saa716x, int gpio);
+
 #endif /* __SAA716x_GPIO_H */
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index e680a0a3cd0cb..1495989b5a32f 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -650,6 +650,9 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 					      i2c_vec[i].handler,
 					      SAA716x_I2C_ADAPTER(i));
 
+			reg = SAA716x_EPRD(CGU, CGU_SCR_3);
+			dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Autowake <%d> Active <%d>", i, (reg >> 1) & 0x01, reg & 0x01);
+
 			i2c->saa716x = saa716x;
 		}
 		i2c++;
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 0befd3ad187bc..72b97f6783bc6 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -70,3 +70,55 @@ int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave)
 
 	return 0;
 }
+
+int saa716x_phi_init(struct saa716x_dev *saa716x)
+{
+	uint32_t value;
+
+	/* SRAM mode, auto increment on */
+	value = 0;
+	value |= PHI_AUTO_INCREMENT;
+	SAA716x_EPWR(PHI_0, PHI_1_MODE, value);
+
+	value = 0;
+	value |= 0x01; /* chip select 0 */
+	value |= 0x00 << 8; /* ready mask */
+	value |= 0x04 << 12; /* strobe time */
+	value |= 0x08 << 20; /* cycle time */
+	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, value);
+
+	value = 0;
+	value |= PHI_ALE_POL; /* ALE is active high */
+	SAA716x_EPWR(PHI_0, PHI_POLARITY, value);
+
+	SAA716x_EPWR(PHI_0, PHI_TIMEOUT, 0x2a);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_phi_init);
+
+int saa716x_phi_write(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length)
+{
+	int i;
+
+	for (i = 0; i < length; i += 4)
+	{
+		SAA716x_EPWR(PHI_1, address, *((uint32_t *) &data[i]));
+		address += 4;
+	}
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_phi_write);
+
+int saa716x_phi_read(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length)
+{
+	int i;
+
+	for (i = 0; i < length; i += 4)
+	{
+		*((uint32_t *) &data[i]) = SAA716x_EPRD(PHI_1, address);
+		address += 4;
+	}
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_phi_read);
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index 8c8fc6ea3450c..aa4f38cfc1720 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -30,5 +30,8 @@
 
 
 extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
+extern int saa716x_phi_init(struct saa716x_dev *saa716x);
+extern int saa716x_phi_write(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length);
+extern int saa716x_phi_read(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length);
 
 #endif /* __SAA716x_PHI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 5e1a886cae58a..fa9474551d017 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -151,6 +151,7 @@ struct saa716x_dev {
 	spinlock_t			gpio_lock;
 	/* DMA */
 
+	void				*priv;
 };
 
 /* PCI */
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index 41672236d4eba..f99cc50abe3d1 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -782,6 +782,8 @@
 
 /* -------------- SPI Registers -------------- */
 
+#define SPI				0x0000d000
+
 #define SPI_CONTROL_REG			0x000
 #define SPI_SERIAL_INTER_ENABLE		(0x00000001 <<  7)
 #define SPI_LSB_FIRST_ENABLE		(0x00000001 <<  6)
@@ -876,6 +878,34 @@
 #define PHI_0_3_RW_0			0x2800
 #define PHI_0_3_RW_511			0x2ffc
 
+#define PHI_CSN_DEASSERT		(0x00000001 <<  2)
+#define PHI_AUTO_INCREMENT		(0x00000001 <<  1)
+
+#define PHI_DELAY_RD_WR			(0x0000001f << 27)
+#define PHI_EXTEND_RDY3			(0x00000003 << 25)
+#define PHI_EXTEND_RDY2			(0x00000003 << 23)
+#define PHI_EXTEND_RDY1			(0x00000003 << 21)
+#define PHI_EXTEND_RDY0			(0x00000003 << 19)
+#define PHI_RDY3_OD			(0x00000001 << 18)
+#define PHI_RDY2_OD			(0x00000001 << 17)
+#define PHI_RDY1_OD			(0x00000001 << 16)
+#define PHI_RDY0_OD			(0x00000001 << 15)
+#define PHI_ALE_POL			(0x00000001 << 14)
+#define PHI_WRN_POL			(0x00000001 << 13)
+#define PHI_RDN_POL			(0x00000001 << 12)
+#define PHI_RDY3_POL			(0x00000001 << 11)
+#define PHI_RDY2_POL			(0x00000001 << 10)
+#define PHI_RDY1_POL			(0x00000001 <<  9)
+#define PHI_RDY0_POL			(0x00000001 <<  8)
+#define PHI_CSN7_POL			(0x00000001 <<  7)
+#define PHI_CSN6_POL			(0x00000001 <<  6)
+#define PHI_CSN5_POL			(0x00000001 <<  5)
+#define PHI_CSN4_POL			(0x00000001 <<  4)
+#define PHI_CSN3_POL			(0x00000001 <<  3)
+#define PHI_CSN2_POL			(0x00000001 <<  2)
+#define PHI_CSN1_POL			(0x00000001 <<  1)
+#define PHI_CSN0_POL			(0x00000001 <<  0)
+
 /* -------------- PHI_1 Registers -------------- */
 
 #define	PHI_1				0x00020000

From d769149376e04e422fae7e766e9f758b30b92f15 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:39:39 +0400
Subject: [PATCH 100/364] saa716x: Code simplification, Overhaul, ROM dump

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |   3 +-
 drivers/media/pci/saa716x/saa716x_boot.c   |   4 +-
 drivers/media/pci/saa716x/saa716x_budget.c |  45 +-
 drivers/media/pci/saa716x/saa716x_ff.c     | 192 ++++----
 drivers/media/pci/saa716x/saa716x_ff.h     |   6 +-
 drivers/media/pci/saa716x/saa716x_greg.c   |   1 -
 drivers/media/pci/saa716x/saa716x_hybrid.c | 117 +++--
 drivers/media/pci/saa716x/saa716x_i2c.c    | 511 +++++++++------------
 drivers/media/pci/saa716x/saa716x_i2c.h    |   6 +-
 drivers/media/pci/saa716x/saa716x_msi.c    |   5 -
 drivers/media/pci/saa716x/saa716x_phi.c    |  18 +-
 drivers/media/pci/saa716x/saa716x_phi.h    |   4 +-
 drivers/media/pci/saa716x/saa716x_priv.h   |   1 +
 drivers/media/pci/saa716x/saa716x_rom.c    | 122 +++++
 drivers/media/pci/saa716x/saa716x_rom.h    |  33 ++
 15 files changed, 574 insertions(+), 494 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_rom.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_rom.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index fab6663ef5491..01a74778b62b6 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -10,7 +10,8 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_fgpi.o	\
 				    saa716x_adap.o	\
 				    saa716x_gpio.o	\
-				    saa716x_greg.o
+				    saa716x_greg.o	\
+				    saa716x_rom.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index d9ccf151bf974..7aaab58be3b78 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -63,7 +63,7 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	 * DW_19 = 0x0000_2000
 	 */
 	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00002000);
-
+#if 0
 	/* End of Boot script command
 	 * DW_20 = 0x0000_0006
 	 * Where to write this value ??
@@ -71,7 +71,7 @@ static int saa716x_ext_boot(struct saa716x_dev *saa716x)
 	 * Boot Control State Machine !
 	 */
 	SAA716x_EPWR(VI0, 0x00000006, 0xffffffff);
-
+#endif
 	return 0;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index d3184daad582f..3a531fe5e7846 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -21,6 +21,7 @@
 #include "saa716x_budget.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
+#include "saa716x_rom.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -32,45 +33,6 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x Budget"
 
-static int read_eeprom_byte(struct saa716x_dev *saa716x, u8 *data, u8 len)
-{
-	struct saa716x_i2c *i2c = saa716x->i2c;
-	struct i2c_adapter *adapter = &i2c[1].i2c_adapter;
-
-	int err;
-
-	struct i2c_msg msg[] = {
-		{.addr = 0x50, .flags = 0,		.buf = data, .len = 1},
-		{.addr = 0x50, .flags = I2C_M_RD,	.buf = data, .len = len},
-	};
-
-	err = i2c_transfer(adapter, msg, 2);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "<err=%d, d0=0x%02x, d1=0x%02x>", err, data[0], data[1]);
-		return err;
-	}
-
-	return 0;
-}
-
-static int read_eeprom(struct saa716x_dev *saa716x)
-{
-	u8 buf[32];
-	int i, err = 0;
-
-	err = read_eeprom_byte(saa716x, buf, 32);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
-		return err;
-	}
-	dprintk(SAA716x_DEBUG, 0, "EEPROM=[");
-	for (i = 0; i < 32; i++)
-		dprintk(SAA716x_DEBUG, 0, " %02x", buf[i]);
-
-	dprintk(SAA716x_DEBUG, 0, " ]\n");
-	return 0;
-}
-
 static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
@@ -132,7 +94,10 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	}
 
 	/* Experiments */
-	read_eeprom(saa716x);
+	err = saa716x_eeprom_data(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM read failed");
+	}
 
 	return 0;
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 743407ef947e1..a9178bcd8047a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -41,14 +41,14 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x);
 static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x);
 static int saa716x_ff_osd_init(struct saa716x_dev *saa716x);
 static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x);
-static int sti7109_send_cmd(struct sti7109_dev * sti7109, const uint8_t * data, int length);
+static int sti7109_send_cmd(struct sti7109_dev *sti7109, const u8 *data, int length);
 
 static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
 	struct sti7109_dev *sti7109;
 	int err = 0;
-	uint32_t value;
+	u32 value;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -112,8 +112,8 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail3;
 	}
 
-	sti7109->dev = saa716x;
-	saa716x->priv = sti7109;
+	sti7109->dev	= saa716x;
+	saa716x->priv	= sti7109;
 
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
@@ -163,9 +163,8 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail6;
 	}
 
-	if (0)
-	{
-		uint8_t data[32];
+	if (0) {
+		u8 data[32];
 
 		memset(data, 0, sizeof(data));
 		data[0] = 0;
@@ -352,18 +351,16 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
-	if (msiStatusH & MSI_INT_EXTINT_0)
-	{
-		struct sti7109_dev * sti7109;
+	if (msiStatusH & MSI_INT_EXTINT_0) {
 
-		sti7109 = saa716x->priv;
+		struct sti7109_dev *sti7109 = saa716x->priv;
 
 		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
 		dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
-		if (phiISR & ISR_CMD_MASK)
-		{
-			uint32_t value;
-			uint32_t length;
+		if (phiISR & ISR_CMD_MASK) {
+
+			u32 value;
+			u32 length;
 			dprintk(SAA716x_INFO, 1, "CMD interrupt source");
 
 			value = SAA716x_EPRD(PHI_1, 0);
@@ -372,11 +369,11 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			dprintk(SAA716x_INFO, 1, "CMD length: %d", length);
 
-			if (length > MAX_RESULT_LEN)
-			{
+			if (length > MAX_RESULT_LEN) {
 				dprintk(SAA716x_ERROR, 1, "CMD length %d > %d", length, MAX_RESULT_LEN);
 				length = MAX_RESULT_LEN;
 			}
+
 			saa716x_phi_read(saa716x, 0, sti7109->result_data, length);
 			sti7109->result_len = length;
 			sti7109->result_avail = 1;
@@ -384,22 +381,22 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CMD_MASK);
 		}
-		if (phiISR & ISR_READY_MASK)
-		{
+
+		if (phiISR & ISR_READY_MASK) {
 			dprintk(SAA716x_INFO, 1, "READY interrupt source");
 			sti7109->cmd_ready = 1;
 			wake_up(&sti7109->cmd_ready_wq);
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_READY_MASK);
 		}
-		if (phiISR & ISR_BLOCK_MASK)
-		{
+
+		if (phiISR & ISR_BLOCK_MASK) {
 			dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");
 			sti7109->block_done = 1;
 			wake_up(&sti7109->block_done_wq);
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BLOCK_MASK);
 		}
-		if (phiISR & ISR_DATA_MASK)
-		{
+
+		if (phiISR & ISR_DATA_MASK) {
 			dprintk(SAA716x_INFO, 1, "DATA interrupt source");
 			sti7109->data_ready = 1;
 			wake_up(&sti7109->data_ready_wq);
@@ -413,16 +410,15 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 static void saa716x_spi_write(struct saa716x_dev *saa716x, const uint8_t * data, int length)
 {
 	int i;
-	uint32_t value;
+	u32 value;
 	int rounds;
 
-	for (i = 0; i < length; i++)
-	{
+	for (i = 0; i < length; i++) {
 		SAA716x_EPWR(SPI, SPI_DATA, data[i]);
 		rounds = 0;
 		value = SAA716x_EPRD(SPI, SPI_STATUS);
-		while ((value & SPI_TRANSFER_FLAG) == 0 && rounds < 5000)
-		{
+
+		while ((value & SPI_TRANSFER_FLAG) == 0 && rounds < 5000) {
 			value = SAA716x_EPRD(SPI, SPI_STATUS);
 			rounds++;
 		}
@@ -464,8 +460,7 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 
 	rounds = 0;
 	fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
-	while (fpgaInit == 0 && rounds < 5000)
-	{
+	while (fpgaInit == 0 && rounds < 5000) {
 		//msleep(1);
 		fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
 		rounds++;
@@ -488,9 +483,7 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	release_firmware(fw);
 
 	if (!fpgaDone)
-	{
 		return -EINVAL;
-	}
 
 	return 0;
 }
@@ -499,14 +492,14 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 {
 	int i;
 	int length;
-	uint32_t requestedBlock;
-	uint32_t writtenBlock;
-	uint32_t numBlocks;
-	uint32_t blockSize;
-	uint32_t lastBlockSize;
-	uint64_t startTime;
-	uint64_t currentTime;
-	uint64_t waitTime;
+	u32 requestedBlock;
+	u32 writtenBlock;
+	u32 numBlocks;
+	u32 blockSize;
+	u32 lastBlockSize;
+	u64 startTime;
+	u64 currentTime;
+	u64 waitTime;
 	int ret;
 	const struct firmware *fw;
 
@@ -534,19 +527,16 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 
 	startTime = jiffies;
 	waitTime = 0;
-	do
-	{
+	do {
 		requestedBlock = SAA716x_EPRD(PHI_1, 0x3ffc);
 		if (requestedBlock == 1)
-		{
 			break;
-		}
+
 		currentTime = jiffies;
 		waitTime = currentTime - startTime;
 	} while (waitTime < (1 * HZ));
 
-	if (waitTime >= 1 * HZ)
-	{
+	if (waitTime >= 1 * HZ) {
 		dprintk(SAA716x_ERROR, 1, "STi7109 seems to be DEAD!");
 		return -1;
 	}
@@ -572,39 +562,33 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	length = fw->size;
 	numBlocks = length / blockSize;
 	lastBlockSize = length % blockSize;
-	for (i = 0; i < length; i += blockSize)
-	{
+	for (i = 0; i < length; i += blockSize) {
 		writtenBlock++;
 		/* write one block (last may differ from blockSize) */
 		if (lastBlockSize && writtenBlock == (numBlocks + 1))
-		{
 			saa716x_phi_write(saa716x, 0, &fw->data[i], lastBlockSize);
-		}
 		else
-		{
 			saa716x_phi_write(saa716x, 0, &fw->data[i], blockSize);
-		}
+
 		SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
 		startTime = jiffies;
 		waitTime = 0;
-		do
-		{
+		do {
 			requestedBlock = SAA716x_EPRD(PHI_1, 0x3ffc);
 			if (requestedBlock == (writtenBlock + 1))
-			{
 				break;
-			}
+
 			currentTime = jiffies;
 			waitTime = currentTime - startTime;
 		} while (waitTime < (1 * HZ));
 
-		if (waitTime >= 1 * HZ)
-		{
+		if (waitTime >= 1 * HZ) {
 			dprintk(SAA716x_ERROR, 1, "STi7109 seems to be DEAD!");
 			release_firmware(fw);
 			return -1;
 		}
 	}
+
 	writtenBlock++;
 	writtenBlock |= 0x80000000;
 	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
@@ -622,7 +606,10 @@ static int sti7109_send_cmd(struct sti7109_dev * sti7109, const uint8_t * data,
 	unsigned long timeout;
 
 	timeout = 10 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq, sti7109->cmd_ready == 1, timeout);
+	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
+						   sti7109->cmd_ready == 1,
+						   timeout);
+
 	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
@@ -645,7 +632,10 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 	unsigned long timeout;
 
 	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq, sti7109->cmd_ready == 1, timeout);
+	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
+						   sti7109->cmd_ready == 1,
+						   timeout);
+
 	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
@@ -660,10 +650,12 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
-	if (cmd->result_len > 0)
-	{
+	if (cmd->result_len > 0) {
 		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->result_avail_wq, sti7109->result_avail == 1, timeout);
+		timeout = wait_event_interruptible_timeout(sti7109->result_avail_wq,
+							   sti7109->result_avail == 1,
+							   timeout);
+
 		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
 			cmd->result_len = 0;
 			if (timeout == -ERESTARTSYS) {
@@ -673,19 +665,17 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 			dprintk(SAA716x_ERROR, 1, "timed out waiting for command result");
 			return -EIO;
 		}
-		if (sti7109->result_len > 0)
-		{
-			if (sti7109->result_len > cmd->result_len)
-			{
+
+		if (sti7109->result_len > 0) {
+			if (sti7109->result_len > cmd->result_len) {
 				memcpy(cmd->result_data, sti7109->result_data, cmd->result_len);
-			}
-			else
-			{
+			} else {
 				memcpy(cmd->result_data, sti7109->result_data, sti7109->result_len);
 				cmd->result_len = sti7109->result_len;
 			}
 		}
 	}
+
 	return 0;
 }
 
@@ -693,15 +683,18 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
 	unsigned long timeout;
-	uint16_t blockSize;
-	uint16_t lastBlockSize;
-	uint16_t numBlocks;
-	uint16_t blockIndex;
-	uint8_t blockHeader[SIZE_BLOCK_HEADER];
-	uint8_t * blockPtr;
+	u16 blockSize;
+	u16 lastBlockSize;
+	u16 numBlocks;
+	u16 blockIndex;
+	u8 blockHeader[SIZE_BLOCK_HEADER];
+	u8 * blockPtr;
 
 	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq, sti7109->data_ready == 1, timeout);
+	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
+						   sti7109->data_ready == 1,
+						   timeout);
+
 	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
@@ -710,6 +703,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
 		return -EIO;
 	}
+
 	sti7109->data_ready = 0;
 
 	/* 8 bytes is the size of the block header. Block header structure is:
@@ -722,20 +716,17 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	numBlocks = data->data_length / blockSize;
 	lastBlockSize = data->data_length % blockSize;
 	if (lastBlockSize > 0)
-	{
 		numBlocks++;
-	}
-	blockHeader[2] = (uint8_t) (numBlocks >> 8);
-	blockHeader[3] = (uint8_t) numBlocks;
-	blockHeader[6] = (uint8_t) (sti7109->data_handle >> 8);
-	blockHeader[7] = (uint8_t) sti7109->data_handle;
-	blockPtr = (uint8_t *) data->data_buffer;
-	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++)
-	{
+
+	blockHeader[2] = (u8) (numBlocks >> 8);
+	blockHeader[3] = (u8) numBlocks;
+	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
+	blockHeader[7] = (u8) sti7109->data_handle;
+	blockPtr = (u8 *) data->data_buffer;
+	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
+
 		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
-		{
 			blockSize = lastBlockSize;
-		}
 
 		blockHeader[0] = (uint8_t) (blockIndex >> 8);
 		blockHeader[1] = (uint8_t) blockIndex;
@@ -748,7 +739,10 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
 
 		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->block_done_wq, sti7109->block_done == 1, timeout);
+		timeout = wait_event_interruptible_timeout(sti7109->block_done_wq,
+							   sti7109->block_done == 1,
+							   timeout);
+
 		if (timeout == -ERESTARTSYS || sti7109->block_done == 0) {
 			if (timeout == -ERESTARTSYS) {
 				/* a signal arrived */
@@ -759,6 +753,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		}
 		blockPtr += blockSize;
 	}
+
 	data->data_handle = sti7109->data_handle;
 	sti7109->data_handle++;
 	return 0;
@@ -767,17 +762,13 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 			 unsigned int cmd, void *parg)
 {
-	struct dvb_device *dvbdev = file->private_data;
-	struct sti7109_dev *sti7109 = dvbdev->priv;
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
 
 	if (cmd == OSD_RAW_CMD)
-	{
 		return sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
-	}
 	else if (cmd == OSD_RAW_DATA)
-	{
 		return sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
-	}
 
 	return -EINVAL;
 }
@@ -799,8 +790,8 @@ static struct dvb_device dvbdev_osd = {
 
 static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 {
-	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109		= saa716x->priv;
 
 	init_waitqueue_head(&sti7109->cmd_ready_wq);
 	sti7109->cmd_ready = 0;
@@ -814,8 +805,11 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 	init_waitqueue_head(&sti7109->block_done_wq);
 	sti7109->block_done = 0;
 
-	dvb_register_device(&saa716x_adap->dvb_adapter, &sti7109->osd_dev,
-			    &dvbdev_osd, sti7109, DVB_DEVICE_OSD);
+	dvb_register_device(&saa716x_adap->dvb_adapter,
+			    &sti7109->osd_dev,
+			    &dvbdev_osd,
+			    sti7109,
+			    DVB_DEVICE_OSD);
 	return 0;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index b8788608e9963..3d065f02e60ad 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -47,10 +47,10 @@ struct sti7109_dev {
 
 	wait_queue_head_t	result_avail_wq;
 	int			result_avail;
-	uint8_t			result_data[MAX_RESULT_LEN];
-	uint32_t		result_len;
+	u8			result_data[MAX_RESULT_LEN];
+	u32			result_len;
 
-	uint16_t		data_handle;
+	u16			data_handle;
 	wait_queue_head_t	data_ready_wq;
 	int			data_ready;
 	wait_queue_head_t	block_done_wq;
diff --git a/drivers/media/pci/saa716x/saa716x_greg.c b/drivers/media/pci/saa716x/saa716x_greg.c
index ba80c17d21f30..f1a9d11c31a5a 100644
--- a/drivers/media/pci/saa716x/saa716x_greg.c
+++ b/drivers/media/pci/saa716x/saa716x_greg.c
@@ -34,5 +34,4 @@ void saa716x_greg_restore(struct saa716x_dev *saa716x)
 	SAA716x_EPWR(GREG, GREG_TAG_ACK_FLEN, g_save[9]);
 
 	SAA716x_EPWR(GREG, GREG_VIDEO_IN_CTRL, g_save[10]);
-
 }
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 36b6a14c3c5b7..b7d4a7c853a57 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -19,8 +19,12 @@
 #include "saa716x_i2c.h"
 #include "saa716x_msi.h"
 #include "saa716x_hybrid.h"
+#include "saa716x_gpio.h"
+#include "saa716x_reg.h"
+#include "saa716x_rom.h"
 
 #include "zl10353.h"
+#include "mb86a16.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -32,45 +36,6 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x Hybrid"
 
-static int read_eeprom_byte(struct saa716x_dev *saa716x, u8 *data, u8 len)
-{
-	struct saa716x_i2c *i2c = saa716x->i2c;
-	struct i2c_adapter *adapter = &i2c[1].i2c_adapter;
-
-	int err;
-
-	struct i2c_msg msg[] = {
-		{.addr = 0x50, .flags = 0,		.buf = data, .len = 1},
-		{.addr = 0x50, .flags = I2C_M_RD,	.buf = data, .len = len},
-	};
-
-	err = i2c_transfer(adapter, msg, 2);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "<err=%d, d0=0x%02x, d1=0x%02x>", err, data[0], data[1]);
-		return err;
-	}
-
-	return 0;
-}
-
-static int read_eeprom(struct saa716x_dev *saa716x)
-{
-	u8 buf[32];
-	int i, err = 0;
-
-	err = read_eeprom_byte(saa716x, buf, 32);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
-		return err;
-	}
-	dprintk(SAA716x_DEBUG, 0, "EEPROM=[");
-	for (i = 0; i < 32; i++)
-		dprintk(SAA716x_DEBUG, 0, " %02x", buf[i]);
-
-	dprintk(SAA716x_DEBUG, 0, " ]\n");
-	return 0;
-}
-
 static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
@@ -120,7 +85,6 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
-//	saa716x_core_reset(saa716x);
 	pci_read_config_dword(pdev, 0x06, &sts);
 
 	err = saa716x_i2c_init(saa716x);
@@ -135,9 +99,10 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail4;
 	}
 
-	msleep(500);
-	/* Experiments */
-	read_eeprom(saa716x);
+	err = saa716x_dump_eeprom(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
+	}
 
 	return 0;
 
@@ -248,13 +213,74 @@ static int load_config_vp6090(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+static int vp6090_dvbs_set_voltage(struct dvb_frontend *fe, fe_sec_voltage_t voltage)
+{
+	struct saa716x_dev *saa716x = fe->dvb->priv;
+
+	switch (voltage) {
+	case SEC_VOLTAGE_13:
+		dprintk(SAA716x_ERROR, 1, "Polarization=[13V]");
+		break;
+	case SEC_VOLTAGE_18:
+		dprintk(SAA716x_ERROR, 1, "Polarization=[18V]");
+		break;
+	case SEC_VOLTAGE_OFF:
+		dprintk(SAA716x_ERROR, 1, "Frontend (dummy) POWERDOWN");
+		break;
+	default:
+		dprintk(SAA716x_ERROR, 1, "Invalid = (%d)", (u32 ) voltage);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+struct mb86a16_config vp6090_mb86a16_config = {
+	.demod_address	= 0x08,
+	.set_voltage	= vp6090_dvbs_set_voltage,
+};
+
 static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+	dprintk(SAA716x_ERROR, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
+	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+	saa716x_gpio_write(saa716x, GPIO_11, 0);
+	saa716x_gpio_write(saa716x, GPIO_10, 0);
+
+	saa716x_gpio_write(saa716x, GPIO_26, 1);
+	saa716x_gpio_write(saa716x, GPIO_27, 1);
+
+	msleep(100);
+
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", count);
+	saa716x_gpio_write(saa716x, GPIO_13, 0);
+	msleep(100);
+	saa716x_gpio_write(saa716x, GPIO_13, 1);
+	msleep(100);
+	saa716x_gpio_write(saa716x, GPIO_12, 0);
+	msleep(100);
+	saa716x_gpio_write(saa716x, GPIO_12, 1);
+	msleep(100);
+
+	dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
+	adapter->fe = mb86a16_attach(&vp6090_mb86a16_config, &i2c->i2c_adapter);
+	if (adapter->fe) {
+		dprintk(SAA716x_ERROR, 1, "found MB86A16 DVB-S/DSS frontend @0x%02x",
+			vp6090_mb86a16_config.demod_address);
+
+	} else {
+		goto exit;
+	}
+
+	dprintk(SAA716x_ERROR, 1, "Done!");
+	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
 	return -ENODEV;
 }
 
@@ -266,6 +292,7 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.adapters		= 2,
 	.frontend_attach	= saa716x_vp6090_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
 /*
@@ -346,6 +373,7 @@ static int load_config_averhc82(struct saa716x_dev *saa716x)
 	return ret;
 }
 
+#if 0
 static struct zl10353_config saa716x_averhc82_zl10353_config = {
 	.demod_address		= 0x1f,
 	.adc_clock		= 450560,
@@ -353,6 +381,7 @@ static struct zl10353_config saa716x_averhc82_zl10353_config = {
 	.no_tuner		= 1,
 	.parallel_ts		= 1,
 };
+#endif
 
 static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 1495989b5a32f..7f056fb26b9f4 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -42,6 +42,7 @@ int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus)
 
 	stat = SAA716x_EPRD(I2C_DEV[bus], INT_STATUS);
 	mask = SAA716x_EPRD(I2C_DEV[bus], INT_ENABLE);
+	saa716x->i2c[bus].i2c_stat = stat;
 	dprintk(SAA716x_DEBUG, 0, "Bus(%d) I2C event: Status=<%s> --> Stat=<%02x> Mask=<%02x>",
 		bus, state[stat], stat, mask);
 
@@ -51,43 +52,45 @@ int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus)
 	SAA716x_EPWR(I2C_DEV[bus], INT_CLR_STATUS, stat);
 
 	if (stat & I2C_INTERRUPT_STFNF)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_STFNF> ");
+		dprintk(SAA716x_DEBUG, 0, "<STFNF> ");
 
-	if (stat & I2C_INTERRUPT_MTFNF)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTFNF> ");
+	if (stat & I2C_INTERRUPT_MTFNF) {
+		dprintk(SAA716x_DEBUG, 0, "<MTFNF> ");
+	}
 
 	if (stat & I2C_INTERRUPT_RFDA)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_RFDA> ");
+		dprintk(SAA716x_DEBUG, 0, "<RFDA> ");
 
 	if (stat & I2C_INTERRUPTE_RFF)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_RFF> ");
+		dprintk(SAA716x_DEBUG, 0, "<RFF> ");
 
 	if (stat & I2C_SLAVE_INTERRUPT_STDR)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_STDR> ");
+		dprintk(SAA716x_DEBUG, 0, "<STDR> ");
 
-	if (stat & I2C_MASTER_INTERRUPT_MTDR)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTDR> ");
+	if (stat & I2C_MASTER_INTERRUPT_MTDR) {
+		dprintk(SAA716x_DEBUG, 0, "<MTDR> ");
+	}
 
 	if (stat & I2C_ERROR_IBE)
-		dprintk(SAA716x_DEBUG, 0, "<ERROR_IBE> ");
+		dprintk(SAA716x_DEBUG, 0, "<IBE> ");
 
 	if (stat & I2C_MODE_CHANGE_INTER_MSMC)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MSMC> ");
+		dprintk(SAA716x_DEBUG, 0, "<MSMC> ");
 
 	if (stat & I2C_SLAVE_RECEIVE_INTER_SRSD)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_SRSD> ");
+		dprintk(SAA716x_DEBUG, 0, "<SRSD> ");
 
 	if (stat & I2C_SLAVE_TRANSMIT_INTER_STSD)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_STSD> ");
+		dprintk(SAA716x_DEBUG, 0, "<STSD> ");
 
 	if (stat & I2C_ACK_INTER_MTNA)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTNA> ");
+		dprintk(SAA716x_DEBUG, 0, "<MTNA> ");
 
 	if (stat & I2C_FAILURE_INTER_MAF)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MAF> ");
+		dprintk(SAA716x_DEBUG, 0, "<MAF> ");
 
 	if (stat & I2C_INTERRUPT_MTD)
-		dprintk(SAA716x_DEBUG, 0, "<INTERRUPT_MTD> ");
+		dprintk(SAA716x_DEBUG, 0, "<MTD> ");
 
 	return 0;
 }
@@ -115,7 +118,6 @@ static irqreturn_t saa716x_i2c_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-
 static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
@@ -133,43 +135,22 @@ static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	return;
 }
 
-static int saa716x_xfer_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
+static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
-	u32 stat;
-	int err = 0, timeout = 0;
+	struct i2c_adapter *adapter = &i2c->i2c_adapter;
 
-	if (wait_event_timeout(i2c->i2c_wq,
-			       i2c->int_stat & I2C_INTERRUPT_MTD,
-			       msecs_to_jiffies(100) == -ERESTARTSYS)) {
+	int i, err = -1;
+	u32 reg;
 
-		dprintk(SAA716x_ERROR, 1, "Master transaction failed");
+	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+	if (!(reg & 0xd)) {
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !",
+			I2C_DEV, adapter->name);
 		err = -EIO;
+		goto exit;
 	}
 
-	stat = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-	while (! (stat & I2C_TRANSMIT_CLEAR)) {
-		dprintk(SAA716x_ERROR, 0, "\n        Bus (%d) Waiting for TX FIFO to be empty (status=%02x <%s>)",
-			I2C_DEV, stat, state[stat]);
-
-		msleep(5);
-		timeout++;
-		if (timeout > 200) {
-			dprintk(SAA716x_ERROR, 1, "TX FIFO empty timeout");
-			saa716x_term_xfer(i2c, I2C_DEV);
-			err = -EIO;
-			break;
-		}
-	}
-	return err;
-}
-
-static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
-{
-	struct saa716x_dev *saa716x = i2c->saa716x;
-	u32 reg;
-	int err;
-
 	/* Flush queue */
 	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xcc);
 
@@ -180,11 +161,21 @@ static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	/* Reset I2C Core and generate a delay */
 	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xc1);
 
-	msleep(100);
+	for (i = 0; i < 100; i++) {
+		reg = SAA716x_EPRD(I2C_DEV, I2C_CONTROL);
+		if (reg == 0xc0) {
+			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET",
+				I2C_DEV, adapter->name);
+			break;
+		}
+		msleep(1);
+	}
+
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed",
+			I2C_DEV, adapter->name);
 
-	reg = SAA716x_EPRD(I2C_DEV, I2C_CONTROL);
-	if (reg != 0xc0) {
-		dprintk(SAA716x_ERROR, 1, "Core RESET failed");
+		saa716x_term_xfer(i2c, I2C_DEV);
 		err = -EIO;
 		goto exit;
 	}
@@ -192,82 +183,156 @@ static int saa716x_i2c_reinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	/* I2C Rate Setup */
 	switch (i2c->i2c_rate) {
 	case SAA716x_I2C_RATE_400:
-		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 400k");
+
+		dprintk(SAA716x_DEBUG, 1, "Initializing Adapter %s @ 400k", adapter->name);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x19);
 		break;
+
 	case SAA716x_I2C_RATE_100:
-		dprintk(SAA716x_DEBUG, 1, "Reinit Adapter @ 100k");
-		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
+
+		dprintk(SAA716x_DEBUG, 1, "Initializing Adapter %s @ 100k", adapter->name);
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/100kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/100kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x60);
 		break;
+
 	default:
-		dprintk(SAA716x_ERROR, 1, "Unknown Rate (Rate=0x%02x)", i2c->i2c_rate);
+
+		dprintk(SAA716x_ERROR, 1, "Adapter %s Unknown Rate (Rate=0x%02x)",
+			adapter->name,
+			i2c->i2c_rate);
+
 		break;
 	}
 
 	/* Disable all interrupts and clear status */
 	SAA716x_EPWR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
 	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
-
-	/* enable interrupts: transaction done, arbitration, No Ack and I2C error */
-	SAA716x_EPWR(I2C_DEV, INT_SET_ENABLE, 0x00c7);
+#if 0
+	/* Enabled interrupts:
+	* Master Transaction Done (),
+	* Master Arbitration Failure,
+	* Master Transaction No Ack,
+	* I2C Error IBE
+	* Master Transaction Data Request
+	* (0xc7)
+	*/
+	msleep(5);
+
+	SAA716x_EPWR(I2C_DEV[i],
+			INT_SET_ENABLE,
+			I2C_MASTER_INTERRUPT_MTDR	| \
+			I2C_ERROR_IBE		| \
+			I2C_ENABLE_MTNA		| \
+			I2C_ENABLE_MAF		| \
+			I2C_ENABLE_MTD);
 
 	/* Check interrupt enable status */
-	reg = SAA716x_EPRD(I2C_DEV, INT_ENABLE);
+	reg = SAA716x_EPRD(I2C_DEV[i], INT_ENABLE);
 	if (reg != 0xc7) {
-		dprintk(SAA716x_ERROR, 1, "Interrupt enable failed, Exiting !");
+
+		dprintk(SAA716x_ERROR, 1,
+			"Adapter (%d) %s Interrupt enable failed, Exiting !",
+			i,
+			adapter->name);
+
+		err = -EIO;
+		goto exit;
+	}
+#endif
+	/* Check status */
+	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+	if (!(reg & 0xd)) {
+
+		dprintk(SAA716x_ERROR, 1,
+			"Adapter (%d) %s has bad state, Exiting !",
+			I2C_DEV,
+			adapter->name);
+
 		err = -EIO;
 		goto exit;
 	}
+#if 0
+	saa716x_add_irqvector(saa716x,
+				i2c_vec[i].vector,
+				i2c_vec[i].edge,
+				i2c_vec[i].handler,
+				SAA716x_I2C_ADAPTER(i));
+#endif
+	reg = SAA716x_EPRD(CGU, CGU_SCR_3);
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Autowake <%d> Active <%d>",
+		I2C_DEV,
+		(reg >> 1) & 0x01,
+		reg & 0x01);
+
 	return 0;
 exit:
-	dprintk(SAA716x_ERROR, 1, "I2C Reinit failed");
 	return err;
 }
 
-static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 data)
+
+
+static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
-	int err = 0;
+	int i, err = 0;
 	u32 reg;
 
 	/* Check FIFO status before TX */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+	i2c->stat_tx_prior = reg;
 	if (reg & SAA716x_I2C_TXBUSY) {
-		msleep(10);
-		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-		if (reg & SAA716x_I2C_TXBUSY) {
-			dprintk(SAA716x_ERROR, 1, "FIFO full or Blocked");
-
- 			err = saa716x_i2c_reinit(i2c, I2C_DEV);
- 			if (err < 0) {
- 				dprintk(SAA716x_ERROR, 1, "Error Reinit");
- 				err = -EIO;
-				goto exit;
- 			}
-			err = -EBUSY;
-			goto exit;
+		for (i = 0; i < 100; i++) {
+			/* TODO! check for hotplug devices */
+			msleep(10);
+			reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+
+			if (reg & SAA716x_I2C_TXBUSY) {
+				dprintk(SAA716x_ERROR, 1, "FIFO full or Blocked");
+
+				err = saa716x_i2c_hwinit(i2c, I2C_DEV);
+				if (err < 0) {
+					dprintk(SAA716x_ERROR, 1, "Error Reinit");
+					err = -EIO;
+					goto exit;
+				}
+			} else {
+				break;
+			}
 		}
-		err = -EBUSY;
-		goto exit;
 	}
 
 	/* Write to FIFO */
 	SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
-	err = saa716x_xfer_wait(i2c, I2C_DEV);
-	if (err < 0) {
-		err = saa716x_i2c_reinit(i2c, I2C_DEV);
+	msleep(50);
+	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+	i2c->stat_tx_done = reg;
+
+	/* Check for data write */
+	for (i = 0; i < 100; i++) {
+		/* TODO! check for hotplug devices */
+
+		if (!(reg & I2C_TRANSMIT_CLEAR)) {
+			msleep(10);
+			reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+		} else {
+			break;
+		}
+	}
+
+	if (!(reg & I2C_TRANSMIT_CLEAR)) {
+		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout!");
+		err = saa716x_i2c_hwinit(i2c,I2C_DEV);
 		if (err < 0) {
 			dprintk(SAA716x_ERROR, 1, "Error Reinit");
-			err = -EBUSY;
+			err = -EIO;
 			goto exit;
 		}
-		err = -EIO;
-		goto exit;
 	}
+
+
 	return err;
 
 exit:
@@ -275,7 +340,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 data)
 	return err;
 }
 
-static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
+static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
 	int err = 0;
@@ -284,14 +349,14 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
 	/* Check FIFO status before RX */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (reg & SAA716x_I2C_RXBUSY) {
-		msleep(10);
+		msleep(1);
 		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 		if (reg & SAA716x_I2C_RXBUSY) {
-			dprintk(SAA716x_ERROR, 1, "FIFO empty");
+			dprintk(SAA716x_INFO, 1, "FIFO empty");
 
-			err = saa716x_i2c_reinit(i2c, I2C_DEV);
+			err = saa716x_i2c_hwinit(i2c, I2C_DEV);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Error Reinit");
+				dprintk(SAA716x_INFO, 1, "Error Reinit");
 				err = -EIO;
 				goto exit;
 			}
@@ -311,56 +376,47 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u8 *data)
 	return err;
 }
 
-static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u8 I2C_DEV)
+static int saa716x_i2c_rd(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x	= i2c->saa716x;
-	u8 rxd;
+	u32 addr, rxd = 0;
 	int i, err = 0;
 
-	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <R>[ ", __func__, msg->addr << 1);
-
-	/* Write */
-	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr << 1 | 0x01);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "Transfer failed");
-		err = -EIO;
-		goto exit;
-	}
 
 	for (i = 0; i < msg->len; i++) {
-		if (i == (msg->len - 1)) {
-			err = saa716x_i2c_send(i2c, I2C_DEV, (u8)I2C_STOP_BIT);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto exit;
-			}
-			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Receive failed");
-				err = -EIO;
-				goto exit;
-			}
-			msg->buf[i] = rxd;
-			dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
-		} else {
-			err = saa716x_i2c_send(i2c, I2C_DEV, 0x00); /* Send dummy */
+		if (i == 0) {
+			addr  = (msg->addr << 1) | 0x1;
+			addr |= I2C_START_BIT;
+
+			dprintk(SAA716x_NOTICE, 0, "        %s: Slave=[0x%02x] len=%02x <R>[ ",
+				__func__,
+				addr,
+				msg->len);
+
+			err = saa716x_i2c_send(i2c, I2C_DEV, addr);
 			if (err < 0) {
 				dprintk(SAA716x_ERROR, 1, "Send failed");
 				err = -EIO;
 				goto exit;
 			}
-			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Receive failed");
-				err = -EIO;
-				goto exit;
-			}
-			msg->buf[i] = rxd;
-			dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
 		}
-		dprintk(SAA716x_DEBUG, 0, "]\n");
+
+		msleep(20);
+
+		err = saa716x_i2c_send(i2c, I2C_DEV, 0x00);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Send failed");
+			err = -EIO;
+			goto exit;
+		}
+
+		msleep(20);
+
+		err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
+		dprintk(SAA716x_NOTICE, 0, "%02x ", rxd);
+		msg->buf[i] = rxd;
 	}
+	dprintk(SAA716x_NOTICE, 0, "]\n");
 
 	return 0;
 exit:
@@ -368,47 +424,48 @@ static int saa716x_i2c_read(struct saa716x_i2c *i2c, const struct i2c_msg *msg,
 	return err;
 }
 
-static int saa716x_i2c_write(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u8 I2C_DEV)
+static int saa716x_i2c_wr(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x	= i2c->saa716x;
 
 	int i, err = 0;
+	u32 addr;
 
 	/* Clear INT status before first byte */
 	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
-	dprintk(SAA716x_DEBUG, 0, "        %s: Address=[0x%02x] <W>[ ", __func__, msg->addr << 1);
-	err = saa716x_i2c_send(i2c, I2C_DEV, I2C_START_BIT | msg->addr << 1);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "Transfer failed");
-		err = -EIO;
-		goto exit;
-	}
-
 	for (i = 0; i < msg->len; i++) {
-		dprintk(SAA716x_DEBUG, 0, "%02x ", msg->buf[i]);
-		if (i == (msg->len - 1)) {
-			err = saa716x_i2c_send(i2c, I2C_DEV, I2C_STOP_BIT | msg->buf[i]);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto exit;
-			}
+		if (i == 0) {
+			addr  = msg->addr << 1;
+			addr |= I2C_START_BIT;
+
+			dprintk(SAA716x_NOTICE, 0, "        %s: Slave=[0x%02x] len=%02x <W>[ ",
+				__func__,
+				addr,
+				msg->len);
+
+			err = saa716x_i2c_send(i2c, I2C_DEV, addr);
 		} else {
 			err = saa716x_i2c_send(i2c, I2C_DEV, msg->buf[i]);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto exit;
-			}
 		}
-	}
+		dprintk(SAA716x_NOTICE, 0, "%02x ", msg->buf[i]);
 
-	dprintk(SAA716x_DEBUG, 1, "Wrote Slave ADDRESS + START_BIT");
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Transfer failed");
+			err = -EIO;
+			goto exit;
+		}
+	}
+	dprintk(SAA716x_NOTICE, 0, "]\n");
+	dprintk(SAA716x_DEBUG, 1, "Status Prior TX <0x%02x> After TX <0x%02x>",
+		i2c->stat_tx_prior,
+		i2c->stat_tx_done);
 
 	return 0;
 exit:
 	dprintk(SAA716x_ERROR, 1, "Error Writing data, err=%d", err);
+	dprintk(SAA716x_DEBUG, 1, "TXFIFO Bytes=%d", SAA716x_EPRD(I2C_DEV, I2C_TX_LEVEL));
+	dprintk(SAA716x_DEBUG, 1, "Module Config=<%02x>", SAA716x_EPRD(I2C_DEV, MODULE_CONF));
 	return err;
 }
 
@@ -416,19 +473,20 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 {
 	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
 	struct saa716x_dev *saa716x	= i2c->saa716x;
-	u8 DEV				= i2c->i2c_dev;
+//	u8 DEV				= i2c->i2c_dev;
+	u32 DEV = I2C_B;
 
 	int ret = 0, i;
 
 	dprintk(SAA716x_DEBUG, 0, "\n");
-	dprintk(SAA716x_DEBUG, 1, "Bus(%d) I2C transfer", DEV);
+	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
 	mutex_lock(&i2c->i2c_lock);
 
 	for (i = 0; i < num; i++) {
 		if (msgs[i].flags & I2C_M_RD)
-			ret = saa716x_i2c_read(i2c, &msgs[i], DEV);
+			ret = saa716x_i2c_rd(i2c, &msgs[i], DEV);
 		else
-			ret = saa716x_i2c_write(i2c, &msgs[i], DEV);
+			ret = saa716x_i2c_wr(i2c, &msgs[i], DEV);
 
 		if (ret < 0)
 			goto bail_out;
@@ -486,12 +544,9 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	struct pci_dev *pdev		= saa716x->pdev;
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *adapter	= NULL;
+	u32 *I2C_DEV			= saa716x->I2C_DEV;
 
 	int i, err = 0;
-	u32 reg;
-	u32 *I2C_DEV;
-
-	I2C_DEV = saa716x->I2C_DEV;
 
 	if (saa716x->revision > 2) {
 		I2C_DEV[0] = I2C_A;
@@ -501,14 +556,15 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		I2C_DEV[1] = I2C_A;
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core", saa716x->pdev->device);
+	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core",
+		saa716x->pdev->device);
+
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
 		mutex_init(&i2c->i2c_lock);
-		init_waitqueue_head(&i2c->i2c_wq);
 
 		i2c->i2c_dev	= I2C_DEV[i];
-		i2c->i2c_rate	= saa716x->i2c_rate;
+		i2c->i2c_rate	= saa716x->config->i2c_rate;
 		adapter		= &i2c->i2c_adapter;
 
 		if (adapter != NULL) {
@@ -526,139 +582,24 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			adapter->retries	= 3; /* FIXME ! */
 			adapter->dev.parent	= &pdev->dev;
 
-			dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s", i, adapter->name);
+			dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s",
+				i,
+				adapter->name);
+
 			err = i2c_add_adapter(adapter);
 			if (err < 0) {
 				dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, adapter->name);
 				goto exit;
 			}
 
-			msleep(100);
-
-			reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
-			if (!(reg & 0xd)) {
-				dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !", i, adapter->name);
-				err = -EIO;
-				goto exit;
-			}
-
-			/* Flush queue */
-			SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xcc);
-
-			/* Disable all interrupts and clear status */
-			SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
-			SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
-
-			/* Reset I2C Core and generate a delay */
-			SAA716x_EPWR(I2C_DEV[i], I2C_CONTROL, 0xc1);
-
-			msleep(100);
-
-			reg = SAA716x_EPRD(I2C_DEV[i], I2C_CONTROL);
-			if (reg != 0xc0) {
-				dprintk(SAA716x_ERROR, 1, "Core RESET failed");
-				err = -EIO;
-				goto exit;
-			}
-
-			/* I2C Rate Setup */
-			switch (i2c->i2c_rate) {
-			case SAA716x_I2C_RATE_400:
-
-				dprintk(SAA716x_DEBUG, 1,
-					"Initializing Adapter (%d) %s @ 400k",
-					i,
-					adapter->name);
-
-				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-				SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x19);
-				break;
-
-			case SAA716x_I2C_RATE_100:
-
-				dprintk(SAA716x_DEBUG, 1,
-					"Initializing Adapter (%d) %s @ 100k",
-					i,
-					adapter->name);
-
-				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/400kHz */
-				SAA716x_EPWR(I2C_DEV[i], I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/400kHz */
-				SAA716x_EPWR(I2C_DEV[i], I2C_SDA_HOLD, 0x60);
-				break;
-
-			default:
-
-				dprintk(SAA716x_ERROR, 1,
-					"Adapter (%d) %s Unknown Rate (Rate=0x%02x)",
-					i,
-					adapter->name,
-					i2c->i2c_rate);
-
-				break;
-			}
-
-			/* Disable all interrupts and clear status */
-			SAA716x_EPWR(I2C_DEV[i], INT_CLR_ENABLE, 0x1fff);
-			SAA716x_EPWR(I2C_DEV[i], INT_CLR_STATUS, 0x1fff);
-
-			/* Enabled interrupts:
-			* Master Transaction Done (),
-			* Master Arbitration Failure,
-			* Master Transaction No Ack,
-			* I2C Error IBE
-			* Master Transaction Data Request
-			* (0xc7)
-			*/
-			msleep(5);
-
-			SAA716x_EPWR(I2C_DEV[i], INT_SET_ENABLE, I2C_MASTER_INTERRUPT_MTDR	| \
-							I2C_ERROR_IBE			| \
-							I2C_ENABLE_MTNA			| \
-							I2C_ENABLE_MAF			| \
-							I2C_ENABLE_MTD);
-
-			/* Check interrupt enable status */
-			reg = SAA716x_EPRD(I2C_DEV[i], INT_ENABLE);
-			if (reg != 0xc7) {
-
-				dprintk(SAA716x_ERROR, 1,
-					"Adapter (%d) %s Interrupt enable failed, Exiting !",
-					i,
-					adapter->name);
-
-				err = -EIO;
-				goto exit;
-			}
-
-			/* Check status */
-			reg = SAA716x_EPRD(I2C_DEV[i], I2C_STATUS);
-			if (!(reg & 0xd)) {
-
-				dprintk(SAA716x_ERROR, 1,
-					"Adapter (%d) %s has bad state, Exiting !",
-					i,
-					adapter->name);
-
-				err = -EIO;
-				goto exit;
-			}
-
-			saa716x_add_irqvector(saa716x,
-					      i2c_vec[i].vector,
-					      i2c_vec[i].edge,
-					      i2c_vec[i].handler,
-					      SAA716x_I2C_ADAPTER(i));
-
-			reg = SAA716x_EPRD(CGU, CGU_SCR_3);
-			dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Autowake <%d> Active <%d>", i, (reg >> 1) & 0x01, reg & 0x01);
-
 			i2c->saa716x = saa716x;
+			saa716x_i2c_hwinit(i2c, I2C_DEV[i]);
 		}
 		i2c++;
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully initialized", saa716x->pdev->device);
+	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully initialized",
+		saa716x->pdev->device);
 
 	return 0;
 exit:
@@ -677,9 +618,9 @@ int __devexit saa716x_i2c_exit(struct saa716x_dev *saa716x)
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
 		adapter = &i2c->i2c_adapter;
-
+#if 0
 		saa716x_remove_irqvector(saa716x, i2c_vec[i].vector);
-
+#endif
 		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
 
 		err = i2c_del_adapter(adapter);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 317dfae03df93..ebcdaeaa36ecd 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -22,8 +22,10 @@ struct saa716x_i2c {
 	u8				i2c_dev;
 
 	enum saa716x_i2c_rate		i2c_rate; /* run time */
-	wait_queue_head_t		i2c_wq;
-	u32				int_stat;
+	u32				i2c_stat;
+
+	u32				stat_tx_prior;
+	u32				stat_tx_done;
 };
 
 extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index a707f727e52f1..1d7373db3f4d3 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -428,11 +428,6 @@ int saa716x_add_irqvector(struct saa716x_dev *saa716x,
 	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
 	dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x>", ena_l, ena_h);
 
-#if 0
-	/* debug */
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_SET_L, mask_l);
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_SET_H, mask_h);
-#endif
 	return 0;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 72b97f6783bc6..0a03a850250de 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -2,8 +2,6 @@
 #include "saa716x_priv.h"
 #include "saa716x_phi.h"
 
-
-
 u32 PHI_0_REGS[] = {
 	PHI_0_MODE,
 	PHI_0_0_CONFIG,
@@ -97,28 +95,28 @@ int saa716x_phi_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL_GPL(saa716x_phi_init);
 
-int saa716x_phi_write(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length)
+int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 * data, int length)
 {
 	int i;
 
-	for (i = 0; i < length; i += 4)
-	{
-		SAA716x_EPWR(PHI_1, address, *((uint32_t *) &data[i]));
+	for (i = 0; i < length; i += 4) {
+		SAA716x_EPWR(PHI_1, address, *((u32 *) &data[i]));
 		address += 4;
 	}
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_phi_write);
 
-int saa716x_phi_read(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length)
+int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, const u8 * data, int length)
 {
 	int i;
 
-	for (i = 0; i < length; i += 4)
-	{
-		*((uint32_t *) &data[i]) = SAA716x_EPRD(PHI_1, address);
+	for (i = 0; i < length; i += 4) {
+		*((u32 *) &data[i]) = SAA716x_EPRD(PHI_1, address);
 		address += 4;
 	}
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_phi_read);
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index aa4f38cfc1720..5eb92a7d869bb 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -31,7 +31,7 @@
 
 extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
 extern int saa716x_phi_init(struct saa716x_dev *saa716x);
-extern int saa716x_phi_write(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length);
-extern int saa716x_phi_read(struct saa716x_dev *saa716x, uint32_t address, const uint8_t * data, int length);
+extern int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 *data, int length);
+extern int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, const u8 *data, int length);
 
 #endif /* __SAA716x_PHI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index fa9474551d017..cc7eeb5aa6cf3 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -103,6 +103,7 @@ struct saa716x_config {
 	irqreturn_t (*irq_handler)(int irq, void *dev_id);
 
 	struct saa716x_adap_config	adap_config[2];
+	enum saa716x_i2c_rate		i2c_rate;
 };
 
 struct saa716x_adapter {
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
new file mode 100644
index 0000000000000..e558fc6ae5b99
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -0,0 +1,122 @@
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include "saa716x_priv.h"
+#include "saa716x_rom.h"
+#include "saa716x_adap.h"
+
+static int eeprom_read_byte(struct saa716x_dev *saa716x, u16 reg, u8 *val)
+{
+	struct saa716x_i2c *i2c = saa716x->i2c;
+	struct i2c_adapter *adapter = &i2c[1].i2c_adapter;
+
+	int ret;
+	u8 b0[] = { MSB(reg), LSB(reg) };
+	u8 b1;
+
+	struct i2c_msg msg[] = {
+		{ .addr = 0x50, .flags = 0,	   .buf = b0,  .len = sizeof (b0) },
+		{ .addr = 0x50,	.flags = I2C_M_RD, .buf = &b1, .len = sizeof (b1) }
+	};
+
+	ret = i2c_transfer(adapter, msg, 2);
+	if (ret != 2) {
+		dprintk(SAA716x_ERROR, 1, "read error <reg=0x%02x, ret=%i>", reg, ret);
+		return -EREMOTEIO;
+	}
+	*val = b1;
+
+	return ret;
+}
+
+int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
+{
+	u8 buf[256];
+	int i, err = 0;
+
+	for (i = 0; i < 256; i++) {
+		err = eeprom_read_byte(saa716x, i, &buf[i]);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
+			return err;
+		}
+		dprintk(SAA716x_NOTICE, 1, "EEPROM <0x%02x>=[%02x] (%c)", i, buf[i], (char )buf[i]);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_dump_eeprom);
+
+static int saa716x_eeprom_header(struct saa716x_dev *saa716x, struct saa716x_romhdr *rom_header)
+{
+	u8 buf[256];
+	int i, err = 0;
+
+	dprintk(SAA716x_ERROR, 1, "Reading ROM header %02x bytes",
+		sizeof (struct saa716x_romhdr));
+
+	for (i = 0; i < sizeof (struct saa716x_romhdr); i++) {
+		err = eeprom_read_byte(saa716x, i, &buf[i]);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
+			return err;
+		}
+		dprintk(SAA716x_NOTICE, 1, "EEPROM <0x%02x>=[%02x]", i, buf[i]);
+	}
+
+	memcpy(rom_header, buf, sizeof (struct saa716x_romhdr));
+	if (rom_header->header_size != sizeof (struct saa716x_romhdr)) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			sizeof (struct saa716x_romhdr),
+			rom_header->header_size);
+
+		return -1;
+	}
+
+	dprintk(SAA716x_ERROR, 1, "EEPROM: Data Size=%d bytes", rom_header->data_size);
+	dprintk(SAA716x_ERROR, 1, "EEPROM: Version=%d", rom_header->version);
+	dprintk(SAA716x_ERROR, 1, "EEPROM: Devices=%d", rom_header->devices);
+
+	return 0;
+}
+
+int saa716x_eeprom_data(struct saa716x_dev *saa716x)
+{
+	struct saa716x_romhdr rom_header;
+
+	u8 *rom_data;
+	int i, ret = 0;
+
+	/* Get header */
+	ret = saa716x_eeprom_header(saa716x, &rom_header);
+	if (ret != 0) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Header Read failed <%d>", ret);
+		goto err0;
+	}
+
+	/* Allocate length */
+	rom_data = kzalloc(sizeof (u8) * rom_header.data_size, GFP_KERNEL);
+	if (rom_data == NULL) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: out of memory");
+		ret = -ENOMEM;
+		goto err1;
+	}
+
+	/* Get data */
+	for (i = 0; i < rom_header.data_size; i++) {
+		ret = eeprom_read_byte(saa716x, i, &rom_data[i]);
+		if (ret < 0) {
+			dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
+			goto err0;
+		}
+		dprintk(SAA716x_NOTICE, 1, "EEPROM <0x%02x>=[%02x]", i, rom_data[i]);
+	}
+
+	return 0;
+
+err1:
+	kfree(rom_data);
+
+err0:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(saa716x_eeprom_data);
diff --git a/drivers/media/pci/saa716x/saa716x_rom.h b/drivers/media/pci/saa716x/saa716x_rom.h
new file mode 100644
index 0000000000000..015e91cdd6c43
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_rom.h
@@ -0,0 +1,33 @@
+#ifndef __SAA716x_ROM_H
+#define __SAA716x_ROM_H
+
+
+#define MSB(__x)	((__x >> 8) & 0xff)
+#define LSB(__x)	(__x & 0xff)
+
+struct saa716x_romhdr {
+	u16	header_size;
+	u8	compression;
+	u8	version;
+	u16	data_size;
+	u8	devices;
+	u8	checksum;
+};
+
+struct saa716x_devinfo {
+	u8	struct_size;
+	u8	device_id;
+	u8	master_devid;
+	u8	master_busid;
+	u32	device_type;
+	u8	implem_id;
+	u8	path_id;
+	u8	gpio_id;
+	u16	addr_size;
+	u16	extd_data_size;
+};
+
+extern int saa716x_dump_eeprom(struct saa716x_dev *saa716x);
+extern int saa716x_eeprom_data(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_ROM_H */

From 444c8146a5c333d14fa700f96a1534a4b14e0357 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:40:23 +0400
Subject: [PATCH 101/364] saa716x: Set the default rate for the NEMO reference
 design

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 1 +
 drivers/media/pci/saa716x/saa716x_i2c.c    | 7 +++++--
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index b7d4a7c853a57..0fefbd10c70d9 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -361,6 +361,7 @@ static struct saa716x_config saa716x_nemo_config = {
 	.adapters		= 1,
 	.frontend_attach	= saa716x_nemo_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 7f056fb26b9f4..6e1dd44a91842 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -140,7 +140,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	struct saa716x_dev *saa716x = i2c->saa716x;
 	struct i2c_adapter *adapter = &i2c->i2c_adapter;
 
-	int i, err = -1;
+	int i, err = 0;
 	u32 reg;
 
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
@@ -169,6 +169,9 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 			break;
 		}
 		msleep(1);
+
+		if (i == 99)
+			err = -EIO;
 	}
 
 	if (err) {
@@ -324,7 +327,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
 		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout!");
-		err = saa716x_i2c_hwinit(i2c,I2C_DEV);
+		err = saa716x_i2c_hwinit(i2c, I2C_DEV);
 		if (err < 0) {
 			dprintk(SAA716x_ERROR, 1, "Error Reinit");
 			err = -EIO;

From 06157e5cfa9cc6b6b2e552ac9ee200d8d31e00fe Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:45:07 +0400
Subject: [PATCH 102/364] saa716x: Code simplification, Overhauling, I2C
 related fixes Initial test with the NEMO reference device

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         |    3 +-
 drivers/media/pci/saa716x/saa716x_budget.c |   12 +-
 drivers/media/pci/saa716x/saa716x_ff.c     | 1093 ++++++++++----------
 drivers/media/pci/saa716x/saa716x_hybrid.c |   54 +-
 drivers/media/pci/saa716x/saa716x_i2c.c    |  202 ++--
 drivers/media/pci/saa716x/saa716x_priv.h   |    1 +
 drivers/media/pci/saa716x/saa716x_rom.c    |  912 +++++++++++++++-
 drivers/media/pci/saa716x/saa716x_rom.h    |  221 +++-
 drivers/media/pci/saa716x/saa716x_spi.c    |   22 +
 drivers/media/pci/saa716x/saa716x_spi.h    |    6 +
 10 files changed, 1813 insertions(+), 713 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_spi.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_spi.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 01a74778b62b6..016fd2f26ced6 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -11,7 +11,8 @@ saa716x_core-objs		 := saa716x_pci.o	\
 				    saa716x_adap.o	\
 				    saa716x_gpio.o	\
 				    saa716x_greg.o	\
-				    saa716x_rom.o
+				    saa716x_rom.o	\
+				    saa716x_spi.o
 
 obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 3a531fe5e7846..291dfaf9568fa 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -87,18 +87,22 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		goto fail3;
 	}
 
-	err = saa716x_dvb_init(saa716x);
+	err = saa716x_dump_eeprom(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
-		goto fail4;
+		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
 
-	/* Experiments */
 	err = saa716x_eeprom_data(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM read failed");
 	}
 
+	err = saa716x_dvb_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		goto fail4;
+	}
+
 	return 0;
 
 fail4:
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index a9178bcd8047a..a87e9b3155d81 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -24,6 +24,8 @@
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
 #include "saa716x_phi.h"
+#include "saa716x_rom.h"
+#include "saa716x_spi.h"
 
 #include <linux/dvb/osd.h>
 
@@ -37,394 +39,6 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x FF"
 
-static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x);
-static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x);
-static int saa716x_ff_osd_init(struct saa716x_dev *saa716x);
-static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x);
-static int sti7109_send_cmd(struct sti7109_dev *sti7109, const u8 *data, int length);
-
-static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
-{
-	struct saa716x_dev *saa716x;
-	struct sti7109_dev *sti7109;
-	int err = 0;
-	u32 value;
-
-	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
-	if (saa716x == NULL) {
-		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
-		err = -ENOMEM;
-		goto fail0;
-	}
-
-	saa716x->verbose	= verbose;
-	saa716x->int_type	= int_type;
-	saa716x->pdev		= pdev;
-	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
-
-	err = saa716x_pci_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
-		goto fail1;
-	}
-
-	err = saa716x_cgu_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
-		goto fail1;
-	}
-
-	err = saa716x_core_boot(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
-		goto fail2;
-	}
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
-
-	err = saa716x_msi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
-		goto fail2;
-	}
-
-	err = saa716x_jetpack_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
-		goto fail1;
-	}
-
-	err = saa716x_i2c_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
-		goto fail3;
-	}
-
-	err = saa716x_phi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
-		goto fail3;
-	}
-
-	/* prepare the sti7109 device struct */
-	sti7109 = kzalloc(sizeof(struct sti7109_dev), GFP_KERNEL);
-	if (!sti7109) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x: out of memory");
-		goto fail3;
-	}
-
-	sti7109->dev	= saa716x;
-	saa716x->priv	= sti7109;
-
-	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
-	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
-	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
-	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS1);
-	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN);
-	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
-	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
-
-	/* hold ST in reset */
-	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND, 0);
-
-	/* enable board power */
-	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 1);
-	msleep(100);
-
-	err = saa716x_ff_fpga_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF FPGA Initialization failed");
-		goto fail4;
-	}
-
-	/* enable interrupts from ST7109 -> PC */
-	SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICTRL, 0x3);
-
-	value = SAA716x_EPRD(MSI, MSI_CONFIG33);
-	value &= 0xFCFFFFFF;
-	value |= MSI_INT_POL_EDGE_FALL;
-	SAA716x_EPWR(MSI, MSI_CONFIG33, value);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_EXTINT_0);
-
-	err = saa716x_ff_st7109_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF STi7109 initialization failed");
-		goto fail4;
-	}
-
-	err = saa716x_dvb_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
-		goto fail5;
-	}
-
-	err = saa716x_ff_osd_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
-		goto fail6;
-	}
-
-	if (0) {
-		u8 data[32];
-
-		memset(data, 0, sizeof(data));
-		data[0] = 0;
-		data[1] = 13;
-		data[2] = 0;
-		// command group
-		data[3] = 4;
-		// command id
-		data[4] = 0;
-		data[5] = 10; // create display
-		// width
-		data[6] = 0;
-		data[7] = 0;
-		data[8] = 0x07;
-		data[9] = 0x80;
-		// height
-		data[10] = 0;
-		data[11] = 0;
-		data[12] = 0x04;
-		data[13] = 0x38;
-		// color type
-		data[14] = 4;
-		sti7109_send_cmd(sti7109, data, 15);
-
-		msleep(100);
-
-		memset(data, 0, sizeof(data));
-		data[0] = 0;
-		data[1] = 28;
-		data[2] = 0;
-		// command group
-		data[3] = 4;
-		// command id
-		data[4] = 0;
-		data[5] = 71; // draw rectangle
-		// display handle
-		data[6] = 0;
-		data[7] = 0;
-		data[8] = 0;
-		data[9] = 0;
-		// x
-		data[10] = 0;
-		data[11] = 0;
-		data[12] = 0;
-		data[13] = 100;
-		// y
-		data[14] = 0;
-		data[15] = 0;
-		data[16] = 0;
-		data[17] = 200;
-		// w
-		data[18] = 0;
-		data[19] = 0;
-		data[20] = 0x02;
-		data[21] = 0x00;
-		// h
-		data[22] = 0;
-		data[23] = 0;
-		data[24] = 0x01;
-		data[25] = 0x00;
-		// color
-		data[26] = 0xFF;
-		data[27] = 0xFF;
-		data[28] = 0x00;
-		data[29] = 0x00;
-		sti7109_send_cmd(sti7109, data, 30);
-
-		msleep(100);
-
-		memset(data, 0, sizeof(data));
-		data[0] = 0;
-		data[1] = 8;
-		data[2] = 0;
-		// command group
-		data[3] = 4;
-		// command id
-		data[4] = 0;
-		data[5] = 15; // render display
-		// handle
-		data[6] = 0;
-		data[7] = 0;
-		data[8] = 0;
-		data[9] = 0;
-		sti7109_send_cmd(sti7109, data, 10);
-	}
-
-	return 0;
-
-fail6:
-	saa716x_ff_osd_exit(saa716x);
-fail5:
-	saa716x_dvb_exit(saa716x);
-fail4:
-	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
-
-	/* disable board power */
-	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
-
-	kfree(sti7109);
-fail3:
-	saa716x_i2c_exit(saa716x);
-fail2:
-	saa716x_pci_exit(saa716x);
-fail1:
-	kfree(saa716x);
-fail0:
-	return err;
-}
-
-static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
-{
-	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
-	struct sti7109_dev *sti7109 = saa716x->priv;
-
-	saa716x_ff_osd_exit(saa716x);
-
-	saa716x_dvb_exit(saa716x);
-
-	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
-
-	/* disable board power */
-	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
-
-	kfree(sti7109);
-
-	saa716x_i2c_exit(saa716x);
-	saa716x_pci_exit(saa716x);
-	kfree(saa716x);
-}
-
-static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
-{
-	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	uint32_t msiStatusH;
-	uint32_t phiISR;
-
-	if (unlikely(saa716x == NULL)) {
-		printk("%s: saa716x=NULL", __func__);
-		return IRQ_NONE;
-	}
-
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(VI0, INT_STATUS),
-		SAA716x_EPRD(VI1, INT_STATUS),
-		SAA716x_EPRD(VI0, INT_ENABLE),
-		SAA716x_EPRD(VI1, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(FGPI0, INT_STATUS),
-		SAA716x_EPRD(FGPI1, INT_STATUS),
-		SAA716x_EPRD(FGPI0, INT_ENABLE),
-		SAA716x_EPRD(FGPI0, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
-		SAA716x_EPRD(FGPI2, INT_STATUS),
-		SAA716x_EPRD(FGPI3, INT_STATUS),
-		SAA716x_EPRD(FGPI2, INT_ENABLE),
-		SAA716x_EPRD(FGPI3, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(AI0, AI_STATUS),
-		SAA716x_EPRD(AI1, AI_STATUS),
-		SAA716x_EPRD(AI0, AI_CTL),
-		SAA716x_EPRD(AI1, AI_CTL));
-
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
-
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(I2C_A, INT_STATUS),
-		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_ENABLE),
-		SAA716x_EPRD(I2C_B, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
-		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
-		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
-
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, SAA716x_EPRD(MSI, MSI_INT_STATUS_L));
-
-	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
-
-	if (msiStatusH & MSI_INT_EXTINT_0) {
-
-		struct sti7109_dev *sti7109 = saa716x->priv;
-
-		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
-		dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
-		if (phiISR & ISR_CMD_MASK) {
-
-			u32 value;
-			u32 length;
-			dprintk(SAA716x_INFO, 1, "CMD interrupt source");
-
-			value = SAA716x_EPRD(PHI_1, 0);
-			value = __cpu_to_be32(value);
-			length = (value >> 16) + 2;
-
-			dprintk(SAA716x_INFO, 1, "CMD length: %d", length);
-
-			if (length > MAX_RESULT_LEN) {
-				dprintk(SAA716x_ERROR, 1, "CMD length %d > %d", length, MAX_RESULT_LEN);
-				length = MAX_RESULT_LEN;
-			}
-
-			saa716x_phi_read(saa716x, 0, sti7109->result_data, length);
-			sti7109->result_len = length;
-			sti7109->result_avail = 1;
-			wake_up(&sti7109->result_avail_wq);
-
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CMD_MASK);
-		}
-
-		if (phiISR & ISR_READY_MASK) {
-			dprintk(SAA716x_INFO, 1, "READY interrupt source");
-			sti7109->cmd_ready = 1;
-			wake_up(&sti7109->cmd_ready_wq);
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_READY_MASK);
-		}
-
-		if (phiISR & ISR_BLOCK_MASK) {
-			dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");
-			sti7109->block_done = 1;
-			wake_up(&sti7109->block_done_wq);
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BLOCK_MASK);
-		}
-
-		if (phiISR & ISR_DATA_MASK) {
-			dprintk(SAA716x_INFO, 1, "DATA interrupt source");
-			sti7109->data_ready = 1;
-			wake_up(&sti7109->data_ready_wq);
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DATA_MASK);
-		}
-	}
-
-	return IRQ_HANDLED;
-}
-
-static void saa716x_spi_write(struct saa716x_dev *saa716x, const uint8_t * data, int length)
-{
-	int i;
-	u32 value;
-	int rounds;
-
-	for (i = 0; i < length; i++) {
-		SAA716x_EPWR(SPI, SPI_DATA, data[i]);
-		rounds = 0;
-		value = SAA716x_EPRD(SPI, SPI_STATUS);
-
-		while ((value & SPI_TRANSFER_FLAG) == 0 && rounds < 5000) {
-			value = SAA716x_EPRD(SPI, SPI_STATUS);
-			rounds++;
-		}
-	}
-}
-
 static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 {
 	int fpgaInit;
@@ -589,14 +203,210 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 		}
 	}
 
-	writtenBlock++;
-	writtenBlock |= 0x80000000;
-	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
+	writtenBlock++;
+	writtenBlock |= 0x80000000;
+	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
+
+	dprintk(SAA716x_INFO, 1, "SAA716x download ST7109 firmware done");
+
+	release_firmware(fw);
+
+	return 0;
+}
+
+static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
+						   sti7109->cmd_ready == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
+		return -EIO;
+	}
+
+	sti7109->cmd_ready = 0;
+	sti7109->result_avail = 0;
+	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
+
+	if (cmd->result_len > 0) {
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(sti7109->result_avail_wq,
+							   sti7109->result_avail == 1,
+							   timeout);
+
+		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
+			cmd->result_len = 0;
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1, "timed out waiting for command result");
+			return -EIO;
+		}
+
+		if (sti7109->result_len > 0) {
+			if (sti7109->result_len > cmd->result_len) {
+				memcpy(cmd->result_data, sti7109->result_data, cmd->result_len);
+			} else {
+				memcpy(cmd->result_data, sti7109->result_data, sti7109->result_len);
+				cmd->result_len = sti7109->result_len;
+			}
+		}
+	}
+
+	return 0;
+}
+
+static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+	u16 blockSize;
+	u16 lastBlockSize;
+	u16 numBlocks;
+	u16 blockIndex;
+	u8 blockHeader[SIZE_BLOCK_HEADER];
+	u8 * blockPtr;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
+						   sti7109->data_ready == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
+		return -EIO;
+	}
+
+	sti7109->data_ready = 0;
+
+	/* 8 bytes is the size of the block header. Block header structure is:
+	 * 16 bit - block index
+	 * 16 bit - number of blocks
+	 * 16 bit - current block data size
+	 * 16 bit - block handle. This is used to reference the data in the command that uses it.
+	 */
+	blockSize = SIZE_BLOCK_DATA - SIZE_BLOCK_HEADER;
+	numBlocks = data->data_length / blockSize;
+	lastBlockSize = data->data_length % blockSize;
+	if (lastBlockSize > 0)
+		numBlocks++;
+
+	blockHeader[2] = (u8) (numBlocks >> 8);
+	blockHeader[3] = (u8) numBlocks;
+	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
+	blockHeader[7] = (u8) sti7109->data_handle;
+	blockPtr = (u8 *) data->data_buffer;
+	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
+
+		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
+			blockSize = lastBlockSize;
+
+		blockHeader[0] = (uint8_t) (blockIndex >> 8);
+		blockHeader[1] = (uint8_t) blockIndex;
+		blockHeader[4] = (uint8_t) (blockSize >> 8);
+		blockHeader[5] = (uint8_t) blockSize;
+
+		sti7109->block_done = 0;
+		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA, blockHeader, SIZE_BLOCK_HEADER);
+		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + SIZE_BLOCK_HEADER, blockPtr, blockSize);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
+
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(sti7109->block_done_wq,
+							   sti7109->block_done == 1,
+							   timeout);
+
+		if (timeout == -ERESTARTSYS || sti7109->block_done == 0) {
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+			return -EIO;
+		}
+		blockPtr += blockSize;
+	}
+
+	data->data_handle = sti7109->data_handle;
+	sti7109->data_handle++;
+	return 0;
+}
+
+static int dvb_osd_ioctl(struct inode *inode, struct file *file,
+			 unsigned int cmd, void *parg)
+{
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+
+	if (cmd == OSD_RAW_CMD)
+		return sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
+	else if (cmd == OSD_RAW_DATA)
+		return sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
+
+	return -EINVAL;
+}
+
+
+static struct file_operations dvb_osd_fops = {
+	.owner		= THIS_MODULE,
+	.ioctl		= dvb_generic_ioctl,
+	.open		= dvb_generic_open,
+	.release	= dvb_generic_release,
+};
+
+static struct dvb_device dvbdev_osd = {
+	.priv		= NULL,
+	.users		= 1,
+	.writers	= 1,
+	.fops		= &dvb_osd_fops,
+	.kernel_ioctl	= dvb_osd_ioctl,
+};
+
+static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x)
+{
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	dvb_unregister_device(sti7109->osd_dev);
+	return 0;
+}
+
+static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
+{
+	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109		= saa716x->priv;
+
+	init_waitqueue_head(&sti7109->cmd_ready_wq);
+	sti7109->cmd_ready = 0;
 
-	dprintk(SAA716x_INFO, 1, "SAA716x download ST7109 firmware done");
+	init_waitqueue_head(&sti7109->result_avail_wq);
+	sti7109->result_avail = 0;
 
-	release_firmware(fw);
+	sti7109->data_handle = 0;
+	init_waitqueue_head(&sti7109->data_ready_wq);
+	sti7109->data_ready = 0;
+	init_waitqueue_head(&sti7109->block_done_wq);
+	sti7109->block_done = 0;
 
+	dvb_register_device(&saa716x_adap->dvb_adapter,
+			    &sti7109->osd_dev,
+			    &dvbdev_osd,
+			    sti7109,
+			    DVB_DEVICE_OSD);
 	return 0;
 }
 
@@ -626,199 +436,378 @@ static int sti7109_send_cmd(struct sti7109_dev * sti7109, const uint8_t * data,
 	return 0;
 }
 
-static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
-	unsigned long timeout;
+	struct saa716x_dev *saa716x;
+	struct sti7109_dev *sti7109;
+	int err = 0;
+	u32 value;
+
+	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	if (saa716x == NULL) {
+		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
+		err = -ENOMEM;
+		goto fail0;
+	}
+
+	saa716x->verbose	= verbose;
+	saa716x->int_type	= int_type;
+	saa716x->pdev		= pdev;
+	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
+
+	err = saa716x_pci_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
+		goto fail1;
+	}
+
+	err = saa716x_cgu_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		goto fail1;
+	}
+
+	err = saa716x_core_boot(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
+		goto fail2;
+	}
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
+
+	err = saa716x_msi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
+		goto fail2;
+	}
+
+	err = saa716x_jetpack_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
+		goto fail1;
+	}
+
+	err = saa716x_i2c_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		goto fail3;
+	}
+
+	err = saa716x_phi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
+		goto fail3;
+	}
+
+	/* prepare the sti7109 device struct */
+	sti7109 = kzalloc(sizeof(struct sti7109_dev), GFP_KERNEL);
+	if (!sti7109) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x: out of memory");
+		goto fail3;
+	}
+
+	sti7109->dev	= saa716x;
+	saa716x->priv	= sti7109;
+
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS1);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN);
+	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
+	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
+
+	/* hold ST in reset */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND, 0);
+
+	/* enable board power */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 1);
+	msleep(100);
+
+	err = saa716x_ff_fpga_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF FPGA Initialization failed");
+		goto fail4;
+	}
+
+	/* enable interrupts from ST7109 -> PC */
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICTRL, 0x3);
+
+	value = SAA716x_EPRD(MSI, MSI_CONFIG33);
+	value &= 0xFCFFFFFF;
+	value |= MSI_INT_POL_EDGE_FALL;
+	SAA716x_EPWR(MSI, MSI_CONFIG33, value);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_EXTINT_0);
+
+	err = saa716x_ff_st7109_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF STi7109 initialization failed");
+		goto fail4;
+	}
+
+	err = saa716x_dump_eeprom(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
+	}
+#if 0
+	err = saa716x_eeprom_data(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
+	}
+#endif
+	err = saa716x_dvb_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		goto fail5;
+	}
+
+	err = saa716x_ff_osd_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
+		goto fail6;
+	}
+
+	if (0) {
+		u8 data[32];
+
+		memset(data, 0, sizeof(data));
+		data[0] = 0;
+		data[1] = 13;
+		data[2] = 0;
+		// command group
+		data[3] = 4;
+		// command id
+		data[4] = 0;
+		data[5] = 10; // create display
+		// width
+		data[6] = 0;
+		data[7] = 0;
+		data[8] = 0x07;
+		data[9] = 0x80;
+		// height
+		data[10] = 0;
+		data[11] = 0;
+		data[12] = 0x04;
+		data[13] = 0x38;
+		// color type
+		data[14] = 4;
+		sti7109_send_cmd(sti7109, data, 15);
+
+		msleep(100);
+
+		memset(data, 0, sizeof(data));
+		data[0] = 0;
+		data[1] = 28;
+		data[2] = 0;
+		// command group
+		data[3] = 4;
+		// command id
+		data[4] = 0;
+		data[5] = 71; // draw rectangle
+		// display handle
+		data[6] = 0;
+		data[7] = 0;
+		data[8] = 0;
+		data[9] = 0;
+		// x
+		data[10] = 0;
+		data[11] = 0;
+		data[12] = 0;
+		data[13] = 100;
+		// y
+		data[14] = 0;
+		data[15] = 0;
+		data[16] = 0;
+		data[17] = 200;
+		// w
+		data[18] = 0;
+		data[19] = 0;
+		data[20] = 0x02;
+		data[21] = 0x00;
+		// h
+		data[22] = 0;
+		data[23] = 0;
+		data[24] = 0x01;
+		data[25] = 0x00;
+		// color
+		data[26] = 0xFF;
+		data[27] = 0xFF;
+		data[28] = 0x00;
+		data[29] = 0x00;
+		sti7109_send_cmd(sti7109, data, 30);
+
+		msleep(100);
+
+		memset(data, 0, sizeof(data));
+		data[0] = 0;
+		data[1] = 8;
+		data[2] = 0;
+		// command group
+		data[3] = 4;
+		// command id
+		data[4] = 0;
+		data[5] = 15; // render display
+		// handle
+		data[6] = 0;
+		data[7] = 0;
+		data[8] = 0;
+		data[9] = 0;
+		sti7109_send_cmd(sti7109, data, 10);
+	}
+
+	return 0;
+
+fail6:
+	saa716x_ff_osd_exit(saa716x);
+fail5:
+	saa716x_dvb_exit(saa716x);
+fail4:
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
+
+	/* disable board power */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
+
+	kfree(sti7109);
+fail3:
+	saa716x_i2c_exit(saa716x);
+fail2:
+	saa716x_pci_exit(saa716x);
+fail1:
+	kfree(saa716x);
+fail0:
+	return err;
+}
 
-	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
-						   sti7109->cmd_ready == 1,
-						   timeout);
+static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
+{
+	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
+	struct sti7109_dev *sti7109 = saa716x->priv;
 
-	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			return -ERESTARTSYS;
-		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
-		return -EIO;
-	}
+	saa716x_ff_osd_exit(saa716x);
 
-	sti7109->cmd_ready = 0;
-	sti7109->result_avail = 0;
-	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
-	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
+	saa716x_dvb_exit(saa716x);
 
-	if (cmd->result_len > 0) {
-		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->result_avail_wq,
-							   sti7109->result_avail == 1,
-							   timeout);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
 
-		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
-			cmd->result_len = 0;
-			if (timeout == -ERESTARTSYS) {
-				/* a signal arrived */
-				return -ERESTARTSYS;
-			}
-			dprintk(SAA716x_ERROR, 1, "timed out waiting for command result");
-			return -EIO;
-		}
+	/* disable board power */
+	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
 
-		if (sti7109->result_len > 0) {
-			if (sti7109->result_len > cmd->result_len) {
-				memcpy(cmd->result_data, sti7109->result_data, cmd->result_len);
-			} else {
-				memcpy(cmd->result_data, sti7109->result_data, sti7109->result_len);
-				cmd->result_len = sti7109->result_len;
-			}
-		}
-	}
+	kfree(sti7109);
 
-	return 0;
+	saa716x_i2c_exit(saa716x);
+	saa716x_pci_exit(saa716x);
+	kfree(saa716x);
 }
 
-static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
-	unsigned long timeout;
-	u16 blockSize;
-	u16 lastBlockSize;
-	u16 numBlocks;
-	u16 blockIndex;
-	u8 blockHeader[SIZE_BLOCK_HEADER];
-	u8 * blockPtr;
-
-	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
-						   sti7109->data_ready == 1,
-						   timeout);
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	uint32_t msiStatusH;
+	uint32_t phiISR;
 
-	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			return -ERESTARTSYS;
-		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
-		return -EIO;
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
 	}
 
-	sti7109->data_ready = 0;
+	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
+		SAA716x_EPRD(VI0, INT_STATUS),
+		SAA716x_EPRD(VI1, INT_STATUS),
+		SAA716x_EPRD(VI0, INT_ENABLE),
+		SAA716x_EPRD(VI1, INT_ENABLE));
 
-	/* 8 bytes is the size of the block header. Block header structure is:
-	 * 16 bit - block index
-	 * 16 bit - number of blocks
-	 * 16 bit - current block data size
-	 * 16 bit - block handle. This is used to reference the data in the command that uses it.
-	 */
-	blockSize = SIZE_BLOCK_DATA - SIZE_BLOCK_HEADER;
-	numBlocks = data->data_length / blockSize;
-	lastBlockSize = data->data_length % blockSize;
-	if (lastBlockSize > 0)
-		numBlocks++;
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
+		SAA716x_EPRD(FGPI0, INT_STATUS),
+		SAA716x_EPRD(FGPI1, INT_STATUS),
+		SAA716x_EPRD(FGPI0, INT_ENABLE),
+		SAA716x_EPRD(FGPI0, INT_ENABLE));
 
-	blockHeader[2] = (u8) (numBlocks >> 8);
-	blockHeader[3] = (u8) numBlocks;
-	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
-	blockHeader[7] = (u8) sti7109->data_handle;
-	blockPtr = (u8 *) data->data_buffer;
-	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
+	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
+		SAA716x_EPRD(FGPI2, INT_STATUS),
+		SAA716x_EPRD(FGPI3, INT_STATUS),
+		SAA716x_EPRD(FGPI2, INT_ENABLE),
+		SAA716x_EPRD(FGPI3, INT_ENABLE));
 
-		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
-			blockSize = lastBlockSize;
+	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
+		SAA716x_EPRD(AI0, AI_STATUS),
+		SAA716x_EPRD(AI1, AI_STATUS),
+		SAA716x_EPRD(AI0, AI_CTL),
+		SAA716x_EPRD(AI1, AI_CTL));
 
-		blockHeader[0] = (uint8_t) (blockIndex >> 8);
-		blockHeader[1] = (uint8_t) blockIndex;
-		blockHeader[4] = (uint8_t) (blockSize >> 8);
-		blockHeader[5] = (uint8_t) blockSize;
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
+		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
+		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
 
-		sti7109->block_done = 0;
-		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA, blockHeader, SIZE_BLOCK_HEADER);
-		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + SIZE_BLOCK_HEADER, blockPtr, blockSize);
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
+	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
+		SAA716x_EPRD(I2C_A, INT_STATUS),
+		SAA716x_EPRD(I2C_B, INT_STATUS),
+		SAA716x_EPRD(I2C_A, INT_ENABLE),
+		SAA716x_EPRD(I2C_B, INT_ENABLE));
 
-		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->block_done_wq,
-							   sti7109->block_done == 1,
-							   timeout);
+	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
+		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
+		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 
-		if (timeout == -ERESTARTSYS || sti7109->block_done == 0) {
-			if (timeout == -ERESTARTSYS) {
-				/* a signal arrived */
-				return -ERESTARTSYS;
-			}
-			dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
-			return -EIO;
-		}
-		blockPtr += blockSize;
-	}
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, SAA716x_EPRD(MSI, MSI_INT_STATUS_L));
 
-	data->data_handle = sti7109->data_handle;
-	sti7109->data_handle++;
-	return 0;
-}
+	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
-static int dvb_osd_ioctl(struct inode *inode, struct file *file,
-			 unsigned int cmd, void *parg)
-{
-	struct dvb_device *dvbdev	= file->private_data;
-	struct sti7109_dev *sti7109	= dvbdev->priv;
+	if (msiStatusH & MSI_INT_EXTINT_0) {
 
-	if (cmd == OSD_RAW_CMD)
-		return sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
-	else if (cmd == OSD_RAW_DATA)
-		return sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
+		struct sti7109_dev *sti7109 = saa716x->priv;
 
-	return -EINVAL;
-}
+		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
+		dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
+		if (phiISR & ISR_CMD_MASK) {
 
-static struct file_operations dvb_osd_fops = {
-	.owner		= THIS_MODULE,
-	.ioctl		= dvb_generic_ioctl,
-	.open		= dvb_generic_open,
-	.release	= dvb_generic_release,
-};
+			u32 value;
+			u32 length;
+			dprintk(SAA716x_INFO, 1, "CMD interrupt source");
 
-static struct dvb_device dvbdev_osd = {
-	.priv		= NULL,
-	.users		= 1,
-	.writers	= 1,
-	.fops		= &dvb_osd_fops,
-	.kernel_ioctl	= dvb_osd_ioctl,
-};
+			value = SAA716x_EPRD(PHI_1, 0);
+			value = __cpu_to_be32(value);
+			length = (value >> 16) + 2;
 
-static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
-{
-	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
-	struct sti7109_dev *sti7109		= saa716x->priv;
+			dprintk(SAA716x_INFO, 1, "CMD length: %d", length);
 
-	init_waitqueue_head(&sti7109->cmd_ready_wq);
-	sti7109->cmd_ready = 0;
+			if (length > MAX_RESULT_LEN) {
+				dprintk(SAA716x_ERROR, 1, "CMD length %d > %d", length, MAX_RESULT_LEN);
+				length = MAX_RESULT_LEN;
+			}
 
-	init_waitqueue_head(&sti7109->result_avail_wq);
-	sti7109->result_avail = 0;
+			saa716x_phi_read(saa716x, 0, sti7109->result_data, length);
+			sti7109->result_len = length;
+			sti7109->result_avail = 1;
+			wake_up(&sti7109->result_avail_wq);
 
-	sti7109->data_handle = 0;
-	init_waitqueue_head(&sti7109->data_ready_wq);
-	sti7109->data_ready = 0;
-	init_waitqueue_head(&sti7109->block_done_wq);
-	sti7109->block_done = 0;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CMD_MASK);
+		}
 
-	dvb_register_device(&saa716x_adap->dvb_adapter,
-			    &sti7109->osd_dev,
-			    &dvbdev_osd,
-			    sti7109,
-			    DVB_DEVICE_OSD);
-	return 0;
-}
+		if (phiISR & ISR_READY_MASK) {
+			dprintk(SAA716x_INFO, 1, "READY interrupt source");
+			sti7109->cmd_ready = 1;
+			wake_up(&sti7109->cmd_ready_wq);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_READY_MASK);
+		}
 
-static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x)
-{
-	struct sti7109_dev *sti7109 = saa716x->priv;
+		if (phiISR & ISR_BLOCK_MASK) {
+			dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");
+			sti7109->block_done = 1;
+			wake_up(&sti7109->block_done_wq);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BLOCK_MASK);
+		}
 
-	dvb_unregister_device(sti7109->osd_dev);
-	return 0;
+		if (phiISR & ISR_DATA_MASK) {
+			dprintk(SAA716x_INFO, 1, "DATA interrupt source");
+			sti7109->data_ready = 1;
+			wake_up(&sti7109->data_ready_wq);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DATA_MASK);
+		}
+	}
+
+	return IRQ_HANDLED;
 }
 
 static int load_config_s26400(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 0fefbd10c70d9..90ce65e7ea318 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -25,6 +25,7 @@
 
 #include "zl10353.h"
 #include "mb86a16.h"
+#include "tda1004x.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -93,17 +94,22 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail3;
 	}
 
-	err = saa716x_dvb_init(saa716x);
+	err = saa716x_dump_eeprom(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
-		goto fail4;
+		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
 
-	err = saa716x_dump_eeprom(saa716x);
+	err = saa716x_eeprom_data(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
 
+	err = saa716x_dvb_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		goto fail4;
+	}
+
 	return 0;
 
 fail4:
@@ -337,6 +343,25 @@ static struct saa716x_config saa716x_atlantis_config = {
 #define SAA716x_MODEL_NXP_NEMO		"NEMO reference board"
 #define SAA716x_DEV_NXP_NEMO		"DVB-T + Analog"
 
+static int tda1004x_nemo_request_firmware(struct dvb_frontend *fe,
+					  const struct firmware **fw,
+					  char *name)
+{
+	struct saa716x_adapter *adapter = fe->dvb->priv;
+
+	return request_firmware(fw, name, &adapter->saa716x->pdev->dev);
+}
+
+static struct tda1004x_config tda1004x_nemo_config = {
+	.demod_address		= 0x8,
+	.invert			= 0,
+	.invert_oclk		= 0,
+	.xtal_freq		= TDA10046_XTAL_4M,
+	.agc_config		= TDA10046_AGC_DEFAULT,
+	.if_freq		= TDA10046_FREQ_3617,
+	.request_firmware	= tda1004x_nemo_request_firmware,
+};
+
 static int load_config_nemo(struct saa716x_dev *saa716x)
 {
     int ret = 0;
@@ -346,11 +371,30 @@ static int load_config_nemo(struct saa716x_dev *saa716x)
 static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[1];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	return -ENODEV;
+	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+	saa716x_gpio_write(saa716x, GPIO_14, 1);
+	msleep(100);
+	adapter->fe = tda10046_attach(&tda1004x_nemo_config, &i2c->i2c_adapter);
+	if (adapter->fe == NULL) {
+		dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
+			saa716x->pdev->vendor,
+			saa716x->pdev->device,
+			saa716x->pdev->subsystem_vendor,
+			saa716x->pdev->subsystem_device);
+	} else {
+		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
+			dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
+			dvb_frontend_detach(adapter->fe);
+			adapter->fe = NULL;
+		}
+	}
+
+	return 0;
 }
 
 static struct saa716x_config saa716x_nemo_config = {
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 6e1dd44a91842..fd647d79958f6 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -275,8 +275,6 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	return err;
 }
 
-
-
 static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
@@ -309,7 +307,8 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 
 	/* Write to FIFO */
 	SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
-	msleep(50);
+//	msleep(50);
+	msleep(1);
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	i2c->stat_tx_done = reg;
 
@@ -346,28 +345,30 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
-	int err = 0;
+	int i, err = 0;
 	u32 reg;
 
 	/* Check FIFO status before RX */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (reg & SAA716x_I2C_RXBUSY) {
-		msleep(1);
-		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-		if (reg & SAA716x_I2C_RXBUSY) {
-			dprintk(SAA716x_INFO, 1, "FIFO empty");
 
-			err = saa716x_i2c_hwinit(i2c, I2C_DEV);
-			if (err < 0) {
-				dprintk(SAA716x_INFO, 1, "Error Reinit");
-				err = -EIO;
-				goto exit;
+		for (i = 0; i < 100; i++) {
+			msleep(10);
+			reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+
+			if (reg & SAA716x_I2C_RXBUSY) {
+				dprintk(SAA716x_INFO, 1, "FIFO empty");
+
+				err = saa716x_i2c_hwinit(i2c, I2C_DEV);
+				if (err < 0) {
+					dprintk(SAA716x_INFO, 1, "Error Reinit");
+					err = -EIO;
+					goto exit;
+				}
+			} else {
+				break;
 			}
-			err = -EBUSY;
-			goto exit;
 		}
-		err = -EBUSY;
-		goto exit;
 	}
 
 	/* Read from FIFO */
@@ -379,96 +380,99 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 	return err;
 }
 
-static int saa716x_i2c_rd(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u32 I2C_DEV)
+static int saa716x_i2c_rd(struct saa716x_i2c *i2c,
+			  struct i2c_msg *msgs,
+			  u32 I2C_DEV)
 {
-	struct saa716x_dev *saa716x	= i2c->saa716x;
-	u32 addr, rxd = 0;
+	struct saa716x_dev *saa716x = i2c->saa716x;
 	int i, err = 0;
+	u32 rxd;
 
+	if (msgs[0].len) {
+		dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
+			msgs[0].len, (msgs[0].addr << 1) | I2C_START_BIT);
 
-	for (i = 0; i < msg->len; i++) {
-		if (i == 0) {
-			addr  = (msg->addr << 1) | 0x1;
-			addr |= I2C_START_BIT;
-
-			dprintk(SAA716x_NOTICE, 0, "        %s: Slave=[0x%02x] len=%02x <R>[ ",
-				__func__,
-				addr,
-				msg->len);
-
-			err = saa716x_i2c_send(i2c, I2C_DEV, addr);
+		err = saa716x_i2c_send(i2c, I2C_DEV, (msgs[0].addr << 1) | I2C_START_BIT);
+		if (err < 0) {
+			saa716x_i2c_hwinit(i2c, I2C_DEV);
+			err = saa716x_i2c_send(i2c, I2C_DEV, (msgs[0].addr << 1) | I2C_START_BIT);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Send failed");
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
 				err = -EIO;
-				goto exit;
+				goto bail_out;
 			}
 		}
 
-		msleep(20);
-
-		err = saa716x_i2c_send(i2c, I2C_DEV, 0x00);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Send failed");
-			err = -EIO;
-			goto exit;
+		for (i = 0; i < msgs[0].len; i++) {
+			dprintk(SAA716x_DEBUG, 1, "B%d: 0x%02x", i, msgs[0].buf[i]);
+			err = saa716x_i2c_send(i2c, I2C_DEV, msgs[0].buf[i]);
+		}
+	}
+	dprintk(SAA716x_DEBUG, 1, "Addr:0x%02x", (msgs[0].addr << 1) | 0x1 | I2C_START_BIT);
+	saa716x_i2c_send(i2c, I2C_DEV, (msgs[0].addr << 1) | 0x1 | I2C_START_BIT);
+
+	for (i = 0; i < msgs[1].len; i++) {
+		if (i == msgs[1].len - 1) {
+			dprintk(SAA716x_DEBUG, 1, "Dummy + STOP B%d: 0x%02x", i + 1, I2C_STOP_BIT);
+			err = saa716x_i2c_send(i2c, I2C_DEV, I2C_STOP_BIT);
+			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto bail_out;
+			}
+			dprintk(SAA716x_DEBUG, 1, "Read #2--->B%d: 0x%02x", i + 1, rxd);
+			msgs[1].buf[i] = rxd;
+		} else {
+			dprintk(SAA716x_DEBUG, 1, "Dummy B%d: 0x%02x", i, 0x00);
+			err = saa716x_i2c_send(i2c, I2C_DEV, 0x00);
+			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto bail_out;
+			}
+			msgs[1].buf[i] = rxd;
+			dprintk(SAA716x_DEBUG, 1, "Read#1--->B%d: 0x%02x", i, rxd);
 		}
-
-		msleep(20);
-
-		err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
-		dprintk(SAA716x_NOTICE, 0, "%02x ", rxd);
-		msg->buf[i] = rxd;
 	}
-	dprintk(SAA716x_NOTICE, 0, "]\n");
 
 	return 0;
-exit:
-	dprintk(SAA716x_ERROR, 1, "Error Reading data, err=%d", err);
+
+bail_out:
+	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
 	return err;
 }
 
-static int saa716x_i2c_wr(struct saa716x_i2c *i2c, const struct i2c_msg *msg, u32 I2C_DEV)
+static int saa716x_i2c_wr(struct saa716x_i2c *i2c,
+			  struct i2c_msg *msgs,
+			  u32 I2C_DEV)
 {
-	struct saa716x_dev *saa716x	= i2c->saa716x;
-
+	struct saa716x_dev *saa716x = i2c->saa716x;
 	int i, err = 0;
-	u32 addr;
-
-	/* Clear INT status before first byte */
-	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
-
-	for (i = 0; i < msg->len; i++) {
-		if (i == 0) {
-			addr  = msg->addr << 1;
-			addr |= I2C_START_BIT;
 
-			dprintk(SAA716x_NOTICE, 0, "        %s: Slave=[0x%02x] len=%02x <W>[ ",
-				__func__,
-				addr,
-				msg->len);
-
-			err = saa716x_i2c_send(i2c, I2C_DEV, addr);
+	for (i = 0; i < msgs[0].len; i++) {
+		if (i == msgs[0].len - 1) {
+			err = saa716x_i2c_send(i2c, I2C_DEV, msgs[0].buf[i] | I2C_STOP_BIT);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto bail_out;
+			}
 		} else {
-			err = saa716x_i2c_send(i2c, I2C_DEV, msg->buf[i]);
-		}
-		dprintk(SAA716x_NOTICE, 0, "%02x ", msg->buf[i]);
-
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Transfer failed");
-			err = -EIO;
-			goto exit;
+			err = saa716x_i2c_send(i2c, I2C_DEV, msgs[0].buf[i]);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				err = -EIO;
+				goto bail_out;
+			}
 		}
 	}
-	dprintk(SAA716x_NOTICE, 0, "]\n");
-	dprintk(SAA716x_DEBUG, 1, "Status Prior TX <0x%02x> After TX <0x%02x>",
-		i2c->stat_tx_prior,
-		i2c->stat_tx_done);
 
 	return 0;
-exit:
-	dprintk(SAA716x_ERROR, 1, "Error Writing data, err=%d", err);
-	dprintk(SAA716x_DEBUG, 1, "TXFIFO Bytes=%d", SAA716x_EPRD(I2C_DEV, I2C_TX_LEVEL));
-	dprintk(SAA716x_DEBUG, 1, "Module Config=<%02x>", SAA716x_EPRD(I2C_DEV, MODULE_CONF));
+
+bail_out:
+	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
 	return err;
 }
 
@@ -476,41 +480,33 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 {
 	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
 	struct saa716x_dev *saa716x	= i2c->saa716x;
-//	u8 DEV				= i2c->i2c_dev;
-	u32 DEV = I2C_B;
 
-	int ret = 0, i;
+	u32 DEV = I2C_B;
+	int err = 0;
 
 	dprintk(SAA716x_DEBUG, 0, "\n");
 	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
 	mutex_lock(&i2c->i2c_lock);
 
-	for (i = 0; i < num; i++) {
-		if (msgs[i].flags & I2C_M_RD)
-			ret = saa716x_i2c_rd(i2c, &msgs[i], DEV);
-		else
-			ret = saa716x_i2c_wr(i2c, &msgs[i], DEV);
+	if (msgs[1].flags & I2C_M_RD)
+		err = saa716x_i2c_rd(i2c, msgs, DEV);
+	else
+		err = saa716x_i2c_wr(i2c, msgs, DEV);
 
-		if (ret < 0)
-			goto bail_out;
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "Transfer failed");
+		err = -EIO;
+		goto bail_out;
 	}
 
 	mutex_unlock(&i2c->i2c_lock);
 	return num;
 
 bail_out:
+	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
 	mutex_unlock(&i2c->i2c_lock);
-	return ret;
-}
-
-void saa716x_i2cint_disable(struct saa716x_dev *saa716x)
-{
-	SAA716x_EPWR(I2C_A, INT_CLR_ENABLE, 0x1fff);
-	SAA716x_EPWR(I2C_B, INT_CLR_ENABLE, 0x1fff);
-	SAA716x_EPWR(I2C_A, INT_CLR_STATUS, 0x1fff);
-	SAA716x_EPWR(I2C_B, INT_CLR_STATUS, 0x1fff);
+	return err;
 }
-EXPORT_SYMBOL_GPL(saa716x_i2cint_disable);
 
 static u32 saa716x_i2c_func(struct i2c_adapter *adapter)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index cc7eeb5aa6cf3..e80fff8bddfa8 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -152,6 +152,7 @@ struct saa716x_dev {
 	spinlock_t			gpio_lock;
 	/* DMA */
 
+	u32				id_offst;
 	void				*priv;
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index e558fc6ae5b99..9b2771656b5fc 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -4,18 +4,19 @@
 #include "saa716x_rom.h"
 #include "saa716x_adap.h"
 
-static int eeprom_read_byte(struct saa716x_dev *saa716x, u16 reg, u8 *val)
+int i;
+
+static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
 {
-	struct saa716x_i2c *i2c = saa716x->i2c;
-	struct i2c_adapter *adapter = &i2c[1].i2c_adapter;
+	struct saa716x_i2c *i2c		= saa716x->i2c;
+	struct i2c_adapter *adapter	= &i2c[1].i2c_adapter;
 
-	int ret;
 	u8 b0[] = { MSB(reg), LSB(reg) };
-	u8 b1;
+	int ret;
 
 	struct i2c_msg msg[] = {
 		{ .addr = 0x50, .flags = 0,	   .buf = b0,  .len = sizeof (b0) },
-		{ .addr = 0x50,	.flags = I2C_M_RD, .buf = &b1, .len = sizeof (b1) }
+		{ .addr = 0x50,	.flags = I2C_M_RD, .buf = val, .len = len }
 	};
 
 	ret = i2c_transfer(adapter, msg, 2);
@@ -23,58 +24,865 @@ static int eeprom_read_byte(struct saa716x_dev *saa716x, u16 reg, u8 *val)
 		dprintk(SAA716x_ERROR, 1, "read error <reg=0x%02x, ret=%i>", reg, ret);
 		return -EREMOTEIO;
 	}
-	*val = b1;
 
 	return ret;
 }
 
-int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
+static int saa716x_get_offset(struct saa716x_dev *saa716x, u8 *buf, u32 *offset)
 {
-	u8 buf[256];
-	int i, err = 0;
+	int i;
 
+	*offset = 0;
 	for (i = 0; i < 256; i++) {
-		err = eeprom_read_byte(saa716x, i, &buf[i]);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
-			return err;
-		}
-		dprintk(SAA716x_NOTICE, 1, "EEPROM <0x%02x>=[%02x] (%c)", i, buf[i], (char )buf[i]);
+		if (!(strncmp("START", buf + i, 5)))
+			break;
 	}
+	dprintk(SAA716x_ERROR, 1, "Offset @ %d", i);
+	*offset = i;
 
 	return 0;
 }
-EXPORT_SYMBOL_GPL(saa716x_dump_eeprom);
 
-static int saa716x_eeprom_header(struct saa716x_dev *saa716x, struct saa716x_romhdr *rom_header)
+int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
 {
-	u8 buf[256];
+	u8 buf[DUMP_BYTES];
 	int i, err = 0;
+	u32 offset = 0;
+
+	err = eeprom_read_bytes(saa716x, DUMP_OFFST, DUMP_BYTES, buf);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
+		return err;
+	}
 
-	dprintk(SAA716x_ERROR, 1, "Reading ROM header %02x bytes",
-		sizeof (struct saa716x_romhdr));
+	dprintk(SAA716x_NOTICE, 0, "    Card: %s\n",
+		saa716x->config->model_name);
 
-	for (i = 0; i < sizeof (struct saa716x_romhdr); i++) {
-		err = eeprom_read_byte(saa716x, i, &buf[i]);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
-			return err;
-		}
-		dprintk(SAA716x_NOTICE, 1, "EEPROM <0x%02x>=[%02x]", i, buf[i]);
+	dprintk(SAA716x_NOTICE, 0,
+		" ---------- SAA%02x ROM @ Offset 0x%02x ----------",
+		saa716x->pdev->device,
+		DUMP_OFFST);
+
+	for (i = 0; i < DUMP_BYTES; i++) {
+		if ((i % 16) == 0)
+			dprintk(SAA716x_NOTICE, 0, "\n  ");
+		if ((i %  8) == 0)
+			dprintk(SAA716x_NOTICE, 0, " ");
+		if ((i %  4) == 0)
+			dprintk(SAA716x_NOTICE, 0, " ");
+		dprintk(SAA716x_NOTICE, 0, "%02x ", buf[i]);
+	}
+	dprintk(SAA716x_NOTICE, 0, "\n");
+	dprintk(SAA716x_NOTICE, 0,
+		" ---------- SAA%02x ROM Dump end ---------------\n",
+		saa716x->pdev->device);
+
+	err = saa716x_get_offset(saa716x, buf, &offset);
+	if (err != 0) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Descriptor not found <%d>", err);
+		return err;
 	}
+	saa716x->id_offst = offset + 5;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_dump_eeprom);
 
-	memcpy(rom_header, buf, sizeof (struct saa716x_romhdr));
+static int saa716x_eeprom_header(struct saa716x_dev *saa716x,
+				 struct saa716x_romhdr *rom_header,
+				 u8 *buf,
+				 u32 *offset)
+{
+	memcpy(rom_header, &buf[*offset], sizeof (struct saa716x_romhdr));
 	if (rom_header->header_size != sizeof (struct saa716x_romhdr)) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
 			sizeof (struct saa716x_romhdr),
 			rom_header->header_size);
 
 		return -1;
 	}
+	*offset += sizeof (struct saa716x_romhdr);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Data=%d bytes\n",
+		saa716x->pdev->device,
+		rom_header->data_size);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Version=%d\n",
+		saa716x->pdev->device,
+		rom_header->version);
 
-	dprintk(SAA716x_ERROR, 1, "EEPROM: Data Size=%d bytes", rom_header->data_size);
-	dprintk(SAA716x_ERROR, 1, "EEPROM: Version=%d", rom_header->version);
-	dprintk(SAA716x_ERROR, 1, "EEPROM: Devices=%d", rom_header->devices);
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Devices=%d\n",
+		saa716x->pdev->device,
+		rom_header->devices);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Compressed=%d\n\n",
+		saa716x->pdev->device,
+		rom_header->compression);
+
+	return 0;
+}
+
+static void saa716x_descriptor_dbg(struct saa716x_dev *saa716x,
+				   u8 *buf,
+				   u32 *offset,
+				   u8 size,
+				   u8 ext_size)
+{
+	int i;
+
+	dprintk(SAA716x_INFO, 0, "       ");
+	for (i = 0; i < 49; i++)
+		dprintk(SAA716x_INFO, 0, "-");
+
+	for (i = 0; i < size + ext_size; i++) {
+		if ((i % 16) == 0)
+			dprintk(SAA716x_INFO, 0, "\n      ");
+		if ((i %  8) == 0)
+			dprintk(SAA716x_INFO, 0, " ");
+		if ((i %  4) == 0)
+			dprintk(SAA716x_INFO, 0, " ");
+
+		dprintk(SAA716x_INFO, 0, "%02x ", buf[*offset + i]);
+	}
+
+	dprintk(SAA716x_INFO, 0, "\n       ");
+	for (i = 0; i < 49; i++)
+		dprintk(SAA716x_INFO, 0, "-");
+	dprintk(SAA716x_INFO, 0, "\n");
+
+}
+
+static int saa716x_decoder_info(struct saa716x_dev *saa716x,
+				u8 *buf,
+				u32 *offset)
+{
+	struct saa716x_decoder_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_decoder_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_decoder_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_decoder_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext Data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_gpio_info(struct saa716x_dev *saa716x,
+			     u8 *buf,
+			     u32 *offset)
+{
+	struct saa716x_gpio_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_gpio_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_gpio_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_gpio_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Pins=%d\n",
+		saa716x->pdev->device,
+		header.pins);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+
+	return 0;
+}
+
+static int saa716x_video_decoder_info(struct saa716x_dev *saa716x,
+				      u8 *buf,
+				      u32 *offset)
+{
+	struct saa716x_video_decoder_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_video_decoder_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_video_decoder_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_video_decoder_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: PORT 0=0x%02x\n",
+		saa716x->pdev->device,
+		header.video_port0);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: PORT 1=0x%02x\n",
+		saa716x->pdev->device,
+		header.video_port1);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: PORT 2=0x%02x\n",
+		saa716x->pdev->device,
+		header.video_port2);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: VBI PORT ID=0x%02x\n",
+		saa716x->pdev->device,
+		header.vbi_port_id);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Video PORT Type=0x%02x\n",
+		saa716x->pdev->device,
+		header.video_port_type);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: VBI PORT Type=0x%02x\n",
+		saa716x->pdev->device,
+		header.vbi_port_type);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Encoder PORT Type=0x%02x\n",
+		saa716x->pdev->device,
+		header.encoder_port_type);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Video Output=0x%02x\n",
+		saa716x->pdev->device,
+		header.video_output);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: VBI Output=0x%02x\n",
+		saa716x->pdev->device,
+		header.vbi_output);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Encoder Output=0x%02x\n",
+		saa716x->pdev->device,
+		header.encoder_output);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_audio_decoder_info(struct saa716x_dev *saa716x,
+				      u8 *buf,
+				      u32 *offset)
+{
+	struct saa716x_audio_decoder_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_audio_decoder_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_audio_decoder_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_audio_decoder_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_event_source_info(struct saa716x_dev *saa716x,
+				     u8 *buf,
+				     u32 *offset)
+{
+	struct saa716x_evsrc_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_evsrc_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_evsrc_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_evsrc_hdr));
+
+		return -1;
+	}
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_crossbar_info(struct saa716x_dev *saa716x,
+				 u8 *buf,
+				 u32 *offset)
+{
+	struct saa716x_xbar_hdr header;
+	struct saa716x_xbar_pair_info pair_info;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_xbar_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_xbar_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_xbar_hdr));
+
+		return -1;
+	}
+
+	memcpy(&pair_info, &buf[*offset], sizeof (struct saa716x_xbar_pair_info));
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Pairs=%d\n",
+		saa716x->pdev->device,
+		header.pair_inputs);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data + (sizeof (struct saa716x_xbar_pair_info) * header.pair_inputs);
+	return 0;
+}
+
+static int saa716x_tuner_info(struct saa716x_dev *saa716x,
+			      u8 *buf,
+			      u32 *offset)
+{
+	struct saa716x_tuner_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_tuner_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_tuner_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_tuner_hdr));
+
+		return -1;
+	}
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_pll_info(struct saa716x_dev *saa716x,
+			    u8 *buf,
+			    u32 *offset)
+{
+	struct saa716x_pll_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_pll_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_pll_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_pll_hdr));
+
+		return -1;
+	}
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_channel_decoder_info(struct saa716x_dev *saa716x,
+					u8 *buf,
+					u32 *offset)
+{
+	struct saa716x_channel_decoder_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_channel_decoder_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_channel_decoder_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_channel_decoder_hdr));
+
+		return -1;
+	}
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_encoder_info(struct saa716x_dev *saa716x,
+				u8 *buf,
+				u32 *offset)
+{
+	struct saa716x_encoder_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_encoder_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_encoder_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_encoder_hdr));
+
+		return -1;
+	}
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_ir_info(struct saa716x_dev *saa716x,
+			   u8 *buf,
+			   u32 *offset)
+{
+	struct saa716x_ir_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_ir_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_ir_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_ir_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_eeprom_info(struct saa716x_dev *saa716x,
+			       u8 *buf,
+			       u32 *offset)
+{
+	struct saa716x_eeprom_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_eeprom_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_eeprom_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_eeprom_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_filter_info(struct saa716x_dev *saa716x,
+			       u8 *buf,
+			       u32 *offset)
+{
+	struct saa716x_filter_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_filter_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_filter_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_filter_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+static int saa716x_streamdev_info(struct saa716x_dev *saa716x,
+				  u8 *buf,
+				  u32 *offset)
+{
+	struct saa716x_streamdev_hdr header;
+
+	memcpy(&header, &buf[*offset], sizeof (struct saa716x_streamdev_hdr));
+	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
+	if (header.size != sizeof (struct saa716x_streamdev_hdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			header.size,
+			sizeof (struct saa716x_streamdev_hdr));
+
+		return -1;
+	}
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		header.size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n",
+		saa716x->pdev->device,
+		header.ext_data);
+
+	*offset += header.size + header.ext_data;
+	return 0;
+}
+
+
+static void saa716x_device_dbg(struct saa716x_dev *saa716x,
+			       u8 *buf,
+			       u32 *offset,
+			       u8 size,
+			       u8 ext_size,
+			       u8 addr_size)
+{
+	int i;
+
+	dprintk(SAA716x_INFO, 0, "   ");
+	for (i = 0; i < 53; i++)
+		dprintk(SAA716x_INFO, 0, "-");
+
+	for (i = 0; i < size + ext_size + addr_size; i++) {
+		if ((i % 16) == 0)
+			dprintk(SAA716x_INFO, 0, "\n  ");
+		if ((i %  8) == 0)
+			dprintk(SAA716x_INFO, 0, " ");
+		if ((i %  4) == 0)
+			dprintk(SAA716x_INFO, 0, " ");
+
+		dprintk(SAA716x_INFO, 0, "%02x ", buf[*offset + i]);
+	}
+
+	dprintk(SAA716x_INFO, 0, "\n   ");
+	for (i = 0; i < 53; i++)
+		dprintk(SAA716x_INFO, 0, "-");
+	dprintk(SAA716x_INFO, 0, "\n");
+
+}
+
+
+static int saa716x_device_info(struct saa716x_dev *saa716x,
+			       struct saa716x_devinfo *device,
+			       u8 *buf,
+			       u32 *offset)
+{
+	u8 address = 0;
+
+	memcpy(device, &buf[*offset], sizeof (struct saa716x_devinfo));
+	if (device->struct_size != sizeof (struct saa716x_devinfo)) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Device size mismatch! Read=%d bytes, expected=%d bytes",
+		device->struct_size,
+		sizeof (struct saa716x_devinfo));
+
+		return -1;
+	}
+
+	saa716x_device_dbg(saa716x,
+			   buf,
+			   offset,
+			   device->struct_size,
+			   device->extd_data_size,
+			   device->addr_size);
+
+	*offset += device->struct_size;
+
+	memcpy(&address, &buf[*offset], device->addr_size);
+	address >>= 1;
+	*offset += device->addr_size;
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device @ 0x%02x\n",
+		saa716x->pdev->device,
+		address);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		device->struct_size);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device ID=0x%02x\n",
+		saa716x->pdev->device,
+		device->device_id);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Master ID=0x%02x\n",
+		saa716x->pdev->device,
+		device->master_devid);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Bus ID=0x%02x\n",
+		saa716x->pdev->device,
+		device->master_busid);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device type=0x%02x\n",
+		saa716x->pdev->device,
+		device->device_type);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Implementation ID=0x%02x\n",
+		saa716x->pdev->device,
+		device->implem_id);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Path ID=0x%02x\n",
+		saa716x->pdev->device,
+		device->path_id);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: GPIO ID=0x%02x\n",
+		saa716x->pdev->device,
+		device->gpio_id);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Address=%d bytes\n",
+		saa716x->pdev->device,
+		device->addr_size);
+
+	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Extended data=%d bytes\n\n",
+		saa716x->pdev->device,
+		device->extd_data_size);
+
+	if (device->device_type & DECODER_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found decoder device\n",
+			saa716x->pdev->device);
+
+		saa716x_decoder_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & GPIO_SOURCE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found GPIO device\n",
+			saa716x->pdev->device);
+
+		saa716x_gpio_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & VIDEO_DECODER) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Video Decoder device\n",
+			saa716x->pdev->device);
+
+		saa716x_video_decoder_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & AUDIO_DECODER) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Audio Decoder device\n",
+			saa716x->pdev->device);
+
+		saa716x_audio_decoder_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & EVENT_SOURCE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Event source\n",
+			saa716x->pdev->device);
+
+		saa716x_event_source_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & CROSSBAR) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Crossbar device\n",
+			saa716x->pdev->device);
+
+		saa716x_crossbar_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & TUNER_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Tuner device\n",
+			saa716x->pdev->device);
+
+		saa716x_tuner_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & PLL_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found PLL device\n",
+			saa716x->pdev->device);
+
+		saa716x_pll_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & CHANNEL_DECODER) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Channel Demodulator device\n",
+			saa716x->pdev->device);
+
+		saa716x_channel_decoder_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & RDS_DECODER) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found RDS Decoder device\n",
+			saa716x->pdev->device);
+	}
+
+	if (device->device_type & ENCODER_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Encoder device\n",
+			saa716x->pdev->device);
+
+		saa716x_encoder_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & IR_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found IR device\n",
+			saa716x->pdev->device);
+
+		saa716x_ir_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & EEPROM_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found EEPROM device\n",
+			saa716x->pdev->device);
+
+		saa716x_eeprom_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & NOISE_FILTER) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Noise filter device\n",
+			saa716x->pdev->device);
+
+		saa716x_filter_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & LNx_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found LNx device\n",
+			saa716x->pdev->device);
+	}
+
+	if (device->device_type & STREAM_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found streaming device\n",
+			saa716x->pdev->device);
+
+		saa716x_streamdev_info(saa716x, buf, offset);
+	}
+
+	if (device->device_type & CONFIGSPACE_DEVICE) {
+		dprintk(SAA716x_NOTICE, 0,
+			"        SAA%02x ROM: Found Configspace device\n",
+			saa716x->pdev->device);
+	}
+
+	dprintk(SAA716x_DEBUG, 0, "\n");
 
 	return 0;
 }
@@ -82,39 +890,49 @@ static int saa716x_eeprom_header(struct saa716x_dev *saa716x, struct saa716x_rom
 int saa716x_eeprom_data(struct saa716x_dev *saa716x)
 {
 	struct saa716x_romhdr rom_header;
+	struct saa716x_devinfo *device;
 
-	u8 *rom_data;
+	u8 buf[DUMP_BYTES];
 	int i, ret = 0;
+	u32 offset = 0;
+
+	/* dump */
+	ret = eeprom_read_bytes(saa716x, saa716x->id_offst, DUMP_BYTES, buf);
+	if (ret < 0) {
+		dprintk(SAA716x_ERROR, 1, "EEPROM Read error <%d>", ret);
+		goto err0;
+	}
 
 	/* Get header */
-	ret = saa716x_eeprom_header(saa716x, &rom_header);
+	ret = saa716x_eeprom_header(saa716x, &rom_header, buf, &offset);
 	if (ret != 0) {
 		dprintk(SAA716x_ERROR, 1, "ERROR: Header Read failed <%d>", ret);
 		goto err0;
 	}
 
-	/* Allocate length */
-	rom_data = kzalloc(sizeof (u8) * rom_header.data_size, GFP_KERNEL);
-	if (rom_data == NULL) {
+	/* allocate for device info */
+	device = kzalloc(sizeof (struct saa716x_devinfo) * rom_header.devices, GFP_KERNEL);
+	if (device == NULL) {
 		dprintk(SAA716x_ERROR, 1, "ERROR: out of memory");
-		ret = -ENOMEM;
 		goto err1;
 	}
 
-	/* Get data */
-	for (i = 0; i < rom_header.data_size; i++) {
-		ret = eeprom_read_byte(saa716x, i, &rom_data[i]);
-		if (ret < 0) {
-			dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
-			goto err0;
+	for (i = 0; i < rom_header.devices; i++) {
+		dprintk(SAA716x_ERROR, 0, "    SAA%02x ROM: ===== Device %d =====\n",
+			saa716x->pdev->device,
+			i);
+
+		ret = saa716x_device_info(saa716x, &device[i], buf, &offset);
+		if (ret != 0) {
+			dprintk(SAA716x_ERROR, 1, "ERROR: Device info read failed <%d>", ret);
+			goto err1;
 		}
-		dprintk(SAA716x_NOTICE, 1, "EEPROM <0x%02x>=[%02x]", i, rom_data[i]);
 	}
 
 	return 0;
 
 err1:
-	kfree(rom_data);
+	kfree(device);
 
 err0:
 	return ret;
diff --git a/drivers/media/pci/saa716x/saa716x_rom.h b/drivers/media/pci/saa716x/saa716x_rom.h
index 015e91cdd6c43..3486bc75456e6 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.h
+++ b/drivers/media/pci/saa716x/saa716x_rom.h
@@ -5,6 +5,10 @@
 #define MSB(__x)	((__x >> 8) & 0xff)
 #define LSB(__x)	(__x & 0xff)
 
+#define DUMP_BYTES	272
+//#define DUMP_BYTES	5
+#define DUMP_OFFST	0x000
+
 struct saa716x_romhdr {
 	u16	header_size;
 	u8	compression;
@@ -12,7 +16,7 @@ struct saa716x_romhdr {
 	u16	data_size;
 	u8	devices;
 	u8	checksum;
-};
+} __attribute__((packed));
 
 struct saa716x_devinfo {
 	u8	struct_size;
@@ -27,6 +31,221 @@ struct saa716x_devinfo {
 	u16	extd_data_size;
 };
 
+enum saa716x_device_types {
+	DECODER_DEVICE		= 0x00000001,
+	GPIO_SOURCE		= 0x00000002,
+	VIDEO_DECODER		= 0x00000004,
+	AUDIO_DECODER		= 0x00000008,
+	EVENT_SOURCE		= 0x00000010,
+	CROSSBAR		= 0x00000020,
+	TUNER_DEVICE		= 0x00000040,
+	PLL_DEVICE		= 0x00000080,
+	CHANNEL_DECODER		= 0x00000100,
+	RDS_DECODER		= 0x00000200,
+	ENCODER_DEVICE		= 0x00000400,
+	IR_DEVICE		= 0x00000800,
+	EEPROM_DEVICE		= 0x00001000,
+	NOISE_FILTER		= 0x00002000,
+	LNx_DEVICE		= 0x00004000,
+	STREAM_DEVICE		= 0x00010000,
+	CONFIGSPACE_DEVICE	= 0x80000000
+};
+
+struct saa716x_decoder_hdr {
+	u8 size;
+	u8 ext_data;
+};
+
+struct saa716x_decoder_info {
+	struct saa716x_decoder_hdr decoder_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_gpio_hdr {
+	u8 size;
+	u8 pins;
+	u8 rsvd;
+	u8 ext_data;
+};
+
+struct saa716x_gpio_info {
+	struct saa716x_gpio_hdr gpio_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_video_decoder_hdr {
+	u8 size;
+	u8 video_port0;
+	u8 video_port1;
+	u8 video_port2;
+	u8 vbi_port_id;
+	u8 video_port_type;
+	u8 vbi_port_type;
+	u8 encoder_port_type;
+	u8 video_output;
+	u8 vbi_output;
+	u8 encoder_output;
+	u8 ext_data;
+};
+
+struct saa716x_video_decoder_info {
+	struct saa716x_video_decoder_hdr decoder_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_audio_decoder_hdr {
+	u8 size;
+	u8 port;
+	u8 output;
+	u8 ext_data;
+};
+
+struct saa716x_audio_decoder_info {
+	struct saa716x_audio_decoder_hdr decoder_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_evsrc_hdr {
+	u8 size;
+	u8 master_devid;
+	u16 condition_id;
+	u8 rsvd;
+	u8 ext_data;
+};
+
+struct saa716x_evsrc_info {
+	struct saa716x_evsrc_hdr evsrc_hdr;
+	u8 *ext_data;
+};
+
+enum saa716x_input_pair_type {
+	TUNER_SIF	= 0x00,
+	TUNER_LINE	= 0x01,
+	TUNER_SPDIF	= 0x02,
+	TUNER_NONE	= 0x03,
+	CVBS_LINE	= 0x04,
+	CVBS_SPDIF	= 0x05,
+	CVBS_NONE	= 0x06,
+	YC_LINE		= 0x07,
+	YC_SPDIF	= 0x08,
+	YC_NONE		= 0x09,
+	YPbPr_LINE	= 0x0a,
+	YPbPr_SPDIF	= 0x0b,
+	YPbPr_NONE	= 0x0c,
+	NO_LINE		= 0x0d,
+	NO_SPDIF	= 0x0e,
+	RGB_LINE	= 0x0f,
+	RGB_SPDIF	= 0x10,
+	RGB_NONE	= 0x11
+};
+
+struct saa716x_xbar_pair_info {
+	u8 pair_input_type;
+	u8 video_input_id;
+	u8 audio_input_id;
+};
+
+struct saa716x_xbar_hdr {
+	u8 size;
+	u8 pair_inputs;
+	u8 pair_route_default;
+	u8 ext_data;
+};
+
+struct saa716x_xbar_info {
+	struct saa716x_xbar_hdr xbar_hdr;
+	struct saa716x_xbar_pair_info *pair_info;
+	u8 *ext_data;
+};
+
+struct saa716x_tuner_hdr {
+	u8 size;
+	u8 ext_data;
+};
+
+struct saa716x_tuner_info {
+	struct saa716x_tuner_hdr tuner_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_pll_hdr {
+	u8 size;
+	u8 ext_data;
+};
+
+struct saa716x_pll_info {
+	struct saa716x_pll_hdr pll_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_channel_decoder_hdr {
+	u8 size;
+	u8 port;
+	u8 ext_data;
+};
+
+struct saa716x_channel_decoder_info {
+	struct saa716x_channel_decoder_hdr channel_dec_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_encoder_hdr {
+	u8 size;
+	u8 stream_port0;
+	u8 stream_port1;
+	u8 ext_data;
+};
+
+struct saa716x_encoder_info {
+	struct saa716x_encoder_hdr encoder_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_ir_hdr {
+	u8 size;
+	u8 ir_caps;
+	u8 ext_data;
+};
+
+struct saa716x_ir_info {
+	struct saa716x_ir_hdr ir_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_eeprom_hdr {
+	u8 size;
+	u8 rel_device;
+	u8 ext_data;
+};
+
+struct saa716x_eeprom_info {
+	struct saa716x_eeprom_hdr eeprom_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_filter_hdr {
+	u8 size;
+	u8 video_decoder;
+	u8 audio_decoder;
+	u8 event_source;
+	u8 ext_data;
+};
+
+struct saa716x_filter_info {
+	struct saa716x_filter_hdr filter_hdr;
+	u8 *ext_data;
+};
+
+struct saa716x_streamdev_hdr {
+	u8 size;
+	u8 ext_data;
+};
+
+struct saa716x_streamdev_info {
+	struct saa716x_streamdev_hdr streamdev_hdr;
+	u8 *ext_data;
+};
+
 extern int saa716x_dump_eeprom(struct saa716x_dev *saa716x);
 extern int saa716x_eeprom_data(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_spi.c b/drivers/media/pci/saa716x/saa716x_spi.c
new file mode 100644
index 0000000000000..0598110a8b1c9
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_spi.c
@@ -0,0 +1,22 @@
+#include "saa716x_priv.h"
+#include "saa716x_reg.h"
+#include "saa716x_spi.h"
+
+void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
+{
+	int i;
+	u32 value;
+	int rounds;
+
+	for (i = 0; i < length; i++) {
+		SAA716x_EPWR(SPI, SPI_DATA, data[i]);
+		rounds = 0;
+		value = SAA716x_EPRD(SPI, SPI_STATUS);
+
+		while ((value & SPI_TRANSFER_FLAG) == 0 && rounds < 5000) {
+			value = SAA716x_EPRD(SPI, SPI_STATUS);
+			rounds++;
+		}
+	}
+}
+EXPORT_SYMBOL_GPL(saa716x_spi_write);
diff --git a/drivers/media/pci/saa716x/saa716x_spi.h b/drivers/media/pci/saa716x/saa716x_spi.h
new file mode 100644
index 0000000000000..dd5387303edef
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_spi.h
@@ -0,0 +1,6 @@
+#ifndef __SAA716x_SPI_H
+#define __SAA716x_SPI_H
+
+extern void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length);
+
+#endif /* __SAA716x_SPI_H */

From 57730ad64c9d7d49058c7be94bac47eb5ae072a7 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:46:13 +0400
Subject: [PATCH 103/364] saa716x: Try to attach the frontends

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 53 +++++++++++-
 drivers/media/pci/saa716x/saa716x_hybrid.c | 94 ++++++++++++++++++----
 2 files changed, 128 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 291dfaf9568fa..438bfa1548f17 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -23,6 +23,8 @@
 #include "saa716x_gpio.h"
 #include "saa716x_rom.h"
 
+#include "mb86a16.h"
+
 unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
@@ -91,12 +93,12 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
-
+#if 0
 	err = saa716x_eeprom_data(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM read failed");
 	}
-
+#endif
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -246,13 +248,60 @@ static int load_config_vp1028(struct saa716x_dev *saa716x)
 #define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
 #define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
 
+static int vp1028_dvbs_set_voltage(struct dvb_frontend *fe, fe_sec_voltage_t voltage)
+{
+	struct saa716x_dev *saa716x = fe->dvb->priv;
+
+	switch (voltage) {
+	case SEC_VOLTAGE_13:
+		dprintk(SAA716x_ERROR, 1, "Polarization=[13V]");
+		break;
+	case SEC_VOLTAGE_18:
+		dprintk(SAA716x_ERROR, 1, "Polarization=[18V]");
+		break;
+	case SEC_VOLTAGE_OFF:
+		dprintk(SAA716x_ERROR, 1, "Frontend (dummy) POWERDOWN");
+		break;
+	default:
+		dprintk(SAA716x_ERROR, 1, "Invalid = (%d)", (u32 ) voltage);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+struct mb86a16_config vp1028_mb86a16_config = {
+	.demod_address	= 0x08,
+	.set_voltage	= vp1028_dvbs_set_voltage,
+};
+
 static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
+	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+	saa716x_gpio_write(saa716x, GPIO_10, 1);
+
+	msleep(100);
+
+	dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
+	adapter->fe = mb86a16_attach(&vp1028_mb86a16_config, &i2c->i2c_adapter);
+	if (adapter->fe) {
+		dprintk(SAA716x_ERROR, 1, "found MB86A16 DVB-S/DSS frontend @0x%02x",
+			vp1028_mb86a16_config.demod_address);
+
+	} else {
+		goto exit;
+	}
+
+	dprintk(SAA716x_ERROR, 1, "Done!");
+	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
 	return -ENODEV;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 90ce65e7ea318..a778a7a3905e9 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -212,6 +212,25 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 #define SAA716x_MODEL_TWINHAN_VP6090	"Twinhan/Azurewave VP-6090"
 #define SAA716x_DEV_TWINHAN_VP6090	"2xDVB-S + 2xDVB-T + 2xAnalog"
 
+static int tda1004x_vp6090_request_firmware(struct dvb_frontend *fe,
+					      const struct firmware **fw,
+					      char *name)
+{
+	struct saa716x_adapter *adapter = fe->dvb->priv;
+
+	return request_firmware(fw, name, &adapter->saa716x->pdev->dev);
+}
+
+static struct tda1004x_config tda1004x_vp6090_config = {
+	.demod_address		= 0x8,
+	.invert			= 0,
+	.invert_oclk		= 0,
+	.xtal_freq		= TDA10046_XTAL_4M,
+	.agc_config		= TDA10046_AGC_DEFAULT,
+	.if_freq		= TDA10046_FREQ_3617,
+	.request_firmware	= tda1004x_vp6090_request_firmware,
+};
+
 static int load_config_vp6090(struct saa716x_dev *saa716x)
 {
 	int ret = 0;
@@ -255,24 +274,11 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
 	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-	saa716x_gpio_write(saa716x, GPIO_11, 0);
-	saa716x_gpio_write(saa716x, GPIO_10, 0);
 
-	saa716x_gpio_write(saa716x, GPIO_26, 1);
-	saa716x_gpio_write(saa716x, GPIO_27, 1);
-
-	msleep(100);
-
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", count);
-	saa716x_gpio_write(saa716x, GPIO_13, 0);
-	msleep(100);
-	saa716x_gpio_write(saa716x, GPIO_13, 1);
+	saa716x_gpio_write(saa716x, GPIO_11, 1);
+	saa716x_gpio_write(saa716x, GPIO_10, 1);
 	msleep(100);
-	saa716x_gpio_write(saa716x, GPIO_12, 0);
-	msleep(100);
-	saa716x_gpio_write(saa716x, GPIO_12, 1);
-	msleep(100);
-
+#if 0
 	dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
 	adapter->fe = mb86a16_attach(&vp6090_mb86a16_config, &i2c->i2c_adapter);
 	if (adapter->fe) {
@@ -282,6 +288,22 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	} else {
 		goto exit;
 	}
+#endif
+	adapter->fe = tda10046_attach(&tda1004x_vp6090_config, &i2c->i2c_adapter);
+	if (adapter->fe == NULL) {
+		dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
+			saa716x->pdev->vendor,
+			saa716x->pdev->device,
+			saa716x->pdev->subsystem_vendor,
+			saa716x->pdev->subsystem_device);
+	} else {
+		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
+			dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
+			dvb_frontend_detach(adapter->fe);
+			adapter->fe = NULL;
+			goto exit;
+		}
+	}
 
 	dprintk(SAA716x_ERROR, 1, "Done!");
 	return 0;
@@ -295,7 +317,7 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_vp6090,
-	.adapters		= 2,
+	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6090_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
@@ -309,6 +331,25 @@ static struct saa716x_config saa716x_vp6090_config = {
 #define SAA716x_MODEL_NXP_ATLANTIS	"Atlantis reference board"
 #define SAA716x_DEV_NXP_ATLANTIS	"2x DVB-T + 2x Analog"
 
+static int tda1004x_atlantis_request_firmware(struct dvb_frontend *fe,
+					      const struct firmware **fw,
+					      char *name)
+{
+	struct saa716x_adapter *adapter = fe->dvb->priv;
+
+	return request_firmware(fw, name, &adapter->saa716x->pdev->dev);
+}
+
+static struct tda1004x_config tda1004x_atlantis_config = {
+	.demod_address		= 0x8,
+	.invert			= 0,
+	.invert_oclk		= 0,
+	.xtal_freq		= TDA10046_XTAL_4M,
+	.agc_config		= TDA10046_AGC_DEFAULT,
+	.if_freq		= TDA10046_FREQ_3617,
+	.request_firmware	= tda1004x_atlantis_request_firmware,
+};
+
 static int load_config_atlantis(struct saa716x_dev *saa716x)
 {
 	int ret = 0;
@@ -318,9 +359,28 @@ static int load_config_atlantis(struct saa716x_dev *saa716x)
 static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+	saa716x_gpio_write(saa716x, GPIO_14, 1);
+	msleep(100);
+
+	adapter->fe = tda10046_attach(&tda1004x_atlantis_config, &i2c->i2c_adapter);
+	if (adapter->fe == NULL) {
+		dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
+			saa716x->pdev->vendor,
+			saa716x->pdev->device,
+			saa716x->pdev->subsystem_vendor,
+			saa716x->pdev->subsystem_device);
+	} else {
+		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
+			dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
+			dvb_frontend_detach(adapter->fe);
+			adapter->fe = NULL;
+		}
+	}
 
 	return -ENODEV;
 }

From c45f3b3bafb574dcc461aaa5b3ece4d7e3ceafa0 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:47:24 +0400
Subject: [PATCH 104/364] saa716x: Don't cast pointers to 32 bit int

From: Luca Tettamanti <kronos.it@gmail.com>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index a867449292fa0..4349a2fea8c19 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -34,7 +34,7 @@ static int saa716x_allocate_ptable(struct saa716x_dmabuf *dmabuf)
 		return -ENOMEM;
 	}
 
-	BUG_ON(!(((u32) dmabuf->mem_ptab_phys % SAA716x_PAGE_SIZE) == 0));
+	BUG_ON(!(((unsigned long) dmabuf->mem_ptab_phys % SAA716x_PAGE_SIZE) == 0));
 
 	return 0;
 }
@@ -126,9 +126,9 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 		}
 
 		/* align memory to page */
-		dmabuf->mem_virt = (void *) PAGE_ALIGN (((u32) dmabuf->mem_virt_noalign));
+		dmabuf->mem_virt = (void *) PAGE_ALIGN (((unsigned long) dmabuf->mem_virt_noalign));
 
-		BUG_ON(!((((u32) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
+		BUG_ON(!((((unsigned long) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
 	} else {
 		dmabuf->mem_virt = buf;
 	}

From fd5e2d3e70a6d4928c3af3529df2dcb894ec0e9d Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:48:26 +0400
Subject: [PATCH 105/364] saa716x: Partial rework of SPI I/O

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   |  14 +-
 drivers/media/pci/saa716x/saa716x_adap.h   |   2 +
 drivers/media/pci/saa716x/saa716x_aip.c    |   5 +-
 drivers/media/pci/saa716x/saa716x_aip.h    |   2 +
 drivers/media/pci/saa716x/saa716x_boot.c   |   2 +
 drivers/media/pci/saa716x/saa716x_boot.h   |   2 +
 drivers/media/pci/saa716x/saa716x_budget.c |   8 +-
 drivers/media/pci/saa716x/saa716x_cgu.c    |   2 +
 drivers/media/pci/saa716x/saa716x_dma.c    |   3 +-
 drivers/media/pci/saa716x/saa716x_ff.c     |   7 +-
 drivers/media/pci/saa716x/saa716x_fgpi.c   |   7 +-
 drivers/media/pci/saa716x/saa716x_fgpi.h   |   2 +
 drivers/media/pci/saa716x/saa716x_gpio.c   |  39 ++-
 drivers/media/pci/saa716x/saa716x_gpio.h   |   5 +-
 drivers/media/pci/saa716x/saa716x_greg.c   |   5 +-
 drivers/media/pci/saa716x/saa716x_greg.h   |   2 +
 drivers/media/pci/saa716x/saa716x_hybrid.c |   9 +-
 drivers/media/pci/saa716x/saa716x_i2c.c    |  11 +-
 drivers/media/pci/saa716x/saa716x_msi.c    |  10 +-
 drivers/media/pci/saa716x/saa716x_msi.h    |   1 +
 drivers/media/pci/saa716x/saa716x_pci.c    |   3 +-
 drivers/media/pci/saa716x/saa716x_phi.c    |   5 +-
 drivers/media/pci/saa716x/saa716x_phi.h    |   1 +
 drivers/media/pci/saa716x/saa716x_priv.h   |   8 +-
 drivers/media/pci/saa716x/saa716x_rom.c    |   4 +-
 drivers/media/pci/saa716x/saa716x_rom.h    |   2 +
 drivers/media/pci/saa716x/saa716x_spi.c    | 287 ++++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_spi.h    |  17 ++
 drivers/media/pci/saa716x/saa716x_vip.c    |   3 +
 drivers/media/pci/saa716x/saa716x_vip.h    |   2 +
 30 files changed, 438 insertions(+), 32 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index b11d55b972c4d..4e20ac5c65393 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -5,10 +5,12 @@
 #include "dvb_demux.h"
 #include "dvb_frontend.h"
 
-#include "saa716x_priv.h"
+#include "saa716x_spi.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
 #include "saa716x_gpio.h"
+#include "saa716x_priv.h"
+
 
 DVB_DEFINE_MOD_OPT_ADAPTER_NR(adapter_nr);
 
@@ -74,10 +76,9 @@ static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 contro
 	struct saa716x_config *config		= saa716x->config;
 	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
-	if (adap_cfg->power_ctl != 0)
-	{
+	if (adap_cfg->power_ctl != 0) {
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
-		saa716x_gpio_ctl(saa716x, adap_cfg->power_ctl);
+		saa716x_gpio_ctl(saa716x, 0, adap_cfg->power_ctl); /* TODO! check mask */
 		saa716x_gpio_bits(saa716x, adap_cfg->power_ctl);
 	}
 
@@ -90,10 +91,9 @@ static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
 	struct saa716x_config *config		= saa716x->config;
 	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
-	if (adap_cfg->reset_ctl != 0)
-	{
+	if (adap_cfg->reset_ctl != 0) {
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
-		saa716x_gpio_ctl(saa716x, adap_cfg->reset_ctl);
+		saa716x_gpio_ctl(saa716x, 0, adap_cfg->reset_ctl); /* TODO! check mask */
 		saa716x_gpio_bits(saa716x, adap_cfg->reset_ctl);
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_adap.h b/drivers/media/pci/saa716x/saa716x_adap.h
index e6c2b4bbfc021..7822e3633bc31 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.h
+++ b/drivers/media/pci/saa716x/saa716x_adap.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_ADAP_H
 #define __SAA716x_ADAP_H
 
+struct saa716x_dev;
+
 extern int saa716x_dvb_init(struct saa716x_dev *saa716x);
 extern void saa716x_dvb_exit(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_aip.c b/drivers/media/pci/saa716x/saa716x_aip.c
index 9e31184fa0bdc..5df867f55a3ac 100644
--- a/drivers/media/pci/saa716x/saa716x_aip.c
+++ b/drivers/media/pci/saa716x/saa716x_aip.c
@@ -1,6 +1,9 @@
+#include <linux/kernel.h>
+
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
+#include "saa716x_spi.h"
 #include "saa716x_aip.h"
+#include "saa716x_priv.h"
 
 int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_aip.h b/drivers/media/pci/saa716x/saa716x_aip.h
index 8e3ed5081f7b0..36277b7f80176 100644
--- a/drivers/media/pci/saa716x/saa716x_aip.h
+++ b/drivers/media/pci/saa716x/saa716x_aip.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_AIP_H
 #define __SAA716x_AIP_H
 
+struct saa716x_dev;
+
 extern int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev);
 extern void saa716x_aip_disable(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 7aaab58be3b78..21d6ec33ba805 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -1,5 +1,7 @@
 #include <linux/delay.h>
+
 #include "saa716x_reg.h"
+#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 static int saa716x_ext_boot(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index f45d3d740db21..5c22d8ecb96e7 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -6,6 +6,8 @@ enum saa716x_boot_mode {
 	SAA716x_INT_BOOT, /* GPIO[31:30] = 0x01 */
 };
 
+struct saa716x_dev;
+
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 extern void saa716x_core_reset(struct saa716x_dev *saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 438bfa1548f17..2f921b7fb3299 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -12,8 +12,12 @@
 #include <linux/init.h>
 #include <linux/device.h>
 
+#include <asm/irq.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+
 #include <linux/i2c.h>
-#include "saa716x_priv.h"
 #include "saa716x_vip.h"
 #include "saa716x_aip.h"
 #include "saa716x_msi.h"
@@ -22,6 +26,8 @@
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
 #include "saa716x_rom.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 #include "mb86a16.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 4ba857e1e1720..c2c025643655a 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -1,5 +1,7 @@
 #include <linux/delay.h>
+
 #include "saa716x_reg.h"
+#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 u32 cgu_clk[14] = {
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 4349a2fea8c19..ab656424d9e05 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -4,8 +4,9 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 
-#include "saa716x_priv.h"
 #include "saa716x_dma.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 /*  Allocates one page of memory, which is stores the data of one
  *  716x page table. The result gets stored in the passed DMA buffer
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index a87e9b3155d81..2af232bc84df9 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -14,8 +14,12 @@
 #include <linux/device.h>
 #include <linux/firmware.h>
 
+#include <asm/irq.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+
 #include <linux/i2c.h>
-#include "saa716x_priv.h"
 #include "saa716x_vip.h"
 #include "saa716x_aip.h"
 #include "saa716x_msi.h"
@@ -26,6 +30,7 @@
 #include "saa716x_phi.h"
 #include "saa716x_rom.h"
 #include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 #include <linux/dvb/osd.h>
 
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index d14dd0fe57864..c0ef0e76c1c21 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -1,7 +1,10 @@
+#include <linux/kernel.h>
+
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
-#include "saa716x_fgpi.h"
 #include "saa716x_dma.h"
+#include "saa716x_fgpi.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 static const u32 mmu_pta_base[] = {
 	MMU_PTA_BASE0,
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index ffd152653658a..bb3d00f7aab0f 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -86,6 +86,8 @@ struct fgpi_stream_params {
 	enum fgpi_stream_type	stream_type;
 };
 
+struct saa716x_dmabuf;
+
 extern void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel);
 
 #endif /* __SAA716x_FGPI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index 243f3f4a7abdf..b7a5d0e326719 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -1,6 +1,32 @@
-#include "saa716x_priv.h"
+#include <linux/kernel.h>
+#include <linux/spinlock.h>
+
 #include "saa716x_reg.h"
 #include "saa716x_gpio.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
+
+int saa716x_get_gpio_mode(struct saa716x_dev *saa716x, u32 *config)
+{
+	*config = SAA716x_EPRD(GPIO, GPIO_WR_MODE);
+
+	return 0;
+}
+
+int saa716x_set_gpio_mode(struct saa716x_dev *saa716x, u32 mask, u32 config)
+{
+	unsigned long flags;
+	u32 reg;
+
+	spin_lock_irqsave(&saa716x->gpio_lock, flags);
+	reg = SAA716x_EPRD(GPIO, GPIO_WR_MODE);
+	reg &= ~mask;
+	reg |= (config & mask);
+	SAA716x_EPWR(GPIO, GPIO_WR_MODE, reg);
+	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
+
+	return 0;
+}
 
 u32 saa716x_gpio_rd(struct saa716x_dev *saa716x)
 {
@@ -12,7 +38,7 @@ void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data)
 	SAA716x_EPWR(GPIO, GPIO_WR, data);
 }
 
-void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 out)
+void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 mask, u32 bits)
 {
 	unsigned long flags;
 	u32 reg;
@@ -20,10 +46,8 @@ void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 out)
 	spin_lock_irqsave(&saa716x->gpio_lock, flags);
 
 	reg  = SAA716x_EPRD(GPIO, GPIO_OEN);
-	reg &= ~out;
-	/* TODO ! add maskable config bits in here */
-	/* reg |= (config->mask & out) */
-	reg |= out;
+	reg &= ~mask;
+	reg |= (bits & mask);
 	SAA716x_EPWR(GPIO, GPIO_OEN, reg);
 
 	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
@@ -69,13 +93,16 @@ EXPORT_SYMBOL_GPL(saa716x_gpio_set_input);
 void saa716x_gpio_write(struct saa716x_dev *saa716x, int gpio, int set)
 {
 	uint32_t value;
+	unsigned long flags;
 
+	spin_lock_irqsave(&saa716x->gpio_lock, flags);
 	value = SAA716x_EPRD(GPIO, GPIO_WR);
 	if (set)
 		value |= 1 << gpio;
 	else
 		value &= ~(1 << gpio);
 	SAA716x_EPWR(GPIO, GPIO_WR, value);
+	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
 }
 EXPORT_SYMBOL_GPL(saa716x_gpio_write);
 
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index 080b90f2c13b0..0247663f70332 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -7,9 +7,12 @@
 #define AV_INTR_B	GPIO_01
 #define AV_INTR_A	GPIO_00
 
+struct saa716x_dev;
+
 extern u32 saa716x_gpio_rd(struct saa716x_dev *saa716x);
 extern void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data);
-extern void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 out);
+extern void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 mask, u32 bits);
+
 extern void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits);
 
 extern void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio);
diff --git a/drivers/media/pci/saa716x/saa716x_greg.c b/drivers/media/pci/saa716x/saa716x_greg.c
index f1a9d11c31a5a..c0e2a4c70fe3f 100644
--- a/drivers/media/pci/saa716x/saa716x_greg.c
+++ b/drivers/media/pci/saa716x/saa716x_greg.c
@@ -1,6 +1,9 @@
+#include <linux/kernel.h>
+
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
 #include "saa716x_greg.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 static u32 g_save[12];
 
diff --git a/drivers/media/pci/saa716x/saa716x_greg.h b/drivers/media/pci/saa716x/saa716x_greg.h
index dea3565b502f1..487595e5cfcdd 100644
--- a/drivers/media/pci/saa716x/saa716x_greg.h
+++ b/drivers/media/pci/saa716x/saa716x_greg.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_GREG_H
 #define __SAA716x_GREG_H
 
+struct saa716x_dev;
+
 extern void saa716x_greg_save(struct saa716x_dev *saa716x);
 extern void saa716x_greg_restore(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index a778a7a3905e9..55395a551c1ea 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -12,8 +12,13 @@
 #include <linux/init.h>
 #include <linux/device.h>
 
+#include <asm/irq.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+
+#include <linux/i2c.h>
 
-#include "saa716x_priv.h"
 #include "saa716x_reg.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
@@ -22,6 +27,8 @@
 #include "saa716x_gpio.h"
 #include "saa716x_reg.h"
 #include "saa716x_rom.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 #include "zl10353.h"
 #include "mb86a16.h"
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index fd647d79958f6..5a7043f3ebdd0 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -1,8 +1,17 @@
 #include <linux/delay.h>
+
+#include <asm/irq.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+
+#include <linux/i2c.h>
+
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
 #include "saa716x_i2c.h"
 #include "saa716x_msi.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 #define SAA716x_I2C_TXFAIL	(I2C_ERROR_IBE		| \
 				 I2C_ACK_INTER_MTNA	| \
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 1d7373db3f4d3..efee9379ad244 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -1,7 +1,15 @@
 #include <linux/delay.h>
+
+#include <asm/irq.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
 #include "saa716x_msi.h"
+#include "saa716x_spi.h"
+
+#include "saa716x_priv.h"
 
 #define SAA716x_MSI_VECTORS		50
 
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
index 5d0206dd64878..8eb72d76775cb 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.h
+++ b/drivers/media/pci/saa716x/saa716x_msi.h
@@ -69,6 +69,7 @@ enum saa716x_edge {
 	SAA716x_EDGE_ANY	= 3
 };
 
+struct saa716x_dev;
 
 extern int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h);
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 81f551f565484..f0d2df4bd940d 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -13,8 +13,9 @@
 #include <linux/interrupt.h>
 
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
+#include "saa716x_spi.h"
 #include "saa716x_msi.h"
+#include "saa716x_priv.h"
 
 #define DRIVER_NAME				"SAA716x Core"
 
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 0a03a850250de..f5234832ffaa7 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -1,6 +1,9 @@
+#include <linux/kernel.h>
+
 #include "saa716x_reg.h"
-#include "saa716x_priv.h"
+#include "saa716x_spi.h"
 #include "saa716x_phi.h"
+#include "saa716x_priv.h"
 
 u32 PHI_0_REGS[] = {
 	PHI_0_MODE,
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index 5eb92a7d869bb..48e55b3a8233e 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -28,6 +28,7 @@
 #define PHI_1_BASE		0x0000
 #define PHI_1_APERTURE		0xfffc
 
+struct saa716x_dev;
 
 extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
 extern int saa716x_phi_init(struct saa716x_dev *saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index e80fff8bddfa8..6e8fd3fb49357 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -77,6 +77,7 @@ struct saa716x_msix_entry {
 
 struct saa716x_dev;
 struct saa716x_adapter;
+struct saa716x_spi_config;
 
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 
@@ -146,6 +147,9 @@ struct saa716x_dev {
 	u32				i2c_rate; /* init time */
 	u32				I2C_DEV[2];
 
+	struct saa716x_spi_state	*saa716x_spi;
+	struct saa716x_spi_config	spi_config;
+
 	struct saa716x_adapter		saa716x_adap[2];
 	struct saa716x_cgu		cgu;
 
@@ -165,10 +169,6 @@ extern int saa716x_msi_init(struct saa716x_dev *saa716x);
 extern void saa716x_msi_exit(struct saa716x_dev *saa716x);
 extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
 
-/* SPI */
-extern int saa716x_spi_init(struct saa716x_dev *saa716x);
-extern void saa716x_spi_exit(struct saa716x_dev *saa716x);
-
 /* DMA */
 extern int saa716x_dma_init(struct saa716x_dev *saa716x);
 extern void saa716x_dma_exit(struct saa716x_dev *saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 9b2771656b5fc..57efbcedff010 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -1,8 +1,10 @@
 #include <linux/kernel.h>
 #include <linux/string.h>
-#include "saa716x_priv.h"
+
 #include "saa716x_rom.h"
 #include "saa716x_adap.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
 
 int i;
 
diff --git a/drivers/media/pci/saa716x/saa716x_rom.h b/drivers/media/pci/saa716x/saa716x_rom.h
index 3486bc75456e6..e12d99802f73b 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.h
+++ b/drivers/media/pci/saa716x/saa716x_rom.h
@@ -9,6 +9,8 @@
 //#define DUMP_BYTES	5
 #define DUMP_OFFST	0x000
 
+struct saa716x_dev;
+
 struct saa716x_romhdr {
 	u16	header_size;
 	u8	compression;
diff --git a/drivers/media/pci/saa716x/saa716x_spi.c b/drivers/media/pci/saa716x/saa716x_spi.c
index 0598110a8b1c9..1a1941d2bb4c3 100644
--- a/drivers/media/pci/saa716x/saa716x_spi.c
+++ b/drivers/media/pci/saa716x/saa716x_spi.c
@@ -1,6 +1,41 @@
-#include "saa716x_priv.h"
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/spinlock.h>
+#include <linux/io.h>
+
+#include <linux/spi/spi.h>
+
 #include "saa716x_reg.h"
 #include "saa716x_spi.h"
+#include "saa716x_priv.h"
+
+int saa716x_spi_irqevent(struct saa716x_dev *saa716x)
+{
+	u32 stat, mask;
+
+	BUG_ON(saa716x == NULL);
+
+	stat = SAA716x_EPRD(SPI, SPI_STATUS);
+	mask = SAA716x_EPRD(SPI, SPI_CONTROL_REG) & SPI_SERIAL_INTER_ENABLE;
+	if ((!stat && !mask))
+		return -1;
+
+	dprintk(SAA716x_DEBUG, 0, "SPI event: Stat=<%02x>", stat);
+
+	if (stat & SPI_TRANSFER_FLAG)
+		dprintk(SAA716x_DEBUG, 0, "<TXFER> ");
+	if (stat & SPI_WRITE_COLLISSION)
+		dprintk(SAA716x_DEBUG, 0, "<WCOLL> ");
+	if (stat & SPI_READ_OVERRUN)
+		dprintk(SAA716x_DEBUG, 0, "<ROFLW> ");
+	if (stat & SPI_MODE_FAULT)
+		dprintk(SAA716x_DEBUG, 0, "<FAULT> ");
+	if (stat & SPI_SLAVE_ABORT)
+		dprintk(SAA716x_DEBUG, 0, "<ABORT> ");
+
+	return 0;
+}
+
 
 void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
 {
@@ -20,3 +55,253 @@ void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
 	}
 }
 EXPORT_SYMBOL_GPL(saa716x_spi_write);
+
+static int saa716x_spi_status(struct saa716x_dev *saa716x, u32 *status)
+{
+	u32 stat;
+
+	stat = SAA716x_EPRD(SPI, SPI_STATUS);
+
+	if (stat & SPI_TRANSFER_FLAG)
+		dprintk(SAA716x_DEBUG, 1, "Transfer complete <%02x>", stat);
+
+	if (stat & SPI_WRITE_COLLISSION)
+		dprintk(SAA716x_DEBUG, 1, "Write collission <%02x>", stat);
+
+	if (stat & SPI_READ_OVERRUN)
+		dprintk(SAA716x_DEBUG, 1, "Read Overrun <%02x>", stat);
+
+	if (stat & SPI_MODE_FAULT)
+		dprintk(SAA716x_DEBUG, 1, "MODE fault <%02x>", stat);
+
+	if (stat & SPI_SLAVE_ABORT)
+		dprintk(SAA716x_DEBUG, 1, "SLAVE abort <%02x>", stat);
+
+	*status = stat;
+
+	return 0;
+}
+
+#define SPI_CYCLE_TIMEOUT	100
+
+static int saa716x_spi_xfer(struct saa716x_dev *saa716x, u32 *data)
+{
+	u32 i, status = 0;
+
+	/* write data and wait for completion */
+	SAA716x_EPWR(SPI, SPI_DATA, data[i]);
+	for (i = 0; i < SPI_CYCLE_TIMEOUT; i++) {
+		msleep(10);
+		saa716x_spi_status(saa716x, &status);
+#if 0
+		if (status & SPI_TRANSFER_FLAG) {
+			data = SAA716x_EPRD(SPI, SPI_DATA);
+			return 0;
+		}
+#endif
+		if (status & (SPI_WRITE_COLLISSION	|
+			      SPI_READ_OVERRUN		|
+			      SPI_MODE_FAULT		|
+			      SPI_SLAVE_ABORT))
+
+			return -EIO;
+	}
+
+	return -EIO;
+}
+
+#if 0
+static int saa716x_spi_wr(struct saa716x_dev *saa716x, const u8 *data, int length)
+{
+	struct saa716x_spi_config *config = saa716x->spi_config;
+	u32 gpio_mask;
+	int ret = 0;
+
+	// protect against multiple access
+	spin_lock(&saa716x->gpio_lock);
+
+	// configure the module
+	saa716x_spi_config(saa716x);
+
+    // check input
+
+	// change polarity of GPIO if active high
+	if (config->active_hi) {
+		select  = 1;
+		release = 0;
+	}
+
+	// configure GPIO, first set output register to low selected level
+	saa716x_gpio_write(saa716x, gpio, select);
+
+	// set mode register to register controlled (0)
+	gpio_mask = (1 << gpio);
+	saa716x_set_gpio_mode(saa716x, gpio_mask, 0);
+
+	// configure bit as output (0)
+	saa716x_gpio_ctl(saa716x, gpio_mask, 0);
+
+	// wait at least 500ns before sending a byte
+	msleep(1);
+
+	// send command
+	for (i = 0; i < dwCommandSize; i++) {
+		ucData   = 0;
+//		dwStatus = TransferData(pucCommand[i], &ucData);
+		ret = saa716x_spi_xfer(saa716x);
+		//tmDBGPRINTEx(4,("Info: Command 0x%x ", pucCommand[i]  ));
+
+		/* If command length > 1, disable CS at the end of each command.
+		 * But after the last command byte CS must be left active!
+		 */
+		if ((dwCommandSize > 1) && (i < dwCommandSize - 1)) {
+
+			saa716x_gpio_write(saa716x, gpio, release);
+			msleep(1); /* 500 nS minimum */
+			saa716x_gpio_write(saa716x, gpio, select);
+		}
+
+		if (ret != 0) {
+			dprintk(SAA716x_ERROR, 1, "ERROR: Command transfer failed");
+			msleep(1); /* 500 nS minimum */
+			saa716x_gpio_write(saa716x, gpio, release); /* release GPIO */
+			spin_unlock(&saa716x->spi_lock);
+			return ret;
+		}
+
+		if (config->LSB_first)
+			dwTransferByte++;
+		else
+			dwTransferByte--;
+	}
+
+// assume that the byte order is the same as the bit order
+
+// send read address
+
+// send data
+
+// wait at least 500ns before releasing slave
+
+// release GPIO pin
+
+	// release spinlock
+	spin_unlock(&saa716x->gpio_lock);
+}
+#endif
+
+#define MODEBITS (SPI_CPOL | SPI_CPHA)
+
+static int saa716x_spi_setup(struct spi_device *spi)
+{
+	struct spi_master *master		= spi->master;
+	struct saa716x_spi_state *saa716x_spi	= spi_master_get_devdata(master);
+	struct saa716x_dev *saa716x		= saa716x_spi->saa716x;
+	struct saa716x_spi_config *config	= &saa716x->spi_config;
+
+	u8 control = 0;
+
+	if (spi->mode & ~MODEBITS) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Unsupported MODE bits <%x>",
+			spi->mode & ~MODEBITS);
+
+		return -EINVAL;
+	}
+
+	SAA716x_EPWR(SPI, SPI_CLOCK_COUNTER, config->clk_count);
+
+	control |= SPI_MODE_SELECT; /* SPI Master */
+
+	if (config->LSB_first)
+		control |= SPI_LSB_FIRST_ENABLE;
+
+	if (config->clk_pol)
+		control |= SPI_CLOCK_POLARITY;
+
+	if (config->clk_pha)
+		control |= SPI_CLOCK_PHASE;
+
+	SAA716x_EPWR(SPI, SPI_CONTROL_REG, control);
+
+	return 0;
+}
+
+static void saa716x_spi_cleanup(struct spi_device *spi)
+{
+
+}
+
+static int saa716x_spi_transfer(struct spi_device *spi, struct spi_message *msg)
+{
+	struct spi_master *master		= spi->master;
+	struct saa716x_spi_state *saa716x_spi	= spi_master_get_devdata(master);
+	struct saa716x_dev *saa716x		= saa716x_spi->saa716x;
+	unsigned long flags;
+
+	spin_lock_irqsave(&saa716x->gpio_lock, flags);
+#if 0
+	if (saa716x_spi->run == QUEUE_STOPPED) {
+		spin_unlock_irqrestore(&saa716x_spi->lock, flags);
+		return -ESHUTDOWN;
+	}
+
+	msg->actual_length = 0;
+	msg->status = -EINPROGRESS;
+	msg->state = START_STATE;
+
+	list_add_tail(&msg->queue, &saa716x_spi->queue);
+
+	if (saa716x_spi->run == QUEUE_RUNNING && !saa716x_spi->busy)
+		queue_work(saa716x_spi->workqueue, &saa716x_spi->pump_messages);
+#endif
+	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
+
+	return 0;
+}
+
+int __devinit saa716x_spi_init(struct saa716x_dev *saa716x)
+{
+	struct pci_dev *pdev = saa716x->pdev;
+	struct spi_master *master;
+	struct saa716x_spi_state *saa716x_spi;
+	int ret;
+
+	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core",
+		saa716x->pdev->device);
+
+	master = spi_alloc_master(&pdev->dev, sizeof (struct saa716x_spi_state));
+	if (master == NULL) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Cannot allocate SPI Master!");
+		return -ENOMEM;
+	}
+
+	saa716x_spi		= spi_master_get_devdata(master);
+	saa716x_spi->master	= master;
+	saa716x_spi->saa716x	= saa716x;
+	saa716x->saa716x_spi	= saa716x_spi;
+
+	master->bus_num		= pdev->bus->number;
+	master->num_chipselect	= 1; /* TODO! use config */
+	master->cleanup		= saa716x_spi_cleanup;
+	master->setup		= saa716x_spi_setup;
+	master->transfer	= saa716x_spi_transfer;
+
+	ret = spi_register_master(master);
+	if (ret != 0) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: registering SPI Master!");
+		goto err;
+	}
+err:
+	spi_master_put(master);
+	return ret;
+}
+EXPORT_SYMBOL(saa716x_spi_init);
+
+void __devexit saa716x_spi_exit(struct saa716x_dev *saa716x)
+{
+	struct saa716x_spi_state *saa716x_spi = saa716x->saa716x_spi;
+
+	spi_unregister_master(saa716x_spi->master);
+	dprintk(SAA716x_DEBUG, 1, "SAA%02x SPI succesfully removed", saa716x->pdev->device);
+}
+EXPORT_SYMBOL(saa716x_spi_exit);
diff --git a/drivers/media/pci/saa716x/saa716x_spi.h b/drivers/media/pci/saa716x/saa716x_spi.h
index dd5387303edef..0060c22b8e39c 100644
--- a/drivers/media/pci/saa716x/saa716x_spi.h
+++ b/drivers/media/pci/saa716x/saa716x_spi.h
@@ -1,6 +1,23 @@
 #ifndef __SAA716x_SPI_H
 #define __SAA716x_SPI_H
 
+struct saa716x_dev;
+
+struct saa716x_spi_config {
+	u8 clk_count;
+	u8 clk_pol:1;
+	u8 clk_pha:1;
+	u8 LSB_first:1;
+};
+
+struct saa716x_spi_state {
+	struct spi_master *master;
+	struct saa716x_dev *saa716x;
+};
+
 extern void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length);
 
+extern int saa716x_spi_init(struct saa716x_dev *saa716x);
+extern void saa716x_spi_exit(struct saa716x_dev *saa716x);
+
 #endif /* __SAA716x_SPI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 9b22161a764bd..3ee3a0e5fb377 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -1,4 +1,7 @@
+#include <linux/kernel.h>
+
 #include "saa716x_reg.h"
+#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 void saa716x_vipint_disable(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_vip.h b/drivers/media/pci/saa716x/saa716x_vip.h
index 61ecba88a78b9..55c6a1a84f379 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.h
+++ b/drivers/media/pci/saa716x/saa716x_vip.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_VIP_H
 #define __SAA716x_VIP_H
 
+struct saa716x_dev;
+
 extern void saa716x_vipint_disable(struct saa716x_dev *saa716x);
 extern void saa716x_vip_disable(struct saa716x_dev *saa716x);
 

From 9f79de1724a840fa9b7556373ccf3820e4f09fb7 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:49:19 +0400
Subject: [PATCH 106/364] saa716x: Add video device support

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c   | 487 ++++++++++++++++-------
 drivers/media/pci/saa716x/saa716x_ff.h   |  44 +-
 drivers/media/pci/saa716x/saa716x_gpio.c |  19 +
 drivers/media/pci/saa716x/saa716x_gpio.h |   3 +
 drivers/media/pci/saa716x/saa716x_phi.c  |  28 +-
 drivers/media/pci/saa716x/saa716x_phi.h  |   3 +-
 drivers/media/pci/saa716x/saa716x_reg.h  |   1 +
 7 files changed, 437 insertions(+), 148 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 2af232bc84df9..143020132895d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -32,6 +32,7 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
+#include <linux/dvb/video.h>
 #include <linux/dvb/osd.h>
 
 unsigned int verbose;
@@ -223,6 +224,7 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
 	unsigned long timeout;
+	u8 * data;
 
 	timeout = 1 * HZ;
 	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
@@ -232,6 +234,7 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
+			dprintk(SAA716x_ERROR, 1, "cmd ERESTARTSYS");
 			return -ERESTARTSYS;
 		}
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
@@ -240,6 +243,9 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 
 	sti7109->cmd_ready = 0;
 	sti7109->result_avail = 0;
+	data = (u8 *) cmd->cmd_data;
+	dprintk(SAA716x_INFO, 1, "cmd %02X %02X %02X %02X %02X %02X",
+		data[0], data[1], data[2], data[3], data[4], data[5]);
 	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
@@ -253,6 +259,7 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 			cmd->result_len = 0;
 			if (timeout == -ERESTARTSYS) {
 				/* a signal arrived */
+				dprintk(SAA716x_ERROR, 1, "result ERESTARTSYS");
 				return -ERESTARTSYS;
 			}
 			dprintk(SAA716x_ERROR, 1, "timed out waiting for command result");
@@ -291,6 +298,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
+			dprintk(SAA716x_ERROR, 1, "data ERESTARTSYS");
 			return -ERESTARTSYS;
 		}
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
@@ -332,15 +340,11 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
 
 		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->block_done_wq,
-							   sti7109->block_done == 1,
-							   timeout);
+		timeout = wait_event_timeout(sti7109->block_done_wq,
+					     sti7109->block_done == 1,
+					     timeout);
 
-		if (timeout == -ERESTARTSYS || sti7109->block_done == 0) {
-			if (timeout == -ERESTARTSYS) {
-				/* a signal arrived */
-				return -ERESTARTSYS;
-			}
+		if (sti7109->block_done == 0) {
 			dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
 			return -EIO;
 		}
@@ -348,6 +352,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	}
 
 	data->data_handle = sti7109->data_handle;
+	dprintk(SAA716x_INFO, 1, "data %d", data->data_handle);
 	sti7109->data_handle++;
 	return 0;
 }
@@ -357,13 +362,20 @@ static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 {
 	struct dvb_device *dvbdev	= file->private_data;
 	struct sti7109_dev *sti7109	= dvbdev->priv;
+	int ret_val = -EINVAL;
 
-	if (cmd == OSD_RAW_CMD)
-		return sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
-	else if (cmd == OSD_RAW_DATA)
-		return sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
+	if (cmd == OSD_RAW_CMD) {
+		mutex_lock(&sti7109->cmd_lock);
+		ret_val = sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
+		mutex_unlock(&sti7109->cmd_lock);
+	}
+	else if (cmd == OSD_RAW_DATA) {
+		mutex_lock(&sti7109->data_lock);
+		ret_val = sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
+		mutex_unlock(&sti7109->data_lock);
+	}
 
-	return -EINVAL;
+	return ret_val;
 }
 
 
@@ -395,49 +407,153 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
 	struct sti7109_dev *sti7109		= saa716x->priv;
 
-	init_waitqueue_head(&sti7109->cmd_ready_wq);
-	sti7109->cmd_ready = 0;
-
-	init_waitqueue_head(&sti7109->result_avail_wq);
-	sti7109->result_avail = 0;
-
-	sti7109->data_handle = 0;
-	init_waitqueue_head(&sti7109->data_ready_wq);
-	sti7109->data_ready = 0;
-	init_waitqueue_head(&sti7109->block_done_wq);
-	sti7109->block_done = 0;
-
 	dvb_register_device(&saa716x_adap->dvb_adapter,
 			    &sti7109->osd_dev,
 			    &dvbdev_osd,
 			    sti7109,
 			    DVB_DEVICE_OSD);
+
 	return 0;
 }
 
-static int sti7109_send_cmd(struct sti7109_dev * sti7109, const uint8_t * data, int length)
+#define FREE_COND_TS (dvb_ringbuffer_free(&sti7109->tsout) >= TS_SIZE)
+
+static ssize_t dvb_video_write(struct file *file, const char __user *buf,
+			       size_t count, loff_t *ppos)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
-	unsigned long timeout;
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+	struct saa716x_dev *saa716x	= sti7109->dev;
+	unsigned long todo = count;
+
+	if ((file->f_flags & O_ACCMODE) == O_RDONLY)
+		return -EPERM;
+/*
+	if (av7110->videostate.stream_source != VIDEO_SOURCE_MEMORY)
+		return -EPERM;
+*/
+	if ((file->f_flags & O_NONBLOCK) && !FREE_COND_TS)
+		return -EWOULDBLOCK;
+
+	while (todo >= TS_SIZE) {
+		if (!FREE_COND_TS) {
+			if (file->f_flags & O_NONBLOCK)
+				break;
+			if (wait_event_interruptible(sti7109->tsout.queue, FREE_COND_TS))
+				break;
+		}
+		dvb_ringbuffer_write(&sti7109->tsout, buf, TS_SIZE);
+		todo -= TS_SIZE;
+		buf += TS_SIZE;
+	}
 
-	timeout = 10 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
-						   sti7109->cmd_ready == 1,
-						   timeout);
+	if (count > todo) {
+		u32 fifoCtrl;
 
-	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			return -ERESTARTSYS;
+		fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
+		fifoCtrl |= 0x4;
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+	}
+
+	return count - todo;
+}
+
+static unsigned int dvb_video_poll(struct file *file, poll_table *wait)
+{
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+	unsigned int mask = 0;
+
+	if ((file->f_flags & O_ACCMODE) != O_RDONLY)
+		poll_wait(file, &sti7109->tsout.queue, wait);
+
+	if ((file->f_flags & O_ACCMODE) != O_RDONLY) {
+		if (1/*sti7109->playing*/) {
+			if (FREE_COND_TS)
+				mask |= (POLLOUT | POLLWRNORM);
+		} else /* if not playing: may play if asked for */
+			mask |= (POLLOUT | POLLWRNORM);
+	}
+
+	return mask;
+}
+
+static int dvb_video_ioctl(struct inode *inode, struct file *file,
+			   unsigned int cmd, void *parg)
+{
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+	struct saa716x_dev *saa716x	= sti7109->dev;
+	int ret = 0;
+
+	switch (cmd) {
+	case VIDEO_SELECT_SOURCE:
+	{
+		video_stream_source_t stream_source;
+
+		stream_source = (video_stream_source_t) parg;
+		if (stream_source == VIDEO_SOURCE_DEMUX) {
+			/* select TS input 1 for TS mux 1 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX1, 1);
+			/* stop and reset FIFO 1 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
 		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
-		return -EIO;
+		else {
+			/* select FIFO 1 for TS mux 1 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX1, 4);
+			/* reset FIFO 1 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
+			/* start FIFO 1 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 2);
+		}
+		break;
+	}
+	default:
+		ret = -ENOIOCTLCMD;
+		break;
 	}
+	return ret;
+}
+
+static struct file_operations dvb_video_fops = {
+	.owner		= THIS_MODULE,
+	.write		= dvb_video_write,
+	.ioctl		= dvb_generic_ioctl,
+	.open		= dvb_generic_open,
+	.release	= dvb_generic_release,
+	.poll		= dvb_video_poll,
+};
+
+static struct dvb_device dvbdev_video = {
+	.priv		= NULL,
+	.users		= 1,
+	.writers	= 1,
+	.fops		= &dvb_video_fops,
+	.kernel_ioctl	= dvb_video_ioctl,
+};
+
+static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)
+{
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	dvb_unregister_device(sti7109->video_dev);
+	return 0;
+}
+
+static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
+{
+	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109		= saa716x->priv;
+
+	dvb_ringbuffer_init(&sti7109->tsout, sti7109->iobuf, TSOUT_LEN);
+	sti7109->tsbuf = (u8 *) (sti7109->iobuf + TSOUT_LEN);
+
+	dvb_register_device(&saa716x_adap->dvb_adapter,
+			    &sti7109->video_dev,
+			    &dvbdev_video,
+			    sti7109,
+			    DVB_DEVICE_VIDEO);
 
-	sti7109->cmd_ready = 0;
-	sti7109->result_avail = 0;
-	saa716x_phi_write(saa716x, 0x0000, data, length);
-	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 	return 0;
 }
 
@@ -447,6 +563,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	struct sti7109_dev *sti7109;
 	int err = 0;
 	u32 value;
+	unsigned long timeout;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -503,6 +620,8 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail3;
 	}
 
+	saa716x_gpio_init(saa716x);
+
 	/* prepare the sti7109 device struct */
 	sti7109 = kzalloc(sizeof(struct sti7109_dev), GFP_KERNEL);
 	if (!sti7109) {
@@ -513,10 +632,34 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	sti7109->dev	= saa716x;
 	saa716x->priv	= sti7109;
 
+	sti7109->iobuf = vmalloc(TSOUT_LEN + TSBUF_LEN);
+	if (!sti7109->iobuf)
+		goto fail4;
+
+	mutex_init(&sti7109->cmd_lock);
+	mutex_init(&sti7109->data_lock);
+
+	init_waitqueue_head(&sti7109->boot_finish_wq);
+	sti7109->boot_finished = 0;
+
+	init_waitqueue_head(&sti7109->cmd_ready_wq);
+	sti7109->cmd_ready = 0;
+
+	init_waitqueue_head(&sti7109->result_avail_wq);
+	sti7109->result_avail = 0;
+
+	sti7109->data_handle = 0;
+	init_waitqueue_head(&sti7109->data_ready_wq);
+	sti7109->data_ready = 0;
+	init_waitqueue_head(&sti7109->block_done_wq);
+	sti7109->block_done = 0;
+
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
+	saa716x_gpio_set_mode(saa716x, TT_PREMIUM_GPIO_FPGA_CS0, 1);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS1);
+	saa716x_gpio_set_mode(saa716x, TT_PREMIUM_GPIO_FPGA_CS1, 1);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN);
 	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
 	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
@@ -531,7 +674,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	err = saa716x_ff_fpga_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x FF FPGA Initialization failed");
-		goto fail4;
+		goto fail5;
 	}
 
 	/* enable interrupts from ST7109 -> PC */
@@ -546,7 +689,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	err = saa716x_ff_st7109_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x FF STi7109 initialization failed");
-		goto fail4;
+		goto fail5;
 	}
 
 	err = saa716x_dump_eeprom(saa716x);
@@ -562,115 +705,53 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
-		goto fail5;
+		goto fail6;
 	}
 
-	err = saa716x_ff_osd_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
+	/* wait a maximum of 10 seconds for the STi7109 to boot */
+	timeout = 10 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->boot_finish_wq,
+						   sti7109->boot_finished == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->boot_finished == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			goto fail5;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for boot finish");
 		goto fail6;
 	}
+	dprintk(SAA716x_INFO, 1, "STi7109 finished booting");
 
-	if (0) {
-		u8 data[32];
-
-		memset(data, 0, sizeof(data));
-		data[0] = 0;
-		data[1] = 13;
-		data[2] = 0;
-		// command group
-		data[3] = 4;
-		// command id
-		data[4] = 0;
-		data[5] = 10; // create display
-		// width
-		data[6] = 0;
-		data[7] = 0;
-		data[8] = 0x07;
-		data[9] = 0x80;
-		// height
-		data[10] = 0;
-		data[11] = 0;
-		data[12] = 0x04;
-		data[13] = 0x38;
-		// color type
-		data[14] = 4;
-		sti7109_send_cmd(sti7109, data, 15);
-
-		msleep(100);
-
-		memset(data, 0, sizeof(data));
-		data[0] = 0;
-		data[1] = 28;
-		data[2] = 0;
-		// command group
-		data[3] = 4;
-		// command id
-		data[4] = 0;
-		data[5] = 71; // draw rectangle
-		// display handle
-		data[6] = 0;
-		data[7] = 0;
-		data[8] = 0;
-		data[9] = 0;
-		// x
-		data[10] = 0;
-		data[11] = 0;
-		data[12] = 0;
-		data[13] = 100;
-		// y
-		data[14] = 0;
-		data[15] = 0;
-		data[16] = 0;
-		data[17] = 200;
-		// w
-		data[18] = 0;
-		data[19] = 0;
-		data[20] = 0x02;
-		data[21] = 0x00;
-		// h
-		data[22] = 0;
-		data[23] = 0;
-		data[24] = 0x01;
-		data[25] = 0x00;
-		// color
-		data[26] = 0xFF;
-		data[27] = 0xFF;
-		data[28] = 0x00;
-		data[29] = 0x00;
-		sti7109_send_cmd(sti7109, data, 30);
-
-		msleep(100);
-
-		memset(data, 0, sizeof(data));
-		data[0] = 0;
-		data[1] = 8;
-		data[2] = 0;
-		// command group
-		data[3] = 4;
-		// command id
-		data[4] = 0;
-		data[5] = 15; // render display
-		// handle
-		data[6] = 0;
-		data[7] = 0;
-		data[8] = 0;
-		data[9] = 0;
-		sti7109_send_cmd(sti7109, data, 10);
+	err = saa716x_ff_video_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF VIDEO initialization failed");
+		goto fail7;
+	}
+
+	err = saa716x_ff_osd_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
+		goto fail8;
 	}
 
 	return 0;
 
-fail6:
+fail8:
 	saa716x_ff_osd_exit(saa716x);
-fail5:
+fail7:
+	saa716x_ff_video_exit(saa716x);
+fail6:
 	saa716x_dvb_exit(saa716x);
-fail4:
+fail5:
 	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
 
 	/* disable board power */
 	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
 
+	vfree(sti7109->iobuf);
+fail4:
 	kfree(sti7109);
 fail3:
 	saa716x_i2c_exit(saa716x);
@@ -689,6 +770,8 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 
 	saa716x_ff_osd_exit(saa716x);
 
+	saa716x_ff_video_exit(saa716x);
+
 	saa716x_dvb_exit(saa716x);
 
 	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, MSI_INT_EXTINT_0);
@@ -764,14 +847,14 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		struct sti7109_dev *sti7109 = saa716x->priv;
 
 		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
-		dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
+		//dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
 		if (phiISR & ISR_CMD_MASK) {
 
 			u32 value;
 			u32 length;
-			dprintk(SAA716x_INFO, 1, "CMD interrupt source");
+			/*dprintk(SAA716x_INFO, 1, "CMD interrupt source");*/
 
-			value = SAA716x_EPRD(PHI_1, 0);
+			value = SAA716x_EPRD(PHI_1, ADDR_CMD_DATA);
 			value = __cpu_to_be32(value);
 			length = (value >> 16) + 2;
 
@@ -782,34 +865,150 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_phi_read(saa716x, 0, sti7109->result_data, length);
+			saa716x_phi_read(saa716x, ADDR_CMD_DATA, sti7109->result_data, length);
 			sti7109->result_len = length;
 			sti7109->result_avail = 1;
 			wake_up(&sti7109->result_avail_wq);
 
+			phiISR &= ~ISR_CMD_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CMD_MASK);
 		}
 
 		if (phiISR & ISR_READY_MASK) {
-			dprintk(SAA716x_INFO, 1, "READY interrupt source");
+			/*dprintk(SAA716x_INFO, 1, "READY interrupt source");*/
 			sti7109->cmd_ready = 1;
 			wake_up(&sti7109->cmd_ready_wq);
+			phiISR &= ~ISR_READY_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_READY_MASK);
 		}
 
 		if (phiISR & ISR_BLOCK_MASK) {
-			dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");
+			/*dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");*/
 			sti7109->block_done = 1;
 			wake_up(&sti7109->block_done_wq);
+			phiISR &= ~ISR_BLOCK_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BLOCK_MASK);
 		}
 
 		if (phiISR & ISR_DATA_MASK) {
-			dprintk(SAA716x_INFO, 1, "DATA interrupt source");
+			/*dprintk(SAA716x_INFO, 1, "DATA interrupt source");*/
 			sti7109->data_ready = 1;
 			wake_up(&sti7109->data_ready_wq);
+			phiISR &= ~ISR_DATA_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DATA_MASK);
 		}
+
+		if (phiISR & ISR_BOOT_FINISH_MASK) {
+			/*dprintk(SAA716x_INFO, 1, "BOOT FINISH interrupt source");*/
+			sti7109->boot_finished = 1;
+			wake_up(&sti7109->boot_finish_wq);
+			phiISR &= ~ISR_BOOT_FINISH_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BOOT_FINISH_MASK);
+		}
+
+		if (phiISR & ISR_AUDIO_PTS_MASK) {
+			u8 data[8];
+
+			saa716x_phi_read(saa716x, ADDR_AUDIO_PTS, data, 8);
+			sti7109->audio_pts = ((u64) (data[3] & 0x01) << 32)
+					    | (u64) (data[4] << 24)
+					    | (u64) (data[5] << 16)
+					    | (u64) (data[6] << 8)
+					    | (u64) (data[7]);
+
+			phiISR &= ~ISR_AUDIO_PTS_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_AUDIO_PTS_MASK);
+
+			/*dprintk(SAA716x_INFO, 1, "AUDIO PTS: %llu", sti7109->audio_pts);*/
+		}
+
+		if (phiISR & ISR_VIDEO_PTS_MASK) {
+			u8 data[8];
+
+			saa716x_phi_read(saa716x, ADDR_VIDEO_PTS, data, 8);
+			sti7109->video_pts = ((u64) (data[3] & 0x01) << 32)
+					    | (u64) (data[4] << 24)
+					    | (u64) (data[5] << 16)
+					    | (u64) (data[6] << 8)
+					    | (u64) (data[7]);
+
+			phiISR &= ~ISR_VIDEO_PTS_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_VIDEO_PTS_MASK);
+
+			/*dprintk(SAA716x_INFO, 1, "VIDEO PTS: %llu", sti7109->video_pts);*/
+		}
+
+		if (phiISR & ISR_CURRENT_STC_MASK) {
+			u8 data[8];
+
+			saa716x_phi_read(saa716x, ADDR_CURRENT_STC, data, 8);
+			sti7109->current_stc = ((u64) (data[3] & 0x01) << 32)
+					      | (u64) (data[4] << 24)
+					      | (u64) (data[5] << 16)
+					      | (u64) (data[6] << 8)
+					      | (u64) (data[7]);
+
+			phiISR &= ~ISR_CURRENT_STC_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CURRENT_STC_MASK);
+
+			/*dprintk(SAA716x_INFO, 1, "CURRENT STC: %llu", sti7109->current_stc);*/
+		}
+
+		if (phiISR & ISR_REMOTE_EVENT_MASK) {
+			u8 data[4];
+
+			saa716x_phi_read(saa716x, ADDR_REMOTE_EVENT, data, 4);
+			sti7109->remote_event = (data[0] << 24)
+					      | (data[1] << 16)
+					      | (data[2] << 8)
+					      | (data[3]);
+
+			phiISR &= ~ISR_REMOTE_EVENT_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
+
+			dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %u", sti7109->remote_event);
+		}
+
+		if (phiISR & ISR_FIFO_EMPTY_MASK) {
+			u32 fifoCtrl;
+			u32 fifoStat;
+			u16 fifoSize;
+			u16 fifoUsage;
+			u16 fifoFree;
+			int len;
+
+			/*dprintk(SAA716x_INFO, 1, "FIFO EMPTY interrupt source");*/
+			fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
+			fifoCtrl &= ~0x4;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+			fifoStat = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_STAT);
+			fifoSize = (u16) (fifoStat >> 16);
+			fifoUsage = (u16) fifoStat;
+			fifoFree = fifoSize - fifoUsage;
+			spin_lock(&sti7109->tsout.lock);
+			len = dvb_ringbuffer_avail(&sti7109->tsout);
+			if (len > fifoFree)
+				len = fifoFree;
+			if (len >= TS_SIZE)
+			{
+				while (len >= TS_SIZE)
+				{
+					dvb_ringbuffer_read(&sti7109->tsout, sti7109->tsbuf, (size_t) TS_SIZE, 0);
+					saa716x_phi_write_fifo(saa716x, sti7109->tsbuf, TS_SIZE);
+					len -= TS_SIZE;
+				}
+				wake_up(&sti7109->tsout.queue);
+				fifoCtrl |= 0x4;
+				SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+			}
+			spin_unlock(&sti7109->tsout.lock);
+			phiISR &= ~ISR_FIFO_EMPTY_MASK;
+		}
+
+		if (phiISR) {
+			dprintk(SAA716x_INFO, 1, "unknown interrupt source");
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, phiISR);
+		}
 	}
 
 	return IRQ_HANDLED;
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 3d065f02e60ad..461581fba3ae1 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -1,6 +1,9 @@
 #ifndef __SAA716x_FF_H
 #define __SAA716x_FF_H
 
+#include "dvb_filter.h"
+#include "dvb_ringbuffer.h"
+
 #define TECHNOTREND			0x13c2
 #define S2_6400_DUAL_S2_PREMIUM		0x3009
 
@@ -22,25 +25,56 @@
 #define FPGA_ADDR_EMI_ISET	0x8120 /* EMI Interrupt Set Register */
 #define FPGA_ADDR_EMI_ICLR	0x8130 /* EMI Interrupt Clear Register */
 
+#define FPGA_ADDR_TSR_CTRL	0x8200 /* TS router control register */
+#define FPGA_ADDR_TSR_MUX1	0x8210 /* TS multiplexer 1 selection register */
+#define FPGA_ADDR_TSR_MUX2	0x8220 /* TS multiplexer 2 selection register */
+#define FPGA_ADDR_TSR_MUX3	0x8230 /* TS multiplexer 3 selection register */
+#define FPGA_ADDR_TSR_MUXCI1	0x8240 /* TS multiplexer CI 1 selection register */
+#define FPGA_ADDR_TSR_MUXCI2	0x8250 /* TS multiplexer CI 2 selection register */
+
+#define FPGA_ADDR_FIFO_CTRL	0x8300 /* FIFO control register */
+#define FPGA_ADDR_FIFO_STAT	0x8310 /* FIFO status register */
+
 #define ISR_CMD_MASK		0x0001 /* interrupt source for normal cmds (osd, fre, av, ...) */
 #define ISR_READY_MASK		0x0002 /* interrupt source for command acknowledge */
 #define ISR_BLOCK_MASK		0x0004 /* interrupt source for single block transfers and acknowledge */
 #define ISR_DATA_MASK		0x0008 /* interrupt source for data transfer acknowledge */
+#define ISR_BOOT_FINISH_MASK	0x0010 /* interrupt source for boot finish indication */
+#define ISR_AUDIO_PTS_MASK	0x0020 /* interrupt source for audio PTS */
+#define ISR_VIDEO_PTS_MASK	0x0040 /* interrupt source for video PTS */
+#define ISR_CURRENT_STC_MASK	0x0080 /* interrupt source for current system clock */
+#define ISR_REMOTE_EVENT_MASK	0x0100 /* interrupt source for remote events */
+#define ISR_FIFO_EMPTY_MASK	0x8000 /* interrupt source for FIFO empty */
 
 #define ADDR_CMD_DATA		0x0000 /* address for cmd data in fpga dpram */
 #define ADDR_BLOCK_DATA		0x0600 /* address for block data in fpga dpram */
+#define ADDR_AUDIO_PTS		0x3E00 /* address for audio PTS (64 Bits) */
+#define ADDR_VIDEO_PTS		0x3E08 /* address for video PTS (64 Bits) */
+#define ADDR_CURRENT_STC	0x3E10 /* address for system clock (64 Bits) */
+#define ADDR_REMOTE_EVENT	0x3F00 /* address for remote events (32 Bits) */
 
 #define SIZE_CMD_DATA		0x0600 /* maximum size for command data (1,5 kB) */
 #define SIZE_BLOCK_DATA		0x3800 /* maximum size for block data (14 kB) */
 
 #define SIZE_BLOCK_HEADER	8      /* block header size */
 
-#define MAX_RESULT_LEN		64
+#define MAX_RESULT_LEN		256
+
+#define TSOUT_LEN		(1024 * TS_SIZE)
+#define TSBUF_LEN		(8 * 1024)
 
 /* place to store all the necessary device information */
 struct sti7109_dev {
 	struct saa716x_dev	*dev;
 	struct dvb_device	*osd_dev;
+	struct dvb_device	*video_dev;
+
+	void			*iobuf;	 /* memory for all buffers */
+	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
+	u8			*tsbuf;  /* temp ts buffer */
+
+	wait_queue_head_t	boot_finish_wq;
+	int			boot_finished;
 
 	wait_queue_head_t	cmd_ready_wq;
 	int			cmd_ready;
@@ -55,6 +89,14 @@ struct sti7109_dev {
 	int			data_ready;
 	wait_queue_head_t	block_done_wq;
 	int			block_done;
+
+	struct mutex		cmd_lock;
+	struct mutex		data_lock;
+
+	u64			audio_pts;
+	u64			video_pts;
+	u64			current_stc;
+	u32			remote_event;
 };
 
 #endif /* __SAA716x_FF_H */
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index b7a5d0e326719..239314d088ba5 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -6,6 +6,12 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
+void saa716x_gpio_init(struct saa716x_dev *saa716x)
+{
+	spin_lock_init(&saa716x->gpio_lock);
+}
+EXPORT_SYMBOL_GPL(saa716x_gpio_init);
+
 int saa716x_get_gpio_mode(struct saa716x_dev *saa716x, u32 *config)
 {
 	*config = SAA716x_EPRD(GPIO, GPIO_WR_MODE);
@@ -90,6 +96,19 @@ void saa716x_gpio_set_input(struct saa716x_dev *saa716x, int gpio)
 }
 EXPORT_SYMBOL_GPL(saa716x_gpio_set_input);
 
+void saa716x_gpio_set_mode(struct saa716x_dev *saa716x, int gpio, int mode)
+{
+	uint32_t value;
+
+	value = SAA716x_EPRD(GPIO, GPIO_WR_MODE);
+	if (mode)
+		value |= 1 << gpio;
+	else
+		value &= ~(1 << gpio);
+	SAA716x_EPWR(GPIO, GPIO_WR_MODE, value);
+}
+EXPORT_SYMBOL_GPL(saa716x_gpio_set_mode);
+
 void saa716x_gpio_write(struct saa716x_dev *saa716x, int gpio, int set)
 {
 	uint32_t value;
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index 0247663f70332..a82580b4b60f1 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -9,6 +9,8 @@
 
 struct saa716x_dev;
 
+extern void saa716x_gpio_init(struct saa716x_dev *saa716x);
+
 extern u32 saa716x_gpio_rd(struct saa716x_dev *saa716x);
 extern void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data);
 extern void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 mask, u32 bits);
@@ -17,6 +19,7 @@ extern void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits);
 
 extern void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio);
 extern void saa716x_gpio_set_input(struct saa716x_dev *saa716x, int gpio);
+extern void saa716x_gpio_set_mode(struct saa716x_dev *saa716x, int gpio, int mode);
 extern void saa716x_gpio_write(struct saa716x_dev *saa716x, int gpio, int set);
 extern int saa716x_gpio_read(struct saa716x_dev *saa716x, int gpio);
 
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index f5234832ffaa7..7382f9711e77b 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -76,7 +76,19 @@ int saa716x_phi_init(struct saa716x_dev *saa716x)
 {
 	uint32_t value;
 
-	/* SRAM mode, auto increment on */
+	/* init PHI 0 to FIFO mode */
+	value = 0;
+	value |= PHI_FIFO_MODE;
+	SAA716x_EPWR(PHI_0, PHI_0_MODE, value);
+
+	value = 0;
+	value |= 0x02; /* chip select 1 */
+	value |= 0x00 << 8; /* ready mask */
+	value |= 0x03 << 12; /* strobe time */
+	value |= 0x06 << 20; /* cycle time */
+	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, value);
+
+	/* init PHI 1 to SRAM mode, auto increment on */
 	value = 0;
 	value |= PHI_AUTO_INCREMENT;
 	SAA716x_EPWR(PHI_0, PHI_1_MODE, value);
@@ -111,7 +123,7 @@ int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 * data,
 }
 EXPORT_SYMBOL_GPL(saa716x_phi_write);
 
-int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, const u8 * data, int length)
+int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, u8 * data, int length)
 {
 	int i;
 
@@ -123,3 +135,15 @@ int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, const u8 * data,
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_phi_read);
+
+int saa716x_phi_write_fifo(struct saa716x_dev *saa716x, const u8 * data, int length)
+{
+	int i;
+
+	for (i = 0; i < length; i += 4) {
+		SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_phi_write_fifo);
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index 48e55b3a8233e..ff5cda2314257 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -33,6 +33,7 @@ struct saa716x_dev;
 extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
 extern int saa716x_phi_init(struct saa716x_dev *saa716x);
 extern int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 *data, int length);
-extern int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, const u8 *data, int length);
+extern int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, u8 *data, int length);
+extern int saa716x_phi_write_fifo(struct saa716x_dev *saa716x, const u8 * data, int length);
 
 #endif /* __SAA716x_PHI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
index f99cc50abe3d1..effd966bca463 100644
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_reg.h
@@ -880,6 +880,7 @@
 
 #define PHI_CSN_DEASSERT		(0x00000001 <<  2)
 #define PHI_AUTO_INCREMENT		(0x00000001 <<  1)
+#define PHI_FIFO_MODE			(0x00000001 <<  0)
 
 #define PHI_DELAY_RD_WR			(0x0000001f << 27)
 #define PHI_EXTEND_RDY3			(0x00000003 << 25)

From f6222a9f2d04a1e8fc02277143dfc7c7e4a3786a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:52:32 +0400
Subject: [PATCH 107/364] saa716x: S2-6400: Try to attach the frontend

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 65 +++++++++++++++++++++++++-
 1 file changed, 63 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 143020132895d..9511418622053 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -35,6 +35,9 @@
 #include <linux/dvb/video.h>
 #include <linux/dvb/osd.h>
 
+#include "stv090x_reg.h"
+#include "stv090x.h"
+
 unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
@@ -1024,13 +1027,70 @@ static int load_config_s26400(struct saa716x_dev *saa716x)
 #define SAA716x_MODEL_S2_6400_DUAL	"Technotrend S2 6400 Dual S2 Premium"
 #define SAA716x_DEV_S2_6400_DUAL	"2x DVB-S/S2 + Hardware decode"
 
+static struct stv090x_config tt6400_config = {
+	.demod_mode	= STV090x_DUAL,
+	.clk_mode	= STV090x_CLK_EXT,
+
+	.xtal		= 8000000,
+	.address	= 0x68,
+
+	.ref_clk	= 27000000,
+
+	.ts1_mode	= STV090x_TSMODE_SERIAL_CONTINUOUS,
+	.ts2_mode	= STV090x_TSMODE_SERIAL_CONTINUOUS,
+};
+
 static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
-	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_dev *saa716x	= adapter->saa716x;
+	struct saa716x_i2c *i2c		= saa716x->i2c;
+	struct i2c_adapter *i2c_adapter	= &i2c[1].i2c_adapter;
+
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	return -ENODEV;
+	if (count == 0) {
+		adapter->fe = stv090x_attach(&tt6400_config,
+					     i2c_adapter,
+					     STV090x_DEMODULATOR_0);
+
+		if (adapter->fe == NULL) {
+			dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
+				saa716x->pdev->vendor,
+				saa716x->pdev->device,
+				saa716x->pdev->subsystem_vendor,
+				saa716x->pdev->subsystem_device);
+
+		} else {
+			if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
+				dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
+				dvb_frontend_detach(adapter->fe);
+				adapter->fe = NULL;
+			}
+		}
+
+	} else if (count == 1) {
+		adapter->fe = stv090x_attach(&tt6400_config,
+					     i2c_adapter,
+					     STV090x_DEMODULATOR_1);
+
+		if (adapter->fe == NULL) {
+			dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
+				saa716x->pdev->vendor,
+				saa716x->pdev->device,
+				saa716x->pdev->subsystem_vendor,
+				saa716x->pdev->subsystem_device);
+
+		} else {
+			if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
+				dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
+				dvb_frontend_detach(adapter->fe);
+				adapter->fe = NULL;
+			}
+		}
+	}
+
+	return 0;
 }
 
 static struct saa716x_config saa716x_s26400_config = {
@@ -1041,6 +1101,7 @@ static struct saa716x_config saa716x_s26400_config = {
 	.adapters		= 2,
 	.frontend_attach	= saa716x_s26400_frontend_attach,
 	.irq_handler		= saa716x_ff_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 
 	.adap_config		= {
 		{

From 6f7419278a60fe538095a0648f90b21e0cb0a8ee Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:53:17 +0400
Subject: [PATCH 108/364] saa716x: Handle multiple I2C messages

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 190 ++++++++++++------------
 1 file changed, 96 insertions(+), 94 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 5a7043f3ebdd0..c9e50a0a6a03a 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -389,119 +389,121 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 	return err;
 }
 
-static int saa716x_i2c_rd(struct saa716x_i2c *i2c,
-			  struct i2c_msg *msgs,
-			  u32 I2C_DEV)
+static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
 {
-	struct saa716x_dev *saa716x = i2c->saa716x;
-	int i, err = 0;
+	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
+	struct saa716x_dev *saa716x	= i2c->saa716x;
+
+	u32 DEV = I2C_B;
+	int i = 0, j, err = 0;
 	u32 rxd;
 
-	if (msgs[0].len) {
-		dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
-			msgs[0].len, (msgs[0].addr << 1) | I2C_START_BIT);
+	dprintk(SAA716x_DEBUG, 0, "\n");
+	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
+	mutex_lock(&i2c->i2c_lock);
 
-		err = saa716x_i2c_send(i2c, I2C_DEV, (msgs[0].addr << 1) | I2C_START_BIT);
-		if (err < 0) {
-			saa716x_i2c_hwinit(i2c, I2C_DEV);
-			err = saa716x_i2c_send(i2c, I2C_DEV, (msgs[0].addr << 1) | I2C_START_BIT);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto bail_out;
-			}
-		}
+	while (i < num) {
+		if (((i + 1) < num) && (msgs[i + 1].flags & I2C_M_RD)) {
+			if (msgs[i].len) {
+				dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
+					msgs[i].len, (msgs[i].addr << 1) | I2C_START_BIT);
 
-		for (i = 0; i < msgs[0].len; i++) {
-			dprintk(SAA716x_DEBUG, 1, "B%d: 0x%02x", i, msgs[0].buf[i]);
-			err = saa716x_i2c_send(i2c, I2C_DEV, msgs[0].buf[i]);
-		}
-	}
-	dprintk(SAA716x_DEBUG, 1, "Addr:0x%02x", (msgs[0].addr << 1) | 0x1 | I2C_START_BIT);
-	saa716x_i2c_send(i2c, I2C_DEV, (msgs[0].addr << 1) | 0x1 | I2C_START_BIT);
-
-	for (i = 0; i < msgs[1].len; i++) {
-		if (i == msgs[1].len - 1) {
-			dprintk(SAA716x_DEBUG, 1, "Dummy + STOP B%d: 0x%02x", i + 1, I2C_STOP_BIT);
-			err = saa716x_i2c_send(i2c, I2C_DEV, I2C_STOP_BIT);
-			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto bail_out;
-			}
-			dprintk(SAA716x_DEBUG, 1, "Read #2--->B%d: 0x%02x", i + 1, rxd);
-			msgs[1].buf[i] = rxd;
-		} else {
-			dprintk(SAA716x_DEBUG, 1, "Dummy B%d: 0x%02x", i, 0x00);
-			err = saa716x_i2c_send(i2c, I2C_DEV, 0x00);
-			err = saa716x_i2c_recv(i2c, I2C_DEV, &rxd);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto bail_out;
-			}
-			msgs[1].buf[i] = rxd;
-			dprintk(SAA716x_DEBUG, 1, "Read#1--->B%d: 0x%02x", i, rxd);
-		}
-	}
+				err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
+				if (err < 0) {
+					saa716x_i2c_hwinit(i2c, DEV);
+					err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+				}
 
-	return 0;
+				for (j = 0; j < msgs[i].len; j++) {
+					dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n",
+						i, msgs[i].buf[j]);
 
-bail_out:
-	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
-	return err;
-}
+					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j]);
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
 
-static int saa716x_i2c_wr(struct saa716x_i2c *i2c,
-			  struct i2c_msg *msgs,
-			  u32 I2C_DEV)
-{
-	struct saa716x_dev *saa716x = i2c->saa716x;
-	int i, err = 0;
+				}
+			}
+			dprintk(SAA716x_DEBUG, 1, "Addr:0x%02x",
+				(msgs[i].addr << 1) | 0x1 | I2C_START_BIT);
 
-	for (i = 0; i < msgs[0].len; i++) {
-		if (i == msgs[0].len - 1) {
-			err = saa716x_i2c_send(i2c, I2C_DEV, msgs[0].buf[i] | I2C_STOP_BIT);
+			err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | 0x1 | I2C_START_BIT);
 			if (err < 0) {
 				dprintk(SAA716x_ERROR, 1, "Transfer failed");
 				err = -EIO;
 				goto bail_out;
 			}
+
+			for (j = 0; j < msgs[i + 1].len; j++) {
+				if (j == msgs[i + 1].len - 1) {
+					err = saa716x_i2c_send(i2c, DEV, I2C_STOP_BIT); /* Dummy */
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+
+					err = saa716x_i2c_recv(i2c, DEV, &rxd);
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+					dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n",
+						j + 1, rxd);
+
+					msgs[i + 1].buf[j] = rxd;
+				} else {
+					err = saa716x_i2c_send(i2c, DEV, 0x00); /* Dummy */
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+
+					err = saa716x_i2c_recv(i2c, DEV, &rxd);
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+					msgs[i + 1].buf[j] = rxd;
+					dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n",
+						j, rxd);
+				}
+			}
+			i += 2;
+
 		} else {
-			err = saa716x_i2c_send(i2c, I2C_DEV, msgs[0].buf[i]);
-			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
-				err = -EIO;
-				goto bail_out;
+			for (j = 0; j < msgs[i].len; j++) {
+				if (j == msgs[i].len - 1) {
+					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j] | I2C_STOP_BIT);
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+				} else {
+					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j]);
+					if (err < 0) {
+						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						err = -EIO;
+						goto bail_out;
+					}
+				}
 			}
+			i++;
 		}
 	}
 
-	return 0;
-
-bail_out:
-	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
-	return err;
-}
-
-static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
-{
-	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
-	struct saa716x_dev *saa716x	= i2c->saa716x;
-
-	u32 DEV = I2C_B;
-	int err = 0;
-
-	dprintk(SAA716x_DEBUG, 0, "\n");
-	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
-	mutex_lock(&i2c->i2c_lock);
-
-	if (msgs[1].flags & I2C_M_RD)
-		err = saa716x_i2c_rd(i2c, msgs, DEV);
-	else
-		err = saa716x_i2c_wr(i2c, msgs, DEV);
-
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "Transfer failed");
 		err = -EIO;

From b3673c975f4bb234362565b79b70e8005bc31a7e Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:54:16 +0400
Subject: [PATCH 109/364] saa716x: Fix ROM parser

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c |   4 +-
 drivers/media/pci/saa716x/saa716x_priv.h   |   1 +
 drivers/media/pci/saa716x/saa716x_rom.c    | 360 +++++++++++++--------
 drivers/media/pci/saa716x/saa716x_rom.h    |   7 +-
 4 files changed, 224 insertions(+), 148 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 2f921b7fb3299..6ecc977f872e4 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -99,12 +99,12 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
-#if 0
+
 	err = saa716x_eeprom_data(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM read failed");
 	}
-#endif
+
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 6e8fd3fb49357..d970bf9dd2872 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -157,6 +157,7 @@ struct saa716x_dev {
 	/* DMA */
 
 	u32				id_offst;
+	u32				id_len;
 	void				*priv;
 };
 
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 57efbcedff010..81741d5040645 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -30,6 +30,66 @@ static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *
 	return ret;
 }
 
+static int saa716x_read_rombytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
+{
+	struct saa716x_i2c *i2c		= saa716x->i2c;
+	struct i2c_adapter *adapter	= &i2c[1].i2c_adapter;
+	struct i2c_msg msg[2];
+
+	u8 b0[2];
+	int ret, count;
+
+	count = len / DUMP_BYTES;
+	if (len % DUMP_BYTES)
+		count++;
+
+	count *= 2;
+
+	for (i = 0; i < count; i += 2) {
+		dprintk(SAA716x_DEBUG, 1, "Length=%d, Count=%d, Reg=0x%02x",
+			len,
+			count,
+			reg);
+
+		b0[0] = MSB(reg);
+		b0[1] = LSB(reg);
+
+		/* Write */
+		msg[0].addr  = 0x50;
+		msg[0].flags = 0;
+		msg[0].buf   = b0;
+		msg[0].len   = 2;
+
+		/* Read */
+		msg[1].addr  = 0x50;
+		msg[1].flags = I2C_M_RD;
+		msg[1].buf   = val;
+
+		if (i == (count - 2)) {
+			/* last message */
+			if (len % DUMP_BYTES) {
+				msg[1].len = len % DUMP_BYTES;
+				dprintk(SAA716x_ERROR, 1, "Last Message length=%d", len % DUMP_BYTES);
+			} else {
+				msg[1].len = DUMP_BYTES;
+			}
+		} else {
+			msg[1].len = DUMP_BYTES;
+		}
+
+		ret = i2c_transfer(adapter, msg, 2);
+		if (ret != 2) {
+			dprintk(SAA716x_ERROR, 1, "read error <reg=0x%02x, ret=%i>", reg, ret);
+			return -EREMOTEIO;
+		}
+
+		reg += DUMP_BYTES;
+		val += DUMP_BYTES;
+	}
+
+	return 0;
+}
+
 static int saa716x_get_offset(struct saa716x_dev *saa716x, u8 *buf, u32 *offset)
 {
 	int i;
@@ -45,8 +105,44 @@ static int saa716x_get_offset(struct saa716x_dev *saa716x, u8 *buf, u32 *offset)
 	return 0;
 }
 
+static int saa716x_eeprom_header(struct saa716x_dev *saa716x,
+				 struct saa716x_romhdr *rom_header,
+				 u8 *buf,
+				 u32 *offset)
+{
+	memcpy(rom_header, &buf[*offset], sizeof (struct saa716x_romhdr));
+	if (rom_header->header_size != sizeof (struct saa716x_romhdr)) {
+		dprintk(SAA716x_ERROR, 1,
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			sizeof (struct saa716x_romhdr),
+			rom_header->header_size);
+
+		return -1;
+	}
+	*offset += sizeof (struct saa716x_romhdr);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Data=%d bytes\n",
+		saa716x->pdev->device,
+		rom_header->data_size);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Version=%d\n",
+		saa716x->pdev->device,
+		rom_header->version);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Devices=%d\n",
+		saa716x->pdev->device,
+		rom_header->devices);
+
+	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Compressed=%d\n\n",
+		saa716x->pdev->device,
+		rom_header->compression);
+
+	return 0;
+}
+
 int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
 {
+	struct saa716x_romhdr rom_header;
 	u8 buf[DUMP_BYTES];
 	int i, err = 0;
 	u32 offset = 0;
@@ -61,13 +157,16 @@ int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
 		saa716x->config->model_name);
 
 	dprintk(SAA716x_NOTICE, 0,
-		" ---------- SAA%02x ROM @ Offset 0x%02x ----------",
+		"    ---------------- SAA%02x ROM @ Offset 0x%02x ----------------",
 		saa716x->pdev->device,
 		DUMP_OFFST);
 
 	for (i = 0; i < DUMP_BYTES; i++) {
-		if ((i % 16) == 0)
-			dprintk(SAA716x_NOTICE, 0, "\n  ");
+		if ((i % 16) == 0) {
+			dprintk(SAA716x_NOTICE, 0, "\n    ");
+			dprintk(SAA716x_NOTICE, 0, "%04x: ", i);
+		}
+
 		if ((i %  8) == 0)
 			dprintk(SAA716x_NOTICE, 0, " ");
 		if ((i %  4) == 0)
@@ -76,7 +175,7 @@ int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
 	}
 	dprintk(SAA716x_NOTICE, 0, "\n");
 	dprintk(SAA716x_NOTICE, 0,
-		" ---------- SAA%02x ROM Dump end ---------------\n",
+		"    ---------------- SAA%02x ROM Dump end ---------------------\n\n",
 		saa716x->pdev->device);
 
 	err = saa716x_get_offset(saa716x, buf, &offset);
@@ -84,46 +183,19 @@ int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
 		dprintk(SAA716x_ERROR, 1, "ERROR: Descriptor not found <%d>", err);
 		return err;
 	}
-	saa716x->id_offst = offset + 5;
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_dump_eeprom);
-
-static int saa716x_eeprom_header(struct saa716x_dev *saa716x,
-				 struct saa716x_romhdr *rom_header,
-				 u8 *buf,
-				 u32 *offset)
-{
-	memcpy(rom_header, &buf[*offset], sizeof (struct saa716x_romhdr));
-	if (rom_header->header_size != sizeof (struct saa716x_romhdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
-			sizeof (struct saa716x_romhdr),
-			rom_header->header_size);
-
+	offset += 5;
+	saa716x->id_offst = offset;
+	/* Get header */
+	err = saa716x_eeprom_header(saa716x, &rom_header, buf, &offset);
+	if (err != 0) {
+		dprintk(SAA716x_ERROR, 1, "ERROR: Header Read failed <%d>", err);
 		return -1;
 	}
-	*offset += sizeof (struct saa716x_romhdr);
-
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Data=%d bytes\n",
-		saa716x->pdev->device,
-		rom_header->data_size);
-
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Version=%d\n",
-		saa716x->pdev->device,
-		rom_header->version);
-
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Devices=%d\n",
-		saa716x->pdev->device,
-		rom_header->devices);
-
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Compressed=%d\n\n",
-		saa716x->pdev->device,
-		rom_header->compression);
+	saa716x->id_len = rom_header.data_size;
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(saa716x_dump_eeprom);
 
 static void saa716x_descriptor_dbg(struct saa716x_dev *saa716x,
 				   u8 *buf,
@@ -706,9 +778,11 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 
 	*offset += device->struct_size;
 
-	memcpy(&address, &buf[*offset], device->addr_size);
-	address >>= 1;
-	*offset += device->addr_size;
+	if (device->addr_size) {
+		memcpy(&address, &buf[*offset], device->addr_size);
+		address >>= 1;
+		*offset += device->addr_size;
+	}
 
 	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device @ 0x%02x\n",
 		saa716x->pdev->device,
@@ -754,134 +828,136 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 		saa716x->pdev->device,
 		device->extd_data_size);
 
-	if (device->device_type & DECODER_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found decoder device\n",
-			saa716x->pdev->device);
+	if (device->extd_data_size) {
+		if (device->device_type & DECODER_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found decoder device\n",
+				saa716x->pdev->device);
 
-		saa716x_decoder_info(saa716x, buf, offset);
-	}
+			saa716x_decoder_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & GPIO_SOURCE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found GPIO device\n",
-			saa716x->pdev->device);
+		if (device->device_type & GPIO_SOURCE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found GPIO device\n",
+				saa716x->pdev->device);
 
-		saa716x_gpio_info(saa716x, buf, offset);
-	}
+			saa716x_gpio_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & VIDEO_DECODER) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Video Decoder device\n",
-			saa716x->pdev->device);
+		if (device->device_type & VIDEO_DECODER) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Video Decoder device\n",
+				saa716x->pdev->device);
 
-		saa716x_video_decoder_info(saa716x, buf, offset);
-	}
+			saa716x_video_decoder_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & AUDIO_DECODER) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Audio Decoder device\n",
-			saa716x->pdev->device);
+		if (device->device_type & AUDIO_DECODER) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Audio Decoder device\n",
+				saa716x->pdev->device);
 
-		saa716x_audio_decoder_info(saa716x, buf, offset);
-	}
+			saa716x_audio_decoder_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & EVENT_SOURCE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Event source\n",
-			saa716x->pdev->device);
+		if (device->device_type & EVENT_SOURCE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Event source\n",
+				saa716x->pdev->device);
 
-		saa716x_event_source_info(saa716x, buf, offset);
-	}
+			saa716x_event_source_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & CROSSBAR) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Crossbar device\n",
-			saa716x->pdev->device);
+		if (device->device_type & CROSSBAR) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Crossbar device\n",
+				saa716x->pdev->device);
 
-		saa716x_crossbar_info(saa716x, buf, offset);
-	}
+			saa716x_crossbar_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & TUNER_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Tuner device\n",
-			saa716x->pdev->device);
+		if (device->device_type & TUNER_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Tuner device\n",
+				saa716x->pdev->device);
 
-		saa716x_tuner_info(saa716x, buf, offset);
-	}
+			saa716x_tuner_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & PLL_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found PLL device\n",
-			saa716x->pdev->device);
+		if (device->device_type & PLL_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found PLL device\n",
+				saa716x->pdev->device);
 
-		saa716x_pll_info(saa716x, buf, offset);
-	}
+			saa716x_pll_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & CHANNEL_DECODER) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Channel Demodulator device\n",
-			saa716x->pdev->device);
+		if (device->device_type & CHANNEL_DECODER) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Channel Demodulator device\n",
+				saa716x->pdev->device);
 
-		saa716x_channel_decoder_info(saa716x, buf, offset);
-	}
+			saa716x_channel_decoder_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & RDS_DECODER) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found RDS Decoder device\n",
-			saa716x->pdev->device);
-	}
+		if (device->device_type & RDS_DECODER) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found RDS Decoder device\n",
+				saa716x->pdev->device);
+		}
 
-	if (device->device_type & ENCODER_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Encoder device\n",
-			saa716x->pdev->device);
+		if (device->device_type & ENCODER_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Encoder device\n",
+				saa716x->pdev->device);
 
-		saa716x_encoder_info(saa716x, buf, offset);
-	}
+			saa716x_encoder_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & IR_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found IR device\n",
-			saa716x->pdev->device);
+		if (device->device_type & IR_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found IR device\n",
+				saa716x->pdev->device);
 
-		saa716x_ir_info(saa716x, buf, offset);
-	}
+			saa716x_ir_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & EEPROM_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found EEPROM device\n",
-			saa716x->pdev->device);
+		if (device->device_type & EEPROM_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found EEPROM device\n",
+				saa716x->pdev->device);
 
-		saa716x_eeprom_info(saa716x, buf, offset);
-	}
+			saa716x_eeprom_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & NOISE_FILTER) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Noise filter device\n",
-			saa716x->pdev->device);
+		if (device->device_type & NOISE_FILTER) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Noise filter device\n",
+				saa716x->pdev->device);
 
-		saa716x_filter_info(saa716x, buf, offset);
-	}
+			saa716x_filter_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & LNx_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found LNx device\n",
-			saa716x->pdev->device);
-	}
+		if (device->device_type & LNx_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found LNx device\n",
+				saa716x->pdev->device);
+		}
 
-	if (device->device_type & STREAM_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found streaming device\n",
-			saa716x->pdev->device);
+		if (device->device_type & STREAM_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found streaming device\n",
+				saa716x->pdev->device);
 
-		saa716x_streamdev_info(saa716x, buf, offset);
-	}
+			saa716x_streamdev_info(saa716x, buf, offset);
+		}
 
-	if (device->device_type & CONFIGSPACE_DEVICE) {
-		dprintk(SAA716x_NOTICE, 0,
-			"        SAA%02x ROM: Found Configspace device\n",
-			saa716x->pdev->device);
+		if (device->device_type & CONFIGSPACE_DEVICE) {
+			dprintk(SAA716x_NOTICE, 0,
+				"        SAA%02x ROM: Found Configspace device\n",
+				saa716x->pdev->device);
+		}
 	}
 
 	dprintk(SAA716x_DEBUG, 0, "\n");
@@ -894,12 +970,12 @@ int saa716x_eeprom_data(struct saa716x_dev *saa716x)
 	struct saa716x_romhdr rom_header;
 	struct saa716x_devinfo *device;
 
-	u8 buf[DUMP_BYTES];
+	u8 buf[1024];
 	int i, ret = 0;
 	u32 offset = 0;
 
 	/* dump */
-	ret = eeprom_read_bytes(saa716x, saa716x->id_offst, DUMP_BYTES, buf);
+	ret = saa716x_read_rombytes(saa716x, saa716x->id_offst, saa716x->id_len + 8, buf);
 	if (ret < 0) {
 		dprintk(SAA716x_ERROR, 1, "EEPROM Read error <%d>", ret);
 		goto err0;
diff --git a/drivers/media/pci/saa716x/saa716x_rom.h b/drivers/media/pci/saa716x/saa716x_rom.h
index e12d99802f73b..6bb317fcc2290 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.h
+++ b/drivers/media/pci/saa716x/saa716x_rom.h
@@ -5,8 +5,7 @@
 #define MSB(__x)	((__x >> 8) & 0xff)
 #define LSB(__x)	(__x & 0xff)
 
-#define DUMP_BYTES	272
-//#define DUMP_BYTES	5
+#define DUMP_BYTES	0xf0
 #define DUMP_OFFST	0x000
 
 struct saa716x_dev;
@@ -26,12 +25,12 @@ struct saa716x_devinfo {
 	u8	master_devid;
 	u8	master_busid;
 	u32	device_type;
-	u8	implem_id;
+	u16	implem_id;
 	u8	path_id;
 	u8	gpio_id;
 	u16	addr_size;
 	u16	extd_data_size;
-};
+} __attribute__((packed));
 
 enum saa716x_device_types {
 	DECODER_DEVICE		= 0x00000001,

From 1101cb637547779fe84255a8c6062b8d4c6a1920 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:54:54 +0400
Subject: [PATCH 110/364] saa716x: Setup default I2C rates

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 4 ++++
 drivers/media/pci/saa716x/saa716x_hybrid.c | 3 +++
 2 files changed, 7 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 6ecc977f872e4..3e81900586ffc 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -230,6 +230,7 @@ static struct saa716x_config saa716x_vp3071_config = {
 	.adapters		= 2,
 	.frontend_attach	= saa716x_vp3071_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 
 	.adap_config		= {
 		{
@@ -319,6 +320,7 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp1028_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 
 	.adap_config		= {
 		{ /* Adapter 0 */
@@ -356,6 +358,7 @@ static struct saa716x_config saa716x_vp6002_config = {
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6002_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
 static int load_config_knc1_duals2(struct saa716x_dev *saa716x)
@@ -386,6 +389,7 @@ static struct saa716x_config saa716x_knc1_duals2_config = {
 	.adapters		= 2,
 	.frontend_attach	= saa716x_knc1_duals2_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
 static struct pci_device_id saa716x_budget_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 55395a551c1ea..085d1fc3f0650 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -400,6 +400,7 @@ static struct saa716x_config saa716x_atlantis_config = {
 	.adapters		= 2,
 	.frontend_attach	= saa716x_atlantis_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
 /*
@@ -534,6 +535,7 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averhc82_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 
 	.adap_config		= {
 		{ /* Adapter 0 */
@@ -573,6 +575,7 @@ static struct saa716x_config saa716x_averh788_config = {
 	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averh88_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
 
 	.adap_config		= {
 		{ /* Adapter 0 */

From 4f1b3e976059a7967be6f33be3610f2ff51063c8 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:55:32 +0400
Subject: [PATCH 111/364] saa716x: Fix BUS ordering

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c  | 10 +++++-----
 drivers/media/pci/saa716x/saa716x_i2c.c | 15 +++------------
 drivers/media/pci/saa716x/saa716x_i2c.h |  9 +++++++++
 drivers/media/pci/saa716x/saa716x_rom.c |  4 ++--
 4 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 9511418622053..c47884b106cb6 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -799,7 +799,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		printk("%s: saa716x=NULL", __func__);
 		return IRQ_NONE;
 	}
-
+#if 0
 	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(VI0, INT_STATUS),
 		SAA716x_EPRD(VI1, INT_STATUS),
@@ -839,7 +839,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
-
+#endif
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, SAA716x_EPRD(MSI, MSI_INT_STATUS_L));
 
 	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
@@ -1044,11 +1044,11 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 {
 	struct saa716x_dev *saa716x	= adapter->saa716x;
 	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *i2c_adapter	= &i2c[1].i2c_adapter;
+	struct i2c_adapter *i2c_adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
+#if 0
 	if (count == 0) {
 		adapter->fe = stv090x_attach(&tt6400_config,
 					     i2c_adapter,
@@ -1089,7 +1089,7 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 			}
 		}
 	}
-
+#endif
 	return 0;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index c9e50a0a6a03a..0301417bb4a1d 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -394,7 +394,7 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
 	struct saa716x_dev *saa716x	= i2c->saa716x;
 
-	u32 DEV = I2C_B;
+	u32 DEV = SAA716x_I2C_BUS(i2c->i2c_dev);
 	int i = 0, j, err = 0;
 	u32 rxd;
 
@@ -554,18 +554,9 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 	struct pci_dev *pdev		= saa716x->pdev;
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *adapter	= NULL;
-	u32 *I2C_DEV			= saa716x->I2C_DEV;
 
 	int i, err = 0;
 
-	if (saa716x->revision > 2) {
-		I2C_DEV[0] = I2C_A;
-		I2C_DEV[1] = I2C_B;
-	} else {
-		I2C_DEV[0] = I2C_B;
-		I2C_DEV[1] = I2C_A;
-	}
-
 	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core",
 		saa716x->pdev->device);
 
@@ -573,7 +564,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 		mutex_init(&i2c->i2c_lock);
 
-		i2c->i2c_dev	= I2C_DEV[i];
+		i2c->i2c_dev	= i;
 		i2c->i2c_rate	= saa716x->config->i2c_rate;
 		adapter		= &i2c->i2c_adapter;
 
@@ -603,7 +594,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			}
 
 			i2c->saa716x = saa716x;
-			saa716x_i2c_hwinit(i2c, I2C_DEV[i]);
+			saa716x_i2c_hwinit(i2c, SAA716x_I2C_BUS(i));
 		}
 		i2c++;
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index ebcdaeaa36ecd..a76774a669b7f 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -8,6 +8,15 @@
 		"SAA716x I2C Core 1" :	\
 		"SAA716x I2C Core 0"))
 
+#define SAA716x_I2C_BUS(__x) (( 				\
+	(__x == 1) ?						\
+	((saa716x->revision > 2) ? 0x0000c000 : 0x0000b000) :	\
+	((saa716x->revision > 2) ? 0x0000b000 : 0x0000c000)	\
+))
+
+#define SAA716x_I2C_BUS_A		0x01
+#define SAA716x_I2C_BUS_B		0x00
+
 struct saa716x_dev;
 
 enum saa716x_i2c_rate {
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 81741d5040645..23f8c26747d07 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -11,7 +11,7 @@ int i;
 static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
 {
 	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *adapter	= &i2c[1].i2c_adapter;
+	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
 
 	u8 b0[] = { MSB(reg), LSB(reg) };
 	int ret;
@@ -33,7 +33,7 @@ static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *
 static int saa716x_read_rombytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
 {
 	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *adapter	= &i2c[1].i2c_adapter;
+	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
 	struct i2c_msg msg[2];
 
 	u8 b0[2];

From bdcbb01df0263edbe2e2c5ad7e9f021536699842 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:56:16 +0400
Subject: [PATCH 112/364] saa716x: Fix swapped I2C buses

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c  |  4 ++--
 drivers/media/pci/saa716x/saa716x_i2c.c | 10 +++++-----
 drivers/media/pci/saa716x/saa716x_i2c.h |  4 ++--
 drivers/media/pci/saa716x/saa716x_rom.c |  4 ++--
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index c47884b106cb6..45ba27328f05d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -1048,7 +1048,7 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-#if 0
+
 	if (count == 0) {
 		adapter->fe = stv090x_attach(&tt6400_config,
 					     i2c_adapter,
@@ -1089,7 +1089,7 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 			}
 		}
 	}
-#endif
+
 	return 0;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 0301417bb4a1d..d35cf9f0d2fed 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -154,7 +154,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (!(reg & 0xd)) {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed, Exiting !",
+		dprintk(SAA716x_ERROR, 1, "Adapter (%02x) %s RESET failed, Exiting !",
 			I2C_DEV, adapter->name);
 		err = -EIO;
 		goto exit;
@@ -173,7 +173,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	for (i = 0; i < 100; i++) {
 		reg = SAA716x_EPRD(I2C_DEV, I2C_CONTROL);
 		if (reg == 0xc0) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET",
+			dprintk(SAA716x_ERROR, 1, "Adapter (%02x) %s RESET",
 				I2C_DEV, adapter->name);
 			break;
 		}
@@ -184,7 +184,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	}
 
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s RESET failed",
+		dprintk(SAA716x_ERROR, 1, "Adapter (%02x) %s RESET failed",
 			I2C_DEV, adapter->name);
 
 		saa716x_term_xfer(i2c, I2C_DEV);
@@ -259,7 +259,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	if (!(reg & 0xd)) {
 
 		dprintk(SAA716x_ERROR, 1,
-			"Adapter (%d) %s has bad state, Exiting !",
+			"Adapter (%02x) %s has bad state, Exiting !",
 			I2C_DEV,
 			adapter->name);
 
@@ -274,7 +274,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 				SAA716x_I2C_ADAPTER(i));
 #endif
 	reg = SAA716x_EPRD(CGU, CGU_SCR_3);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Autowake <%d> Active <%d>",
+	dprintk(SAA716x_DEBUG, 1, "Adapter (%02x) Autowake <%d> Active <%d>",
 		I2C_DEV,
 		(reg >> 1) & 0x01,
 		reg & 0x01);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index a76774a669b7f..2aca0fbd2d6fc 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -10,8 +10,8 @@
 
 #define SAA716x_I2C_BUS(__x) (( 				\
 	(__x == 1) ?						\
-	((saa716x->revision > 2) ? 0x0000c000 : 0x0000b000) :	\
-	((saa716x->revision > 2) ? 0x0000b000 : 0x0000c000)	\
+	((saa716x->revision > 2) ? 0x0000b000 : 0x0000c000) :	\
+	((saa716x->revision > 2) ? 0x0000c000 : 0x0000b000)	\
 ))
 
 #define SAA716x_I2C_BUS_A		0x01
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 23f8c26747d07..e254b90ca5d3b 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -11,7 +11,7 @@ int i;
 static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
 {
 	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
+	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_B].i2c_adapter;
 
 	u8 b0[] = { MSB(reg), LSB(reg) };
 	int ret;
@@ -33,7 +33,7 @@ static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *
 static int saa716x_read_rombytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
 {
 	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
+	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_B].i2c_adapter;
 	struct i2c_msg msg[2];
 
 	u8 b0[2];

From afdb5729f1893ae574ef92aa91772d02a7d91448 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:56:55 +0400
Subject: [PATCH 113/364] saa716x: Print wait time, reduce number of loops

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index d35cf9f0d2fed..dfbcd0bc33344 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -322,7 +322,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	i2c->stat_tx_done = reg;
 
 	/* Check for data write */
-	for (i = 0; i < 100; i++) {
+	for (i = 0; i < 10; i++) {
 		/* TODO! check for hotplug devices */
 
 		if (!(reg & I2C_TRANSMIT_CLEAR)) {
@@ -334,7 +334,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	}
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
-		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout!");
+		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout, tried %d loops, %d mS!", i, i * 10);
 		err = saa716x_i2c_hwinit(i2c, I2C_DEV);
 		if (err < 0) {
 			dprintk(SAA716x_ERROR, 1, "Error Reinit");

From 1e83ad06d4647dcb217ea6351aeb81eeba6091d2 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 22:57:44 +0400
Subject: [PATCH 114/364] saa716x: Fix missing address in single write
 operation

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index dfbcd0bc33344..440f0c684ace0 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -483,6 +483,20 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 			i += 2;
 
 		} else {
+			dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
+				msgs[i].len, (msgs[i].addr << 1) | I2C_START_BIT);
+
+			err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
+			if (err < 0) {
+				saa716x_i2c_hwinit(i2c, DEV);
+				err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
+				if (err < 0) {
+					dprintk(SAA716x_ERROR, 1, "Transfer failed");
+					err = -EIO;
+					goto bail_out;
+				}
+			}
+
 			for (j = 0; j < msgs[i].len; j++) {
 				if (j == msgs[i].len - 1) {
 					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j] | I2C_STOP_BIT);

From 38d54fa6fb20387a483c6b1d4ed73eaa300399d1 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 4 Jan 2010 23:16:19 +0400
Subject: [PATCH 115/364] saa716x: make register definitions specific to each
 of the modules

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c     |   1 +
 drivers/media/pci/saa716x/saa716x_aip.c      |   3 +-
 drivers/media/pci/saa716x/saa716x_aip_reg.h  |  62 ++++++
 drivers/media/pci/saa716x/saa716x_boot.c     |  12 +-
 drivers/media/pci/saa716x/saa716x_budget.c   |   7 +-
 drivers/media/pci/saa716x/saa716x_cgu.c      |   4 +-
 drivers/media/pci/saa716x/saa716x_cgu_reg.h  | 178 +++++++++++++++++
 drivers/media/pci/saa716x/saa716x_dcs_reg.h  |  56 ++++++
 drivers/media/pci/saa716x/saa716x_dma_reg.h  | 200 +++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_ff.c       |   8 +-
 drivers/media/pci/saa716x/saa716x_fgpi.c     |   6 +-
 drivers/media/pci/saa716x/saa716x_fgpi_reg.h |  74 +++++++
 drivers/media/pci/saa716x/saa716x_gpio.c     |   5 +-
 drivers/media/pci/saa716x/saa716x_gpio_reg.h |  47 +++++
 drivers/media/pci/saa716x/saa716x_greg.c     |   4 +-
 drivers/media/pci/saa716x/saa716x_greg_reg.h |  91 +++++++++
 drivers/media/pci/saa716x/saa716x_hybrid.c   |   7 +-
 drivers/media/pci/saa716x/saa716x_i2c.c      |   7 +-
 drivers/media/pci/saa716x/saa716x_i2c_reg.h  | 145 ++++++++++++++
 drivers/media/pci/saa716x/saa716x_mod.h      |  50 +++++
 drivers/media/pci/saa716x/saa716x_msi.c      |   4 +-
 drivers/media/pci/saa716x/saa716x_msi_reg.h  | 143 +++++++++++++
 drivers/media/pci/saa716x/saa716x_pci.c      |   1 -
 drivers/media/pci/saa716x/saa716x_phi.c      |   5 +-
 drivers/media/pci/saa716x/saa716x_phi_reg.h  | 100 ++++++++++
 drivers/media/pci/saa716x/saa716x_spi.c      |   4 +-
 drivers/media/pci/saa716x/saa716x_spi_reg.h  |  27 +++
 drivers/media/pci/saa716x/saa716x_vip.c      |   4 +-
 drivers/media/pci/saa716x/saa716x_vip_reg.h  | 127 ++++++++++++
 29 files changed, 1366 insertions(+), 16 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_aip_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_cgu_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_dcs_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_dma_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_fgpi_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_gpio_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_greg_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_i2c_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_mod.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_msi_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_phi_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_spi_reg.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_vip_reg.h

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 4e20ac5c65393..ab7f6e575ebad 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -5,6 +5,7 @@
 #include "dvb_demux.h"
 #include "dvb_frontend.h"
 
+#include "saa716x_mod.h"
 #include "saa716x_spi.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
diff --git a/drivers/media/pci/saa716x/saa716x_aip.c b/drivers/media/pci/saa716x/saa716x_aip.c
index 5df867f55a3ac..3bdb265024a68 100644
--- a/drivers/media/pci/saa716x/saa716x_aip.c
+++ b/drivers/media/pci/saa716x/saa716x_aip.c
@@ -1,6 +1,7 @@
 #include <linux/kernel.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+#include "saa716x_aip_reg.h"
 #include "saa716x_spi.h"
 #include "saa716x_aip.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_aip_reg.h b/drivers/media/pci/saa716x/saa716x_aip_reg.h
new file mode 100644
index 0000000000000..3e0893a5365fe
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_aip_reg.h
@@ -0,0 +1,62 @@
+#ifndef __SAA716x_AIP_REG_H
+#define __SAA716x_AIP_REG_H
+
+/* -------------- AI Registers ---------------- */
+
+#define AI_STATUS			0x000
+#define AI_BUF1_ACTIVE			(0x00000001 <<  4)
+#define AI_OVERRUN			(0x00000001 <<  3)
+#define AI_HBE				(0x00000001 <<  2)
+#define AI_BUF2_FULL			(0x00000001 <<  1)
+#define AI_BUF1_FULL			(0x00000001 <<  0)
+
+#define AI_CTL				0x004
+#define AI_RESET			(0x00000001 <<  31)
+#define AI_CAP_ENABLE			(0x00000001 <<  30)
+#define AI_CAP_MODE			(0x00000003 <<  28)
+#define AI_SIGN_CONVERT			(0x00000001 <<  27)
+#define AI_EARLYMODE			(0x00000001 <<  26)
+#define AI_DIAGMODE			(0x00000001 <<  25)
+#define AI_RAWMODE			(0x00000001 <<  24)
+#define AI_OVR_INTEN			(0x00000001 <<   7)
+#define AI_HBE_INTEN			(0x00000001 <<   6)
+#define AI_BUF2_INTEN			(0x00000001 <<   5)
+#define AI_BUF1_INTEN			(0x00000001 <<   4)
+#define AI_ACK_OVR			(0x00000001 <<   3)
+#define AI_ACK_HBE			(0x00000001 <<   2)
+#define AI_ACK2				(0x00000001 <<   1)
+#define AI_ACK1				(0x00000001 <<   0)
+
+#define AI_SERIAL			0x008
+#define AI_SER_MASTER			(0x00000001 <<  31)
+#define AI_DATAMODE			(0x00000001 <<  30)
+#define AI_FRAMEMODE			(0x00000003 <<  28)
+#define AI_CLOCK_EDGE			(0x00000001 <<  27)
+#define AI_SSPOS4			(0x00000001 <<  19)
+#define AI_NR_CHAN			(0x00000003 <<  17)
+#define AI_WSDIV			(0x000001ff <<   8)
+#define AI_SCKDIV			(0x000000ff <<   0)
+
+#define AI_FRAMING			0x00c
+#define AI_VALIDPOS			(0x000001ff << 22)
+#define AI_LEFTPOS			(0x000001ff << 13)
+#define AI_RIGHTPOS			(0x000001ff <<  4)
+#define AI_SSPOS_3_0			(0x0000000f <<  0)
+
+#define AI_BASE1			0x014
+#define AI_BASE2			0x018
+#define AI_BASE				(0x03ffffff <<  6)
+
+#define AI_SIZE				0x01c
+#define AI_SAMPLE_SIZE			(0x03ffffff <<  6)
+
+#define AI_INT_ACK			0x020
+#define AI_ACK_OVR			(0x00000001 <<  3)
+#define AI_ACK_HBE			(0x00000001 <<  2)
+#define AI_ACK2				(0x00000001 <<  1)
+#define AI_ACK1				(0x00000001 <<  0)
+
+#define AI_PWR_DOWN			0xff4
+#define AI_PWR_DWN			(0x00000001 <<  0)
+
+#endif /* __SAA716x_AIP_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 21d6ec33ba805..70d8814917c18 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -1,6 +1,16 @@
 #include <linux/delay.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_greg_reg.h"
+#include "saa716x_cgu_reg.h"
+#include "saa716x_vip_reg.h"
+#include "saa716x_aip_reg.h"
+#include "saa716x_msi_reg.h"
+#include "saa716x_dma_reg.h"
+#include "saa716x_gpio_reg.h"
+#include "saa716x_fgpi_reg.h"
+
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 3e81900586ffc..930dd0c76f85c 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -18,10 +18,15 @@
 #include <linux/interrupt.h>
 
 #include <linux/i2c.h>
+
+#include "saa716x_mod.h"
+
+#include "saa716x_msi_reg.h"
+#include "saa716x_gpio_reg.h"
+
 #include "saa716x_vip.h"
 #include "saa716x_aip.h"
 #include "saa716x_msi.h"
-#include "saa716x_reg.h"
 #include "saa716x_budget.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index c2c025643655a..f4e51387181b5 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -1,6 +1,8 @@
 #include <linux/delay.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_cgu_reg.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_cgu_reg.h b/drivers/media/pci/saa716x/saa716x_cgu_reg.h
new file mode 100644
index 0000000000000..f7d82ae3f1d05
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_cgu_reg.h
@@ -0,0 +1,178 @@
+#ifndef __SAA716x_CGU_REG_H
+#define __SAA716x_CGU_REG_H
+
+/* -------------- CGU Registers -------------- */
+
+#define CGU_SCR_0			0x000
+#define CGU_SCR_1			0x004
+#define CGU_SCR_2			0x008
+#define CGU_SCR_3			0x00c
+#define CGU_SCR_4			0x010
+#define CGU_SCR_5			0x014
+#define CGU_SCR_6			0x018
+#define CGU_SCR_7			0x01c
+#define CGU_SCR_8			0x020
+#define CGU_SCR_9			0x024
+#define CGU_SCR_10			0x028
+#define CGU_SCR_11			0x02c
+#define CGU_SCR_12			0x030
+#define CGU_SCR_13			0x034
+#define CGU_SCR_STOP			(0x00000001 <<  3)
+#define CGU_SCR_RESET			(0x00000001 <<  2)
+#define CGU_SCR_ENF2			(0x00000001 <<  1)
+#define CGU_SCR_ENF1			(0x00000001 <<  0)
+
+#define CGU_FS1_0			0x038
+#define CGU_FS1_1			0x03c
+#define CGU_FS1_2			0x040
+#define CGU_FS1_3			0x044
+#define CGU_FS1_4			0x048
+#define CGU_FS1_5			0x04c
+#define CGU_FS1_6			0x050
+#define CGU_FS1_7			0x054
+#define CGU_FS1_8			0x058
+#define CGU_FS1_9			0x05c
+#define CGU_FS1_10			0x060
+#define CGU_FS1_11			0x064
+#define CGU_FS1_12			0x068
+#define CGU_FS1_13			0x06c
+#define CGU_FS1_PLL			(0x00000000 <<  0)
+
+
+#define CGU_FS2_0			0x070
+#define CGU_FS2_1			0x074
+#define CGU_FS2_2			0x078
+#define CGU_FS2_3			0x07c
+#define CGU_FS2_4			0x080
+#define CGU_FS2_5			0x084
+#define CGU_FS2_6			0x088
+#define CGU_FS2_7			0x08c
+#define CGU_FS2_8			0x090
+#define CGU_FS2_9			0x094
+#define CGU_FS2_10			0x098
+#define CGU_FS2_11			0x09c
+#define CGU_FS2_12			0x0a0
+#define CGU_FS2_13			0x0a4
+
+#define CGU_SSR_0			0x0a8
+#define CGU_SSR_1			0x0ac
+#define CGU_SSR_2			0x0b0
+#define CGU_SSR_3			0x0b4
+#define CGU_SSR_4			0x0b8
+#define CGU_SSR_5			0x0bc
+#define CGU_SSR_6			0x0c0
+#define CGU_SSR_7			0x0c4
+#define CGU_SSR_8			0x0c8
+#define CGU_SSR_9			0x0cc
+#define CGU_SSR_10			0x0d0
+#define CGU_SSR_11			0x0d4
+#define CGU_SSR_12			0x0d8
+#define CGU_SSR_13			0x0dc
+
+#define CGU_PCR_0_0			0x0e0
+#define CGU_PCR_0_1			0x0e4
+#define CGU_PCR_0_2			0x0e8
+#define CGU_PCR_0_3			0x0ec
+#define CGU_PCR_0_4			0x0f0
+#define CGU_PCR_0_5			0x0f4
+#define CGU_PCR_0_6			0x0f8
+#define CGU_PCR_0_7			0x0fc
+#define CGU_PCR_1_0			0x100
+#define CGU_PCR_1_1			0x104
+#define CGU_PCR_2_0			0x108
+#define CGU_PCR_2_1			0x10c
+#define CGU_PCR_3_0			0x110
+#define CGU_PCR_3_1			0x114
+#define CGU_PCR_3_2			0x118
+#define CGU_PCR_4_0			0x11c
+#define CGU_PCR_4_1			0x120
+#define CGU_PCR_5			0x124
+#define CGU_PCR_6			0x128
+#define CGU_PCR_7			0x12c
+#define CGU_PCR_8			0x130
+#define CGU_PCR_9			0x134
+#define CGU_PCR_10			0x138
+#define CGU_PCR_11			0x13c
+#define CGU_PCR_12			0x140
+#define CGU_PCR_13			0x144
+#define CGU_PCR_WAKE_EN			(0x00000001 <<  2)
+#define CGU_PCR_AUTO			(0x00000001 <<  1)
+#define CGU_PCR_RUN			(0x00000001 <<  0)
+
+
+#define CGU_PSR_0_0			0x148
+#define CGU_PSR_0_1			0x14c
+#define CGU_PSR_0_2			0x150
+#define CGU_PSR_0_3			0x154
+#define CGU_PSR_0_4			0x158
+#define CGU_PSR_0_5			0x15c
+#define CGU_PSR_0_6			0x160
+#define CGU_PSR_0_7			0x164
+#define CGU_PSR_1_0			0x168
+#define CGU_PSR_1_1			0x16c
+#define CGU_PSR_2_0			0x170
+#define CGU_PSR_2_1			0x174
+#define CGU_PSR_3_0			0x178
+#define CGU_PSR_3_1			0x17c
+#define CGU_PSR_3_2			0x180
+#define CGU_PSR_4_0			0x184
+#define CGU_PSR_4_1			0x188
+#define CGU_PSR_5			0x18c
+#define CGU_PSR_6			0x190
+#define CGU_PSR_7			0x194
+#define CGU_PSR_8			0x198
+#define CGU_PSR_9			0x19c
+#define CGU_PSR_10			0x1a0
+#define CGU_PSR_11			0x1a4
+#define CGU_PSR_12			0x1a8
+#define CGU_PSR_13			0x1ac
+
+#define CGU_ESR_0_0			0x1b0
+#define CGU_ESR_0_1			0x1b4
+#define CGU_ESR_0_2			0x1b8
+#define CGU_ESR_0_3			0x1bc
+#define CGU_ESR_0_4			0x1c0
+#define CGU_ESR_0_5			0x1c4
+#define CGU_ESR_0_6			0x1c8
+#define CGU_ESR_0_7			0x1cc
+#define CGU_ESR_1_0			0x1d0
+#define CGU_ESR_1_1			0x1d4
+#define CGU_ESR_2_0			0x1d8
+#define CGU_ESR_2_1			0x1dc
+#define CGU_ESR_3_0			0x1e0
+#define CGU_ESR_3_1			0x1e4
+#define CGU_ESR_3_2			0x1e8
+#define CGU_ESR_4_0			0x1ec
+#define CGU_ESR_4_1			0x1f0
+#define CGU_ESR_5			0x1f4
+#define CGU_ESR_6			0x1f8
+#define CGU_ESR_7			0x1fc
+#define CGU_ESR_8			0x200
+#define CGU_ESR_9			0x204
+#define CGU_ESR_10			0x208
+#define CGU_ESR_11			0x20c
+#define CGU_ESR_12			0x210
+#define CGU_ESR_13			0x214
+#define CGU_ESR_FD_EN			(0x00000001 <<  0)
+
+#define CGU_FDC_0			0x218
+#define CGU_FDC_1			0x21c
+#define CGU_FDC_2			0x220
+#define CGU_FDC_3			0x224
+#define CGU_FDC_4			0x228
+#define CGU_FDC_5			0x22c
+#define CGU_FDC_6			0x230
+#define CGU_FDC_7			0x234
+#define CGU_FDC_8			0x238
+#define CGU_FDC_9			0x23c
+#define CGU_FDC_10			0x240
+#define CGU_FDC_11			0x244
+#define CGU_FDC_12			0x248
+#define CGU_FDC_13			0x24c
+#define CGU_FDC_STRETCH			(0x00000001 <<  0)
+#define CGU_FDC_RESET			(0x00000001 <<  1)
+#define CGU_FDC_RUN1			(0x00000001 <<  2)
+#define CGU_FDC_MADD			(0x000000ff <<  3)
+#define CGU_FDC_MSUB			(0x000000ff << 11)
+
+#endif /* __SAA716x_CGU_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_dcs_reg.h b/drivers/media/pci/saa716x/saa716x_dcs_reg.h
new file mode 100644
index 0000000000000..26dba68930746
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_dcs_reg.h
@@ -0,0 +1,56 @@
+#ifndef __SAA716x_DCS_REG_H
+#define __SAA716x_DCS_REG_H
+
+/* -------------- DCS Registers -------------- */
+
+#define DCSC_CTRL			0x000
+#define DCSC_SEL_PLLDI			(0x03ffffff <<  5)
+#define DCSC_TOUT_SEL			(0x0000000f <<  1)
+#define DCSC_TOUT_OFF			(0x00000001 <<  0)
+
+#define DCSC_ADDR			0x00c
+#define DCSC_ERR_TOUT_ADDR		(0x3fffffff <<  2)
+
+#define DCSC_STAT			0x010
+#define DCSC_ERR_TOUT_GNT		(0x0000001f << 24)
+#define DCSC_ERR_TOUT_SEL		(0x0000007f << 10)
+#define DCSC_ERR_TOUT_READ		(0x00000001 <<  8)
+#define DCSC_ERR_TOUT_MASK		(0x0000000f <<  4)
+#define DCSC_ERR_ACK			(0x00000001 <<  1)
+
+#define DCSC_FEATURES			0x040
+#define DCSC_UNIQUE_ID			(0x00000007 << 16)
+#define DCSC_SECURITY			(0x00000001 << 14)
+#define DCSC_NUM_BASE_REGS		(0x00000003 << 11)
+#define DCSC_NUM_TARGETS		(0x0000001f <<  5)
+#define DCSC_NUM_INITIATORS		(0x0000001f <<  0)
+
+#define DCSC_BASE_REG0			0x100
+#define DCSC_BASE_N_REG			(0x00000fff << 20)
+
+#define DCSC_INT_CLR_ENABLE		0xfd8
+#define DCSC_INT_CLR_ENABLE_TOUT	(0x00000001 <<  1)
+#define DCSC_INT_CLR_ENABLE_ERROR	(0x00000001 <<  0)
+
+#define DCSC_INT_SET_ENABLE		0xfdc
+#define DCSC_INT_SET_ENABLE_TOUT	(0x00000001 <<  1)
+#define DCSC_INT_SET_ENABLE_ERROR	(0x00000001 <<  0)
+
+#define DCSC_INT_STATUS			0xfe0
+#define DCSC_INT_STATUS_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_STATUS_ERROR		(0x00000001 <<  0)
+
+#define DCSC_INT_ENABLE			0xfe4
+#define DCSC_INT_ENABLE_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_ENABLE_ERROR		(0x00000001 <<  0)
+
+#define DCSC_INT_CLR_STATUS		0xfe8
+#define DCSC_INT_CLEAR_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_CLEAR_ERROR		(0x00000001 <<  0)
+
+#define DCSC_INT_SET_STATUS		0xfec
+#define DCSC_INT_SET_TOUT		(0x00000001 <<  1)
+#define DCSC_INT_SET_ERROR		(0x00000001 <<  0)
+
+
+#endif /* __SAA716x_DCS_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_dma_reg.h b/drivers/media/pci/saa716x/saa716x_dma_reg.h
new file mode 100644
index 0000000000000..6037ca987fddc
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_dma_reg.h
@@ -0,0 +1,200 @@
+#ifndef __SAA716x_DMA_REG_H
+#define __SAA716x_DMA_REG_H
+
+/* -------------- BAM Registers -------------- */
+
+#define BAM_VI0_0_DMA_BUF_MODE		0x000
+
+#define BAM_VI0_0_ADDR_OFFST_0		0x004
+#define BAM_VI0_0_ADDR_OFFST_1		0x008
+#define BAM_VI0_0_ADDR_OFFST_2		0x00c
+#define BAM_VI0_0_ADDR_OFFST_3		0x010
+#define BAM_VI0_0_ADDR_OFFST_4		0x014
+#define BAM_VI0_0_ADDR_OFFST_5		0x018
+#define BAM_VI0_0_ADDR_OFFST_6		0x01c
+#define BAM_VI0_0_ADDR_OFFST_7		0x020
+
+#define BAM_VI0_1_DMA_BUF_MODE		0x024
+#define BAM_VI0_1_ADDR_OFFST_0		0x028
+#define BAM_VI0_1_ADDR_OFFST_1		0x02c
+#define BAM_VI0_1_ADDR_OFFST_2		0x030
+#define BAM_VI0_1_ADDR_OFFST_3		0x034
+#define BAM_VI0_1_ADDR_OFFST_4		0x038
+#define BAM_VI0_1_ADDR_OFFST_5		0x03c
+#define BAM_VI0_1_ADDR_OFFST_6		0x040
+#define BAM_VI0_1_ADDR_OFFST_7		0x044
+
+#define BAM_VI0_2_DMA_BUF_MODE		0x048
+#define BAM_VI0_2_ADDR_OFFST_0		0x04c
+#define BAM_VI0_2_ADDR_OFFST_1		0x050
+#define BAM_VI0_2_ADDR_OFFST_2		0x054
+#define BAM_VI0_2_ADDR_OFFST_3		0x058
+#define BAM_VI0_2_ADDR_OFFST_4		0x05c
+#define BAM_VI0_2_ADDR_OFFST_5		0x060
+#define BAM_VI0_2_ADDR_OFFST_6		0x064
+#define BAM_VI0_2_ADDR_OFFST_7		0x068
+
+
+#define BAM_VI1_0_DMA_BUF_MODE		0x06c
+#define BAM_VI1_0_ADDR_OFFST_0		0x070
+#define BAM_VI1_0_ADDR_OFFST_1		0x074
+#define BAM_VI1_0_ADDR_OFFST_2		0x078
+#define BAM_VI1_0_ADDR_OFFST_3		0x07c
+#define BAM_VI1_0_ADDR_OFFST_4		0x080
+#define BAM_VI1_0_ADDR_OFFST_5		0x084
+#define BAM_VI1_0_ADDR_OFFST_6		0x088
+#define BAM_VI1_0_ADDR_OFFST_7		0x08c
+
+#define BAM_VI1_1_DMA_BUF_MODE		0x090
+#define BAM_VI1_1_ADDR_OFFST_0		0x094
+#define BAM_VI1_1_ADDR_OFFST_1		0x098
+#define BAM_VI1_1_ADDR_OFFST_2		0x09c
+#define BAM_VI1_1_ADDR_OFFST_3		0x0a0
+#define BAM_VI1_1_ADDR_OFFST_4		0x0a4
+#define BAM_VI1_1_ADDR_OFFST_5		0x0a8
+#define BAM_VI1_1_ADDR_OFFST_6		0x0ac
+#define BAM_VI1_1_ADDR_OFFST_7		0x0b0
+
+#define BAM_VI1_2_DMA_BUF_MODE		0x0b4
+#define BAM_VI1_2_ADDR_OFFST_0		0x0b8
+#define BAM_VI1_2_ADDR_OFFST_1		0x0bc
+#define BAM_VI1_2_ADDR_OFFST_2		0x0c0
+#define BAM_VI1_2_ADDR_OFFST_3		0x0c4
+#define BAM_VI1_2_ADDR_OFFST_4		0x0c8
+#define BAM_VI1_2_ADDR_OFFST_5		0x0cc
+#define BAM_VI1_2_ADDR_OFFST_6		0x0d0
+#define BAM_VI1_2_ADDR_OFFST_7		0x0d4
+
+
+#define BAM_FGPI0_DMA_BUF_MODE		0x0d8
+#define BAM_FGPI0_ADDR_OFFST_0		0x0dc
+#define BAM_FGPI0_ADDR_OFFST_1		0x0e0
+#define BAM_FGPI0_ADDR_OFFST_2		0x0e4
+#define BAM_FGPI0_ADDR_OFFST_3		0x0e8
+#define BAM_FGPI0_ADDR_OFFST_4		0x0ec
+#define BAM_FGPI0_ADDR_OFFST_5		0x0f0
+#define BAM_FGPI0_ADDR_OFFST_6		0x0f4
+#define BAM_FGPI0_ADDR_OFFST_7		0x0f8
+
+#define BAM_FGPI1_DMA_BUF_MODE		0x0fc
+#define BAM_FGPI1_ADDR_OFFST_0		0x100
+#define BAM_FGPI1_ADDR_OFFST_1		0x104
+#define BAM_FGPI1_ADDR_OFFST_2		0x108
+#define BAM_FGPI1_ADDR_OFFST_3		0x10c
+#define BAM_FGPI1_ADDR_OFFST_4		0x110
+#define BAM_FGPI1_ADDR_OFFST_5		0x114
+#define BAM_FGPI1_ADDR_OFFST_6		0x118
+#define BAM_FGPI1_ADDR_OFFST_7		0x11c
+
+#define BAM_FGPI2_DMA_BUF_MODE		0x120
+#define BAM_FGPI2_ADDR_OFFST_0		0x124
+#define BAM_FGPI2_ADDR_OFFST_1		0x128
+#define BAM_FGPI2_ADDR_OFFST_2		0x12c
+#define BAM_FGPI2_ADDR_OFFST_3		0x130
+#define BAM_FGPI2_ADDR_OFFST_4		0x134
+#define BAM_FGPI2_ADDR_OFFST_5		0x138
+#define BAM_FGPI2_ADDR_OFFST_6		0x13c
+#define BAM_FGPI2_ADDR_OFFST_7		0x140
+
+#define BAM_FGPI3_DMA_BUF_MODE		0x144
+#define BAM_FGPI3_ADDR_OFFST_0		0x148
+#define BAM_FGPI3_ADDR_OFFST_1		0x14c
+#define BAM_FGPI3_ADDR_OFFST_2		0x150
+#define BAM_FGPI3_ADDR_OFFST_3		0x154
+#define BAM_FGPI3_ADDR_OFFST_4		0x158
+#define BAM_FGPI3_ADDR_OFFST_5		0x15c
+#define BAM_FGPI3_ADDR_OFFST_6		0x160
+#define BAM_FGPI3_ADDR_OFFST_7		0x164
+
+
+#define BAM_AI0_DMA_BUF_MODE		0x168
+#define BAM_AI0_ADDR_OFFST_0		0x16c
+#define BAM_AI0_ADDR_OFFST_1		0x170
+#define BAM_AI0_ADDR_OFFST_2		0x174
+#define BAM_AI0_ADDR_OFFST_3		0x178
+#define BAM_AI0_ADDR_OFFST_4		0x17c
+#define BAM_AIO_ADDR_OFFST_5		0x180
+#define BAM_AI0_ADDR_OFFST_6		0x184
+#define BAM_AIO_ADDR_OFFST_7		0x188
+
+#define BAM_AI1_DMA_BUF_MODE		0x18c
+#define BAM_AI1_ADDR_OFFST_0		0x190
+#define BAM_AI1_ADDR_OFFST_1		0x194
+#define BAM_AI1_ADDR_OFFST_2		0x198
+#define BAM_AI1_ADDR_OFFST_3		0x19c
+#define BAM_AI1_ADDR_OFFST_4		0x1a0
+#define BAM_AI1_ADDR_OFFST_5		0x1a4
+#define BAM_AI1_ADDR_OFFST_6		0x1a8
+#define BAM_AI1_ADDR_OFFST_7		0x1ac
+
+#define BAM_SW_RST			0xff0
+#define BAM_SW_RESET			(0x00000001 <<  0)
+
+
+
+
+
+/* -------------- MMU Registers -------------- */
+
+#define MMU_MODE			0x000
+
+#define MMU_DMA_CONFIG0			0x004
+#define MMU_DMA_CONFIG1			0x008
+#define MMU_DMA_CONFIG2			0x00c
+#define MMU_DMA_CONFIG3			0x010
+#define MMU_DMA_CONFIG4			0x014
+#define MMU_DMA_CONFIG5			0x018
+#define MMU_DMA_CONFIG6			0x01c
+#define MMU_DMA_CONFIG7			0x020
+#define MMU_DMA_CONFIG8			0x024
+#define MMU_DMA_CONFIG9			0x028
+#define MMU_DMA_CONFIG10		0x02c
+#define MMU_DMA_CONFIG11		0x030
+#define MMU_DMA_CONFIG12		0x034
+#define MMU_DMA_CONFIG13		0x038
+#define MMU_DMA_CONFIG14		0x03c
+#define MMU_DMA_CONFIG15		0x040
+
+#define MMU_SW_RST			0xff0
+#define MMU_SW_RESET			(0x0001 <<  0)
+
+#define MMU_PTA_BASE0			0x044 /* DMA 0 */
+#define MMU_PTA_BASE1			0x084 /* DMA 1 */
+#define MMU_PTA_BASE2			0x0c4 /* DMA 2 */
+#define MMU_PTA_BASE3			0x104 /* DMA 3 */
+#define MMU_PTA_BASE4			0x144 /* DMA 4 */
+#define MMU_PTA_BASE5			0x184 /* DMA 5 */
+#define MMU_PTA_BASE6			0x1c4 /* DMA 6 */
+#define MMU_PTA_BASE7			0x204 /* DMA 7 */
+#define MMU_PTA_BASE8			0x244 /* DMA 8 */
+#define MMU_PTA_BASE9			0x284 /* DMA 9 */
+#define MMU_PTA_BASE10			0x2c4 /* DMA 10 */
+#define MMU_PTA_BASE11			0x304 /* DMA 11 */
+#define MMU_PTA_BASE12			0x344 /* DMA 12 */
+#define MMU_PTA_BASE13			0x384 /* DMA 13 */
+#define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
+#define MMU_PTA_BASE15			0x404 /* DMA 15 */
+
+#define MMU_PTA_BASE			0x044 /* DMA 0 */
+#define MMU_PTA_OFFSET			0x40
+
+#define PTA_BASE(__ch)			(MMU_PTA_BASE + (MMU_PTA_OFFSET * __ch))
+
+#define MMU_PTA0_LSB(__ch)		PTA_BASE(__ch) + 0x00
+#define MMU_PTA0_MSB(__ch)		PTA_BASE(__ch) + 0x04
+#define MMU_PTA1_LSB(__ch)		PTA_BASE(__ch) + 0x08
+#define MMU_PTA1_MSB(__ch)		PTA_BASE(__ch) + 0x0c
+#define MMU_PTA2_LSB(__ch)		PTA_BASE(__ch) + 0x10
+#define MMU_PTA2_MSB(__ch)		PTA_BASE(__ch) + 0x14
+#define MMU_PTA3_LSB(__ch)		PTA_BASE(__ch) + 0x18
+#define MMU_PTA3_MSB(__ch)		PTA_BASE(__ch) + 0x1c
+#define MMU_PTA4_LSB(__ch)		PTA_BASE(__ch) + 0x20
+#define MMU_PTA4_MSB(__ch)		PTA_BASE(__ch) + 0x24
+#define MMU_PTA5_LSB(__ch)		PTA_BASE(__ch) + 0x28
+#define MMU_PTA5_MSB(__ch)		PTA_BASE(__ch) + 0x2c
+#define MMU_PTA6_LSB(__ch)		PTA_BASE(__ch) + 0x30
+#define MMU_PTA6_MSB(__ch)		PTA_BASE(__ch) + 0x34
+#define MMU_PTA7_LSB(__ch)		PTA_BASE(__ch) + 0x38
+#define MMU_PTA7_MSB(__ch)		PTA_BASE(__ch) + 0x3c
+
+#endif /* __SAA716x_DMA_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 45ba27328f05d..291e936fed800 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -20,10 +20,16 @@
 #include <linux/interrupt.h>
 
 #include <linux/i2c.h>
+
+#include "saa716x_mod.h"
+
+#include "saa716x_phi_reg.h"
+#include "saa716x_spi_reg.h"
+#include "saa716x_msi_reg.h"
+
 #include "saa716x_vip.h"
 #include "saa716x_aip.h"
 #include "saa716x_msi.h"
-#include "saa716x_reg.h"
 #include "saa716x_ff.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index c0ef0e76c1c21..bb5bb0f68bb45 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -1,6 +1,10 @@
 #include <linux/kernel.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_fgpi_reg.h"
+#include "saa716x_dma_reg.h"
+
 #include "saa716x_dma.h"
 #include "saa716x_fgpi.h"
 #include "saa716x_spi.h"
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi_reg.h b/drivers/media/pci/saa716x/saa716x_fgpi_reg.h
new file mode 100644
index 0000000000000..1193016d508db
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_fgpi_reg.h
@@ -0,0 +1,74 @@
+#ifndef __SAA716x_FGPI_REG_H
+#define __SAA716x_FGPI_REG_H
+
+/* -------------- FGPI Registers -------------- */
+
+#define FGPI_CONTROL			0x000
+#define FGPI_CAPTURE_ENABLE_2		(0x00000001 << 13)
+#define FGPI_CAPTURE_ENABLE_1		(0x00000001 << 12)
+#define FGPI_MODE			(0x00000001 << 11)
+#define FGPI_SAMPLE_SIZE		(0x00000003 <<  8)
+#define FGPI_BUF_SYNC_MSG_STOP		(0x00000003 <<  5)
+#define FGPI_REC_START_MSG_START	(0x00000003 <<  2)
+#define FGPI_TSTAMP_SELECT		(0x00000001 <<  1)
+#define FGPI_VAR_LENGTH			(0x00000001 <<  0)
+
+#define FGPI_BASE_1			0x004
+#define FGPI_BASE_2			0x008
+#define FGPI_SIZE			0x00c
+#define FGPI_REC_SIZE			0x010
+#define FGPI_STRIDE			0x014
+#define FGPI_NUM_RECORD_1		0x018
+#define FGPI_NUM_RECORD_2		0x01c
+#define FGPI_THRESHOLD_1		0x020
+#define FGPI_THRESHOLD_2		0x024
+#define FGPI_D1_XY_START		0x028
+#define FGPI_D1_XY_END			0x02c
+
+#define INT_STATUS			0xfe0
+#define FGPI_BUF1_ACTIVE		(0x00000001 <<  7)
+#define FGPI_OVERFLOW			(0x00000001 <<  6)
+#define FGPI_MBE			(0x00000001 <<  5)
+#define FGPI_UNDERRUN			(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED		(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED		(0x00000001 <<  2)
+#define FGPI_BUF2_FULL			(0x00000001 <<  1)
+#define FGPI_BUF1_FULL			(0x00000001 <<  0)
+
+#define INT_ENABLE			0xfe4
+#define FGPI_OVERFLOW_ENA		(0x00000001 <<  6)
+#define FGPI_MBE_ENA			(0x00000001 <<  5)
+#define FGPI_UNDERRUN_ENA		(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED_ENA	(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED_ENA	(0x00000001 <<  2)
+#define FGPI_BUF2_FULL_ENA		(0x00000001 <<  1)
+#define FGPI_BUF1_FULL_ENA		(0x00000001 <<  0)
+
+#define INT_CLR_STATUS			0xfe8
+#define FGPI_OVERFLOW_ACK		(0x00000001 <<  6)
+#define FGPI_MBE_ACK			(0x00000001 <<  5)
+#define FGPI_UNDERRUN_ACK		(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED_ACK	(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED_ACK	(0x00000001 <<  2)
+#define FGPI_BUF2_DONE_ACK		(0x00000001 <<  1)
+#define FGPI_BUF1_DONE_ACK		(0x00000001 <<  0)
+
+#define INT_SET_STATUS			0xfec
+#define FGPI_OVERFLOW_SET		(0x00000001 <<  6)
+#define FGPI_MBE_SET			(0x00000001 <<  5)
+#define FGPI_UNDERRUN_SET		(0x00000001 <<  4)
+#define FGPI_THRESH2_REACHED_SET	(0x00000001 <<  3)
+#define FGPI_THRESH1_REACHED_SET	(0x00000001 <<  2)
+#define FGPI_BUF2_DONE_SET		(0x00000001 <<  1)
+#define FGPI_BUF1_DONE_SET		(0x00000001 <<  0)
+
+#define FGPI_SOFT_RESET			0xff0
+#define FGPI_SOFTWARE_RESET		(0x00000001 <<  0)
+
+#define FGPI_INTERFACE			0xff4
+#define FGPI_DISABLE_BUS_IF		(0x00000001 <<  0)
+
+#define FGPI_MOD_ID_EXT			0xff8
+#define FGPI_MODULE_ID			0xffc
+
+#endif /* __SAA716x_FGPI_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index 239314d088ba5..d14acefb47482 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -1,7 +1,10 @@
 #include <linux/kernel.h>
 #include <linux/spinlock.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_gpio_reg.h"
+
 #include "saa716x_gpio.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_gpio_reg.h b/drivers/media/pci/saa716x/saa716x_gpio_reg.h
new file mode 100644
index 0000000000000..f36184a9eabd5
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_gpio_reg.h
@@ -0,0 +1,47 @@
+#ifndef __SAA716x_GPIO_REG_H
+#define __SAA716x_GPIO_REG_H
+
+/* -------------- GPIO Registers -------------- */
+
+#define GPIO_RD				0x000
+#define GPIO_WR				0x004
+#define GPIO_WR_MODE			0x008
+#define GPIO_OEN			0x00c
+
+#define GPIO_SW_RST			0xff0
+#define GPIO_SW_RESET			(0x00000001 <<  0)
+
+#define GPIO_31				(1 << 31)
+#define GPIO_30				(1 << 30)
+#define GPIO_29				(1 << 29)
+#define GPIO_28				(1 << 28)
+#define GPIO_27				(1 << 27)
+#define GPIO_26				(1 << 26)
+#define GPIO_25				(1 << 25)
+#define GPIO_24				(1 << 24)
+#define GPIO_23				(1 << 23)
+#define GPIO_22				(1 << 22)
+#define GPIO_21				(1 << 21)
+#define GPIO_20				(1 << 20)
+#define GPIO_19				(1 << 19)
+#define GPIO_18				(1 << 18)
+#define GPIO_17				(1 << 17)
+#define GPIO_16				(1 << 16)
+#define GPIO_15				(1 << 15)
+#define GPIO_14				(1 << 14)
+#define GPIO_13				(1 << 13)
+#define GPIO_12				(1 << 12)
+#define GPIO_11				(1 << 11)
+#define GPIO_10				(1 << 10)
+#define GPIO_09				(1 <<  9)
+#define GPIO_08				(1 <<  8)
+#define GPIO_07				(1 <<  7)
+#define GPIO_06				(1 <<  6)
+#define GPIO_05				(1 <<  5)
+#define GPIO_04				(1 <<  4)
+#define GPIO_03				(1 <<  3)
+#define GPIO_02				(1 <<  2)
+#define GPIO_01				(1 <<  1)
+#define GPIO_00				(1 <<  0)
+
+#endif /* __SAA716x_GPIO_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_greg.c b/drivers/media/pci/saa716x/saa716x_greg.c
index c0e2a4c70fe3f..d93a3b8325881 100644
--- a/drivers/media/pci/saa716x/saa716x_greg.c
+++ b/drivers/media/pci/saa716x/saa716x_greg.c
@@ -1,6 +1,8 @@
 #include <linux/kernel.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_greg_reg.h"
 #include "saa716x_greg.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_greg_reg.h b/drivers/media/pci/saa716x/saa716x_greg_reg.h
new file mode 100644
index 0000000000000..052e8cd1f820f
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_greg_reg.h
@@ -0,0 +1,91 @@
+#ifndef __SAA716x_GREG_REG_H
+#define __SAA716x_GREG_REG_H
+
+/* -------------- GREG Registers -------------- */
+
+#define GREG_SUBSYS_CONFIG		0x000
+#define GREG_SUBSYS_ID			(0x0000ffff << 16)
+#define GREG_SUBSYS_VID			(0x0000ffff <<  0)
+
+#define GREG_MSI_BAR_PMCSR		0x004
+#define GREG_PMCSR_SCALE_7		(0x00000003 << 30)
+#define GREG_PMCSR_SCALE_6		(0x00000003 << 28)
+#define GREG_PMCSR_SCALE_5		(0x00000003 << 26)
+#define GREG_PMCSR_SCALE_4		(0x00000003 << 24)
+#define GREG_PMCSR_SCALE_3		(0x00000003 << 22)
+#define GREG_PMCSR_SCALE_2		(0x00000003 << 20)
+#define GREG_PMCSR_SCALE_1		(0x00000003 << 18)
+#define GREG_PMCSR_SCALE_0		(0x00000003 << 16)
+
+#define GREG_BAR_WIDTH_17		(0x0000001e <<  8)
+#define GREG_BAR_WIDTH_18		(0x0000001c <<  8)
+#define GREG_BAR_WIDTH_19		(0x00000018 <<  8)
+#define GREG_BAR_WIDTH_20		(0x00000010 <<  8)
+
+#define GREG_BAR_PREFETCH		(0x00000001 <<  3)
+#define GREG_MSI_MM_CAP1		(0x00000000 <<  0) // FIXME !
+#define GREG_MSI_MM_CAP2		(0x00000001 <<  0)
+#define GREG_MSI_MM_CAP4		(0x00000002 <<  0)
+#define GREG_MSI_MM_CAP8		(0x00000003 <<  0)
+#define GREG_MSI_MM_CAP16		(0x00000004 <<  0)
+#define GREG_MSI_MM_CAP32		(0x00000005 <<  0)
+
+#define GREG_PMCSR_DATA_1		0x008
+#define GREG_PMCSR_DATA_2		0x00c
+#define GREG_VI_CTRL			0x010
+#define GREG_FGPI_CTRL			0x014
+
+#define GREG_RSTU_CTRL			0x018
+#define GREG_BOOT_READY			(0x00000001 << 13)
+#define GREG_RESET_REQ			(0x00000001 << 12)
+#define GREG_IP_RST_RELEASE		(0x00000001 << 11)
+#define GREG_ADAPTER_RST_RELEASE	(0x00000001 << 10)
+#define GREG_PCIE_CORE_RST_RELEASE	(0x00000001 <<  9)
+#define GREG_BOOT_IP_RST_RELEASE	(0x00000001 <<  8)
+#define GREG_BOOT_RST_RELEASE		(0x00000001 <<  7)
+#define GREG_CGU_RST_RELEASE		(0x00000001 <<  6)
+#define GREG_IP_RST_ASSERT		(0x00000001 <<  5)
+#define GREG_ADAPTER_RST_ASSERT		(0x00000001 <<  4)
+#define GREG_RST_ASSERT			(0x00000001 <<  3)
+#define GREG_BOOT_IP_RST_ASSERT		(0x00000001 <<  2)
+#define GREG_BOOT_RST_ASSERT		(0x00000001 <<  1)
+#define GREG_CGU_RST_ASSERT		(0x00000001 <<  0)
+
+#define GREG_I2C_CTRL			0x01c
+#define GREG_I2C_SLAVE_ADDR		(0x0000007f <<  0)
+
+#define GREG_OVFLW_CTRL			0x020
+#define GREG_OVERFLOW_ENABLE		(0x00001fff <<  0)
+
+#define GREG_TAG_ACK_FLEN		0x024
+#define GREG_TAG_ACK_FLEN_1B		(0x00000000 <<  0)
+#define GREG_TAG_ACK_FLEN_2B		(0x00000001 <<  0)
+#define GREG_TAG_ACK_FLEN_4B		(0x00000002 <<  0)
+#define GREG_TAG_ACK_FLEN_8B		(0x00000003 <<  0)
+
+#define GREG_VIDEO_IN_CTRL		0x028
+
+#define GREG_SPARE_1			0x02c
+#define GREG_SPARE_2			0x030
+#define GREG_SPARE_3			0x034
+#define GREG_SPARE_4			0x038
+#define GREG_SPARE_5			0x03c
+#define GREG_SPARE_6			0x040
+#define GREG_SPARE_7			0x044
+#define GREG_SPARE_8			0x048
+#define GREG_SPARE_9			0x04c
+#define GREG_SPARE_10			0x050
+#define GREG_SPARE_11			0x054
+#define GREG_SPARE_12			0x058
+#define GREG_SPARE_13			0x05c
+#define GREG_SPARE_14			0x060
+#define GREG_SPARE_15			0x064
+
+#define GREG_FAIL_DISABLE		0x068
+#define GREG_BOOT_FAIL_DISABLE		(0x00000001 <<  0)
+
+#define GREG_SW_RST			0xff0
+#define GREG_SW_RESET			(0x00000001 <<  0)
+
+
+#endif /* __SAA716x_GREG_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 085d1fc3f0650..ff5db7d44b639 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -19,13 +19,16 @@
 
 #include <linux/i2c.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_msi_reg.h"
+#include "saa716x_gpio_reg.h"
+
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
 #include "saa716x_msi.h"
 #include "saa716x_hybrid.h"
 #include "saa716x_gpio.h"
-#include "saa716x_reg.h"
 #include "saa716x_rom.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 440f0c684ace0..664ac1802e854 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -7,7 +7,12 @@
 
 #include <linux/i2c.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_i2c_reg.h"
+#include "saa716x_msi_reg.h"
+#include "saa716x_cgu_reg.h"
+
 #include "saa716x_i2c.h"
 #include "saa716x_msi.h"
 #include "saa716x_spi.h"
diff --git a/drivers/media/pci/saa716x/saa716x_i2c_reg.h b/drivers/media/pci/saa716x/saa716x_i2c_reg.h
new file mode 100644
index 0000000000000..8fa992c9a0922
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_i2c_reg.h
@@ -0,0 +1,145 @@
+#ifndef __SAA716x_I2C_REG_H
+#define __SAA716x_I2C_REG_H
+
+/* -------------- I2C Registers -------------- */
+
+#define RX_FIFO				0x000
+#define I2C_RX_BYTE			(0x000000ff <<  0)
+
+#define TX_FIFO				0x000
+#define I2C_STOP_BIT			(0x00000001 <<  9)
+#define I2C_START_BIT			(0x00000001 <<  8)
+#define I2C_TX_BYTE			(0x000000ff <<  0)
+
+#define I2C_STATUS			0x008
+#define I2C_TRANSMIT			(0x00000001 << 11)
+#define I2C_RECEIVE			(0x00000001 << 10)
+#define I2C_TRANSMIT_S_PROG		(0x00000001 <<  9)
+#define I2C_TRANSMIT_S_CLEAR		(0x00000001 <<  8)
+#define I2C_TRANSMIT_PROG		(0x00000001 <<  7)
+#define I2C_TRANSMIT_CLEAR		(0x00000001 <<  6)
+#define I2C_RECEIVE_PROG		(0x00000001 <<  5)
+#define I2C_RECEIVE_CLEAR		(0x00000001 <<  4)
+#define I2C_SDA_LINE			(0x00000001 <<  3)
+#define I2C_SCL_LINE			(0x00000001 <<  2)
+#define I2C_START_STOP_FLAG		(0x00000001 <<  1)
+#define I2C_MODE_STATUS			(0x00000001 <<  0)
+
+#define I2C_CONTROL			0x00c
+#define I2C_SCL_CONTROL			(0x00000001 <<  7)
+#define I2C_SDA_CONTROL			(0x00000001 <<  6)
+#define I2C_RECEIVE_PROTECT		(0x00000001 <<  5)
+#define I2C_RECEIVE_PRO_READ		(0x00000001 <<  4)
+#define I2C_TRANS_SELF_CLEAR		(0x00000001 <<  3)
+#define I2C_TRANS_S_SELF_CLEAR		(0x00000001 <<  2)
+#define I2C_SLAVE_ADDR_10BIT		(0x00000001 <<  1)
+#define I2C_RESET			(0x00000001 <<  0)
+
+#define I2C_CLOCK_DIVISOR_HIGH		0x010
+#define I2C_CLOCK_HIGH			(0x0000ffff <<  0)
+
+#define I2C_CLOCK_DIVISOR_LOW		0x014
+#define I2C_CLOCK_LOW			(0x0000ffff <<  0)
+
+#define I2C_RX_LEVEL			0x01c
+#define I2C_RECEIVE_RANGE		(0x0000007f <<  0)
+
+#define I2C_TX_LEVEL			0x020
+#define I2C_TRANSMIT_RANGE		(0x0000007f <<  0)
+
+#define I2C_SDA_HOLD			0x028
+#define I2C_HOLD_TIME			(0x0000007f <<  0)
+
+#define MODULE_CONF			0xfd4
+#define INT_CLR_ENABLE			0xfd8
+#define I2C_CLR_ENABLE_STFNF		(0x00000001 << 12)
+#define I2C_CLR_ENABLE_MTFNF		(0x00000001 << 11)
+#define I2C_CLR_ENABLE_RFDA		(0x00000001 << 10)
+#define I2C_CLR_ENABLE_RFF		(0x00000001 <<  9)
+#define I2C_CLR_ENABLE_STDR		(0x00000001 <<  8)
+#define I2C_CLR_ENABLE_MTDR		(0x00000001 <<  7)
+#define I2C_CLR_ENABLE_IBE		(0x00000001 <<  6)
+#define I2C_CLR_ENABLE_MSMC		(0x00000001 <<  5)
+#define I2C_CLR_ENABLE_SRSD		(0x00000001 <<  4)
+#define I2C_CLR_ENABLE_STSD		(0x00000001 <<  3)
+#define I2C_CLR_ENABLE_MTNA		(0x00000001 <<  2)
+#define I2C_CLR_ENABLE_MAF		(0x00000001 <<  1)
+#define I2C_CLR_ENABLE_MTD		(0x00000001 <<  0)
+
+#define INT_SET_ENABLE			0xfdc
+#define I2C_SET_ENABLE_STFNF		(0x00000001 << 12)
+#define I2C_SET_ENABLE_MTFNF		(0x00000001 << 11)
+#define I2C_SET_ENABLE_RFDA		(0x00000001 << 10)
+#define I2C_SET_ENABLE_RFF		(0x00000001 <<  9)
+#define I2C_SET_ENABLE_STDR		(0x00000001 <<  8)
+#define I2C_SET_ENABLE_MTDR		(0x00000001 <<  7)
+#define I2C_SET_ENABLE_IBE		(0x00000001 <<  6)
+#define I2C_SET_ENABLE_MSMC		(0x00000001 <<  5)
+#define I2C_SET_ENABLE_SRSD		(0x00000001 <<  4)
+#define I2C_SET_ENABLE_STSD		(0x00000001 <<  3)
+#define I2C_SET_ENABLE_MTNA		(0x00000001 <<  2)
+#define I2C_SET_ENABLE_MAF		(0x00000001 <<  1)
+#define I2C_SET_ENABLE_MTD		(0x00000001 <<  0)
+
+#define INT_STATUS			0xfe0
+#define I2C_INTERRUPT_STFNF		(0x00000001 << 12)
+#define I2C_INTERRUPT_MTFNF		(0x00000001 << 11)
+#define I2C_INTERRUPT_RFDA		(0x00000001 << 10)
+#define I2C_INTERRUPTE_RFF		(0x00000001 <<  9)
+#define I2C_SLAVE_INTERRUPT_STDR	(0x00000001 <<  8)
+#define I2C_MASTER_INTERRUPT_MTDR	(0x00000001 <<  7)
+#define I2C_ERROR_IBE			(0x00000001 <<  6)
+#define I2C_MODE_CHANGE_INTER_MSMC	(0x00000001 <<  5)
+#define I2C_SLAVE_RECEIVE_INTER_SRSD	(0x00000001 <<  4)
+#define I2C_SLAVE_TRANSMIT_INTER_STSD	(0x00000001 <<  3)
+#define I2C_ACK_INTER_MTNA		(0x00000001 <<  2)
+#define I2C_FAILURE_INTER_MAF		(0x00000001 <<  1)
+#define I2C_INTERRUPT_MTD		(0x00000001 <<  0)
+
+#define INT_ENABLE			0xfe4
+#define I2C_ENABLE_STFNF		(0x00000001 << 12)
+#define I2C_ENABLE_MTFNF		(0x00000001 << 11)
+#define I2C_ENABLE_RFDA			(0x00000001 << 10)
+#define I2C_ENABLE_RFF			(0x00000001 <<  9)
+#define I2C_ENABLE_STDR			(0x00000001 <<  8)
+#define I2C_ENABLE_MTDR			(0x00000001 <<  7)
+#define I2C_ENABLE_IBE			(0x00000001 <<  6)
+#define I2C_ENABLE_MSMC			(0x00000001 <<  5)
+#define I2C_ENABLE_SRSD			(0x00000001 <<  4)
+#define I2C_ENABLE_STSD			(0x00000001 <<  3)
+#define I2C_ENABLE_MTNA			(0x00000001 <<  2)
+#define I2C_ENABLE_MAF			(0x00000001 <<  1)
+#define I2C_ENABLE_MTD			(0x00000001 <<  0)
+
+#define INT_CLR_STATUS			0xfe8
+#define I2C_CLR_STATUS_STFNF		(0x00000001 << 12)
+#define I2C_CLR_STATUS_MTFNF		(0x00000001 << 11)
+#define I2C_CLR_STATUS_RFDA		(0x00000001 << 10)
+#define I2C_CLR_STATUS_RFF		(0x00000001 <<  9)
+#define I2C_CLR_STATUS_STDR		(0x00000001 <<  8)
+#define I2C_CLR_STATUS_MTDR		(0x00000001 <<  7)
+#define I2C_CLR_STATUS_IBE		(0x00000001 <<  6)
+#define I2C_CLR_STATUS_MSMC		(0x00000001 <<  5)
+#define I2C_CLR_STATUS_SRSD		(0x00000001 <<  4)
+#define I2C_CLR_STATUS_STSD		(0x00000001 <<  3)
+#define I2C_CLR_STATUS_MTNA		(0x00000001 <<  2)
+#define I2C_CLR_STATUS_MAF		(0x00000001 <<  1)
+#define I2C_CLR_STATIS_MTD		(0x00000001 <<  0)
+
+#define INT_SET_STATUS			0xfec
+#define I2C_SET_STATUS_STFNF		(0x00000001 << 12)
+#define I2C_SET_STATUS_MTFNF		(0x00000001 << 11)
+#define I2C_SET_STATUS_RFDA		(0x00000001 << 10)
+#define I2C_SET_STATUS_RFF		(0x00000001 <<  9)
+#define I2C_SET_STATUS_STDR		(0x00000001 <<  8)
+#define I2C_SET_STATUS_MTDR		(0x00000001 <<  7)
+#define I2C_SET_STATUS_IBE		(0x00000001 <<  6)
+#define I2C_SET_STATUS_MSMC		(0x00000001 <<  5)
+#define I2C_SET_STATUS_SRSD		(0x00000001 <<  4)
+#define I2C_SET_STATUS_STSD		(0x00000001 <<  3)
+#define I2C_SET_STATUS_MTNA		(0x00000001 <<  2)
+#define I2C_SET_STATUS_MAF		(0x00000001 <<  1)
+#define I2C_SET_STATIS_MTD		(0x00000001 <<  0)
+
+
+#endif /* __SAA716x_I2C_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_mod.h b/drivers/media/pci/saa716x/saa716x_mod.h
new file mode 100644
index 0000000000000..273efdd99cd4e
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_mod.h
@@ -0,0 +1,50 @@
+#ifndef __SAA716x_MOD_H
+#define __SAA716x_MOD_H
+
+/* BAR = 17 bits */
+/*
+	VI0	0x00000000
+	VI1	0x00001000
+	FGPI0	0x00002000
+	FGPI1	0x00003000
+	FGPI2	0x00004000
+	FGPI3	0x00005000
+	AI0	0x00006000
+	AI1	0x00007000
+	BAM	0x00008000
+	MMU	0x00009000
+	MSI	0x0000a000
+	I2C_B	0x0000b000
+	I2C_A	0x0000c000
+	SPI	0x0000d000
+	GPIO	0x0000e000
+	PHI_0	0x0000f000
+	CGU	0x00013000
+	DCS	0x00014000
+	GREG	0x00012000
+
+	PHI_1	0x00020000
+*/
+
+#define VI0				0x00000000
+#define VI1				0x00001000
+#define FGPI0				0x00002000
+#define FGPI1				0x00003000
+#define FGPI2				0x00004000
+#define FGPI3				0x00005000
+#define AI0				0x00006000
+#define AI1				0x00007000
+#define BAM				0x00008000
+#define MMU				0x00009000
+#define MSI				0x0000a000
+#define I2C_B				0x0000b000
+#define I2C_A				0x0000c000
+#define SPI				0x0000d000
+#define GPIO				0x0000e000
+#define	PHI_0				0x0000f000
+#define GREG				0x00012000
+#define CGU				0x00013000
+#define DCS				0x00014000
+#define PHI_1				0x00020000
+
+#endif /* __SAA716x_MOD_H */
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index efee9379ad244..9ee2f09686e48 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -5,7 +5,9 @@
 #include <linux/sched.h>
 #include <linux/interrupt.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_msi_reg.h"
 #include "saa716x_msi.h"
 #include "saa716x_spi.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_msi_reg.h b/drivers/media/pci/saa716x/saa716x_msi_reg.h
new file mode 100644
index 0000000000000..ecfc0ceb07a91
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_msi_reg.h
@@ -0,0 +1,143 @@
+#ifndef __SAA716x_MSI_REG_H
+#define __SAA716x_MSI_REG_H
+
+/* -------------- MSI Registers -------------- */
+
+#define MSI_DELAY_TIMER			0x000
+#define MSI_DELAY_1CLK			(0x00000001 <<  0)
+#define MSI_DELAY_2CLK			(0x00000002 <<  0)
+
+#define MSI_INTA_POLARITY		0x004
+#define MSI_INTA_POLARITY_HIGH		(0x00000001 <<  0)
+
+#define MSI_CONFIG0			0x008
+#define MSI_CONFIG1			0x00c
+#define MSI_CONFIG2			0x010
+#define MSI_CONFIG3			0x014
+#define MSI_CONFIG4			0x018
+#define MSI_CONFIG5			0x01c
+#define MSI_CONFIG6			0x020
+#define MSI_CONFIG7			0x024
+#define MSI_CONFIG8			0x028
+#define MSI_CONFIG9			0x02c
+#define MSI_CONFIG10			0x030
+#define MSI_CONFIG11			0x034
+#define MSI_CONFIG12			0x038
+#define MSI_CONFIG13			0x03c
+#define MSI_CONFIG14			0x040
+#define MSI_CONFIG15			0x044
+#define MSI_CONFIG16			0x048
+#define MSI_CONFIG17			0x04c
+#define MSI_CONFIG18			0x050
+#define MSI_CONFIG19			0x054
+#define MSI_CONFIG20			0x058
+#define MSI_CONFIG21			0x05c
+#define MSI_CONFIG22			0x060
+#define MSI_CONFIG23			0x064
+#define MSI_CONFIG24			0x068
+#define MSI_CONFIG25			0x06c
+#define MSI_CONFIG26			0x070
+#define MSI_CONFIG27			0x074
+#define MSI_CONFIG28			0x078
+#define MSI_CONFIG29			0x07c
+#define MSI_CONFIG30			0x080
+#define MSI_CONFIG31			0x084
+#define MSI_CONFIG32			0x088
+#define MSI_CONFIG33			0x08c
+#define MSI_CONFIG34			0x090
+#define MSI_CONFIG35			0x094
+#define MSI_CONFIG36			0x098
+#define MSI_CONFIG37			0x09c
+#define MSI_CONFIG38			0x0a0
+#define MSI_CONFIG39			0x0a4
+#define MSI_CONFIG40			0x0a8
+#define MSI_CONFIG41			0x0ac
+#define MSI_CONFIG42			0x0b0
+#define MSI_CONFIG43			0x0b4
+#define MSI_CONFIG44			0x0b8
+#define MSI_CONFIG45			0x0bc
+#define MSI_CONFIG46			0x0c0
+#define MSI_CONFIG47			0x0c4
+#define MSI_CONFIG48			0x0c8
+#define MSI_CONFIG49			0x0cc
+#define MSI_CONFIG50			0x0d0
+
+#define MSI_INT_POL_EDGE_RISE		(0x00000001 << 24)
+#define MSI_INT_POL_EDGE_FALL		(0x00000002 << 24)
+#define MSI_INT_POL_EDGE_ANY		(0x00000003 << 24)
+#define MSI_TC				(0x00000007 << 16)
+#define MSI_ID				(0x0000000f <<  0)
+
+#define MSI_INT_STATUS_L		0xfc0
+#define MSI_INT_TAGACK_VI0_0		(0x00000001 <<  0)
+#define MSI_INT_TAGACK_VI0_1		(0x00000001 <<  1)
+#define MSI_INT_TAGACK_VI0_2		(0x00000001 <<  2)
+#define MSI_INT_TAGACK_VI1_0		(0x00000001 <<  3)
+#define MSI_INT_TAGACK_VI1_1		(0x00000001 <<  4)
+#define MSI_INT_TAGACK_VI1_2		(0x00000001 <<  5)
+#define MSI_INT_TAGACK_FGPI_0		(0x00000001 <<  6)
+#define MSI_INT_TAGACK_FGPI_1		(0x00000001 <<  7)
+#define MSI_INT_TAGACK_FGPI_2		(0x00000001 <<  8)
+#define MSI_INT_TAGACK_FGPI_3		(0x00000001 <<  9)
+#define MSI_INT_TAGACK_AI_0		(0x00000001 << 10)
+#define MSI_INT_TAGACK_AI_1		(0x00000001 << 11)
+#define MSI_INT_OVRFLW_VI0_0		(0x00000001 << 12)
+#define MSI_INT_OVRFLW_VI0_1		(0x00000001 << 13)
+#define MSI_INT_OVRFLW_VI0_2		(0x00000001 << 14)
+#define MSI_INT_OVRFLW_VI1_0		(0x00000001 << 15)
+#define MSI_INT_OVRFLW_VI1_1		(0x00000001 << 16)
+#define MSI_INT_OVRFLW_VI1_2		(0x00000001 << 17)
+#define MSI_INT_OVRFLW_FGPI_O		(0x00000001 << 18)
+#define MSI_INT_OVRFLW_FGPI_1		(0x00000001 << 19)
+#define MSI_INT_OVRFLW_FGPI_2		(0x00000001 << 20)
+#define MSI_INT_OVRFLW_FGPI_3		(0x00000001 << 21)
+#define MSI_INT_OVRFLW_AI_0		(0x00000001 << 22)
+#define MSI_INT_OVRFLW_AI_1		(0x00000001 << 23)
+#define MSI_INT_AVINT_VI0		(0x00000001 << 24)
+#define MSI_INT_AVINT_VI1		(0x00000001 << 25)
+#define MSI_INT_AVINT_FGPI_0		(0x00000001 << 26)
+#define MSI_INT_AVINT_FGPI_1		(0x00000001 << 27)
+#define MSI_INT_AVINT_FGPI_2		(0x00000001 << 28)
+#define MSI_INT_AVINT_FGPI_3		(0x00000001 << 29)
+#define MSI_INT_AVINT_AI_0		(0x00000001 << 30)
+#define MSI_INT_AVINT_AI_1		(0x00000001 << 31)
+
+#define MSI_INT_STATUS_H		0xfc4
+#define MSI_INT_UNMAPD_TC_INT		(0x00000001 <<  0)
+#define MSI_INT_EXTINT_0		(0x00000001 <<  1)
+#define MSI_INT_EXTINT_1		(0x00000001 <<  2)
+#define MSI_INT_EXTINT_2		(0x00000001 <<  3)
+#define MSI_INT_EXTINT_3		(0x00000001 <<  4)
+#define MSI_INT_EXTINT_4		(0x00000001 <<  5)
+#define MSI_INT_EXTINT_5		(0x00000001 <<  6)
+#define MSI_INT_EXTINT_6		(0x00000001 <<  7)
+#define MSI_INT_EXTINT_7		(0x00000001 <<  8)
+#define MSI_INT_EXTINT_8		(0x00000001 <<  9)
+#define MSI_INT_EXTINT_9		(0x00000001 << 10)
+#define MSI_INT_EXTINT_10		(0x00000001 << 11)
+#define MSI_INT_EXTINT_11		(0x00000001 << 12)
+#define MSI_INT_EXTINT_12		(0x00000001 << 13)
+#define MSI_INT_EXTINT_13		(0x00000001 << 14)
+#define MSI_INT_EXTINT_14		(0x00000001 << 15)
+#define MSI_INT_EXTINT_15		(0x00000001 << 16)
+#define MSI_INT_I2CINT_0		(0x00000001 << 17)
+#define MSI_INT_I2CINT_1		(0x00000001 << 18)
+
+#define MSI_INT_STATUS_CLR_L		0xfc8
+#define MSI_INT_STATUS_CLR_H		0xfcc
+#define MSI_INT_STATUS_SET_L		0xfd0
+#define MSI_INT_STATUS_SET_H		0xfd4
+#define MSI_INT_ENA_L			0xfd8
+#define MSI_INT_ENA_H			0xfdc
+#define MSI_INT_ENA_CLR_L		0xfe0
+#define MSI_INT_ENA_CLR_H		0xfe4
+#define MSI_INT_ENA_SET_L		0xfe8
+#define MSI_INT_ENA_SET_H		0xfec
+
+#define MSI_SW_RST			0xff0
+#define MSI_SW_RESET			(0x0001 <<  0)
+
+#define MSI_MODULE_ID			0xffc
+
+
+#endif /* __SAA716x_MSI_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index f0d2df4bd940d..e3f45e8c89421 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -12,7 +12,6 @@
 #include <linux/sched.h>
 #include <linux/interrupt.h>
 
-#include "saa716x_reg.h"
 #include "saa716x_spi.h"
 #include "saa716x_msi.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 7382f9711e77b..0535cce72e7c7 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -1,6 +1,9 @@
 #include <linux/kernel.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_phi_reg.h"
+
 #include "saa716x_spi.h"
 #include "saa716x_phi.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_phi_reg.h b/drivers/media/pci/saa716x/saa716x_phi_reg.h
new file mode 100644
index 0000000000000..08f0aa7b7b23c
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_phi_reg.h
@@ -0,0 +1,100 @@
+#ifndef __SAA716x_PHI_REG_H
+#define __SAA716x_PHI_REG_H
+
+/* -------------- PHI_0 Registers -------------- */
+
+#define PHI_0_MODE			0x0000
+#define PHI_0_0_CONFIG			0x0008
+#define PHI_0_1_CONFIG			0x000c
+#define PHI_0_2_CONFIG			0x0010
+#define PHI_0_3_CONFIG			0x0014
+
+#define PHI_POLARITY			0x0038
+#define PHI_TIMEOUT			0x003c
+#define PHI_SW_RST			0x0ff0
+
+#define PHI_0_0_RW_0			0x1000
+#define PHI_0_0_RW_511			0x17fc
+
+#define PHI_0_1_RW_0			0x1800
+#define PHI_0_1_RW_511			0x1ffc
+
+#define PHI_0_2_RW_0			0x2000
+#define PHI_0_2_RW_511			0x27fc
+
+#define PHI_0_3_RW_0			0x2800
+#define PHI_0_3_RW_511			0x2ffc
+
+#define PHI_CSN_DEASSERT		(0x00000001 <<  2)
+#define PHI_AUTO_INCREMENT		(0x00000001 <<  1)
+#define PHI_FIFO_MODE			(0x00000001 <<  0)
+
+#define PHI_DELAY_RD_WR			(0x0000001f << 27)
+#define PHI_EXTEND_RDY3			(0x00000003 << 25)
+#define PHI_EXTEND_RDY2			(0x00000003 << 23)
+#define PHI_EXTEND_RDY1			(0x00000003 << 21)
+#define PHI_EXTEND_RDY0			(0x00000003 << 19)
+#define PHI_RDY3_OD			(0x00000001 << 18)
+#define PHI_RDY2_OD			(0x00000001 << 17)
+#define PHI_RDY1_OD			(0x00000001 << 16)
+#define PHI_RDY0_OD			(0x00000001 << 15)
+#define PHI_ALE_POL			(0x00000001 << 14)
+#define PHI_WRN_POL			(0x00000001 << 13)
+#define PHI_RDN_POL			(0x00000001 << 12)
+#define PHI_RDY3_POL			(0x00000001 << 11)
+#define PHI_RDY2_POL			(0x00000001 << 10)
+#define PHI_RDY1_POL			(0x00000001 <<  9)
+#define PHI_RDY0_POL			(0x00000001 <<  8)
+#define PHI_CSN7_POL			(0x00000001 <<  7)
+#define PHI_CSN6_POL			(0x00000001 <<  6)
+#define PHI_CSN5_POL			(0x00000001 <<  5)
+#define PHI_CSN4_POL			(0x00000001 <<  4)
+#define PHI_CSN3_POL			(0x00000001 <<  3)
+#define PHI_CSN2_POL			(0x00000001 <<  2)
+#define PHI_CSN1_POL			(0x00000001 <<  1)
+#define PHI_CSN0_POL			(0x00000001 <<  0)
+
+/* -------------- PHI_1 Registers -------------- */
+
+#define	PHI_1				0x00020000
+
+#define PHI_1_MODE			0x00004
+#define PHI_1_0_CONFIG			0x00018
+#define PHI_1_1_CONFIG			0x0001c
+#define PHI_1_2_CONFIG			0x00020
+#define PHI_1_3_CONFIG			0x00024
+#define PHI_1_4_CONFIG			0x00028
+#define PHI_1_5_CONFIG			0x0002c
+#define PHI_1_6_CONFIG			0x00030
+#define PHI_1_7_CONFIG			0x00034
+
+#define PHI_1_0_RW_0			0x00000
+#define PHI_1_0_RW_16383		0x0fffc
+
+#define PHI_1_1_RW_0			0x1000
+#define PHI_1_1_RW_16383		0x1ffc
+
+#define PHI_1_2_RW_0			0x2000
+#define PHI_1_2_RW_16383		0x2ffc
+
+#define PHI_1_3_RW_0			0x3000
+#define PHI_1_3_RW_16383		0x3ffc
+
+#define PHI_1_4_RW_0			0x4000
+#define PHI_1_4_RW_16383		0x4ffc
+
+#define PHI_1_5_RW_0			0x5000
+#define PHI_1_5_RW_16383		0x5ffc
+
+#define PHI_1_6_RW_0			0x6000
+#define PHI_1_6_RW_16383		0x6ffc
+
+#define PHI_1_7_RW_0			0x7000
+#define PHI_1_7_RW_16383		0x7ffc
+
+
+/* BAR = 20 bits */
+/* -------------- PHI1 Registers -------------- */
+
+
+#endif /* __SAA716x_PHI_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_spi.c b/drivers/media/pci/saa716x/saa716x_spi.c
index 1a1941d2bb4c3..6a1ec10c586ea 100644
--- a/drivers/media/pci/saa716x/saa716x_spi.c
+++ b/drivers/media/pci/saa716x/saa716x_spi.c
@@ -5,7 +5,9 @@
 
 #include <linux/spi/spi.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_spi_reg.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_spi_reg.h b/drivers/media/pci/saa716x/saa716x_spi_reg.h
new file mode 100644
index 0000000000000..c51abced3dcc1
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_spi_reg.h
@@ -0,0 +1,27 @@
+#ifndef __SAA716x_SPI_REG_H
+#define __SAA716x_SPI_REG_H
+
+/* -------------- SPI Registers -------------- */
+
+#define SPI_CONTROL_REG			0x000
+#define SPI_SERIAL_INTER_ENABLE		(0x00000001 <<  7)
+#define SPI_LSB_FIRST_ENABLE		(0x00000001 <<  6)
+#define SPI_MODE_SELECT			(0x00000001 <<  5)
+#define SPI_CLOCK_POLARITY		(0x00000001 <<  4)
+#define SPI_CLOCK_PHASE			(0x00000001 <<  3)
+
+#define SPI_STATUS			0x004
+#define SPI_TRANSFER_FLAG		(0x00000001 <<  7)
+#define SPI_WRITE_COLLISSION		(0x00000001 <<  6)
+#define SPI_READ_OVERRUN		(0x00000001 <<  5)
+#define SPI_MODE_FAULT			(0x00000001 <<  4)
+#define SPI_SLAVE_ABORT			(0x00000001 <<  3)
+
+#define SPI_DATA			0x008
+#define SPI_BIDI_DATA			(0x000000ff <<  0)
+
+#define SPI_CLOCK_COUNTER		0x00c
+#define SPI_CLOCK			(0x00000001 <<  0)
+
+
+#endif /* __SAA716x_SPI_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 3ee3a0e5fb377..4cd4c810db504 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -1,6 +1,8 @@
 #include <linux/kernel.h>
 
-#include "saa716x_reg.h"
+#include "saa716x_mod.h"
+
+#include "saa716x_vip_reg.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_vip_reg.h b/drivers/media/pci/saa716x/saa716x_vip_reg.h
new file mode 100644
index 0000000000000..2d773bd1d00d4
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_vip_reg.h
@@ -0,0 +1,127 @@
+#ifndef __SAA716x_VIP_REG_H
+#define __SAA716x_VIP_REG_H
+
+/* -------------- VIP Registers -------------- */
+
+#define VI_MODE				0x000
+#define VID_CFEN			(0x00000003 << 30)
+#define VID_OSM				(0x00000001 << 29)
+#define VID_FSEQ			(0x00000001 << 28)
+#define AUX_CFEN			(0x00000003 << 26)
+#define AUX_OSM				(0x00000001 << 25)
+#define AUX_FSEQ			(0x00000001 << 24)
+#define AUX_ANC_DATA			(0x00000003 << 22)
+#define AUX_ANC_RAW			(0x00000001 << 21)
+#define RST_ON_ERR			(0x00000001 << 17)
+#define SOFT_RESET			(0x00000001 << 16)
+#define IFF_CLAMP			(0x00000001 << 14)
+#define IFF_MODE			(0x00000003 << 12)
+#define DFF_CLAMP			(0x00000001 << 10)
+#define DFF_MODE			(0x00000003 <<  8)
+#define HSP_CLAMP			(0x00000001 <<  3)
+#define HSP_RGB				(0x00000001 <<  2)
+#define HSP_MODE			(0x00000003 <<  0)
+
+#define RCRB_CTRL			0x004
+#define RCRB_CFG_ADDR			0x008
+#define RCRB_CFG_EXT_ADDR		0x00c
+#define RCRB_IO_ADDR			0x010
+#define RCRB_MEM_LADDR			0x014
+#define RCRB_MEM_UADDR			0x018
+#define RCRB_DATA			0x01c
+#define RCRB_MASK			0x020
+#define RCRB_MSG_HDR			0x040
+#define RCRB_MSG_PL0			0x044
+#define RCRB_MSG_PL1			0x048
+
+#define ID_MASK0			0x020
+#define VI_ID_MASK_0			(0x000000ff <<  8)
+#define VI_DATA_ID_0			(0x000000ff <<  0)
+
+#define ID_MASK1			0x024
+#define VI_ID_MASK_1			(0x000000ff <<  8)
+#define VI_DATA_ID_1			(0x000000ff <<  0)
+
+#define VIP_LINE_THRESH			0x040
+#define VI_LCTHR			(0x000007ff <<  0)
+
+#define VIN_FORMAT			0x100
+#define VI_VSRA				(0x00000003 << 30)
+#define VI_SYNCHD			(0x00000001 << 25)
+#define VI_DUAL_STREAM			(0x00000001 << 24)
+#define VI_NHDAUX			(0x00000001 << 20)
+#define VI_NPAR				(0x00000001 << 19)
+#define VI_VSEL				(0x00000003 << 14)
+#define VI_TWOS				(0x00000001 << 13)
+#define VI_TPG				(0x00000001 << 12)
+#define VI_FREF				(0x00000001 << 10)
+#define VI_FTGL				(0x00000001 <<  9)
+#define VI_SF				(0x00000001 <<  3)
+#define VI_FZERO			(0x00000001 <<  2)
+#define VI_REVS				(0x00000001 <<  1)
+#define VI_REHS				(0x00000001 <<  0)
+
+#define TC76543210			0x800
+#define TCFEDCBA98			0x804
+#define PHYCFG				0x900
+#define CONFIG				0xfd4
+#define INT_ENABLE_CLR			0xfd8
+#define INT_ENABLE_SET			0xfdc
+
+
+#define INT_STATUS			0xfe0
+#define VI_STAT_FID_AUX			(0x00000001 << 31)
+#define VI_STAT_FID_VID			(0x00000001 << 30)
+#define VI_STAT_FID_VPI			(0x00000001 << 29)
+#define VI_STAT_LINE_COUNT		(0x00000fff << 16)
+#define VI_STAT_AUX_OVRFLW		(0x00000001 <<  9)
+#define VI_STAT_VID_OVRFLW		(0x00000001 <<  8)
+#define VI_STAT_WIN_SEQBRK		(0x00000001 <<  7)
+#define VI_STAT_FID_SEQBRK		(0x00000001 <<  6)
+#define VI_STAT_LINE_THRESH		(0x00000001 <<  5)
+#define VI_STAT_AUX_WRAP		(0x00000001 <<  4)
+#define VI_STAT_AUX_START_IN		(0x00000001 <<  3)
+#define VI_STAT_AUX_END_OUT		(0x00000001 <<  2)
+#define VI_STAT_VID_START_IN		(0x00000001 <<  1)
+#define VI_STAT_VID_END_OUT		(0x00000001 <<  0)
+
+#define INT_ENABLE			0xfe4
+#define VI_ENABLE_AUX_OVRFLW		(0x00000001 <<  9)
+#define VI_ENABLE_VID_OVRFLW		(0x00000001 <<  8)
+#define VI_ENABLE_WIN_SEQBRK		(0x00000001 <<  7)
+#define VI_ENABLE_FID_SEQBRK		(0x00000001 <<  6)
+#define VI_ENABLE_LINE_THRESH		(0x00000001 <<  5)
+#define VI_ENABLE_AUX_WRAP		(0x00000001 <<  4)
+#define VI_ENABLE_AUX_START_IN		(0x00000001 <<  3)
+#define VI_ENABLE_AUX_END_OUT		(0x00000001 <<  2)
+#define VI_ENABLE_VID_START_IN		(0x00000001 <<  1)
+#define VI_ENABLE_VID_END_OUT		(0x00000001 <<  0)
+
+#define INT_CLR_STATUS			0xfe8
+#define VI_CLR_STATUS_AUX_OVRFLW	(0x00000001 <<  9)
+#define VI_CLR_STATUS_VID_OVRFLW	(0x00000001 <<  8)
+#define VI_CLR_STATUS_WIN_SEQBRK	(0x00000001 <<  7)
+#define VI_CLR_STATUS_FID_SEQBRK	(0x00000001 <<  6)
+#define VI_CLR_STATUS_LINE_THRESH	(0x00000001 <<  5)
+#define VI_CLR_STATUS_AUX_WRAP		(0x00000001 <<  4)
+#define VI_CLR_STATUS_AUX_START_IN	(0x00000001 <<  3)
+#define VI_CLR_STATUS_AUX_END_OUT	(0x00000001 <<  2)
+#define VI_CLR_STATUS_VID_START_IN	(0x00000001 <<  1)
+#define VI_CLR_STATUS_VID_END_OUT	(0x00000001 <<  0)
+
+#define INT_SET_STATUS			0xfec
+#define VI_SET_STATUS_AUX_OVRFLW	(0x00000001 <<  9)
+#define VI_SET_STATUS_VID_OVRFLW	(0x00000001 <<  8)
+#define VI_SET_STATUS_WIN_SEQBRK	(0x00000001 <<  7)
+#define VI_SET_STATUS_FID_SEQBRK	(0x00000001 <<  6)
+#define VI_SET_STATUS_LINE_THRESH	(0x00000001 <<  5)
+#define VI_SET_STATUS_AUX_WRAP		(0x00000001 <<  4)
+#define VI_SET_STATUS_AUX_START_IN	(0x00000001 <<  3)
+#define VI_SET_STATUS_AUX_END_OUT	(0x00000001 <<  2)
+#define VI_SET_STATUS_VID_START_IN	(0x00000001 <<  1)
+#define VI_SET_STATUS_VID_END_OUT	(0x00000001 <<  0)
+
+#define VIP_POWER_DOWN			0xff4
+#define VI_PWR_DWN			(0x00000001 << 31)
+
+#endif /* __SAA716x_VIP_REG_H */

From 677bbefc7968f014c6f3ba9ef52cf1c585453017 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:32:53 +0400
Subject: [PATCH 116/364] saa716x: Fix register definition typo

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c     | 2 +-
 drivers/media/pci/saa716x/saa716x_msi_reg.h | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 9ee2f09686e48..e028839892795 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -181,7 +181,7 @@ int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h)
 	if (stat_l & MSI_INT_OVRFLW_VI1_2)
 		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[17]);
 
-	if (stat_l & MSI_INT_OVRFLW_FGPI_O)
+	if (stat_l & MSI_INT_OVRFLW_FGPI_0)
 		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[18]);
 
 	if (stat_l & MSI_INT_OVRFLW_FGPI_1)
diff --git a/drivers/media/pci/saa716x/saa716x_msi_reg.h b/drivers/media/pci/saa716x/saa716x_msi_reg.h
index ecfc0ceb07a91..d9a12c7aeb684 100644
--- a/drivers/media/pci/saa716x/saa716x_msi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_msi_reg.h
@@ -87,7 +87,7 @@
 #define MSI_INT_OVRFLW_VI1_0		(0x00000001 << 15)
 #define MSI_INT_OVRFLW_VI1_1		(0x00000001 << 16)
 #define MSI_INT_OVRFLW_VI1_2		(0x00000001 << 17)
-#define MSI_INT_OVRFLW_FGPI_O		(0x00000001 << 18)
+#define MSI_INT_OVRFLW_FGPI_0		(0x00000001 << 18)
 #define MSI_INT_OVRFLW_FGPI_1		(0x00000001 << 19)
 #define MSI_INT_OVRFLW_FGPI_2		(0x00000001 << 20)
 #define MSI_INT_OVRFLW_FGPI_3		(0x00000001 << 21)

From f300a3627251b9448ed6571c1dbbb8e8d3151463 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:33:39 +0400
Subject: [PATCH 117/364] saa716x: Add function declaration

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.h | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.h b/drivers/media/pci/saa716x/saa716x_cgu.h
index 05332b9d2d194..5353cf239db8d 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.h
+++ b/drivers/media/pci/saa716x/saa716x_cgu.h
@@ -55,5 +55,7 @@ struct saa716x_cgu {
 };
 
 extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
+extern int saa716x_set_clk_internal(struct saa716x_dev *saa716x, u32 port);
+extern int saa716x_set_clk_external(struct saa716x_dev *saa716x, u32 port);
 
 #endif /* __SAA716x_CGU_H */

From c0727dccb6004651967573341118bfec31882719 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:50:41 +0400
Subject: [PATCH 118/364] saa716x: Fix FGPI internal clock divider state

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index f4e51387181b5..7198309ba1e27 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -260,28 +260,28 @@ int saa716x_set_clk_external(struct saa716x_dev *saa716x, u32 port)
 		break;
 
 	case PORT_FGPI0:
-		cgu->clk_int_port[PORT_FGPI0] = 1;
+		cgu->clk_int_port[PORT_FGPI0] = 0;
 
 		SAA716x_EPWR(CGU, CGU_FS1_7, 0x4); /* FGPI 0 clk */
 		SAA716x_EPWR(CGU, CGU_ESR_7, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI1:
-		cgu->clk_int_port[PORT_FGPI1] = 1;
+		cgu->clk_int_port[PORT_FGPI1] = 0;
 
 		SAA716x_EPWR(CGU, CGU_FS1_8, 0x5); /* FGPI 1 clk */
 		SAA716x_EPWR(CGU, CGU_ESR_8, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI2:
-		cgu->clk_int_port[PORT_FGPI2] = 1;
+		cgu->clk_int_port[PORT_FGPI2] = 0;
 
 		SAA716x_EPWR(CGU, CGU_FS1_9, 0x6); /* FGPI 2 clk */
 		SAA716x_EPWR(CGU, CGU_ESR_9, 0x0); /* disable divider */
 		break;
 
 	case PORT_FGPI3:
-		cgu->clk_int_port[PORT_FGPI3] = 1;
+		cgu->clk_int_port[PORT_FGPI3] = 0;
 
 		SAA716x_EPWR(CGU, CGU_FS1_10, 0x7); /* FGPI 3 clk */
 		SAA716x_EPWR(CGU, CGU_ESR_10, 0x0); /* disable divider */

From d358af12c191b6739374ec4dac2d21e78259b235 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:51:26 +0400
Subject: [PATCH 119/364] saa716x: Fix dmabuf allocation

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.c  | 32 ++++++++++++++++--------
 drivers/media/pci/saa716x/saa716x_dma.h  |  4 ++-
 drivers/media/pci/saa716x/saa716x_fgpi.c |  4 +--
 drivers/media/pci/saa716x/saa716x_fgpi.h |  4 +--
 4 files changed, 28 insertions(+), 16 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index ab656424d9e05..7b3f9e4041800 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -25,12 +25,12 @@ static int saa716x_allocate_ptable(struct saa716x_dmabuf *dmabuf)
 		return -ENOMEM;
 	}
 
-	*dmabuf->mem_ptab_phys = dma_map_single(&pdev->dev,
+	dmabuf->mem_ptab_phys = dma_map_single(&pdev->dev,
 						dmabuf->mem_ptab_virt,
 						SAA716x_PAGE_SIZE,
 						DMA_TO_DEVICE);
 
-	if (dmabuf->mem_ptab_phys == NULL) {
+	if (dmabuf->mem_ptab_phys == 0) {
 		dprintk(SAA716x_ERROR, 1, "ERROR: map memory failed !");
 		return -ENOMEM;
 	}
@@ -49,13 +49,13 @@ static void saa716x_free_ptable(struct saa716x_dmabuf *dmabuf)
 	dprintk(SAA716x_DEBUG, 1, "SG Page table free");
 
 	/* free physical PCI memory */
-	if (dmabuf->mem_ptab_phys != NULL) {
+	if (dmabuf->mem_ptab_phys != 0) {
 		dma_unmap_single(&pdev->dev,
-				 *dmabuf->mem_ptab_phys,
+				 dmabuf->mem_ptab_phys,
 				 SAA716x_PAGE_SIZE,
 				 DMA_TO_DEVICE);
 
-		dmabuf->mem_ptab_phys = NULL;
+		dmabuf->mem_ptab_phys = 0;
 	}
 
 	/* free kernel memory */
@@ -169,13 +169,13 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 	dprintk(SAA716x_DEBUG, 1, "SG page fill");
 
 	/* make page writable for the PC */
-	dma_sync_single_for_cpu(&pdev->dev, *dmabuf->mem_ptab_phys, SAA716x_PAGE_SIZE, DMA_TO_DEVICE);
+	dma_sync_single_for_cpu(&pdev->dev, dmabuf->mem_ptab_phys, SAA716x_PAGE_SIZE, DMA_TO_DEVICE);
 	page = dmabuf->mem_ptab_virt;
 
 	/* create page table */
 	for (i = 0; i < pages; i++) {
 		sg_cur = &sg_list[i];
-		BUG_ON(!((sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE));
+		BUG_ON(!(((sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE) == 0));
 
 		if (i == 0)
 			dmabuf->offset = (sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE;
@@ -189,7 +189,7 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 				continue;
 			}
 
-			addr = ((u8 )sg_dma_address(sg_cur)) + (j * SAA716x_PAGE_SIZE) - sg_cur->offset;
+			addr = ((u64)sg_dma_address(sg_cur)) + (j * SAA716x_PAGE_SIZE) - sg_cur->offset;
 
 			BUG_ON(addr == 0);
 			page[k * 2] = (u32 )addr; /* Low */
@@ -206,7 +206,7 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 
 	/* make "page table" page writable for the PC */
 	dma_sync_single_for_device(&pdev->dev,
-				   *dmabuf->mem_ptab_phys,
+				   dmabuf->mem_ptab_phys,
 				   SAA716x_PAGE_SIZE,
 				   DMA_TO_DEVICE);
 
@@ -256,7 +256,7 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 
 	dmabuf->mem_virt_noalign	= NULL;
 	dmabuf->mem_virt		= NULL;
-	dmabuf->mem_ptab_phys		= NULL;
+	dmabuf->mem_ptab_phys		= 0;
 	dmabuf->mem_ptab_virt		= NULL;
 
 	dmabuf->list_len		= 0;
@@ -292,3 +292,15 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 err1:
 	return ret;
 }
+
+void saa716x_dmabuf_free(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dmabuf)
+{
+	struct pci_dev *pdev		= saa716x->pdev;
+
+	BUG_ON(saa716x == NULL);
+	BUG_ON(dmabuf == NULL);
+
+	dma_unmap_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len, DMA_FROM_DEVICE);
+	saa716x_dmabuf_sgfree(dmabuf);
+	saa716x_free_ptable(dmabuf);
+}
diff --git a/drivers/media/pci/saa716x/saa716x_dma.h b/drivers/media/pci/saa716x/saa716x_dma.h
index d80e5fe9d8f74..f92d667b5870e 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.h
+++ b/drivers/media/pci/saa716x/saa716x_dma.h
@@ -16,7 +16,7 @@ struct saa716x_dmabuf {
 
 	void			*mem_virt_noalign;
 	void			*mem_virt; /* page aligned */
-	dma_addr_t		*mem_ptab_phys;
+	dma_addr_t		mem_ptab_phys;
 	void			*mem_ptab_virt;
 	void			*sg_list; /* SG list */
 
@@ -29,6 +29,8 @@ struct saa716x_dmabuf {
 extern int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x,
 				struct saa716x_dmabuf *dmabuf,
 				int size);
+extern void saa716x_dmabuf_free(struct saa716x_dev *saa716x,
+				struct saa716x_dmabuf *dmabuf);
 
 extern void saa716x_dmabufsync_dev(struct saa716x_dmabuf *dmabuf);
 extern void saa716x_dmabufsync_cpu(struct saa716x_dmabuf *dmabuf);
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index bb5bb0f68bb45..32f598f0dac3b 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -81,10 +81,8 @@ static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
 
 	u32 dma_ch, config, i;
 
-	BUG_ON(dmabuf->mem_ptab_phys == NULL);
-
 	for (i = 0; i < FGPI_BUFFERS; i++)
-		BUG_ON(dmabuf[i].mem_ptab_phys);
+		BUG_ON((dmabuf[i].mem_ptab_phys == 0));
 
 	dma_ch = mmu_pta_base[channel]; /* DMA x */
 	config = mmu_dma_cfg[channel]; /* DMACONFIGx */
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index bb3d00f7aab0f..23417b5d004cf 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -2,8 +2,8 @@
 #define __SAA716x_FGPI_H
 
 #define FGPI_BUFFERS		8
-#define PTA_LSB(__mem)		((u32 ) *(__mem))
-#define PTA_MSB(__mem)		((u32 ) (*(__mem) >> 32))
+#define PTA_LSB(__mem)		((u32 ) (__mem))
+#define PTA_MSB(__mem)		((u32 ) ((u64)(__mem) >> 32))
 
 #define BAM_DMA_BUF_MODE_BASE		0x0d8
 #define BAM_DMA_BUF_MODE_OFFSET		0x24

From 64855498e7b07530c686dec1bf8831c43053d204 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:52:38 +0400
Subject: [PATCH 120/364] saa716x: Cleanup debug prints

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 291e936fed800..d5d3019ef6c34 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -233,7 +233,6 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
 	unsigned long timeout;
-	u8 * data;
 
 	timeout = 1 * HZ;
 	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
@@ -252,9 +251,6 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 
 	sti7109->cmd_ready = 0;
 	sti7109->result_avail = 0;
-	data = (u8 *) cmd->cmd_data;
-	dprintk(SAA716x_INFO, 1, "cmd %02X %02X %02X %02X %02X %02X",
-		data[0], data[1], data[2], data[3], data[4], data[5]);
 	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
@@ -361,7 +357,6 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	}
 
 	data->data_handle = sti7109->data_handle;
-	dprintk(SAA716x_INFO, 1, "data %d", data->data_handle);
 	sti7109->data_handle++;
 	return 0;
 }
@@ -867,7 +862,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			value = __cpu_to_be32(value);
 			length = (value >> 16) + 2;
 
-			dprintk(SAA716x_INFO, 1, "CMD length: %d", length);
+			/*dprintk(SAA716x_INFO, 1, "CMD length: %d", length);*/
 
 			if (length > MAX_RESULT_LEN) {
 				dprintk(SAA716x_ERROR, 1, "CMD length %d > %d", length, MAX_RESULT_LEN);

From 2641e8500d1886dcd3c08e0925aebf59aba4c10a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:53:34 +0400
Subject: [PATCH 121/364] saa716x: Handle failure correctly

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index d5d3019ef6c34..0a044a93f6183 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -721,7 +721,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	if (timeout == -ERESTARTSYS || sti7109->boot_finished == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
-			goto fail5;
+			goto fail6;
 		}
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for boot finish");
 		goto fail6;

From 6de169838d58861f54048c70d9900c0613bc4c1a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:54:35 +0400
Subject: [PATCH 122/364] saa716x: Handle proper buffer flush

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 0a044a93f6183..40048e65355e2 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -503,6 +503,7 @@ static int dvb_video_ioctl(struct inode *inode, struct file *file,
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
 		}
 		else {
+			dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
 			/* select FIFO 1 for TS mux 1 */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX1, 4);
 			/* reset FIFO 1 */
@@ -512,6 +513,11 @@ static int dvb_video_ioctl(struct inode *inode, struct file *file,
 		}
 		break;
 	}
+	case VIDEO_CLEAR_BUFFER:
+	{
+		dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
+		break;
+	}
 	default:
 		ret = -ENOIOCTLCMD;
 		break;

From 2dee9a559d7ba51af7a8c07fb6d2fb5ffc55b9ee Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:55:50 +0400
Subject: [PATCH 123/364] saa716x: FGPI DMA handling fixes

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 199 +++++++++++++++++++----
 drivers/media/pci/saa716x/saa716x_fgpi.h |  11 ++
 drivers/media/pci/saa716x/saa716x_priv.h |   4 +
 3 files changed, 178 insertions(+), 36 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 32f598f0dac3b..8aa3df7e97095 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -4,6 +4,7 @@
 
 #include "saa716x_fgpi_reg.h"
 #include "saa716x_dma_reg.h"
+#include "saa716x_msi_reg.h"
 
 #include "saa716x_dma.h"
 #include "saa716x_fgpi.h"
@@ -62,6 +63,27 @@ static const u32 bamdma_bufmode[] = {
 	BAM_FGPI3_DMA_BUF_MODE
 };
 
+static const u32 msi_int_tagack[] = {
+	MSI_INT_TAGACK_FGPI_0,
+	MSI_INT_TAGACK_FGPI_1,
+	MSI_INT_TAGACK_FGPI_2,
+	MSI_INT_TAGACK_FGPI_3
+};
+
+static const u32 msi_int_ovrflw[] = {
+	MSI_INT_OVRFLW_FGPI_0,
+	MSI_INT_OVRFLW_FGPI_1,
+	MSI_INT_OVRFLW_FGPI_2,
+	MSI_INT_OVRFLW_FGPI_3
+};
+
+static const u32 msi_int_avint[] = {
+	MSI_INT_AVINT_FGPI_0,
+	MSI_INT_AVINT_FGPI_1,
+	MSI_INT_AVINT_FGPI_2,
+	MSI_INT_AVINT_FGPI_3
+};
+
 void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel)
 {
 	struct saa716x_dev *saa716x = dmabuf->saa716x;
@@ -70,8 +92,8 @@ void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel)
 
 	fgpi_port = fgpi_ch[channel];
 
-	SAA716x_EPWR(fgpi_port, 0xfe4, 0); /* disable FGPI IRQ */
-	SAA716x_EPWR(fgpi_port, 0xfe8, 0x7f); /* clear status */
+	SAA716x_EPWR(fgpi_port, INT_ENABLE, 0); /* disable FGPI IRQ */
+	SAA716x_EPWR(fgpi_port, INT_CLR_STATUS, 0x7f); /* clear status */
 }
 EXPORT_SYMBOL_GPL(saa716x_fgpiint_disable);
 
@@ -79,38 +101,37 @@ static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
 {
 	struct saa716x_dev *saa716x = dmabuf->saa716x;
 
-	u32 dma_ch, config, i;
+	u32 config, i;
 
 	for (i = 0; i < FGPI_BUFFERS; i++)
 		BUG_ON((dmabuf[i].mem_ptab_phys == 0));
 
-	dma_ch = mmu_pta_base[channel]; /* DMA x */
 	config = mmu_dma_cfg[channel]; /* DMACONFIGx */
 
 	SAA716x_EPWR(MMU, config, (FGPI_BUFFERS - 1));
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, dma_ch + MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
+	SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
+	SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
 
 	return 0;
 }
 
-u32 saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
+int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 			   struct fgpi_stream_params *stream_params,
-			   int channel)
+			   int port)
 {
 	struct saa716x_dev *saa716x = dmabuf->saa716x;
 
@@ -118,15 +139,15 @@ u32 saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	u32 D1_XY_END, offst_1, offst_2;
 	int i = 0;
 
-	fgpi_port = fgpi_ch[channel];
-	buf_mode = bamdma_bufmode[channel];
+	fgpi_port = fgpi_ch[port];
+	buf_mode = bamdma_bufmode[port];
 
 	/* Reset FGPI block */
 	SAA716x_EPWR(fgpi_port, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
 
 	/* Reset DMA channel */
-	SAA716x_EPWR(BAM, BAM_DMA_BUF_MODE(channel), 0x00000040);
-	saa716x_init_ptables(dmabuf, channel);
+	SAA716x_EPWR(BAM, buf_mode, 0x00000040);
+	saa716x_init_ptables(dmabuf, saa716x->fgpi[port].dma_channel);
 
 
 	/* monitor BAM reset */
@@ -146,14 +167,14 @@ u32 saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	SAA716x_EPWR(BAM, buf_mode, FGPI_BUFFERS - 1);
 
 	/* initialize all available address offsets */
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_0(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_1(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_2(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_3(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_4(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_5(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_6(channel), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_7(channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_0(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_1(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_2(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_3(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_4(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_5(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_6(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_7(port), 0x0);
 
 	/* get module ID */
 	mid = SAA716x_EPRD(fgpi_port, FGPI_MODULE_ID);
@@ -164,6 +185,8 @@ u32 saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	SAA716x_EPWR(fgpi_port, FGPI_REC_SIZE, stream_params->samples * (stream_params->bits / 8));
 	SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch);
 
+	offst_1 = 0;
+	offst_2 = 0;
 	switch (stream_params->stream_type) {
 	case FGPI_TRANSPORT_STREAM:
 		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000080);
@@ -210,8 +233,112 @@ u32 saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		break;
 	}
 
-	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, ((channel + 6) << 21) + offst_1);
-	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, ((channel + 6) << 21) + offst_2);
+	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, ((saa716x->fgpi[port].dma_channel) << 21) + offst_1);
+	SAA716x_EPWR(fgpi_port, FGPI_BASE_2, ((saa716x->fgpi[port].dma_channel) << 21) + offst_2);
+
+	return 0;
+}
+
+int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
+		       struct fgpi_stream_params *stream_params)
+{
+	u32 fgpi_port;
+	u32 config;
+	u32 val;
+	u32 i;
+
+	fgpi_port = fgpi_ch[port];
+
+	SAA716x_EPWR(fgpi_port, FGPI_INTERFACE, 0);
+	msleep(10);
+
+	if (saa716x_fgpi_setparams(saa716x->fgpi[port].dma_buf, stream_params, port) != 0) {
+		return -EIO;
+	}
+
+	config = mmu_dma_cfg[saa716x->fgpi[port].dma_channel]; /* DMACONFIGx */
+
+	val = SAA716x_EPRD(MMU, config);
+	SAA716x_EPWR(MMU, config, val & ~0x40);
+	SAA716x_EPWR(MMU, config, val | 0x40);
+
+	SAA716x_EPWR(fgpi_port, INT_ENABLE, 0x7F);
+
+	val = SAA716x_EPRD(MMU, config);
+	i = 0;
+	while (i < 500) {
+		if (val & 0x80)
+			break;
+		msleep(10);
+		val = SAA716x_EPRD(MMU, config);
+		i++;
+	}
+
+	if (!(val & 0x80)) {
+		dprintk(SAA716x_ERROR, 1, "Error: PTE pre-fetch failed!");
+		return -EIO;
+	}
+
+	val = SAA716x_EPRD(fgpi_port, FGPI_CONTROL);
+	val |= 0x3000;
+
+	saa716x_set_clk_external(saa716x, saa716x->fgpi[port].dma_channel);
+
+	SAA716x_EPWR(fgpi_port, FGPI_CONTROL, val);
+
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_tagack[port]);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_ovrflw[port]);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_avint[port]);
+
+	return 0;
+}
+
+int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port)
+{
+	u32 fgpi_port;
+	u32 val;
+
+	fgpi_port = fgpi_ch[port];
+
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_tagack[port]);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_ovrflw[port]);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_avint[port]);
+
+	val = SAA716x_EPRD(fgpi_port, FGPI_CONTROL);
+	val &= ~0x3000;
+	SAA716x_EPWR(fgpi_port, FGPI_CONTROL, val);
+
+	saa716x_set_clk_internal(saa716x, saa716x->fgpi[port].dma_channel);
+
+	return 0;
+}
+
+int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port)
+{
+	int i;
+	int ret;
+
+	saa716x->fgpi[port].dma_channel = port + 6;
+	for (i = 0; i < FGPI_BUFFERS; i++)
+	{
+		/* TODO: what is a good size for TS DMA buffer? */
+		ret = saa716x_dmabuf_alloc(saa716x, &saa716x->fgpi[port].dma_buf[i], 16 * SAA716x_PAGE_SIZE);
+		if (ret < 0) {
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port)
+{
+	int i;
+
+	for (i = 0; i < FGPI_BUFFERS; i++)
+	{
+		saa716x_dmabuf_free(saa716x, &saa716x->fgpi[port].dma_buf[i]);
+	}
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index 23417b5d004cf..e5fc5fc2b2274 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -88,6 +88,17 @@ struct fgpi_stream_params {
 
 struct saa716x_dmabuf;
 
+struct saa716x_fgpi_stream_port {
+	u8			dma_channel;
+	struct saa716x_dmabuf	dma_buf[FGPI_BUFFERS];
+};
+
 extern void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel);
+extern int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
+			      struct fgpi_stream_params *stream_params);
+extern int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port);
+
+extern int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port);
+extern int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port);
 
 #endif /* __SAA716x_FGPI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index d970bf9dd2872..90a9effbcfd4f 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -13,6 +13,8 @@
 #include "saa716x_i2c.h"
 #include "saa716x_boot.h"
 #include "saa716x_cgu.h"
+#include "saa716x_dma.h"
+#include "saa716x_fgpi.h"
 
 #include "dvbdev.h"
 #include "dvb_demux.h"
@@ -156,6 +158,8 @@ struct saa716x_dev {
 	spinlock_t			gpio_lock;
 	/* DMA */
 
+	struct saa716x_fgpi_stream_port	fgpi[4];
+
 	u32				id_offst;
 	u32				id_len;
 	void				*priv;

From 41d063ee7dbfc3fde2a55c989e27f02a5a1d5884 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 00:56:46 +0400
Subject: [PATCH 124/364] saa716x: Finally! we have stream capture

From: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 19 ++++++++++
 drivers/media/pci/saa716x/saa716x_ff.c   | 47 ++++++++++++++++++++++--
 2 files changed, 62 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index ab7f6e575ebad..486c95f966a5e 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -196,6 +196,22 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 		saa716x_adap++;
 	}
 
+	saa716x_fgpi_init(saa716x, 2);
+#if 1
+	{
+		struct fgpi_stream_params params;
+
+		params.bits = 8;
+		params.samples = 188;
+		params.lines = 348;
+		params.pitch = 188;
+		params.offset = 0;
+		params.page_tables = 0;
+		params.stream_type = FGPI_TRANSPORT_STREAM;
+		params.stream_flags = 0;
+		saa716x_fgpi_start(saa716x, 2, &params);
+	}
+#endif
 	return 0;
 
 	/* Error conditions */
@@ -221,6 +237,9 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	int i;
 
+	saa716x_fgpi_stop(saa716x, 2);
+	saa716x_fgpi_exit(saa716x, 2);
+
 	for (i = 0; i < saa716x->config->adapters; i++) {
 
 //		tasklet_kill(&saa716x->tasklet);
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 40048e65355e2..09bf1b2bbdf7f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -23,6 +23,9 @@
 
 #include "saa716x_mod.h"
 
+#include "saa716x_dma_reg.h"
+#include "saa716x_fgpi_reg.h"
+#include "saa716x_greg_reg.h"
 #include "saa716x_phi_reg.h"
 #include "saa716x_spi_reg.h"
 #include "saa716x_msi_reg.h"
@@ -712,6 +715,11 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
 #endif
+
+	/* enable FGPI2 and FGPI3 for TS inputs */
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x0689F04);
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x280);
+
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -799,8 +807,9 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	uint32_t msiStatusH;
-	uint32_t phiISR;
+	u32 msiStatusL;
+	u32 msiStatusH;
+	u32 phiISR;
 
 	if (unlikely(saa716x == NULL)) {
 		printk("%s: saa716x=NULL", __func__);
@@ -847,11 +856,41 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 #endif
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, SAA716x_EPRD(MSI, MSI_INT_STATUS_L));
-
+	msiStatusL = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
+	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, msiStatusL);
 	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
+#if 1
+	if (msiStatusL) {
+		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
+			u32 fgpiStatus;
+			u32 activeBuffer;
+
+			fgpiStatus = SAA716x_EPRD(FGPI2, INT_STATUS);
+			activeBuffer = (SAA716x_EPRD(BAM, BAM_FGPI2_DMA_BUF_MODE) >> 3) & 0x7;
+			dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
+				fgpiStatus, activeBuffer);
+			if (activeBuffer > 0)
+				activeBuffer -= 1;
+			else
+				activeBuffer = 7;
+			if (saa716x->fgpi[2].dma_buf[activeBuffer].mem_virt) {
+				u8 * data = (u8 *)saa716x->fgpi[2].dma_buf[activeBuffer].mem_virt;
+				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
+					data[0], data[1], data[2], data[3]);
+				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[0].demux, data, 348);
+			}
+			if (fgpiStatus) {
+				SAA716x_EPWR(FGPI2, INT_CLR_STATUS, fgpiStatus);
+			}
+		}
+	}
+#endif
+	if (msiStatusH) {
+		//dprintk(SAA716x_INFO, 1, "msiStatusH: %08X", msiStatusH);
+	}
+
 	if (msiStatusH & MSI_INT_EXTINT_0) {
 
 		struct sti7109_dev *sti7109 = saa716x->priv;

From c73f978f29c01d085c32deb759b129a8b3247ea3 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 12:45:45 +0400
Subject: [PATCH 125/364] saa716x: Make the framework buildable

[removed Kconfig and Makefile changes in media/common]
[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig  | 19 +++++++++++++-----
 drivers/media/pci/saa716x/Makefile | 32 +++++++++++++++---------------
 2 files changed, 30 insertions(+), 21 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 5107ae824ae7a..c5f81ffa0eee2 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -1,4 +1,11 @@
-config DVB_SAA716X_CORE
+menuconfig SAA716X_SUPPORT
+	bool "Support for SAA716x family from NXP/Philips"
+	depends on PCI && I2C
+	help
+	  support for saa716x
+
+if SAA716X_SUPPORT
+config SAA716X_CORE
 	tristate "SAA7160/1/2 PCI Express bridge based devices"
 	depends on PCI && I2C
 
@@ -9,7 +16,7 @@ config DVB_SAA716X_CORE
 
 config DVB_SAA716X_BUDGET
 	tristate "SAA7160/1/2 based Budget PCIe cards (DVB only)"
-	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
+	depends on SAA716X_CORE && DVB_CORE
 
 	help
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
@@ -24,7 +31,7 @@ config DVB_SAA716X_BUDGET
 
 config DVB_SAA716X_HYBRID
 	tristate "SAA7160/1/2 based Hybrid PCIe cards (DVB + Analog)"
-	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
+	depends on SAA716X_CORE && DVB_CORE
 
 	help
 	  Support for the SAA7160/1/2 based Hybrid PCIe DVB cards
@@ -40,7 +47,7 @@ config DVB_SAA716X_HYBRID
 
 config DVB_SAA716X_FF
 	tristate "SAA7160/1/2 based Full Fledged PCIe cards"
-	depends on DVB_SAA716X_CORE && DVB_CORE && PCI && I2C
+	depends on SAA716X_CORE && DVB_CORE
 
 	help
 	  Support for the SAA7160/1/2 based  Full fledged PCIe DVB cards
@@ -50,4 +57,6 @@ config DVB_SAA716X_FF
 
 	  * Technotrend S2 6400 Dual S2 HD (DVB-S/S2 x2)
 
-	  Say Y if you own such a device and want to use it.
\ No newline at end of file
+	  Say Y if you own such a device and want to use it.
+
+endif # SAA716X_SUPPORT
diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 016fd2f26ced6..189f3a84174af 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -1,20 +1,20 @@
-saa716x_core-objs		 := saa716x_pci.o	\
-				    saa716x_i2c.o	\
-				    saa716x_cgu.o	\
-				    saa716x_msi.o	\
-				    saa716x_dma.o	\
-				    saa716x_vip.o	\
-				    saa716x_aip.o	\
-				    saa716x_phi.o	\
-				    saa716x_boot.o	\
-				    saa716x_fgpi.o	\
-				    saa716x_adap.o	\
-				    saa716x_gpio.o	\
-				    saa716x_greg.o	\
-				    saa716x_rom.o	\
-				    saa716x_spi.o
+saa716x_core-objs	:= saa716x_pci.o	\
+			   saa716x_i2c.o	\
+			   saa716x_cgu.o	\
+			   saa716x_msi.o	\
+			   saa716x_dma.o	\
+			   saa716x_vip.o	\
+			   saa716x_aip.o	\
+			   saa716x_phi.o	\
+			   saa716x_boot.o	\
+			   saa716x_fgpi.o	\
+			   saa716x_adap.o	\
+			   saa716x_gpio.o	\
+			   saa716x_greg.o	\
+			   saa716x_rom.o	\
+			   saa716x_spi.o
 
-obj-$(CONFIG_DVB_SAA716X_CORE)    += saa716x_core.o
+obj-$(CONFIG_SAA716X_CORE)	  += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
 obj-$(CONFIG_DVB_SAA716X_FF)	  += saa716x_ff.o

From 659aaff49e14ee722d6ef5fd4ce1d0bbb70da115 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 5 Jan 2010 15:25:05 +0400
Subject: [PATCH 126/364] saa716x: Fix build issues

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 1 -
 drivers/media/pci/saa716x/saa716x_ff.c     | 3 +--
 drivers/media/pci/saa716x/saa716x_hybrid.c | 1 -
 drivers/media/pci/saa716x/saa716x_i2c.c    | 1 -
 drivers/media/pci/saa716x/saa716x_msi.c    | 1 -
 drivers/media/pci/saa716x/saa716x_pci.c    | 1 -
 6 files changed, 1 insertion(+), 7 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 930dd0c76f85c..c70a05a5f9072 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -12,7 +12,6 @@
 #include <linux/init.h>
 #include <linux/device.h>
 
-#include <asm/irq.h>
 #include <linux/signal.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 09bf1b2bbdf7f..b876e17f4966d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -14,7 +14,6 @@
 #include <linux/device.h>
 #include <linux/firmware.h>
 
-#include <asm/irq.h>
 #include <linux/signal.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>
@@ -1042,7 +1041,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			{
 				while (len >= TS_SIZE)
 				{
-					dvb_ringbuffer_read(&sti7109->tsout, sti7109->tsbuf, (size_t) TS_SIZE, 0);
+					dvb_ringbuffer_read(&sti7109->tsout, sti7109->tsbuf, (size_t) TS_SIZE);
 					saa716x_phi_write_fifo(saa716x, sti7109->tsbuf, TS_SIZE);
 					len -= TS_SIZE;
 				}
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index ff5db7d44b639..fd527b1cec29a 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -12,7 +12,6 @@
 #include <linux/init.h>
 #include <linux/device.h>
 
-#include <asm/irq.h>
 #include <linux/signal.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 664ac1802e854..c7545da460c74 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -1,6 +1,5 @@
 #include <linux/delay.h>
 
-#include <asm/irq.h>
 #include <linux/signal.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index e028839892795..b0f05a25271be 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -1,6 +1,5 @@
 #include <linux/delay.h>
 
-#include <asm/irq.h>
 #include <linux/signal.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index e3f45e8c89421..aefa46aba43c0 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -7,7 +7,6 @@
 #include <linux/device.h>
 #include <linux/delay.h>
 
-#include <asm/irq.h>
 #include <linux/signal.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>

From 3f2ea1631213fc8158cc8751ca8d877eb36d23e5 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 20:43:26 +0100
Subject: [PATCH 127/364] saa716x: Simplified the code for I2C transfers.

I2C module of the saa716x should support all kinds of transfers now.
As the transfers rarely fail, up to 2 retries are done in case of failures.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 215 ++++++++----------------
 1 file changed, 69 insertions(+), 146 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index c7545da460c74..119d8fef25981 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -320,34 +320,23 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 
 	/* Write to FIFO */
 	SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
-//	msleep(50);
-	msleep(1);
-	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-	i2c->stat_tx_done = reg;
 
 	/* Check for data write */
-	for (i = 0; i < 10; i++) {
+	for (i = 0; i < 1000; i++) {
 		/* TODO! check for hotplug devices */
-
-		if (!(reg & I2C_TRANSMIT_CLEAR)) {
-			msleep(10);
-			reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-		} else {
+		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+		if (reg & I2C_TRANSMIT_CLEAR) {
 			break;
 		}
 	}
+	i2c->stat_tx_done = reg;
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
-		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout, tried %d loops, %d mS!", i, i * 10);
-		err = saa716x_i2c_hwinit(i2c, I2C_DEV);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Error Reinit");
-			err = -EIO;
-			goto exit;
-		}
+		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout, tried %d loops!", i);
+		err = -EIO;
+		goto exit;
 	}
 
-
 	return err;
 
 exit:
@@ -362,27 +351,17 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 	u32 reg;
 
 	/* Check FIFO status before RX */
-	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-	if (reg & SAA716x_I2C_RXBUSY) {
-
-		for (i = 0; i < 100; i++) {
-			msleep(10);
-			reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-
-			if (reg & SAA716x_I2C_RXBUSY) {
-				dprintk(SAA716x_INFO, 1, "FIFO empty");
-
-				err = saa716x_i2c_hwinit(i2c, I2C_DEV);
-				if (err < 0) {
-					dprintk(SAA716x_INFO, 1, "Error Reinit");
-					err = -EIO;
-					goto exit;
-				}
-			} else {
-				break;
-			}
+	for (i = 0; i < 1000; i++) {
+		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
+		if (!(reg & SAA716x_I2C_RXBUSY)) {
+			break;
 		}
 	}
+	if (reg & SAA716x_I2C_RXBUSY) {
+		dprintk(SAA716x_INFO, 1, "FIFO empty");
+		err = -EIO;
+		goto exit;
+	}
 
 	/* Read from FIFO */
 	*data = SAA716x_EPRD(I2C_DEV, RX_FIFO);
@@ -399,133 +378,77 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 	struct saa716x_dev *saa716x	= i2c->saa716x;
 
 	u32 DEV = SAA716x_I2C_BUS(i2c->i2c_dev);
-	int i = 0, j, err = 0;
-	u32 rxd;
+	int i, j, err = 0;
+	int t;
+	u32 data;
 
 	dprintk(SAA716x_DEBUG, 0, "\n");
 	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
 	mutex_lock(&i2c->i2c_lock);
 
-	while (i < num) {
-		if (((i + 1) < num) && (msgs[i + 1].flags & I2C_M_RD)) {
-			if (msgs[i].len) {
-				dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
-					msgs[i].len, (msgs[i].addr << 1) | I2C_START_BIT);
-
-				err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
-				if (err < 0) {
-					saa716x_i2c_hwinit(i2c, DEV);
-					err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-				}
-
-				for (j = 0; j < msgs[i].len; j++) {
-					dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n",
-						i, msgs[i].buf[j]);
-
-					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j]);
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-
-				}
-			}
-			dprintk(SAA716x_DEBUG, 1, "Addr:0x%02x",
-				(msgs[i].addr << 1) | 0x1 | I2C_START_BIT);
-
-			err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | 0x1 | I2C_START_BIT);
+	for (t = 0; t < 3; t++) {
+		for (i = 0; i < num; i++) {
+			/* first write START width I2C address */
+			data = (msgs[i].addr << 1) | I2C_START_BIT;
+			if (msgs[i].flags & I2C_M_RD)
+				data |= 1;
+			dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
+				msgs[i].len, data);
+			err = saa716x_i2c_send(i2c, DEV, data);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Transfer failed");
+				dprintk(SAA716x_ERROR, 1, "Address write failed");
 				err = -EIO;
-				goto bail_out;
+				goto retry;
 			}
-
-			for (j = 0; j < msgs[i + 1].len; j++) {
-				if (j == msgs[i + 1].len - 1) {
-					err = saa716x_i2c_send(i2c, DEV, I2C_STOP_BIT); /* Dummy */
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-
-					err = saa716x_i2c_recv(i2c, DEV, &rxd);
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-					dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n",
-						j + 1, rxd);
-
-					msgs[i + 1].buf[j] = rxd;
-				} else {
-					err = saa716x_i2c_send(i2c, DEV, 0x00); /* Dummy */
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-
-					err = saa716x_i2c_recv(i2c, DEV, &rxd);
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-					msgs[i + 1].buf[j] = rxd;
-					dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n",
-						j, rxd);
+			/* now read or write the data */
+			for (j = 0; j < msgs[i].len; j++) {
+				if (msgs[i].flags & I2C_M_RD)
+					data = 0x00; /* dummy write for reading */
+				else {
+					data = msgs[i].buf[j];
+					dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n",
+						j, data);
 				}
-			}
-			i += 2;
-
-		} else {
-			dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
-				msgs[i].len, (msgs[i].addr << 1) | I2C_START_BIT);
-
-			err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
-			if (err < 0) {
-				saa716x_i2c_hwinit(i2c, DEV);
-				err = saa716x_i2c_send(i2c, DEV, (msgs[i].addr << 1) | I2C_START_BIT);
+				if (i == (num - 1) && j == (msgs[i].len - 1))
+					data |= I2C_STOP_BIT;
+				err = saa716x_i2c_send(i2c, DEV, data);
 				if (err < 0) {
-					dprintk(SAA716x_ERROR, 1, "Transfer failed");
+					dprintk(SAA716x_ERROR, 1, "Data send failed");
 					err = -EIO;
-					goto bail_out;
+					goto retry;
 				}
-			}
-
-			for (j = 0; j < msgs[i].len; j++) {
-				if (j == msgs[i].len - 1) {
-					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j] | I2C_STOP_BIT);
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
-						err = -EIO;
-						goto bail_out;
-					}
-				} else {
-					err = saa716x_i2c_send(i2c, DEV, msgs[i].buf[j]);
+				if (msgs[i].flags & I2C_M_RD) {
+					err = saa716x_i2c_recv(i2c, DEV, &data);
 					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Transfer failed");
+						dprintk(SAA716x_ERROR, 1, "Data receive failed");
 						err = -EIO;
-						goto bail_out;
+						goto retry;
 					}
+					dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n",
+						j, data);
+					msgs[i].buf[j] = data;
 				}
 			}
-			i++;
 		}
-	}
-
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "Transfer failed");
-		err = -EIO;
-		goto bail_out;
+		break;
+retry:
+		dprintk(SAA716x_INFO, 1, "Error in Transfer, try %d", t);
+		for (i = 0; i < num; i++) {
+			dprintk(SAA716x_INFO, 1, "msg %d, addr = 0x%02x, len=%d, flags=0x%x",
+				i, msgs[i].addr, msgs[i].len, msgs[i].flags);
+			if (!(msgs[i].flags & I2C_M_RD)) {
+				for (j = 0; j < msgs[i].len; j++) {
+					dprintk(SAA716x_INFO, 1, "    <W %04x> 0x%02x",
+						j, msgs[i].buf[j]);
+				}
+			}
+		}
+		err = saa716x_i2c_hwinit(i2c, DEV);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Error Reinit");
+			err = -EIO;
+			goto bail_out;
+		}
 	}
 
 	mutex_unlock(&i2c->i2c_lock);

From 2ed3dfead563b2f45003e5033c074786f3efe403 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 20:49:04 +0100
Subject: [PATCH 128/364] saa716x: Transport stream ports can be configured
 now.

Activate the second TS path on the S2-6400.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 16 ++++++++-------
 drivers/media/pci/saa716x/saa716x_ff.c   | 26 ++++++++++++++++++++++--
 drivers/media/pci/saa716x/saa716x_priv.h |  1 +
 3 files changed, 34 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 486c95f966a5e..f17a1a3e6c859 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -196,11 +196,11 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 		saa716x_adap++;
 	}
 
-	saa716x_fgpi_init(saa716x, 2);
-#if 1
-	{
+	for (i = 0; i < config->adapters; i++) {
 		struct fgpi_stream_params params;
 
+		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port);
+
 		params.bits = 8;
 		params.samples = 188;
 		params.lines = 348;
@@ -209,9 +209,9 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 		params.page_tables = 0;
 		params.stream_type = FGPI_TRANSPORT_STREAM;
 		params.stream_flags = 0;
-		saa716x_fgpi_start(saa716x, 2, &params);
+		saa716x_fgpi_start(saa716x, config->adap_config[i].ts_port, &params);
 	}
-#endif
+
 	return 0;
 
 	/* Error conditions */
@@ -237,8 +237,10 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	int i;
 
-	saa716x_fgpi_stop(saa716x, 2);
-	saa716x_fgpi_exit(saa716x, 2);
+	for (i = 0; i < saa716x->config->adapters; i++) {
+		saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[i].ts_port);
+		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_port);
+	}
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index b876e17f4966d..2b8876dcd5e66 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -860,7 +860,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
-#if 1
 	if (msiStatusL) {
 		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
 			u32 fgpiStatus;
@@ -884,8 +883,29 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				SAA716x_EPWR(FGPI2, INT_CLR_STATUS, fgpiStatus);
 			}
 		}
+		if (msiStatusL & MSI_INT_TAGACK_FGPI_3) {
+			u32 fgpiStatus;
+			u32 activeBuffer;
+
+			fgpiStatus = SAA716x_EPRD(FGPI3, INT_STATUS);
+			activeBuffer = (SAA716x_EPRD(BAM, BAM_FGPI3_DMA_BUF_MODE) >> 3) & 0x7;
+			dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
+				fgpiStatus, activeBuffer);
+			if (activeBuffer > 0)
+				activeBuffer -= 1;
+			else
+				activeBuffer = 7;
+			if (saa716x->fgpi[3].dma_buf[activeBuffer].mem_virt) {
+				u8 * data = (u8 *)saa716x->fgpi[3].dma_buf[activeBuffer].mem_virt;
+				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
+					data[0], data[1], data[2], data[3]);
+				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[1].demux, data, 348);
+			}
+			if (fgpiStatus) {
+				SAA716x_EPWR(FGPI3, INT_CLR_STATUS, fgpiStatus);
+			}
+		}
 	}
-#endif
 	if (msiStatusH) {
 		//dprintk(SAA716x_INFO, 1, "msiStatusH: %08X", msiStatusH);
 	}
@@ -1151,8 +1171,10 @@ static struct saa716x_config saa716x_s26400_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
+			.ts_port = 2
 		},{
 			/* Adapter 1 */
+			.ts_port = 3
 		}
 	}
 };
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 90a9effbcfd4f..9fd4bdae5a720 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -86,6 +86,7 @@ typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 struct saa716x_adap_config {
 	u32				power_ctl;
 	u32				reset_ctl;
+	u32				ts_port;
 };
 
 struct saa716x_config {

From 21688d032f0367876faa6f51b04bb6a018c9fcd5 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 20:51:59 +0100
Subject: [PATCH 129/364] saa716x_ff: Disable frontend support through STi7109
 firmware.

This is needed when the I2C of the SAA716x shall be used to access the frontend.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 2b8876dcd5e66..72c5a9f2960b0 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -220,6 +220,10 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 		}
 	}
 
+	/* disable frontend support through ST firmware */
+	SAA716x_EPWR(PHI_1, 0x3ff4, 1);
+
+	/* indicate end of transfer */
 	writtenBlock++;
 	writtenBlock |= 0x80000000;
 	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);

From 75de0726a52812a7e775cba66aa1d0706adf36fd Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 20:58:16 +0100
Subject: [PATCH 130/364] saa716x_ff: Initialize the frontend of the TT
 S2-6400.

The frontend drivers (stv090x, stv6110x and isl6423) are initialised with correct parameters.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c |   4 +-
 drivers/media/pci/saa716x/saa716x_ff.c   | 110 ++++++++++++++++-------
 2 files changed, 80 insertions(+), 34 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index f17a1a3e6c859..339e361c0827c 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -251,8 +251,10 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 		dvb_dmxdev_release(&saa716x_adap->dmxdev);
 		dvb_dmx_release(&saa716x_adap->demux);
 
-		if (saa716x_adap->fe)
+		if (saa716x_adap->fe) {
 			dvb_unregister_frontend(saa716x_adap->fe);
+			dvb_frontend_detach(saa716x_adap->fe);
+		}
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_unregister_adapter");
 		dvb_unregister_adapter(&saa716x_adap->dvb_adapter);
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 72c5a9f2960b0..ba31881662657 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -43,8 +43,9 @@
 #include <linux/dvb/video.h>
 #include <linux/dvb/osd.h>
 
-#include "stv090x_reg.h"
+#include "stv6110x.h"
 #include "stv090x.h"
+#include "isl6423.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -1096,19 +1097,55 @@ static int load_config_s26400(struct saa716x_dev *saa716x)
 #define SAA716x_MODEL_S2_6400_DUAL	"Technotrend S2 6400 Dual S2 Premium"
 #define SAA716x_DEV_S2_6400_DUAL	"2x DVB-S/S2 + Hardware decode"
 
-static struct stv090x_config tt6400_config = {
-	.demod_mode	= STV090x_DUAL,
-	.clk_mode	= STV090x_CLK_EXT,
-
-	.xtal		= 8000000,
-	.address	= 0x68,
+static struct stv090x_config tt6400_stv090x_config = {
+	.device			= STV0900,
+	.demod_mode		= STV090x_DUAL,
+	.clk_mode		= STV090x_CLK_EXT,
+
+	.xtal			= 13500000,
+	.address		= 0x68,
+
+	.ts1_mode		= STV090x_TSMODE_SERIAL_CONTINUOUS,
+	.ts2_mode		= STV090x_TSMODE_SERIAL_CONTINUOUS,
+	.ts1_clk		= 90000000,
+	.ts2_clk		= 90000000,
+
+	.repeater_level		= STV090x_RPTLEVEL_16,
+
+	.tuner_init		= NULL,
+	.tuner_set_mode		= NULL,
+	.tuner_set_frequency	= NULL,
+	.tuner_get_frequency	= NULL,
+	.tuner_set_bandwidth	= NULL,
+	.tuner_get_bandwidth	= NULL,
+	.tuner_set_bbgain	= NULL,
+	.tuner_get_bbgain	= NULL,
+	.tuner_set_refclk	= NULL,
+	.tuner_get_status	= NULL,
+};
 
-	.ref_clk	= 27000000,
+static struct stv6110x_config tt6400_stv6110x_config = {
+	.addr			= 0x60,
+	.refclk			= 27000000,
+	.clk_div		= 2,
+};
 
-	.ts1_mode	= STV090x_TSMODE_SERIAL_CONTINUOUS,
-	.ts2_mode	= STV090x_TSMODE_SERIAL_CONTINUOUS,
+static struct isl6423_config tt6400_isl6423_config[2] = {
+	{
+		.current_max		= SEC_CURRENT_515m,
+		.curlim			= SEC_CURRENT_LIM_ON,
+		.mod_extern		= 1,
+		.addr			= 0x09,
+	},
+	{
+		.current_max		= SEC_CURRENT_515m,
+		.curlim			= SEC_CURRENT_LIM_ON,
+		.mod_extern		= 1,
+		.addr			= 0x08,
+	}
 };
 
+
 static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x	= adapter->saa716x;
@@ -1118,31 +1155,39 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	if (count == 0) {
-		adapter->fe = stv090x_attach(&tt6400_config,
-					     i2c_adapter,
-					     STV090x_DEMODULATOR_0);
-
-		if (adapter->fe == NULL) {
-			dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
-				saa716x->pdev->vendor,
-				saa716x->pdev->device,
-				saa716x->pdev->subsystem_vendor,
-				saa716x->pdev->subsystem_device);
+	if (count == 0 || count == 1) {
+		adapter->fe = dvb_attach(stv090x_attach,
+					 &tt6400_stv090x_config,
+					 i2c_adapter,
+					 STV090x_DEMODULATOR_0 + count);
+
+		if (adapter->fe) {
+			struct stv6110x_devctl *ctl;
+			ctl = dvb_attach(stv6110x_attach,
+					 adapter->fe,
+					 &tt6400_stv6110x_config,
+					 i2c_adapter);
+
+			tt6400_stv090x_config.tuner_init	  = ctl->tuner_init;
+			tt6400_stv090x_config.tuner_set_mode	  = ctl->tuner_set_mode;
+			tt6400_stv090x_config.tuner_set_frequency = ctl->tuner_set_frequency;
+			tt6400_stv090x_config.tuner_get_frequency = ctl->tuner_get_frequency;
+			tt6400_stv090x_config.tuner_set_bandwidth = ctl->tuner_set_bandwidth;
+			tt6400_stv090x_config.tuner_get_bandwidth = ctl->tuner_get_bandwidth;
+			tt6400_stv090x_config.tuner_set_bbgain	  = ctl->tuner_set_bbgain;
+			tt6400_stv090x_config.tuner_get_bbgain	  = ctl->tuner_get_bbgain;
+			tt6400_stv090x_config.tuner_set_refclk	  = ctl->tuner_set_refclk;
+			tt6400_stv090x_config.tuner_get_status	  = ctl->tuner_get_status;
+
+			dvb_attach(isl6423_attach,
+				   adapter->fe,
+				   i2c_adapter,
+				   &tt6400_isl6423_config[count]);
 
 		} else {
-			if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
-				dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
-				dvb_frontend_detach(adapter->fe);
-				adapter->fe = NULL;
-			}
+			dvb_frontend_detach(adapter->fe);
+			adapter->fe = NULL;
 		}
-
-	} else if (count == 1) {
-		adapter->fe = stv090x_attach(&tt6400_config,
-					     i2c_adapter,
-					     STV090x_DEMODULATOR_1);
-
 		if (adapter->fe == NULL) {
 			dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
 				saa716x->pdev->vendor,
@@ -1158,7 +1203,6 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 			}
 		}
 	}
-
 	return 0;
 }
 

From 97d003b2bda742b36e10c47f0e5a4b4b1429bd2a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:00:29 +0100
Subject: [PATCH 131/364] saa716x_ff: Add VIDEO_GET_PTS ioctl.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index ba31881662657..07b982259ac35 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -525,6 +525,11 @@ static int dvb_video_ioctl(struct inode *inode, struct file *file,
 		dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
 		break;
 	}
+	case VIDEO_GET_PTS:
+	{
+		*(u64 *)parg = sti7109->video_pts;
+		break;
+	}
 	default:
 		ret = -ENOIOCTLCMD;
 		break;

From 60116389f29721b6c6e1e490073f78678674ba8f Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:04:25 +0100
Subject: [PATCH 132/364] saa716x_ff: Add audio device for TT S2-6400.

Add AUDIO_GET_PTS ioctl.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 73 +++++++++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_ff.h |  1 +
 2 files changed, 72 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 07b982259ac35..b675241ffbdf6 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -41,6 +41,7 @@
 #include "saa716x_priv.h"
 
 #include <linux/dvb/video.h>
+#include <linux/dvb/audio.h>
 #include <linux/dvb/osd.h>
 
 #include "stv6110x.h"
@@ -427,6 +428,64 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
+static int dvb_audio_ioctl(struct inode *inode, struct file *file,
+			   unsigned int cmd, void *parg)
+{
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+	//struct saa716x_dev *saa716x	= sti7109->dev;
+	int ret = 0;
+
+	switch (cmd) {
+	case AUDIO_GET_PTS:
+	{
+		*(u64 *)parg = sti7109->audio_pts;
+		break;
+	}
+	default:
+		ret = -ENOIOCTLCMD;
+		break;
+	}
+	return ret;
+}
+
+static struct file_operations dvb_audio_fops = {
+	.owner		= THIS_MODULE,
+	.ioctl		= dvb_generic_ioctl,
+	.open		= dvb_generic_open,
+	.release	= dvb_generic_release,
+};
+
+static struct dvb_device dvbdev_audio = {
+	.priv		= NULL,
+	.users		= 1,
+	.writers	= 1,
+	.fops		= &dvb_audio_fops,
+	.kernel_ioctl	= dvb_audio_ioctl,
+};
+
+static int saa716x_ff_audio_exit(struct saa716x_dev *saa716x)
+{
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	dvb_unregister_device(sti7109->audio_dev);
+	return 0;
+}
+
+static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
+{
+	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109		= saa716x->priv;
+
+	dvb_register_device(&saa716x_adap->dvb_adapter,
+			    &sti7109->audio_dev,
+			    &dvbdev_audio,
+			    sti7109,
+			    DVB_DEVICE_AUDIO);
+
+	return 0;
+}
+
 #define FREE_COND_TS (dvb_ringbuffer_free(&sti7109->tsout) >= TS_SIZE)
 
 static ssize_t dvb_video_write(struct file *file, const char __user *buf,
@@ -757,16 +816,24 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail7;
 	}
 
+	err = saa716x_ff_audio_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x FF AUDIO initialization failed");
+		goto fail8;
+	}
+
 	err = saa716x_ff_osd_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
-		goto fail8;
+		goto fail9;
 	}
 
 	return 0;
 
-fail8:
+fail9:
 	saa716x_ff_osd_exit(saa716x);
+fail8:
+	saa716x_ff_audio_exit(saa716x);
 fail7:
 	saa716x_ff_video_exit(saa716x);
 fail6:
@@ -797,6 +864,8 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 
 	saa716x_ff_osd_exit(saa716x);
 
+	saa716x_ff_audio_exit(saa716x);
+
 	saa716x_ff_video_exit(saa716x);
 
 	saa716x_dvb_exit(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 461581fba3ae1..8c39dcafe4f77 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -68,6 +68,7 @@ struct sti7109_dev {
 	struct saa716x_dev	*dev;
 	struct dvb_device	*osd_dev;
 	struct dvb_device	*video_dev;
+	struct dvb_device	*audio_dev;
 
 	void			*iobuf;	 /* memory for all buffers */
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */

From a6cc5496483e4506a1faedbf07297615e135181a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:06:50 +0100
Subject: [PATCH 133/364] saa716x_ff: Use separate interrupts for OSD commands.

Added definitions of missing interrupt sources.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 132 +++++++++++++++++++++++--
 drivers/media/pci/saa716x/saa716x_ff.h |  26 ++++-
 2 files changed, 149 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index b675241ffbdf6..2fdcad5c2516c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -259,7 +259,7 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 
 	sti7109->cmd_ready = 0;
 	sti7109->result_avail = 0;
-	saa716x_phi_write(saa716x, 0x0000, cmd->cmd_data, cmd->cmd_len);
+	saa716x_phi_write(saa716x, ADDR_CMD_DATA, cmd->cmd_data, cmd->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
 	if (cmd->result_len > 0) {
@@ -292,6 +292,61 @@ static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 	return 0;
 }
 
+static int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->osd_cmd_ready_wq,
+						   sti7109->osd_cmd_ready == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->osd_cmd_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			dprintk(SAA716x_ERROR, 1, "osd cmd ERESTARTSYS");
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for osd command ready");
+		return -EIO;
+	}
+
+	sti7109->osd_cmd_ready = 0;
+	sti7109->osd_result_avail = 0;
+	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, cmd->cmd_data, cmd->cmd_len);
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
+
+	if (cmd->result_len > 0) {
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(sti7109->osd_result_avail_wq,
+							   sti7109->osd_result_avail == 1,
+							   timeout);
+
+		if (timeout == -ERESTARTSYS || sti7109->osd_result_avail == 0) {
+			cmd->result_len = 0;
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				dprintk(SAA716x_ERROR, 1, "osd result ERESTARTSYS");
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1, "timed out waiting for osd command result");
+			return -EIO;
+		}
+
+		if (sti7109->osd_result_len > 0) {
+			if (sti7109->osd_result_len > cmd->result_len) {
+				memcpy(cmd->result_data, sti7109->osd_result_data, cmd->result_len);
+			} else {
+				memcpy(cmd->result_data, sti7109->osd_result_data, sti7109->osd_result_len);
+				cmd->result_len = sti7109->osd_result_len;
+			}
+		}
+	}
+
+	return 0;
+}
+
 static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
@@ -377,9 +432,18 @@ static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 	int ret_val = -EINVAL;
 
 	if (cmd == OSD_RAW_CMD) {
-		mutex_lock(&sti7109->cmd_lock);
-		ret_val = sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
-		mutex_unlock(&sti7109->cmd_lock);
+		osd_raw_cmd_t * pcmd = (osd_raw_cmd_t *) parg;
+		u8 * pdata = (u8 *) pcmd->cmd_data;
+		if (pdata[3] == 4) {
+			mutex_lock(&sti7109->osd_cmd_lock);
+			ret_val = sti7109_raw_osd_cmd(sti7109, (osd_raw_cmd_t *) parg);
+			mutex_unlock(&sti7109->osd_cmd_lock);
+		}
+		else {
+			mutex_lock(&sti7109->cmd_lock);
+			ret_val = sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
+			mutex_unlock(&sti7109->cmd_lock);
+		}
 	}
 	else if (cmd == OSD_RAW_DATA) {
 		mutex_lock(&sti7109->data_lock);
@@ -718,6 +782,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail4;
 
 	mutex_init(&sti7109->cmd_lock);
+	mutex_init(&sti7109->osd_cmd_lock);
 	mutex_init(&sti7109->data_lock);
 
 	init_waitqueue_head(&sti7109->boot_finish_wq);
@@ -729,6 +794,11 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	init_waitqueue_head(&sti7109->result_avail_wq);
 	sti7109->result_avail = 0;
 
+	init_waitqueue_head(&sti7109->osd_cmd_ready_wq);
+	sti7109->osd_cmd_ready = 0;
+	init_waitqueue_head(&sti7109->osd_result_avail_wq);
+	sti7109->osd_result_avail = 0;
+
 	sti7109->data_handle = 0;
 	init_waitqueue_head(&sti7109->data_ready_wq);
 	sti7109->data_ready = 0;
@@ -1029,6 +1099,40 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_READY_MASK);
 		}
 
+		if (phiISR & ISR_OSD_CMD_MASK) {
+
+			u32 value;
+			u32 length;
+			/*dprintk(SAA716x_INFO, 1, "OSD CMD interrupt source");*/
+
+			value = SAA716x_EPRD(PHI_1, ADDR_OSD_CMD_DATA);
+			value = __cpu_to_be32(value);
+			length = (value >> 16) + 2;
+
+			/*dprintk(SAA716x_INFO, 1, "OSD CMD length: %d", length);*/
+
+			if (length > MAX_RESULT_LEN) {
+				dprintk(SAA716x_ERROR, 1, "OSD CMD length %d > %d", length, MAX_RESULT_LEN);
+				length = MAX_RESULT_LEN;
+			}
+
+			saa716x_phi_read(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_result_data, length);
+			sti7109->osd_result_len = length;
+			sti7109->osd_result_avail = 1;
+			wake_up(&sti7109->osd_result_avail_wq);
+
+			phiISR &= ~ISR_OSD_CMD_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_OSD_CMD_MASK);
+		}
+
+		if (phiISR & ISR_OSD_READY_MASK) {
+			/*dprintk(SAA716x_INFO, 1, "OSD_READY interrupt source");*/
+			sti7109->osd_cmd_ready = 1;
+			wake_up(&sti7109->osd_cmd_ready_wq);
+			phiISR &= ~ISR_OSD_READY_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_OSD_READY_MASK);
+		}
+
 		if (phiISR & ISR_BLOCK_MASK) {
 			/*dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");*/
 			sti7109->block_done = 1;
@@ -1116,7 +1220,23 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %u", sti7109->remote_event);
 		}
 
-		if (phiISR & ISR_FIFO_EMPTY_MASK) {
+		if (phiISR & ISR_DVO_FORMAT_MASK) {
+			u8 data[4];
+			u32 format;
+
+			saa716x_phi_read(saa716x, ADDR_DVO_FORMAT, data, 4);
+			format = (data[0] << 24)
+			       | (data[1] << 16)
+			       | (data[2] << 8)
+			       | (data[3]);
+
+			phiISR &= ~ISR_DVO_FORMAT_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DVO_FORMAT_MASK);
+
+			dprintk(SAA716x_INFO, 1, "DVO FORMAT CHANGE: %u", format);
+		}
+
+		if (phiISR & ISR_FIFO1_EMPTY_MASK) {
 			u32 fifoCtrl;
 			u32 fifoStat;
 			u16 fifoSize;
@@ -1149,7 +1269,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
 			}
 			spin_unlock(&sti7109->tsout.lock);
-			phiISR &= ~ISR_FIFO_EMPTY_MASK;
+			phiISR &= ~ISR_FIFO1_EMPTY_MASK;
 		}
 
 		if (phiISR) {
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 8c39dcafe4f77..1c4ddb661f078 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -44,16 +44,27 @@
 #define ISR_VIDEO_PTS_MASK	0x0040 /* interrupt source for video PTS */
 #define ISR_CURRENT_STC_MASK	0x0080 /* interrupt source for current system clock */
 #define ISR_REMOTE_EVENT_MASK	0x0100 /* interrupt source for remote events */
-#define ISR_FIFO_EMPTY_MASK	0x8000 /* interrupt source for FIFO empty */
+#define ISR_DVO_FORMAT_MASK	0x0200 /* interrupt source for DVO format change */
+#define ISR_OSD_CMD_MASK	0x0400 /* interrupt source for OSD cmds */
+#define ISR_OSD_READY_MASK	0x0800 /* interrupt source for OSD command acknowledge */
+#define ISR_FE_CMD_MASK		0x1000 /* interrupt source for frontend cmds */
+#define ISR_FE_READY_MASK	0x2000 /* interrupt source for frontend command acknowledge */
+#define ISR_FIFO2_EMPTY_MASK	0x4000 /* interrupt source for FIFO2 empty */
+#define ISR_FIFO1_EMPTY_MASK	0x8000 /* interrupt source for FIFO1 empty */
 
 #define ADDR_CMD_DATA		0x0000 /* address for cmd data in fpga dpram */
-#define ADDR_BLOCK_DATA		0x0600 /* address for block data in fpga dpram */
+#define ADDR_OSD_CMD_DATA	0x01A0 /* address for OSD cmd data */
+#define ADDR_FE_CMD_DATA	0x05C0 /* address for frontend cmd data */
+#define ADDR_BLOCK_DATA		0x0600 /* address for block data */
 #define ADDR_AUDIO_PTS		0x3E00 /* address for audio PTS (64 Bits) */
 #define ADDR_VIDEO_PTS		0x3E08 /* address for video PTS (64 Bits) */
 #define ADDR_CURRENT_STC	0x3E10 /* address for system clock (64 Bits) */
+#define ADDR_DVO_FORMAT		0x3E18 /* address for DVO format 32 Bits) */
 #define ADDR_REMOTE_EVENT	0x3F00 /* address for remote events (32 Bits) */
 
-#define SIZE_CMD_DATA		0x0600 /* maximum size for command data (1,5 kB) */
+#define SIZE_CMD_DATA		0x01A0 /* maximum size for command data (416 Bytes) */
+#define SIZE_OSD_CMD_DATA	0x0420 /* maximum size for OSD command data (1056 Bytes) */
+#define SIZE_FE_CMD_DATA	0x0040 /* maximum size for frontend command data (64 Bytes) */
 #define SIZE_BLOCK_DATA		0x3800 /* maximum size for block data (14 kB) */
 
 #define SIZE_BLOCK_HEADER	8      /* block header size */
@@ -85,6 +96,14 @@ struct sti7109_dev {
 	u8			result_data[MAX_RESULT_LEN];
 	u32			result_len;
 
+	wait_queue_head_t	osd_cmd_ready_wq;
+	int			osd_cmd_ready;
+
+	wait_queue_head_t	osd_result_avail_wq;
+	int			osd_result_avail;
+	u8			osd_result_data[MAX_RESULT_LEN];
+	u32			osd_result_len;
+
 	u16			data_handle;
 	wait_queue_head_t	data_ready_wq;
 	int			data_ready;
@@ -92,6 +111,7 @@ struct sti7109_dev {
 	int			block_done;
 
 	struct mutex		cmd_lock;
+	struct mutex		osd_cmd_lock;
 	struct mutex		data_lock;
 
 	u64			audio_pts;

From dd11c1a0fb4fed4013b40cf7ffb85a924afce0d0 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:08:40 +0100
Subject: [PATCH 134/364] saa716x_ff: Use third TS input of the STi7109 for
 playback

With that we still have both frontend TS available
at the PCIe during playback.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 2fdcad5c2516c..e026c74ba2cac 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -627,15 +627,15 @@ static int dvb_video_ioctl(struct inode *inode, struct file *file,
 
 		stream_source = (video_stream_source_t) parg;
 		if (stream_source == VIDEO_SOURCE_DEMUX) {
-			/* select TS input 1 for TS mux 1 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX1, 1);
+			/* select TS input 3 for TS mux 3 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX3, 3);
 			/* stop and reset FIFO 1 */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
 		}
 		else {
 			dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
-			/* select FIFO 1 for TS mux 1 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX1, 4);
+			/* select FIFO 1 for TS mux 3 */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX3, 4);
 			/* reset FIFO 1 */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
 			/* start FIFO 1 */

From 8c914308566b4d765c4117d1992ed8b14d38e03d Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:10:38 +0100
Subject: [PATCH 135/364] saa716x_ff: Set error code when boot of firmware
 failed.

This avoids an exception when unloading the driver afterwards.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index e026c74ba2cac..8b7b00f932970 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -876,6 +876,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 			goto fail6;
 		}
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for boot finish");
+		err = -1;
 		goto fail6;
 	}
 	dprintk(SAA716x_INFO, 1, "STi7109 finished booting");

From 5165f8722b66f6e897deedf60ca3904ac87ff54e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:11:40 +0100
Subject: [PATCH 136/364] saa716x_ff: Added 10ms sleep after configuring the
 FPGA.

The FPGA needs some time to initialize after configuration has been done.
This fixes boot stability problems.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index 8b7b00f932970..a2e61474e87bb 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -113,6 +113,8 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
 	dprintk(SAA716x_INFO, 1, "SAA716x FPGA DONE=%d", fpgaDone);
 
+	msleep(10);
+
 	release_firmware(fw);
 
 	if (!fpgaDone)

From 06256c898a247df9bce53f8ea36e6c2c6ec3d0e0 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 5 Jan 2010 21:13:01 +0100
Subject: [PATCH 137/364] saa716x: Reduce compiler warnings

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 2 --
 drivers/media/pci/saa716x/saa716x_pci.c  | 6 +++---
 2 files changed, 3 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 339e361c0827c..8596cc38b95b2 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -73,7 +73,6 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 
 static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 control)
 {
-	struct saa716x_adapter *adapter		= &saa716x->saa716x_adap[DEV];
 	struct saa716x_config *config		= saa716x->config;
 	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
@@ -88,7 +87,6 @@ static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 contro
 
 static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
 {
-	struct saa716x_adapter *adapter		= &saa716x->saa716x_adap[DEV];
 	struct saa716x_config *config		= saa716x->config;
 	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index aefa46aba43c0..d5dbc11d9f8e3 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -154,14 +154,14 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 		goto fail0;
 	}
 
-	if (!pci_set_dma_mask(pdev, DMA_64BIT_MASK)) {
+	if (!pci_set_dma_mask(pdev, DMA_BIT_MASK(64))) {
 		use_dac = 1;
-		err = pci_set_consistent_dma_mask(pdev, DMA_64BIT_MASK);
+		err = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(64));
 		if (err) {
 			dprintk(SAA716x_ERROR, 1, "Unable to obtain 64bit DMA");
 			goto fail1;
 		}
-	} else if ((err = pci_set_consistent_dma_mask(pdev, DMA_32BIT_MASK)) != 0) {
+	} else if ((err = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(32))) != 0) {
 		dprintk(SAA716x_ERROR, 1, "Unable to obtain 32bit DMA");
 		goto fail1;
 	}

From 00b5d0995ec28575ddcb87b79bd959df76a1aad4 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 12 Jan 2010 20:53:16 +0400
Subject: [PATCH 138/364] saa716x: Deinitialize I2C interrupts on exit

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 119d8fef25981..34630e15a09dc 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -148,6 +148,15 @@ static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	return;
 }
 
+static void saa716x_i2c_hwdeinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+
+	/* Disable all interrupts and clear status */
+	SAA716x_EPWR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
+	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+}
+
 static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
@@ -563,6 +572,7 @@ int __devexit saa716x_i2c_exit(struct saa716x_dev *saa716x)
 #if 0
 		saa716x_remove_irqvector(saa716x, i2c_vec[i].vector);
 #endif
+		saa716x_i2c_hwdeinit(i2c, SAA716x_I2C_BUS(i));
 		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
 
 		err = i2c_del_adapter(adapter);

From b69258d7cb215db9deaaff07387df3cbd122bb7a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 12 Jan 2010 21:28:38 +0400
Subject: [PATCH 139/364] saa716x: Factorize register/detach routines to common
 code

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 31 +++++++-
 drivers/media/pci/saa716x/saa716x_budget.c | 28 +++----
 drivers/media/pci/saa716x/saa716x_ff.c     | 17 -----
 drivers/media/pci/saa716x/saa716x_hybrid.c | 87 ++++++----------------
 4 files changed, 66 insertions(+), 97 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 8596cc38b95b2..d60aeb5479ae8 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -186,10 +186,28 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 			goto err5;
 		}
 
-		if (config->frontend_attach)
-			config->frontend_attach(saa716x_adap, i);
-		else
+		if (config->frontend_attach) {
+			result = config->frontend_attach(saa716x_adap, i);
+			if (result < 0)
+				dprintk(SAA716x_ERROR, 1, "SAA716x frontend attach failed");
+
+			if (saa716x_adap->fe == NULL) {
+				dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x] subsystem [%04x:%04x]\n",
+					saa716x->pdev->vendor,
+					saa716x->pdev->device,
+					saa716x->pdev->subsystem_vendor,
+					saa716x->pdev->subsystem_device);
+			} else {
+				result = dvb_register_frontend(&saa716x_adap->dvb_adapter, saa716x_adap->fe);
+				if (result < 0) {
+					dprintk(SAA716x_ERROR, 1, "SAA716x register frontend failed");
+					goto err6;
+				}
+			}
+
+		} else {
 			dprintk(SAA716x_ERROR, 1, "Frontend attach = NULL");
+		}
 
 		saa716x_adap++;
 	}
@@ -213,6 +231,8 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 	return 0;
 
 	/* Error conditions */
+err6:
+	dvb_frontend_detach(saa716x_adap->fe);
 err5:
 	saa716x_frontend_power(saa716x, i, 0);
 err4:
@@ -242,6 +262,11 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
 
+		if (saa716x_adap->fe) {
+			dvb_unregister_frontend(saa716x_adap->fe);
+			dvb_frontend_detach(saa716x_adap->fe);
+		}
+
 //		tasklet_kill(&saa716x->tasklet);
 		dvb_net_release(&saa716x_adap->dvb_net);
 		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index c70a05a5f9072..9813c742d80d0 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -291,25 +291,27 @@ static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int c
 	struct saa716x_dev *saa716x = adapter->saa716x;
 	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+	if (count == 0) {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-	saa716x_gpio_write(saa716x, GPIO_10, 1);
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+		saa716x_gpio_write(saa716x, GPIO_10, 1);
 
-	msleep(100);
+		msleep(100);
 
-	dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
-	adapter->fe = mb86a16_attach(&vp1028_mb86a16_config, &i2c->i2c_adapter);
-	if (adapter->fe) {
-		dprintk(SAA716x_ERROR, 1, "found MB86A16 DVB-S/DSS frontend @0x%02x",
-			vp1028_mb86a16_config.demod_address);
+		dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
+		adapter->fe = mb86a16_attach(&vp1028_mb86a16_config, &i2c->i2c_adapter);
+		if (adapter->fe) {
+			dprintk(SAA716x_ERROR, 1, "found MB86A16 DVB-S/DSS frontend @0x%02x",
+				vp1028_mb86a16_config.demod_address);
 
-	} else {
-		goto exit;
+		} else {
+			goto exit;
+		}
+		dprintk(SAA716x_ERROR, 1, "Done!");
 	}
 
-	dprintk(SAA716x_ERROR, 1, "Done!");
 	return 0;
 exit:
 	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff.c
index a2e61474e87bb..f480e224ec3d6 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.c
+++ b/drivers/media/pci/saa716x/saa716x_ff.c
@@ -1381,23 +1381,6 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 				   i2c_adapter,
 				   &tt6400_isl6423_config[count]);
 
-		} else {
-			dvb_frontend_detach(adapter->fe);
-			adapter->fe = NULL;
-		}
-		if (adapter->fe == NULL) {
-			dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
-				saa716x->pdev->vendor,
-				saa716x->pdev->device,
-				saa716x->pdev->subsystem_vendor,
-				saa716x->pdev->subsystem_device);
-
-		} else {
-			if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
-				dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
-				dvb_frontend_detach(adapter->fe);
-				adapter->fe = NULL;
-			}
 		}
 	}
 	return 0;
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index fd527b1cec29a..76eedec073884 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -300,25 +300,14 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 #endif
 	adapter->fe = tda10046_attach(&tda1004x_vp6090_config, &i2c->i2c_adapter);
 	if (adapter->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
-			saa716x->pdev->vendor,
-			saa716x->pdev->device,
-			saa716x->pdev->subsystem_vendor,
-			saa716x->pdev->subsystem_device);
+		dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+		return -ENODEV;
 	} else {
-		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
-			dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
-			dvb_frontend_detach(adapter->fe);
-			adapter->fe = NULL;
-			goto exit;
-		}
+		dprintk(SAA716x_ERROR, 1, "Done!");
+		return 0;
 	}
 
-	dprintk(SAA716x_ERROR, 1, "Done!");
 	return 0;
-exit:
-	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
-	return -ENODEV;
 }
 
 static struct saa716x_config saa716x_vp6090_config = {
@@ -370,28 +359,24 @@ static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter, int
 	struct saa716x_dev *saa716x = adapter->saa716x;
 	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-	saa716x_gpio_write(saa716x, GPIO_14, 1);
-	msleep(100);
+	if (count  == 0) {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+		saa716x_gpio_write(saa716x, GPIO_14, 1);
+		msleep(100);
 
-	adapter->fe = tda10046_attach(&tda1004x_atlantis_config, &i2c->i2c_adapter);
-	if (adapter->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
-			saa716x->pdev->vendor,
-			saa716x->pdev->device,
-			saa716x->pdev->subsystem_vendor,
-			saa716x->pdev->subsystem_device);
-	} else {
-		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
-			dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
-			dvb_frontend_detach(adapter->fe);
-			adapter->fe = NULL;
+		adapter->fe = tda10046_attach(&tda1004x_atlantis_config, &i2c->i2c_adapter);
+		if (adapter->fe == NULL) {
+			dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+			return -ENODEV;
+		} else {
+			dprintk(SAA716x_ERROR, 1, "Done!");
+			return 0;
 		}
 	}
 
-	return -ENODEV;
+	return 0;
 }
 
 static struct saa716x_config saa716x_atlantis_config = {
@@ -446,22 +431,11 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-	saa716x_gpio_write(saa716x, GPIO_14, 1);
-	msleep(100);
-	adapter->fe = tda10046_attach(&tda1004x_nemo_config, &i2c->i2c_adapter);
-	if (adapter->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x subsystem [%04x:%04x]\n",
-			saa716x->pdev->vendor,
-			saa716x->pdev->device,
-			saa716x->pdev->subsystem_vendor,
-			saa716x->pdev->subsystem_device);
-	} else {
-		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
-			dprintk(SAA716x_ERROR, 1, "Frontend registration failed!\n");
-			dvb_frontend_detach(adapter->fe);
-			adapter->fe = NULL;
-		}
+	if (count  == 0) {
+		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+		saa716x_gpio_write(saa716x, GPIO_14, 1);
+		msleep(100);
+		adapter->fe = tda10046_attach(&tda1004x_nemo_config, &i2c->i2c_adapter);
 	}
 
 	return 0;
@@ -501,27 +475,12 @@ static struct zl10353_config saa716x_averhc82_zl10353_config = {
 static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-//	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
 //	adapter->fe = zl10353_attach(&saa716x_averhc82_zl10353_config, &i2c->i2c_adapter);
-	if (adapter->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "No Frontend found");
-		return -ENODEV;
-	} else {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) ZL10353 demodulator succesfully attached", count);
-		if (dvb_register_frontend(&adapter->dvb_adapter, adapter->fe)) {
-			dprintk(SAA716x_ERROR, 1, "ERROR: Frontend registration failed");
-
-			if (adapter->fe->ops.release)
-				adapter->fe->ops.release(adapter->fe);
 
-			adapter->fe = NULL;
-			return -ENODEV;
-		}
-	}
 
 	return 0;
 }

From e47dc3a16ecba02341cc8274068078fdd2a5581b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 12 Jan 2010 22:16:59 +0400
Subject: [PATCH 140/364] saa716x: Start DMA engine as and when requested

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 52 ++++++++++++------------
 drivers/media/pci/saa716x/saa716x_priv.h |  1 +
 2 files changed, 28 insertions(+), 25 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index d60aeb5479ae8..d04d6ed44ef7a 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -16,14 +16,29 @@
 DVB_DEFINE_MOD_OPT_ADAPTER_NR(adapter_nr);
 
 
-void saa716x_dma_start(struct saa716x_dev *saa716x)
+void saa716x_dma_start(struct saa716x_dev *saa716x, u8 adapter)
 {
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Start DMA engine");
+	struct fgpi_stream_params params;
+
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Start DMA engine for Adapter:%d", adapter);
+
+	params.bits		= 8;
+	params.samples		= 188;
+	params.lines		= 348;
+	params.pitch		= 188;
+	params.offset		= 0;
+	params.page_tables	= 0;
+	params.stream_type	= FGPI_TRANSPORT_STREAM;
+	params.stream_flags	= 0;
+
+	saa716x_fgpi_start(saa716x, saa716x->config->adap_config[adapter].ts_port, &params);
 }
 
-void saa716x_dma_stop(struct saa716x_dev *saa716x)
+void saa716x_dma_stop(struct saa716x_dev *saa716x, u8 adapter)
 {
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Stop DMA engine");
+	dprintk(SAA716x_DEBUG, 1, "SAA716x Stop DMA engine for Adapter:%d", adapter);
+
+	saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[adapter].ts_port);
 }
 
 static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
@@ -44,7 +59,7 @@ static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
 	if (saa716x_adap->feeds == 1) {
 		dprintk(SAA716x_DEBUG, 1, "SAA716x start feed & dma");
 		printk("saa716x start feed & dma\n");
-		saa716x_dma_start(saa716x);
+		saa716x_dma_start(saa716x, saa716x_adap->count);
 	}
 
 	return saa716x_adap->feeds;
@@ -65,7 +80,7 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	if (saa716x_adap->feeds == 0) {
 		dprintk(SAA716x_DEBUG, 1, "saa716x stop feed and dma");
 		printk("saa716x stop feed and dma\n");
-		saa716x_dma_stop(saa716x);
+		saa716x_dma_stop(saa716x, saa716x_adap->count);
 	}
 
 	return 0;
@@ -117,6 +132,9 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Error registering adapter");
 			return -ENODEV;
 		}
+
+		saa716x_adap->count			= i;
+
 		saa716x_adap->dvb_adapter.priv		= saa716x_adap;
 		saa716x_adap->demux.dmx.capabilities	= DMX_TS_FILTERING	|
 							  DMX_SECTION_FILTERING	|
@@ -209,25 +227,12 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Frontend attach = NULL");
 		}
 
-		saa716x_adap++;
-	}
-
-	for (i = 0; i < config->adapters; i++) {
-		struct fgpi_stream_params params;
-
 		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port);
 
-		params.bits = 8;
-		params.samples = 188;
-		params.lines = 348;
-		params.pitch = 188;
-		params.offset = 0;
-		params.page_tables = 0;
-		params.stream_type = FGPI_TRANSPORT_STREAM;
-		params.stream_flags = 0;
-		saa716x_fgpi_start(saa716x, config->adap_config[i].ts_port, &params);
+		saa716x_adap++;
 	}
 
+
 	return 0;
 
 	/* Error conditions */
@@ -256,11 +261,8 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 	int i;
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
-		saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[i].ts_port);
-		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_port);
-	}
 
-	for (i = 0; i < saa716x->config->adapters; i++) {
+		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_port);
 
 		if (saa716x_adap->fe) {
 			dvb_unregister_frontend(saa716x_adap->fe);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 9fd4bdae5a720..a1738b99fc204 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -122,6 +122,7 @@ struct saa716x_adapter {
 	struct saa716x_dev		*saa716x;
 
 	u8				feeds;
+	u8				count;
 };
 
 struct saa716x_dev {

From 91add67f5d818b7f2e4594f6e2a491c289440812 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Tue, 12 Jan 2010 23:16:27 +0400
Subject: [PATCH 141/364] saa716x: Enable timeout for modules having no clock

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 8 ++++++++
 drivers/media/pci/saa716x/saa716x_boot.h | 3 +++
 2 files changed, 11 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 70d8814917c18..507c8706cab02 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -10,7 +10,9 @@
 #include "saa716x_dma_reg.h"
 #include "saa716x_gpio_reg.h"
 #include "saa716x_fgpi_reg.h"
+#include "saa716x_dcs_reg.h"
 
+#include "saa716x_boot.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
@@ -222,6 +224,12 @@ EXPORT_SYMBOL_GPL(saa716x_core_boot);
 
 int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 {
+	/*
+	 * create time out for blocks that have no clock
+	 * helps with lower bitrates on FGPI
+	 */
+	SAA716x_EPWR(DCS, DCSC_CTRL, ENABLE_TIMEOUT);
+
 	/* Reset all blocks */
 	SAA716x_EPWR(MSI, MSI_SW_RST, MSI_SW_RESET);
 	SAA716x_EPWR(MMU, MMU_SW_RST, MMU_SW_RESET);
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index 5c22d8ecb96e7..8102853bc2b0b 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -1,6 +1,9 @@
 #ifndef __SAA716x_BOOT_H
 #define __SAA716x_BOOT_H
 
+#define DISABLE_TIMEOUT		0x17
+#define ENABLE_TIMEOUT		0x16
+
 enum saa716x_boot_mode {
 	SAA716x_EXT_BOOT = 1,
 	SAA716x_INT_BOOT, /* GPIO[31:30] = 0x01 */

From 0514f938807aeb494c2973410575880620493500 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Thu, 14 Jan 2010 17:00:17 +0400
Subject: [PATCH 142/364] saa716x: Reset the frontend after powerup

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9813c742d80d0..f55d95bc93845 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -289,15 +289,23 @@ struct mb86a16_config vp1028_mb86a16_config = {
 static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[count];
+	struct saa716x_i2c *i2c = &saa716x->i2c[0];
 
 	if (count == 0) {
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
 		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-		saa716x_gpio_write(saa716x, GPIO_10, 1);
+		saa716x_gpio_write(saa716x, GPIO_10, 0);
+		msleep(100);
 
+		saa716x_gpio_write(saa716x, GPIO_12, 1);
+		msleep(100);
+		saa716x_gpio_write(saa716x, GPIO_12, 0);
+		msleep(100);
+		saa716x_gpio_write(saa716x, GPIO_12, 1);
+		msleep(100);
+		saa716x_gpio_write(saa716x, GPIO_12, 0);
 		msleep(100);
 
 		dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");

From 08b7ffa0294bab5f02cb97079359339ebbc9d7a2 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Sun, 17 Jan 2010 14:56:25 +0400
Subject: [PATCH 143/364] saa716x: GPIO fix

From Andreas

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 6 ++++--
 drivers/media/pci/saa716x/saa716x_budget.c | 2 +-
 drivers/media/pci/saa716x/saa716x_gpio.c   | 4 ++--
 3 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index d04d6ed44ef7a..0c211ee5bb139 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -93,7 +93,8 @@ static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 contro
 
 	if (adap_cfg->power_ctl != 0) {
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
-		saa716x_gpio_ctl(saa716x, 0, adap_cfg->power_ctl); /* TODO! check mask */
+		/* configure GPIO as output */
+		saa716x_gpio_ctl(saa716x, ~adap_cfg->power_ctl, 0);
 		saa716x_gpio_bits(saa716x, adap_cfg->power_ctl);
 	}
 
@@ -107,7 +108,8 @@ static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
 
 	if (adap_cfg->reset_ctl != 0) {
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
-		saa716x_gpio_ctl(saa716x, 0, adap_cfg->reset_ctl); /* TODO! check mask */
+		/* configure GPIO as output */
+		saa716x_gpio_ctl(saa716x, ~adap_cfg->reset_ctl, 0);
 		saa716x_gpio_bits(saa716x, adap_cfg->reset_ctl);
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index f55d95bc93845..34f38d1cedd15 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -296,7 +296,7 @@ static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int c
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
 		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-		saa716x_gpio_write(saa716x, GPIO_10, 0);
+		saa716x_gpio_write(saa716x, GPIO_10, 1);
 		msleep(100);
 
 		saa716x_gpio_write(saa716x, GPIO_12, 1);
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index d14acefb47482..62b6112d38af2 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -55,8 +55,8 @@ void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 mask, u32 bits)
 	spin_lock_irqsave(&saa716x->gpio_lock, flags);
 
 	reg  = SAA716x_EPRD(GPIO, GPIO_OEN);
-	reg &= ~mask;
-	reg |= (bits & mask);
+	reg &= mask;
+	reg |= bits;
 	SAA716x_EPWR(GPIO, GPIO_OEN, reg);
 
 	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);

From 2a2ffabcecce63c49fc371ea2f7d955c41c45ebe Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Sun, 17 Jan 2010 23:52:10 +0400
Subject: [PATCH 144/364] saa716x: Fix powerup/reset

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   | 44 +---------------------
 drivers/media/pci/saa716x/saa716x_budget.c | 28 +++++++++-----
 drivers/media/pci/saa716x/saa716x_priv.h   |  1 +
 3 files changed, 22 insertions(+), 51 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 0c211ee5bb139..81b2de8ce6564 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -86,42 +86,14 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	return 0;
 }
 
-static int saa716x_frontend_power(struct saa716x_dev *saa716x, u8 DEV, u8 control)
-{
-	struct saa716x_config *config		= saa716x->config;
-	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
-
-	if (adap_cfg->power_ctl != 0) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", DEV);
-		/* configure GPIO as output */
-		saa716x_gpio_ctl(saa716x, ~adap_cfg->power_ctl, 0);
-		saa716x_gpio_bits(saa716x, adap_cfg->power_ctl);
-	}
-
-	return 0;
-}
-
-static int saa716x_frontend_reset(struct saa716x_dev *saa716x, u8 DEV)
-{
-	struct saa716x_config *config		= saa716x->config;
-	struct saa716x_adap_config *adap_cfg	= &config->adap_config[DEV];
-
-	if (adap_cfg->reset_ctl != 0) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) RESET", DEV);
-		/* configure GPIO as output */
-		saa716x_gpio_ctl(saa716x, ~adap_cfg->reset_ctl, 0);
-		saa716x_gpio_bits(saa716x, adap_cfg->reset_ctl);
-	}
-
-	return 0;
-}
-
 int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	struct saa716x_config *config = saa716x->config;
 	int result, i;
 
+	mutex_init(&saa716x->adap_lock);
+
 	for (i = 0; i < config->adapters; i++) {
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
@@ -196,16 +168,6 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 		dprintk(SAA716x_DEBUG, 1, "Frontend Init");
 		saa716x_adap->saa716x = saa716x;
 
-		if ((result = saa716x_frontend_power(saa716x, i, 1)) < 0) {
-			dprintk(SAA716x_ERROR, 1, "SAA716x frontend powerup failed");
-			goto err5;
-		}
-
-		if ((result = saa716x_frontend_reset(saa716x, i)) < 0) {
-			dprintk(SAA716x_ERROR, 1, "SAA716x frontend reset failed");
-			goto err5;
-		}
-
 		if (config->frontend_attach) {
 			result = config->frontend_attach(saa716x_adap, i);
 			if (result < 0)
@@ -240,8 +202,6 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 	/* Error conditions */
 err6:
 	dvb_frontend_detach(saa716x_adap->fe);
-err5:
-	saa716x_frontend_power(saa716x, i, 0);
 err4:
 	saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 err3:
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 34f38d1cedd15..795caf6489fa6 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -292,22 +292,32 @@ static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int c
 	struct saa716x_i2c *i2c = &saa716x->i2c[0];
 
 	if (count == 0) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-		saa716x_gpio_write(saa716x, GPIO_10, 1);
-		msleep(100);
+		mutex_lock(&saa716x->adap_lock);
+
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", count);
+		saa716x_gpio_set_output(saa716x, 10);
+		msleep(1);
 
-		saa716x_gpio_write(saa716x, GPIO_12, 1);
+		/* VP-1028 has inverted power supply control */
+		saa716x_gpio_write(saa716x, 10, 1); /* set to standby */
+		saa716x_gpio_write(saa716x, 10, 0); /* switch it on */
 		msleep(100);
-		saa716x_gpio_write(saa716x, GPIO_12, 0);
+
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Reset", count);
+		saa716x_gpio_set_output(saa716x, 12);
+		msleep(1);
+
+		/* reset demodulator (Active LOW) */
+		saa716x_gpio_write(saa716x, 12, 1);
 		msleep(100);
-		saa716x_gpio_write(saa716x, GPIO_12, 1);
+		saa716x_gpio_write(saa716x, 12, 0);
 		msleep(100);
-		saa716x_gpio_write(saa716x, GPIO_12, 0);
+		saa716x_gpio_write(saa716x, 12, 1);
 		msleep(100);
 
+		mutex_unlock(&saa716x->adap_lock);
+
 		dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
 		adapter->fe = mb86a16_attach(&vp1028_mb86a16_config, &i2c->i2c_adapter);
 		if (adapter->fe) {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index a1738b99fc204..9f608a0608928 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -155,6 +155,7 @@ struct saa716x_dev {
 	struct saa716x_spi_config	spi_config;
 
 	struct saa716x_adapter		saa716x_adap[2];
+	struct mutex			adap_lock;
 	struct saa716x_cgu		cgu;
 
 	spinlock_t			gpio_lock;

From 8628c54dd28aca547bfe5f178a221fe7d5cbb59b Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Mon, 18 Jan 2010 03:11:30 +0400
Subject: [PATCH 145/364] saa716x: Use the correct I2C Bus

Thanks to Andreas..
Still no communication to frontend ... :-(


[18601.568157] saa716x_pci_init (0): found a Twinhan/Azurewave VP-1028 PCIe card
[18601.568177] SAA716x Budget 0000:07:00.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16
[18601.568184] SAA716x Budget 0000:07:00.0: enabling bus mastering
[18601.568190] SAA716x Budget 0000:07:00.0: setting latency timer to 64
[18601.568309]     SAA7160 Rev 1 [1822:0044], irq: 16,
[18601.568313]     mmio: 0xfed80000
[18601.568316]     SAA7160 64Bit, MSI Disabled, MSI-X=1 msgs
[18601.568324] saa716x_getbootscript_setup (0): Domain 0: Clk PSS <0x218> Divider: 0x7f80d --> N=1, M=2, freq=1250
[18601.568331] saa716x_getbootscript_setup (0): Domain 1: Clk DCS <0x21c> Divider: 0x7f80d --> N=1, M=2, freq=1250
[18601.568337] saa716x_getbootscript_setup (0): Domain 2: Clk SPI <0x220> Divider: 0x7f825 --> N=1, M=5, freq=500
[18601.568343] saa716x_getbootscript_setup (0): Domain 3: Clk I2C/Boot <0x224> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568349] saa716x_getbootscript_setup (0): Domain 4: Clk PHI <0x228> Divider: 0x7f80d --> N=1, M=2, freq=1250
[18601.568355] saa716x_getbootscript_setup (0): Domain 5: Clk VI0 <0x22c> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568361] saa716x_getbootscript_setup (0): Domain 6: Clk VI1 <0x230> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568367] saa716x_getbootscript_setup (0): Domain 7: Clk FGPI0 <0x234> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568373] saa716x_getbootscript_setup (0): Domain 8: Clk FGPI1 <0x238> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568379] saa716x_getbootscript_setup (0): Domain 9: Clk FGPI2 <0x23c> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568385] saa716x_getbootscript_setup (0): Domain 10: Clk FGPI3 <0x240> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568391] saa716x_getbootscript_setup (0): Domain 11: Clk AI0 <0x244> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568398] saa716x_getbootscript_setup (0): Domain 12: Clk AI1 <0x248> Divider: 0x7f84d --> N=1, M=10, freq=250
[18601.568404] saa716x_getbootscript_setup (0): Domain 13: Clk Phy <0x24c> Divider: 0x7f80d --> N=1, M=2, freq=1250
[18601.568412] saa716x_core_boot (0): Using External Boot from config
[18601.568416] saa716x_budget_pci_probe (0): SAA716x Core Boot Success
[18601.568419] saa716x_msi_init (0): Initializing MSI ..
[18601.580014] saa716x_msi_init (0): Interrupts ena_l <00> ena_h <00> sta_l <00> sta_h <00>
[18601.580019] saa716x_jetpack_init (0): SAA7160 Jetpack Successfully initialized
[18601.580022] saa716x_i2c_init (0): Initializing SAA7160 I2C Core
[18601.580026] saa716x_i2c_init (0): Initializing adapter (0) SAA716x I2C Core 0
[18601.580663] i2c-adapter i2c-7: adapter [SAA716x I2C Core 0] registered
[18601.580672] saa716x_i2c_hwinit (0): Adapter (b000) SAA716x I2C Core 0 RESET
[18601.580675] saa716x_i2c_hwinit (0): Initializing Adapter SAA716x I2C Core 0 @ 100k
[18601.580683] saa716x_i2c_hwinit (0): Adapter (b000) Autowake <0> Active <1>
[18601.580686] saa716x_i2c_init (0): Initializing adapter (1) SAA716x I2C Core 1
[18601.581242] i2c-adapter i2c-8: adapter [SAA716x I2C Core 1] registered
[18601.581251] saa716x_i2c_hwinit (0): Adapter (c000) SAA716x I2C Core 1 RESET
[18601.581254] saa716x_i2c_hwinit (0): Initializing Adapter SAA716x I2C Core 1 @ 100k
[18601.581261] saa716x_i2c_hwinit (0): Adapter (c000) Autowake <0> Active <1>
[18601.581264] saa716x_i2c_init (0): SAA7160 I2C Core succesfully initialized
[18601.581269] i2c-adapter i2c-7: master_xfer[0] W, addr=0x50, len=2
[18601.581273] i2c-adapter i2c-7: master_xfer[1] R, addr=0x50, len=240
[18601.581275]
[18601.581277] saa716x_i2c_xfer (0): Bus(b000) I2C transfer
[18601.581281] saa716x_i2c_xfer (0): length=2 Addr:0x1a0
[18601.581292]     <W 0000> 0x00
[18601.581380]     <W 0001> 0x00
[18601.581468] saa716x_i2c_xfer (0): length=240 Addr:0x1a1
[18601.581739]     <R 0000> 0x00
[18601.581740]
[18601.581840]     <R 0001> 0x20
[18601.581841]
[18601.581942]     <R 0002> 0x01
[18601.581943]
[18601.582043]     <R 0003> 0x00
[18601.582044]
[18601.582145]     <R 0004> 0x22
[18601.582146]
[18601.582246]     <R 0005> 0x18
[18601.582247]
[18601.582348]     <R 0006> 0x44
[18601.582349]
[18601.582449]     <R 0007> 0x00
[18601.582450]
[18601.582551]     <R 0008> 0x00
[18601.582552]
[18601.582652]     <R 0009> 0x00
[18601.582654]
[18601.582754]     <R 000a> 0x08
[18601.582755]
[18601.582855]     <R 000b> 0xca
[18601.582856]
[18601.582956]     <R 000c> 0x00
[18601.582957]
[18601.583057]     <R 000d> 0x00
[18601.583058]
[18601.583159]     <R 000e> 0x00
[18601.583160]
[18601.583260]     <R 000f> 0x00
[18601.583261]
[18601.583362]     <R 0010> 0x08
[18601.583363]
[18601.583463]     <R 0011> 0x20
[18601.583464]
[18601.583565]     <R 0012> 0x01
[18601.583566]
[18601.583666]     <R 0013> 0x00
[18601.583667]
[18601.583768]     <R 0014> 0x00
[18601.583769]
[18601.583869]     <R 0015> 0x00
[18601.583870]
[18601.583971]     <R 0016> 0x00
[18601.583972]
[18601.584078]     <R 0017> 0x00
[18601.584079]
[18601.584180]     <R 0018> 0x0c
[18601.584181]
[18601.584282]     <R 0019> 0x20
[18601.584283]
[18601.584385]     <R 001a> 0x01
[18601.584386]
[18601.584487]     <R 001b> 0x00
[18601.584488]
[18601.584588]     <R 001c> 0x00
[18601.584589]
[18601.584690]     <R 001d> 0x00
[18601.584691]
[18601.584792]     <R 001e> 0x00
[18601.584793]
[18601.584893]     <R 001f> 0x00
[18601.584894]
[18601.584995]     <R 0020> 0x18
[18601.584996]
[18601.585096]     <R 0021> 0x20
[18601.585097]
[18601.585197]     <R 0022> 0x01
[18601.585199]
[18601.585299]     <R 0023> 0x00
[18601.585300]
[18601.585401]     <R 0024> 0x00
[18601.585402]
[18601.585502]     <R 0025> 0x0e
[18601.585503]
[18601.585604]     <R 0026> 0x00
[18601.585605]
[18601.585706]     <R 0027> 0x00
[18601.585707]
[18601.585808]     <R 0028> 0x0c
[18601.585809]
[18601.585909]     <R 0029> 0xe0
[18601.585910]
[18601.586011]     <R 002a> 0x00
[18601.586012]
[18601.586112]     <R 002b> 0x00
[18601.586113]
[18601.586213]     <R 002c> 0xff
[18601.586214]
[18601.586315]     <R 002d> 0xff
[18601.586316]
[18601.586417]     <R 002e> 0xff
[18601.586418]
[18601.586519]     <R 002f> 0xfc
[18601.586520]
[18601.586620]     <R 0030> 0xec
[18601.586621]
[18601.586721]     <R 0031> 0x30
[18601.586722]
[18601.586823]     <R 0032> 0x01
[18601.586824]
[18601.586925]     <R 0033> 0x00
[18601.586926]
[18601.587026]     <R 0034> 0x06
[18601.587028]
[18601.587128]     <R 0035> 0x00
[18601.587129]
[18601.587230]     <R 0036> 0x00
[18601.587231]
[18601.587331]     <R 0037> 0x00
[18601.587332]
[18601.587433]     <R 0038> 0xf0
[18601.587434]
[18601.587534]     <R 0039> 0x30
[18601.587536]
[18601.587636]     <R 003a> 0x01
[18601.587637]
[18601.587738]     <R 003b> 0x00
[18601.587739]
[18601.587839]     <R 003c> 0x06
[18601.587840]
[18601.587941]     <R 003d> 0x00
[18601.587942]
[18601.588047]     <R 003e> 0x00
[18601.588049]
[18601.588149]     <R 003f> 0x00
[18601.588150]
[18601.588251]     <R 0040> 0xf4
[18601.588252]
[18601.588352]     <R 0041> 0x30
[18601.588353]
[18601.588454]     <R 0042> 0x01
[18601.588455]
[18601.588556]     <R 0043> 0x00
[18601.588557]
[18601.588657]     <R 0044> 0x06
[18601.588658]
[18601.588759]     <R 0045> 0x00
[18601.588760]
[18601.588861]     <R 0046> 0x00
[18601.588862]
[18601.588962]     <R 0047> 0x00
[18601.588963]
[18601.589063]     <R 0048> 0xfc
[18601.589064]
[18601.589165]     <R 0049> 0x30
[18601.589166]
[18601.589267]     <R 004a> 0x01
[18601.589268]
[18601.589368]     <R 004b> 0x00
[18601.589369]
[18601.589470]     <R 004c> 0x06
[18601.589471]
[18601.589572]     <R 004d> 0x00
[18601.589573]
[18601.589673]     <R 004e> 0x00
[18601.589674]
[18601.589775]     <R 004f> 0x00
[18601.589776]
[18601.589877]     <R 0050> 0x0c
[18601.589878]
[18601.589978]     <R 0051> 0x31
[18601.589979]
[18601.590080]     <R 0052> 0x01
[18601.590081]
[18601.590181]     <R 0053> 0x00
[18601.590182]
[18601.590283]     <R 0054> 0x06
[18601.590284]
[18601.590384]     <R 0055> 0x00
[18601.590385]
[18601.590486]     <R 0056> 0x00
[18601.590487]
[18601.590587]     <R 0057> 0x00
[18601.590588]
[18601.590689]     <R 0058> 0x18
[18601.590690]
[18601.590790]     <R 0059> 0x31
[18601.590791]
[18601.590892]     <R 005a> 0x01
[18601.590893]
[18601.590993]     <R 005b> 0x00
[18601.590994]
[18601.591095]     <R 005c> 0x06
[18601.591096]
[18601.591196]     <R 005d> 0x00
[18601.591197]
[18601.591298]     <R 005e> 0x00
[18601.591299]
[18601.591399]     <R 005f> 0x00
[18601.591400]
[18601.591501]     <R 0060> 0x20
[18601.591502]
[18601.591602]     <R 0061> 0x31
[18601.591604]
[18601.591704]     <R 0062> 0x01
[18601.591705]
[18601.591806]     <R 0063> 0x00
[18601.591807]
[18601.591908]     <R 0064> 0x06
[18601.591909]
[18601.592015]     <R 0065> 0x00
[18601.592016]
[18601.592117]     <R 0066> 0x00
[18601.592118]
[18601.592218]     <R 0067> 0x00
[18601.592220]
[18601.592320]     <R 0068> 0x24
[18601.592321]
[18601.592422]     <R 0069> 0x31
[18601.592423]
[18601.592524]     <R 006a> 0x01
[18601.592525]
[18601.592625]     <R 006b> 0x00
[18601.592626]
[18601.592727]     <R 006c> 0x06
[18601.592728]
[18601.592828]     <R 006d> 0x00
[18601.592829]
[18601.592930]     <R 006e> 0x00
[18601.592931]
[18601.593031]     <R 006f> 0x00
[18601.593032]
[18601.593133]     <R 0070> 0x28
[18601.593134]
[18601.593234]     <R 0071> 0x31
[18601.593235]
[18601.593336]     <R 0072> 0x01
[18601.593337]
[18601.593437]     <R 0073> 0x00
[18601.593438]
[18601.593539]     <R 0074> 0x06
[18601.593540]
[18601.593641]     <R 0075> 0x00
[18601.593642]
[18601.593742]     <R 0076> 0x00
[18601.593744]
[18601.593844]     <R 0077> 0x00
[18601.593845]
[18601.593945]     <R 0078> 0x2c
[18601.593947]
[18601.594048]     <R 0079> 0x31
[18601.594049]
[18601.594149]     <R 007a> 0x01
[18601.594150]
[18601.594251]     <R 007b> 0x00
[18601.594252]
[18601.594352]     <R 007c> 0x06
[18601.594353]
[18601.594454]     <R 007d> 0x00
[18601.594455]
[18601.594555]     <R 007e> 0x00
[18601.594556]
[18601.594657]     <R 007f> 0x00
[18601.594658]
[18601.594759]     <R 0080> 0x30
[18601.594760]
[18601.594861]     <R 0081> 0x31
[18601.594862]
[18601.594962]     <R 0082> 0x01
[18601.594963]
[18601.595063]     <R 0083> 0x00
[18601.595065]
[18601.595165]     <R 0084> 0x06
[18601.595166]
[18601.595266]     <R 0085> 0x00
[18601.595267]
[18601.595368]     <R 0086> 0x00
[18601.595369]
[18601.595469]     <R 0087> 0x00
[18601.595470]
[18601.595571]     <R 0088> 0x34
[18601.595572]
[18601.595672]     <R 0089> 0x31
[18601.595673]
[18601.595773]     <R 008a> 0x01
[18601.595774]
[18601.595875]     <R 008b> 0x00
[18601.595876]
[18601.595977]     <R 008c> 0x06
[18601.595978]
[18601.596084]     <R 008d> 0x00
[18601.596085]
[18601.596186]     <R 008e> 0x00
[18601.596187]
[18601.596287]     <R 008f> 0x00
[18601.596288]
[18601.596389]     <R 0090> 0x38
[18601.596390]
[18601.596491]     <R 0091> 0x31
[18601.596492]
[18601.596592]     <R 0092> 0x01
[18601.596593]
[18601.596694]     <R 0093> 0x00
[18601.596695]
[18601.596796]     <R 0094> 0x06
[18601.596797]
[18601.596897]     <R 0095> 0x00
[18601.596898]
[18601.596999]     <R 0096> 0x00
[18601.597000]
[18601.597100]     <R 0097> 0x00
[18601.597102]
[18601.597202]     <R 0098> 0x3c
[18601.597203]
[18601.597303]     <R 0099> 0x31
[18601.597305]
[18601.597405]     <R 009a> 0x01
[18601.597406]
[18601.597507]     <R 009b> 0x00
[18601.597508]
[18601.597609]     <R 009c> 0x06
[18601.597610]
[18601.597710]     <R 009d> 0x00
[18601.597712]
[18601.597812]     <R 009e> 0x00
[18601.597813]
[18601.597913]     <R 009f> 0x00
[18601.597914]
[18601.598015]     <R 00a0> 0x40
[18601.598016]
[18601.598117]     <R 00a1> 0x31
[18601.598118]
[18601.598218]     <R 00a2> 0x01
[18601.598219]
[18601.598320]     <R 00a3> 0x00
[18601.598321]
[18601.598421]     <R 00a4> 0x06
[18601.598422]
[18601.598523]     <R 00a5> 0x00
[18601.598524]
[18601.598624]     <R 00a6> 0x00
[18601.598625]
[18601.598726]     <R 00a7> 0x00
[18601.598727]
[18601.598827]     <R 00a8> 0x18
[18601.598829]
[18601.598929]     <R 00a9> 0x20
[18601.598930]
[18601.599030]     <R 00aa> 0x01
[18601.599032]
[18601.599132]     <R 00ab> 0x00
[18601.599133]
[18601.599234]     <R 00ac> 0x00
[18601.599235]
[18601.599336]     <R 00ad> 0x20
[18601.599337]
[18601.599438]     <R 00ae> 0x00
[18601.599439]
[18601.599539]     <R 00af> 0x00
[18601.599540]
[18601.599641]     <R 00b0> 0xf8
[18601.599642]
[18601.599742]     <R 00b1> 0x30
[18601.599743]
[18601.599844]     <R 00b2> 0x01
[18601.599845]
[18601.599946]     <R 00b3> 0x00
[18601.599947]
[18601.600054]     <R 00b4> 0x06
[18601.600055]
[18601.600155]     <R 00b5> 0x00
[18601.600156]
[18601.600257]     <R 00b6> 0x00
[18601.600258]
[18601.600358]     <R 00b7> 0x00
[18601.600359]
[18601.600460]     <R 00b8> 0x06
[18601.600461]
[18601.600561]     <R 00b9> 0x00
[18601.600563]
[18601.600663]     <R 00ba> 0x00
[18601.600664]
[18601.600765]     <R 00bb> 0x00
[18601.600766]
[18601.600866]     <R 00bc> 0xff
[18601.600867]
[18601.600968]     <R 00bd> 0xff
[18601.600969]
[18601.601070]     <R 00be> 0xff
[18601.601071]
[18601.601171]     <R 00bf> 0xff
[18601.601172]
[18601.601273]     <R 00c0> 0x53
[18601.601274]
[18601.601374]     <R 00c1> 0x54
[18601.601375]
[18601.601476]     <R 00c2> 0x41
[18601.601477]
[18601.601577]     <R 00c3> 0x52
[18601.601579]
[18601.601679]     <R 00c4> 0x54
[18601.601680]
[18601.601781]     <R 00c5> 0x08
[18601.601782]
[18601.601882]     <R 00c6> 0x00
[18601.601883]
[18601.601984]     <R 00c7> 0x00
[18601.601985]
[18601.602086]     <R 00c8> 0x01
[18601.602087]
[18601.602187]     <R 00c9> 0xb8
[18601.602188]
[18601.602289]     <R 00ca> 0x01
[18601.602290]
[18601.602391]     <R 00cb> 0x09
[18601.602392]
[18601.602492]     <R 00cc> 0x89
[18601.602493]
[18601.602594]     <R 00cd> 0x10
[18601.602595]
[18601.602695]     <R 00ce> 0x00
[18601.602696]
[18601.602797]     <R 00cf> 0xff
[18601.602798]
[18601.602898]     <R 00d0> 0xff
[18601.602899]
[18601.603000]     <R 00d1> 0x02
[18601.603001]
[18601.603102]     <R 00d2> 0x00
[18601.603103]
[18601.603203]     <R 00d3> 0x01
[18601.603204]
[18601.603305]     <R 00d4> 0x00
[18601.603306]
[18601.603406]     <R 00d5> 0x62
[18601.603407]
[18601.603508]     <R 00d6> 0x71
[18601.603509]
[18601.603610]     <R 00d7> 0x00
[18601.603611]
[18601.603711]     <R 00d8> 0xff
[18601.603712]
[18601.603813]     <R 00d9> 0x01
[18601.603814]
[18601.603915]     <R 00da> 0x00
[18601.603916]
[18601.604022]     <R 00db> 0x1a
[18601.604023]
[18601.604123]     <R 00dc> 0x00
[18601.604125]
[18601.604225]     <R 00dd> 0xff
[18601.604226]
[18601.604326]     <R 00de> 0x04
[18601.604327]
[18601.604428]     <R 00df> 0x20
[18601.604429]
[18601.604529]     <R 00e0> 0x00
[18601.604530]
[18601.604630]     <R 00e1> 0x0c
[18601.604632]
[18601.604732]     <R 00e2> 0xff
[18601.604733]
[18601.604833]     <R 00e3> 0xff
[18601.604835]
[18601.604935]     <R 00e4> 0xff
[18601.604936]
[18601.605036]     <R 00e5> 0xff
[18601.605037]
[18601.605137]     <R 00e6> 0x00
[18601.605138]
[18601.605239]     <R 00e7> 0x00
[18601.605240]
[18601.605340]     <R 00e8> 0x00
[18601.605341]
[18601.605442]     <R 00e9> 0x00
[18601.605443]
[18601.605543]     <R 00ea> 0x00
[18601.605544]
[18601.605645]     <R 00eb> 0x00
[18601.605646]
[18601.605747]     <R 00ec> 0x00
[18601.605748]
[18601.605848]     <R 00ed> 0x00
[18601.605849]
[18601.605950]     <R 00ee> 0x02
[18601.605951]
[18601.606051]     <R 00ef> 0x08
[18601.606052]
[18601.606055]     Card: Twinhan/Azurewave VP-1028
[18601.606057]     ---------------- SAA7160 ROM @ Offset 0x00 ----------------
[18601.606060]     0000:   00 20 01 00  22 18 44 00   00 00 08 ca  00 00 00 00
[18601.606074]     0010:   08 20 01 00  00 00 00 00   0c 20 01 00  00 00 00 00
[18601.606088]     0020:   18 20 01 00  00 0e 00 00   0c e0 00 00  ff ff ff fc
[18601.606101]     0030:   ec 30 01 00  06 00 00 00   f0 30 01 00  06 00 00 00
[18601.606115]     0040:   f4 30 01 00  06 00 00 00   fc 30 01 00  06 00 00 00
[18601.606128]     0050:   0c 31 01 00  06 00 00 00   18 31 01 00  06 00 00 00
[18601.606142]     0060:   20 31 01 00  06 00 00 00   24 31 01 00  06 00 00 00
[18601.606156]     0070:   28 31 01 00  06 00 00 00   2c 31 01 00  06 00 00 00
[18601.606169]     0080:   30 31 01 00  06 00 00 00   34 31 01 00  06 00 00 00
[18601.606183]     0090:   38 31 01 00  06 00 00 00   3c 31 01 00  06 00 00 00
[18601.606196]     00a0:   40 31 01 00  06 00 00 00   18 20 01 00  00 20 00 00
[18601.606210]     00b0:   f8 30 01 00  06 00 00 00   06 00 00 00  ff ff ff ff
[18601.606223]     00c0:   53 54 41 52  54 08 00 00   01 b8 01 09  89 10 00 ff
[18601.606237]     00d0:   ff 02 00 01  00 62 71 00   ff 01 00 1a  00 ff 04 20
[18601.606250]     00e0:   00 0c ff ff  ff ff 00 00   00 00 00 00  00 00 02 08
[18601.606265]     ---------------- SAA7160 ROM Dump end ---------------------
[18601.606266]
[18601.606271] saa716x_get_offset (0): Offset @ 192
[18601.606274] SAA7160 ROM: Data=440 bytes
[18601.606276] SAA7160 ROM: Version=1
[18601.606279] SAA7160 ROM: Devices=9
[18601.606281] SAA7160 ROM: Compressed=0
[18601.606282]
[18601.606286] saa716x_read_rombytes (0): Length=448, Count=4, Reg=0xc5
[18601.606289] i2c-adapter i2c-7: master_xfer[0] W, addr=0x50, len=2
[18601.606293] i2c-adapter i2c-7: master_xfer[1] R, addr=0x50, len=240
[18601.608495]
[18601.608498] saa716x_i2c_xfer (0): Bus(b000) I2C transfer
[18601.608502] saa716x_i2c_xfer (0): length=2 Addr:0x1a0
[18601.608513]     <W 0000> 0x00
[18601.608601]     <W 0001> 0xc5
[18601.608689] saa716x_i2c_xfer (0): length=240 Addr:0x1a1
[18601.608960]     <R 0000> 0x08
[18601.608961]
[18601.609061]     <R 0001> 0x00
[18601.609062]
[18601.609163]     <R 0002> 0x00
[18601.609164]
[18601.609265]     <R 0003> 0x01
[18601.609266]
[18601.609367]     <R 0004> 0xb8
[18601.609368]
[18601.609469]     <R 0005> 0x01
[18601.609470]
[18601.609570]     <R 0006> 0x09
[18601.609571]
[18601.609672]     <R 0007> 0x89
[18601.609673]
[18601.609773]     <R 0008> 0x10
[18601.609775]
[18601.609875]     <R 0009> 0x00
[18601.609876]
[18601.609977]     <R 000a> 0xff
[18601.609978]
[18601.610079]     <R 000b> 0xff
[18601.610080]
[18601.610181]     <R 000c> 0x02
[18601.610182]
[18601.610283]     <R 000d> 0x00
[18601.610284]
[18601.610384]     <R 000e> 0x01
[18601.610385]
[18601.610486]     <R 000f> 0x00
[18601.610487]
[18601.610588]     <R 0010> 0x62
[18601.610589]
[18601.610689]     <R 0011> 0x71
[18601.610691]
[18601.610791]     <R 0012> 0x00
[18601.610792]
[18601.610893]     <R 0013> 0xff
[18601.610894]
[18601.610995]     <R 0014> 0x01
[18601.610996]
[18601.611097]     <R 0015> 0x00
[18601.611098]
[18601.611199]     <R 0016> 0x1a
[18601.611200]
[18601.611300]     <R 0017> 0x00
[18601.611302]
[18601.611402]     <R 0018> 0xff
[18601.611404]
[18601.611504]     <R 0019> 0x04
[18601.611505]
[18601.611606]     <R 001a> 0x20
[18601.611607]
[18601.611708]     <R 001b> 0x00
[18601.611709]
[18601.611809]     <R 001c> 0x0c
[18601.611810]
[18601.611910]     <R 001d> 0xff
[18601.611912]
[18601.612018]     <R 001e> 0xff
[18601.612019]
[18601.612120]     <R 001f> 0xff
[18601.612121]
[18601.612221]     <R 0020> 0xff
[18601.612223]
[18601.612323]     <R 0021> 0x00
[18601.612324]
[18601.612425]     <R 0022> 0x00
[18601.612426]
[18601.612526]     <R 0023> 0x00
[18601.612527]
[18601.612628]     <R 0024> 0x00
[18601.612629]
[18601.612730]     <R 0025> 0x00
[18601.612731]
[18601.612832]     <R 0026> 0x00
[18601.612833]
[18601.612933]     <R 0027> 0x00
[18601.612934]
[18601.613034]     <R 0028> 0x00
[18601.613035]
[18601.613136]     <R 0029> 0x02
[18601.613137]
[18601.613238]     <R 002a> 0x08
[18601.613239]
[18601.613340]     <R 002b> 0x12
[18601.613341]
[18601.613442]     <R 002c> 0x0f
[18601.613443]
[18601.613544]     <R 002d> 0x00
[18601.613545]
[18601.613645]     <R 002e> 0x00
[18601.613646]
[18601.613747]     <R 002f> 0x21
[18601.613748]
[18601.613849]     <R 0030> 0x03
[18601.613850]
[18601.613950]     <R 0031> 0x00
[18601.613951]
[18601.614052]     <R 0032> 0x00
[18601.614053]
[18601.614154]     <R 0033> 0x10
[18601.614155]
[18601.614255]     <R 0034> 0x02
[18601.614256]
[18601.614356]     <R 0035> 0x00
[18601.614357]
[18601.614457]     <R 0036> 0x00
[18601.614459]
[18601.614559]     <R 0037> 0x3d
[18601.614561]
[18601.614661]     <R 0038> 0x08
[18601.614662]
[18601.614763]     <R 0039> 0x00
[18601.614764]
[18601.614865]     <R 003a> 0x00
[18601.614866]
[18601.614966]     <R 003b> 0x01
[18601.614967]
[18601.615068]     <R 003c> 0x00
[18601.615069]
[18601.615170]     <R 003d> 0x00
[18601.615171]
[18601.615272]     <R 003e> 0x00
[18601.615273]
[18601.615373]     <R 003f> 0x01
[18601.615375]
[18601.615475]     <R 0040> 0x00
[18601.615476]
[18601.615577]     <R 0041> 0x78
[18601.615578]
[18601.615679]     <R 0042> 0x00
[18601.615680]
[18601.615781]     <R 0043> 0x42
[18601.615782]
[18601.615883]     <R 0044> 0x02
[18601.615884]
[18601.615984]     <R 0045> 0x04
[18601.615985]
[18601.616091]     <R 0046> 0x6e
[18601.616092]
[18601.616193]     <R 0047> 0x7d
[18601.616194]
[18601.616294]     <R 0048> 0x00
[18601.616296]
[18601.616396]     <R 0049> 0x00
[18601.616397]
[18601.616498]     <R 004a> 0x0c
[18601.616500]
[18601.616600]     <R 004b> 0x03
[18601.616601]
[18601.616702]     <R 004c> 0xff
[18601.616703]
[18601.616804]     <R 004d> 0xff
[18601.616805]
[18601.616905]     <R 004e> 0x05
[18601.616907]
[18601.617006]     <R 004f> 0x00
[18601.617007]
[18601.617108]     <R 0050> 0x00
[18601.617109]
[18601.617210]     <R 0051> 0x01
[18601.617211]
[18601.617312]     <R 0052> 0x01
[18601.617313]
[18601.617414]     <R 0053> 0x01
[18601.617415]
[18601.617516]     <R 0054> 0xff
[18601.617517]
[18601.617617]     <R 0055> 0x2c
[18601.617618]
[18601.617719]     <R 0056> 0x01
[18601.617720]
[18601.617821]     <R 0057> 0x00
[18601.617822]
[18601.617922]     <R 0058> 0x00
[18601.617923]
[18601.618024]     <R 0059> 0x00
[18601.618025]
[18601.618125]     <R 005a> 0x01
[18601.618126]
[18601.618227]     <R 005b> 0x00
[18601.618228]
[18601.618329]     <R 005c> 0x00
[18601.618330]
[18601.618430]     <R 005d> 0x00
[18601.618431]
[18601.618532]     <R 005e> 0x07
[18601.618533]
[18601.618634]     <R 005f> 0x00
[18601.618635]
[18601.618736]     <R 0060> 0x00
[18601.618737]
[18601.618837]     <R 0061> 0x00
[18601.618838]
[18601.618939]     <R 0062> 0x0d
[18601.618940]
[18601.619041]     <R 0063> 0x00
[18601.619042]
[18601.619142]     <R 0064> 0x00
[18601.619143]
[18601.619244]     <R 0065> 0x00
[18601.619245]
[18601.619346]     <R 0066> 0x04
[18601.619347]
[18601.619447]     <R 0067> 0x04
[18601.619449]
[18601.619549]     <R 0068> 0x04
[18601.619550]
[18601.619651]     <R 0069> 0x04
[18601.619652]
[18601.619753]     <R 006a> 0x04
[18601.619754]
[18601.619855]     <R 006b> 0x04
[18601.619856]
[18601.619956]     <R 006c> 0x04
[18601.619957]
[18601.620064]     <R 006d> 0x04
[18601.620065]
[18601.620165]     <R 006e> 0x00
[18601.620167]
[18601.620267]     <R 006f> 0x00
[18601.620268]
[18601.620369]     <R 0070> 0x00
[18601.620370]
[18601.620470]     <R 0071> 0x00
[18601.620472]
[18601.620572]     <R 0072> 0x6e
[18601.620574]
[18601.620674]     <R 0073> 0x7d
[18601.620675]
[18601.620776]     <R 0074> 0x00
[18601.620777]
[18601.620878]     <R 0075> 0x00
[18601.620879]
[18601.620979]     <R 0076> 0x32
[18601.620981]
[18601.621081]     <R 0077> 0x09
[18601.621083]
[18601.621183]     <R 0078> 0x02
[18601.621184]
[18601.621285]     <R 0079> 0x14
[18601.621286]
[18601.621387]     <R 007a> 0x04
[18601.621388]
[18601.621489]     <R 007b> 0x05
[18601.621490]
[18601.621590]     <R 007c> 0x06
[18601.621591]
[18601.621692]     <R 007d> 0x07
[18601.621693]
[18601.621793]     <R 007e> 0x08
[18601.621795]
[18601.621895]     <R 007f> 0x00
[18601.621896]
[18601.621997]     <R 0080> 0x00
[18601.621998]
[18601.622099]     <R 0081> 0x00
[18601.622100]
[18601.622201]     <R 0082> 0x04
[18601.622202]
[18601.622302]     <R 0083> 0x0b
[18601.622304]
[18601.622404]     <R 0084> 0x03
[18601.622405]
[18601.622506]     <R 0085> 0x1c
[18601.622507]
[18601.622608]     <R 0086> 0x00
[18601.622609]
[18601.622710]     <R 0087> 0x01
[18601.622711]
[18601.622812]     <R 0088> 0x00
[18601.622813]
[18601.622914]     <R 0089> 0x01
[18601.622915]
[18601.623016]     <R 008a> 0x01
[18601.623017]
[18601.623118]     <R 008b> 0x01
[18601.623119]
[18601.623219]     <R 008c> 0x01
[18601.623220]
[18601.623321]     <R 008d> 0x01
[18601.623322]
[18601.623422]     <R 008e> 0x01
[18601.623423]
[18601.623524]     <R 008f> 0x02
[18601.623525]
[18601.623625]     <R 0090> 0x00
[18601.623626]
[18601.623726]     <R 0091> 0x01
[18601.623727]
[18601.623828]     <R 0092> 0x00
[18601.623829]
[18601.623929]     <R 0093> 0x02
[18601.623931]
[18601.624037]     <R 0094> 0x01
[18601.624038]
[18601.624138]     <R 0095> 0x14
[18601.624139]
[18601.624239]     <R 0096> 0x14
[18601.624240]
[18601.624341]     <R 0097> 0x14
[18601.624342]
[18601.624443]     <R 0098> 0x14
[18601.624444]
[18601.624545]     <R 0099> 0x14
[18601.624546]
[18601.624646]     <R 009a> 0x6e
[18601.624648]
[18601.624748]     <R 009b> 0x7d
[18601.624749]
[18601.624850]     <R 009c> 0x00
[18601.624851]
[18601.624952]     <R 009d> 0x00
[18601.624953]
[18601.625054]     <R 009e> 0x55
[18601.625055]
[18601.625156]     <R 009f> 0x95
[18601.625157]
[18601.625257]     <R 00a0> 0x72
[18601.625258]
[18601.625358]     <R 00a1> 0x00
[18601.625359]
[18601.625460]     <R 00a2> 0x06
[18601.625461]
[18601.625562]     <R 00a3> 0x00
[18601.625563]
[18601.625664]     <R 00a4> 0x21
[18601.625665]
[18601.625765]     <R 00a5> 0x00
[18601.625766]
[18601.625867]     <R 00a6> 0x00
[18601.625868]
[18601.625969]     <R 00a7> 0x01
[18601.625970]
[18601.626071]     <R 00a8> 0x00
[18601.626072]
[18601.626173]     <R 00a9> 0x04
[18601.626174]
[18601.626274]     <R 00aa> 0x04
[18601.626275]
[18601.626376]     <R 00ab> 0x01
[18601.626377]
[18601.626478]     <R 00ac> 0x00
[18601.626479]
[18601.626580]     <R 00ad> 0x07
[18601.626581]
[18601.626681]     <R 00ae> 0x03
[18601.626682]
[18601.626783]     <R 00af> 0x03
[18601.626784]
[18601.626885]     <R 00b0> 0x04
[18601.626886]
[18601.626986]     <R 00b1> 0x01
[18601.626987]
[18601.627088]     <R 00b2> 0x01
[18601.627089]
[18601.627190]     <R 00b3> 0x0e
[18601.627191]
[18601.627291]     <R 00b4> 0xff
[18601.627293]
[18601.627393]     <R 00b5> 0x08
[18601.627395]
[18601.627495]     <R 00b6> 0x00
[18601.627496]
[18601.627596]     <R 00b7> 0x00
[18601.627597]
[18601.627698]     <R 00b8> 0x00
[18601.627699]
[18601.627799]     <R 00b9> 0x03
[18601.627801]
[18601.627901]     <R 00ba> 0x00
[18601.627902]
[18601.628009]     <R 00bb> 0x00
[18601.628010]
[18601.628110]     <R 00bc> 0x10
[18601.628111]
[18601.628212]     <R 00bd> 0x03
[18601.628213]
[18601.628314]     <R 00be> 0x00
[18601.628315]
[18601.628416]     <R 00bf> 0x00
[18601.628417]
[18601.628518]     <R 00c0> 0x40
[18601.628519]
[18601.628619]     <R 00c1> 0x00
[18601.628621]
[18601.628721]     <R 00c2> 0x00
[18601.628722]
[18601.628823]     <R 00c3> 0x00
[18601.628824]
[18601.628925]     <R 00c4> 0x29
[18601.628926]
[18601.629026]     <R 00c5> 0x00
[18601.629028]
[18601.629128]     <R 00c6> 0x00
[18601.629129]
[18601.629230]     <R 00c7> 0x00
[18601.629231]
[18601.629332]     <R 00c8> 0x01
[18601.629334]
[18601.629434]     <R 00c9> 0x00
[18601.629435]
[18601.629536]     <R 00ca> 0x07
[18601.629537]
[18601.629638]     <R 00cb> 0x00
[18601.629639]
[18601.629740]     <R 00cc> 0xc0
[18601.629741]
[18601.629841]     <R 00cd> 0x02
[18601.629842]
[18601.629943]     <R 00ce> 0x05
[18601.629944]
[18601.630045]     <R 00cf> 0x32
[18601.630046]
[18601.630147]     <R 00d0> 0x03
[18601.630148]
[18601.630248]     <R 00d1> 0x01
[18601.630250]
[18601.630350]     <R 00d2> 0x0e
[18601.630352]
[18601.630452]     <R 00d3> 0x00
[18601.630454]
[18601.630554]     <R 00d4> 0x10
[18601.630556]
[18601.630655]     <R 00d5> 0x04
[18601.630656]
[18601.630757]     <R 00d6> 0x00
[18601.630758]
[18601.630859]     <R 00d7> 0x00
[18601.630860]
[18601.630961]     <R 00d8> 0x80
[18601.630962]
[18601.631062]     <R 00d9> 0x00
[18601.631064]
[18601.631164]     <R 00da> 0x00
[18601.631165]
[18601.631266]     <R 00db> 0x00
[18601.631267]
[18601.631368]     <R 00dc> 0x29
[18601.631369]
[18601.631469]     <R 00dd> 0x00
[18601.631470]
[18601.631570]     <R 00de> 0x00
[18601.631571]
[18601.631672]     <R 00df> 0x00
[18601.631673]
[18601.631773]     <R 00e0> 0x01
[18601.631774]
[18601.631875]     <R 00e1> 0x00
[18601.631876]
[18601.631977]     <R 00e2> 0x02
[18601.631978]
[18601.632084]     <R 00e3> 0x00
[18601.632085]
[18601.632186]     <R 00e4> 0x42
[18601.632187]
[18601.632288]     <R 00e5> 0x02
[18601.632289]
[18601.632389]     <R 00e6> 0x00
[18601.632391]
[18601.632491]     <R 00e7> 0x10
[18601.632492]
[18601.632592]     <R 00e8> 0x05
[18601.632593]
[18601.632693]     <R 00e9> 0x00
[18601.632694]
[18601.632795]     <R 00ea> 0x00
[18601.632796]
[18601.632897]     <R 00eb> 0x00
[18601.632898]
[18601.632998]     <R 00ec> 0x01
[18601.633000]
[18601.633100]     <R 00ed> 0x00
[18601.633101]
[18601.633202]     <R 00ee> 0x00
[18601.633203]
[18601.633304]     <R 00ef> 0x29
[18601.633305]
[18601.633308] saa716x_read_rombytes (0): Length=448, Count=4, Reg=0x1b5
[18601.633312] saa716x_read_rombytes (0): Last Message length=208
[18601.633315] i2c-adapter i2c-7: master_xfer[0] W, addr=0x50, len=2
[18601.633319] i2c-adapter i2c-7: master_xfer[1] R, addr=0x50, len=208
[18601.634403]
[18601.634406] saa716x_i2c_xfer (0): Bus(b000) I2C transfer
[18601.634410] saa716x_i2c_xfer (0): length=2 Addr:0x1a0
[18601.634420]     <W 0000> 0x01
[18601.634508]     <W 0001> 0xb5
[18601.634598] saa716x_i2c_xfer (0): length=208 Addr:0x1a1
[18601.634867]     <R 0000> 0x00
[18601.634868]
[18601.634969]     <R 0001> 0x00
[18601.634970]
[18601.635071]     <R 0002> 0x00
[18601.635073]
[18601.635173]     <R 0003> 0x01
[18601.635174]
[18601.635275]     <R 0004> 0x00
[18601.635276]
[18601.635377]     <R 0005> 0x03
[18601.635378]
[18601.635479]     <R 0006> 0x00
[18601.635480]
[18601.635580]     <R 0007> 0x10
[18601.635582]
[18601.635682]     <R 0008> 0x03
[18601.635683]
[18601.635784]     <R 0009> 0x08
[18601.635785]
[18601.635886]     <R 000a> 0x00
[18601.635887]
[18601.635987]     <R 000b> 0x10
[18601.635989]
[18601.636095]     <R 000c> 0x06
[18601.636096]
[18601.636197]     <R 000d> 0x00
[18601.636198]
[18601.636298]     <R 000e> 0x01
[18601.636300]
[18601.636400]     <R 000f> 0x3d
[18601.636401]
[18601.636502]     <R 0010> 0x00
[18601.636503]
[18601.636603]     <R 0011> 0x00
[18601.636605]
[18601.636705]     <R 0012> 0x00
[18601.636706]
[18601.636807]     <R 0013> 0x01
[18601.636808]
[18601.636909]     <R 0014> 0x00
[18601.636910]
[18601.637010]     <R 0015> 0x01
[18601.637011]
[18601.637111]     <R 0016> 0x00
[18601.637113]
[18601.637213]     <R 0017> 0x01
[18601.637214]
[18601.637315]     <R 0018> 0x00
[18601.637316]
[18601.637416]     <R 0019> 0x75
[18601.637417]
[18601.637517]     <R 001a> 0x00
[18601.637519]
[18601.637619]     <R 001b> 0x42
[18601.637620]
[18601.637721]     <R 001c> 0x02
[18601.637722]
[18601.637823]     <R 001d> 0x04
[18601.637824]
[18601.637924]     <R 001e> 0x6e
[18601.637926]
[18601.638025]     <R 001f> 0x7d
[18601.638026]
[18601.638127]     <R 0020> 0x00
[18601.638128]
[18601.638229]     <R 0021> 0x00
[18601.638230]
[18601.638330]     <R 0022> 0x0c
[18601.638331]
[18601.638431]     <R 0023> 0x00
[18601.638432]
[18601.638532]     <R 0024> 0xff
[18601.638534]
[18601.638635]     <R 0025> 0xff
[18601.638636]
[18601.638737]     <R 0026> 0x02
[18601.638738]
[18601.638838]     <R 0027> 0x00
[18601.638839]
[18601.638940]     <R 0028> 0x00
[18601.638941]
[18601.639042]     <R 0029> 0x01
[18601.639043]
[18601.639144]     <R 002a> 0x01
[18601.639145]
[18601.639246]     <R 002b> 0x01
[18601.639247]
[18601.639348]     <R 002c> 0xff
[18601.639349]
[18601.639449]     <R 002d> 0x2c
[18601.639450]
[18601.639551]     <R 002e> 0x01
[18601.639552]
[18601.639652]     <R 002f> 0x00
[18601.639654]
[18601.639754]     <R 0030> 0x00
[18601.639755]
[18601.639856]     <R 0031> 0x00
[18601.639857]
[18601.639957]     <R 0032> 0x01
[18601.639959]
[18601.640118]     <R 0033> 0x00
[18601.640120]
[18601.640220]     <R 0034> 0x00
[18601.640221]
[18601.640322]     <R 0035> 0x00
[18601.640323]
[18601.640424]     <R 0036> 0x07
[18601.640425]
[18601.640526]     <R 0037> 0x00
[18601.640527]
[18601.640628]     <R 0038> 0x00
[18601.640629]
[18601.640730]     <R 0039> 0x00
[18601.640731]
[18601.640832]     <R 003a> 0x0d
[18601.640833]
[18601.640934]     <R 003b> 0x00
[18601.640935]
[18601.641036]     <R 003c> 0x00
[18601.641037]
[18601.641137]     <R 003d> 0x00
[18601.641138]
[18601.641239]     <R 003e> 0x04
[18601.641240]
[18601.641341]     <R 003f> 0x04
[18601.641342]
[18601.641443]     <R 0040> 0x04
[18601.641444]
[18601.641544]     <R 0041> 0x04
[18601.641546]
[18601.641646]     <R 0042> 0x04
[18601.641647]
[18601.641748]     <R 0043> 0x04
[18601.641749]
[18601.641850]     <R 0044> 0x04
[18601.641851]
[18601.641951]     <R 0045> 0x04
[18601.641952]
[18601.642053]     <R 0046> 0x00
[18601.642054]
[18601.642155]     <R 0047> 0x00
[18601.642156]
[18601.642256]     <R 0048> 0x00
[18601.642257]
[18601.642358]     <R 0049> 0x00
[18601.642359]
[18601.642460]     <R 004a> 0x6e
[18601.642461]
[18601.642561]     <R 004b> 0x7d
[18601.642562]
[18601.642663]     <R 004c> 0x00
[18601.642664]
[18601.642765]     <R 004d> 0x00
[18601.642766]
[18601.642866]     <R 004e> 0x32
[18601.642868]
[18601.642968]     <R 004f> 0x09
[18601.642969]
[18601.643070]     <R 0050> 0x02
[18601.643071]
[18601.643172]     <R 0051> 0x14
[18601.643173]
[18601.643274]     <R 0052> 0x04
[18601.643275]
[18601.643376]     <R 0053> 0x05
[18601.643377]
[18601.643477]     <R 0054> 0x06
[18601.643478]
[18601.643579]     <R 0055> 0x07
[18601.643580]
[18601.643681]     <R 0056> 0x08
[18601.643682]
[18601.643782]     <R 0057> 0x00
[18601.643784]
[18601.643884]     <R 0058> 0x00
[18601.643885]
[18601.643986]     <R 0059> 0x00
[18601.643987]
[18601.644093]     <R 005a> 0x04
[18601.644094]
[18601.644195]     <R 005b> 0x0a
[18601.644196]
[18601.644297]     <R 005c> 0x03
[18601.644298]
[18601.644399]     <R 005d> 0x1c
[18601.644400]
[18601.644501]     <R 005e> 0x00
[18601.644502]
[18601.644603]     <R 005f> 0x01
[18601.644604]
[18601.644704]     <R 0060> 0x00
[18601.644705]
[18601.644806]     <R 0061> 0x01
[18601.644807]
[18601.644908]     <R 0062> 0x01
[18601.644909]
[18601.645009]     <R 0063> 0x01
[18601.645011]
[18601.645111]     <R 0064> 0x01
[18601.645112]
[18601.645213]     <R 0065> 0x01
[18601.645214]
[18601.645315]     <R 0066> 0x01
[18601.645316]
[18601.645416]     <R 0067> 0x02
[18601.645418]
[18601.645517]     <R 0068> 0x00
[18601.645518]
[18601.645619]     <R 0069> 0x01
[18601.645620]
[18601.645721]     <R 006a> 0x00
[18601.645722]
[18601.645822]     <R 006b> 0x02
[18601.645824]
[18601.645924]     <R 006c> 0x01
[18601.645925]
[18601.646025]     <R 006d> 0x14
[18601.646027]
[18601.646127]     <R 006e> 0x14
[18601.646128]
[18601.646229]     <R 006f> 0x14
[18601.646230]
[18601.646331]     <R 0070> 0x14
[18601.646332]
[18601.646433]     <R 0071> 0x14
[18601.646434]
[18601.646535]     <R 0072> 0x6e
[18601.646536]
[18601.646637]     <R 0073> 0x7d
[18601.646638]
[18601.646738]     <R 0074> 0x00
[18601.646739]
[18601.646840]     <R 0075> 0x00
[18601.646841]
[18601.646942]     <R 0076> 0x55
[18601.646943]
[18601.647043]     <R 0077> 0x95
[18601.647045]
[18601.647145]     <R 0078> 0x72
[18601.647146]
[18601.647247]     <R 0079> 0x00
[18601.647248]
[18601.647348]     <R 007a> 0x06
[18601.647350]
[18601.647450]     <R 007b> 0x00
[18601.647451]
[18601.647552]     <R 007c> 0x22
[18601.647553]
[18601.647654]     <R 007d> 0x00
[18601.647655]
[18601.647756]     <R 007e> 0x00
[18601.647757]
[18601.647857]     <R 007f> 0x01
[18601.647858]
[18601.647959]     <R 0080> 0x00
[18601.647960]
[18601.648067]     <R 0081> 0x04
[18601.648068]
[18601.648168]     <R 0082> 0x04
[18601.648170]
[18601.648270]     <R 0083> 0x01
[18601.648271]
[18601.648372]     <R 0084> 0x00
[18601.648373]
[18601.648473]     <R 0085> 0x0e
[18601.648475]
[18601.648575]     <R 0086> 0xff
[18601.648577]
[18601.648677]     <R 0087> 0x08
[18601.648678]
[18601.648779]     <R 0088> 0x04
[18601.648780]
[18601.648881]     <R 0089> 0x01
[18601.648882]
[18601.648982]     <R 008a> 0x01
[18601.648984]
[18601.649084]     <R 008b> 0x07
[18601.649085]
[18601.649186]     <R 008c> 0x03
[18601.649187]
[18601.649288]     <R 008d> 0x03
[18601.649289]
[18601.649390]     <R 008e> 0x00
[18601.649391]
[18601.649492]     <R 008f> 0x00
[18601.649493]
[18601.649593]     <R 0090> 0x00
[18601.649595]
[18601.649695]     <R 0091> 0x10
[18601.649697]
[18601.649797]     <R 0092> 0x07
[18601.649798]
[18601.649898]     <R 0093> 0x00
[18601.649900]
[18601.650000]     <R 0094> 0x01
[18601.650001]
[18601.650102]     <R 0095> 0x40
[18601.650103]
[18601.650204]     <R 0096> 0x00
[18601.650205]
[18601.650306]     <R 0097> 0x00
[18601.650307]
[18601.650407]     <R 0098> 0x00
[18601.650408]
[18601.650509]     <R 0099> 0x29
[18601.650510]
[18601.650611]     <R 009a> 0x00
[18601.650612]
[18601.650713]     <R 009b> 0x01
[18601.650714]
[18601.650814]     <R 009c> 0x00
[18601.650816]
[18601.650916]     <R 009d> 0x01
[18601.650917]
[18601.651018]     <R 009e> 0x00
[18601.651019]
[18601.651120]     <R 009f> 0x07
[18601.651121]
[18601.651221]     <R 00a0> 0x00
[18601.651223]
[18601.651323]     <R 00a1> 0xc0
[18601.651325]
[18601.651425]     <R 00a2> 0x02
[18601.651426]
[18601.651527]     <R 00a3> 0x05
[18601.651528]
[18601.651628]     <R 00a4> 0x32
[18601.651629]
[18601.651730]     <R 00a5> 0x02
[18601.651731]
[18601.651832]     <R 00a6> 0x01
[18601.651833]
[18601.651934]     <R 00a7> 0x0f
[18601.651935]
[18601.652041]     <R 00a8> 0x00
[18601.652042]
[18601.652142]     <R 00a9> 0x10
[18601.652144]
[18601.652244]     <R 00aa> 0x08
[18601.652245]
[18601.652346]     <R 00ab> 0x00
[18601.652347]
[18601.652448]     <R 00ac> 0x01
[18601.652449]
[18601.652550]     <R 00ad> 0x80
[18601.652551]
[18601.652651]     <R 00ae> 0x00
[18601.652652]
[18601.652753]     <R 00af> 0x00
[18601.652754]
[18601.652855]     <R 00b0> 0x00
[18601.652856]
[18601.652957]     <R 00b1> 0x29
[18601.652958]
[18601.653058]     <R 00b2> 0x00
[18601.653059]
[18601.653160]     <R 00b3> 0x01
[18601.653161]
[18601.653262]     <R 00b4> 0x00
[18601.653263]
[18601.653363]     <R 00b5> 0x01
[18601.653365]
[18601.653465]     <R 00b6> 0x00
[18601.653466]
[18601.653567]     <R 00b7> 0x02
[18601.653568]
[18601.653668]     <R 00b8> 0x00
[18601.653669]
[18601.653770]     <R 00b9> 0x42
[18601.653771]
[18601.653871]     <R 00ba> 0x02
[18601.653872]
[18601.653973]     <R 00bb> 0x00
[18601.653974]
[18601.654074]     <R 00bc> 0x10
[18601.654075]
[18601.654176]     <R 00bd> 0x09
[18601.654177]
[18601.654278]     <R 00be> 0x00
[18601.654279]
[18601.654379]     <R 00bf> 0x01
[18601.654381]
[18601.654481]     <R 00c0> 0x00
[18601.654483]
[18601.654583]     <R 00c1> 0x01
[18601.654584]
[18601.654685]     <R 00c2> 0x00
[18601.654686]
[18601.654786]     <R 00c3> 0x00
[18601.654788]
[18601.654888]     <R 00c4> 0x29
[18601.654889]
[18601.654990]     <R 00c5> 0x00
[18601.654991]
[18601.655092]     <R 00c6> 0x01
[18601.655093]
[18601.655193]     <R 00c7> 0x00
[18601.655195]
[18601.655295]     <R 00c8> 0x01
[18601.655297]
[18601.655397]     <R 00c9> 0x00
[18601.655398]
[18601.655499]     <R 00ca> 0x03
[18601.655500]
[18601.655600]     <R 00cb> 0x00
[18601.655602]
[18601.655702]     <R 00cc> 0x10
[18601.655703]
[18601.655804]     <R 00cd> 0x03
[18601.655805]
[18601.655906]     <R 00ce> 0x07
[18601.655907]
[18601.656013]     <R 00cf> 0x00
[18601.656014]
[18601.656017] SAA7160 ROM: Data=440 bytes
[18601.656020] SAA7160 ROM: Version=1
[18601.656022] SAA7160 ROM: Devices=9
[18601.656024] SAA7160 ROM: Compressed=0
[18601.656025]
[18601.656962]     SAA7160 ROM: ===== Device 0 =====
[18601.656965]    -----------------------------------------------------
[18601.656988]     10 00 ff ff  02 00 01 00   62 71 00 ff  01 00 1a 00
[18601.657101]     ff 04 20 00  0c ff ff ff   ff 00 00 00  00 00 00 00
[18601.657114]     00 02 08 12  0f 00 00 21   03 00 00
[18601.657124]    -----------------------------------------------------
[18601.657149]     SAA7160 ROM: Device @ 0x7f
[18601.657152]     SAA7160 ROM: Size=16 bytes
[18601.657154]     SAA7160 ROM: Device ID=0x00
[18601.657156]     SAA7160 ROM: Master ID=0xff
[18601.657159]     SAA7160 ROM: Bus ID=0xff
[18601.657161]     SAA7160 ROM: Device type=0x10002
[18601.657163]     SAA7160 ROM: Implementation ID=0x7162
[18601.657166]     SAA7160 ROM: Path ID=0x00
[18601.657168]     SAA7160 ROM: GPIO ID=0xff
[18601.657170]     SAA7160 ROM: Address=1 bytes
[18601.657173]     SAA7160 ROM: Extended data=26 bytes
[18601.657174]
[18601.657176]         SAA7160 ROM: Found GPIO device
[18601.657178]        -------------------------------------------------
[18601.657200]         04 20 00 0c  ff ff ff ff   00 00 00 00  00 00 00 00
[18601.657214]        -------------------------------------------------
[18601.657237]         SAA7160 ROM: Size=4 bytes
[18601.657239]         SAA7160 ROM: Pins=32
[18601.657242]         SAA7160 ROM: Ext data=12
[18601.657243]
[18601.657246]         SAA7160 ROM: Found streaming device
[18601.657248]        -------------------------------------------------
[18601.657270]         02 08 12 0f  00 00 21 03   00 00
[18601.657279]        -------------------------------------------------
[18601.657302]         SAA7160 ROM: Size=2 bytes
[18601.657305]         SAA7160 ROM: Ext data=8 bytes
[18601.657307]
[18601.657308]     SAA7160 ROM: ===== Device 1 =====
[18601.657310]    -----------------------------------------------------
[18601.657334]     10 02 00 00  3d 08 00 00   01 00 00 00  01 00 78 00
[18601.657347]     42 02 04 6e  7d 00 00 0c   03 ff ff 05  00 00 01 01
[18601.657360]     01 ff 2c 01  00 00 00 01   00 00 00 07  00 00 00 0d
[18601.657373]     00 00 00 04  04 04 04 04   04 04 04 00  00 00 00 6e
[18601.657385]     7d 00 00 32  09 02 14 04   05 06 07 08  00 00 00 04
[18601.657398]     0b 03 1c 00  01 00 01 01   01 01 01 01  02 00 01 00
[18601.657411]     02 01 14 14  14 14 14 6e   7d 00 00 55  95 72 00 06
[18601.657424]     00 21 00 00  01 00 04 04   01 00 07 03  03 04 01 01
[18601.657437]     0e ff 08 00  00 00 03 00   00
[18601.657445]    -----------------------------------------------------
[18601.657470]     SAA7160 ROM: Device @ 0x21
[18601.657473]     SAA7160 ROM: Size=16 bytes
[18601.657475]     SAA7160 ROM: Device ID=0x02
[18601.657477]     SAA7160 ROM: Master ID=0x00
[18601.657479]     SAA7160 ROM: Bus ID=0x00
[18601.657482]     SAA7160 ROM: Device type=0x83d
[18601.657484]     SAA7160 ROM: Implementation ID=0x01
[18601.657486]     SAA7160 ROM: Path ID=0x00
[18601.657488]     SAA7160 ROM: GPIO ID=0x00
[18601.657491]     SAA7160 ROM: Address=1 bytes
[18601.657493]     SAA7160 ROM: Extended data=120 bytes
[18601.657494]
[18601.657496]         SAA7160 ROM: Found decoder device
[18601.657498]        -------------------------------------------------
[18601.657520]         02 04 6e 7d  00 00
[18601.657526]        -------------------------------------------------
[18601.657549]         SAA7160 ROM: Size=2 bytes
[18601.657552]         SAA7160 ROM: Ext Data=4 bytes
[18601.657553]
[18601.657555]         SAA7160 ROM: Found Video Decoder device
[18601.657557]        -------------------------------------------------
[18601.657579]         0c 03 ff ff  05 00 00 01   01 01 ff 2c  01 00 00 00
[18601.657592]         01 00 00 00  07 00 00 00   0d 00 00 00  04 04 04 04
[18601.657605]         04 04 04 04  00 00 00 00   6e 7d 00 00  32 09 02 14
[18601.657618]         04 05 06 07  08 00 00 00
[18601.657625]        -------------------------------------------------
[18601.657648]         SAA7160 ROM: Size=12 bytes
[18601.657650]         SAA7160 ROM: PORT 0=0x03
[18601.657652]         SAA7160 ROM: PORT 1=0xff
[18601.657654]         SAA7160 ROM: PORT 2=0xff
[18601.657657]         SAA7160 ROM: VBI PORT ID=0x05
[18601.657659]         SAA7160 ROM: Video PORT Type=0x00
[18601.657661]         SAA7160 ROM: VBI PORT Type=0x00
[18601.657664]         SAA7160 ROM: Encoder PORT Type=0x01
[18601.657666]         SAA7160 ROM: Video Output=0x01
[18601.657668]         SAA7160 ROM: VBI Output=0x01
[18601.657671]         SAA7160 ROM: Encoder Output=0xff
[18601.657673]         SAA7160 ROM: Ext data=44 bytes
[18601.657675]
[18601.657677]         SAA7160 ROM: Found Audio Decoder device
[18601.657679]        -------------------------------------------------
[18601.657700]         04 0b 03 1c  00 01 00 01   01 01 01 01  01 02 00 01
[18601.657713]         00 02 01 14  14 14 14 14   6e 7d 00 00  55 95 72 00
[18601.657726]        -------------------------------------------------
[18601.657749]         SAA7160 ROM: Size=4 bytes
[18601.657751]         SAA7160 ROM: Ext data=28 bytes
[18601.657753]
[18601.657755]         SAA7160 ROM: Found Event source
[18601.657757]        -------------------------------------------------
[18601.657778]         06 00 21 00  00 01 00
[18601.657785]        -------------------------------------------------
[18601.657808]         SAA7160 ROM: Size=6 bytes
[18601.657810]         SAA7160 ROM: Ext data=1 bytes
[18601.657812]
[18601.657814]         SAA7160 ROM: Found Crossbar device
[18601.657816]        -------------------------------------------------
[18601.657838]         04 04 01 00
[18601.657842]        -------------------------------------------------
[18601.657865]         SAA7160 ROM: Size=4 bytes
[18601.657867]         SAA7160 ROM: Pairs=4
[18601.657870]         SAA7160 ROM: Ext data=0 bytes
[18601.657871]
[18601.657873]         SAA7160 ROM: Found IR device
[18601.657875]        -------------------------------------------------
[18601.657897]         03 00 00
[18601.657901]        -------------------------------------------------
[18601.657923]         SAA7160 ROM: Size=3 bytes
[18601.657926]         SAA7160 ROM: Ext data=0 bytes
[18601.657927]
[18601.657929]
[18601.657931]     SAA7160 ROM: ===== Device 2 =====
[18601.657933]    -----------------------------------------------------
[18601.657956]     10 03 00 00  40 00 00 00   29 00 00 00  01 00 07 00
[18601.657969]     c0 02 05 32  03 01 0e 00
[18601.657976]    -----------------------------------------------------
[18601.658001]     SAA7160 ROM: Device @ 0x60
[18601.658003]     SAA7160 ROM: Size=16 bytes
[18601.658005]     SAA7160 ROM: Device ID=0x03
[18601.658008]     SAA7160 ROM: Master ID=0x00
[18601.658010]     SAA7160 ROM: Bus ID=0x00
[18601.658012]     SAA7160 ROM: Device type=0x40
[18601.658014]     SAA7160 ROM: Implementation ID=0x29
[18601.658017]     SAA7160 ROM: Path ID=0x00
[18601.658019]     SAA7160 ROM: GPIO ID=0x00
[18601.658021]     SAA7160 ROM: Address=1 bytes
[18601.658023]     SAA7160 ROM: Extended data=7 bytes
[18601.658025]
[18601.658027]         SAA7160 ROM: Found Tuner device
[18601.658029]        -------------------------------------------------
[18601.658051]         02 05 32 03  01 0e 00
[18601.658057]        -------------------------------------------------
[18601.658080]         SAA7160 ROM: Size=2 bytes
[18601.658083]         SAA7160 ROM: Ext data=5 bytes
[18601.658084]
[18601.658086]
[18601.658087]     SAA7160 ROM: ===== Device 3 =====
[18601.658089]    -----------------------------------------------------
[18601.658113]     10 04 00 00  80 00 00 00   29 00 00 00  01 00 02 00
[18601.658126]     42 02 00
[18601.658130]    -----------------------------------------------------
[18601.658154]     SAA7160 ROM: Device @ 0x21
[18601.658156]     SAA7160 ROM: Size=16 bytes
[18601.658159]     SAA7160 ROM: Device ID=0x04
[18601.658161]     SAA7160 ROM: Master ID=0x00
[18601.658163]     SAA7160 ROM: Bus ID=0x00
[18601.658165]     SAA7160 ROM: Device type=0x80
[18601.658168]     SAA7160 ROM: Implementation ID=0x29
[18601.658170]     SAA7160 ROM: Path ID=0x00
[18601.658172]     SAA7160 ROM: GPIO ID=0x00
[18601.658174]     SAA7160 ROM: Address=1 bytes
[18601.658177]     SAA7160 ROM: Extended data=2 bytes
[18601.658178]
[18601.658180]         SAA7160 ROM: Found PLL device
[18601.658182]        -------------------------------------------------
[18601.658204]         02 00
[18601.658207]        -------------------------------------------------
[18601.658230]         SAA7160 ROM: Size=2 bytes
[18601.658233]         SAA7160 ROM: Ext data=0 bytes
[18601.658234]
[18601.658236]
[18601.658237]     SAA7160 ROM: ===== Device 4 =====
[18601.658239]    -----------------------------------------------------
[18601.658263]     10 05 00 00  00 01 00 00   29 00 00 00  01 00 03 00
[18601.658276]     10 03 08 00
[18601.658280]    -----------------------------------------------------
[18601.658305]     SAA7160 ROM: Device @ 0x08
[18601.658307]     SAA7160 ROM: Size=16 bytes
[18601.658309]     SAA7160 ROM: Device ID=0x05
[18601.658311]     SAA7160 ROM: Master ID=0x00
[18601.658314]     SAA7160 ROM: Bus ID=0x00
[18601.658316]     SAA7160 ROM: Device type=0x100
[18601.658318]     SAA7160 ROM: Implementation ID=0x29
[18601.658320]     SAA7160 ROM: Path ID=0x00
[18601.658323]     SAA7160 ROM: GPIO ID=0x00
[18601.658325]     SAA7160 ROM: Address=1 bytes
[18601.658327]     SAA7160 ROM: Extended data=3 bytes
[18601.658329]
[18601.658331]         SAA7160 ROM: Found Channel Demodulator device
[18601.658333]        -------------------------------------------------
[18601.658354]         03 08 00
[18601.658359]        -------------------------------------------------
[18601.658381]         SAA7160 ROM: Size=3 bytes
[18601.658384]         SAA7160 ROM: Ext data=0 bytes
[18601.658385]
[18601.658387]
[18601.658388]     SAA7160 ROM: ===== Device 5 =====
[18601.658390]    -----------------------------------------------------
[18601.658414]     10 06 00 01  3d 00 00 00   01 00 01 00  01 00 75 00
[18601.658427]     42 02 04 6e  7d 00 00 0c   00 ff ff 02  00 00 01 01
[18601.658440]     01 ff 2c 01  00 00 00 01   00 00 00 07  00 00 00 0d
[18601.658452]     00 00 00 04  04 04 04 04   04 04 04 00  00 00 00 6e
[18601.658466]     7d 00 00 32  09 02 14 04   05 06 07 08  00 00 00 04
[18601.658478]     0a 03 1c 00  01 00 01 01   01 01 01 01  02 00 01 00
[18601.658491]     02 01 14 14  14 14 14 6e   7d 00 00 55  95 72 00 06
[18601.658504]     00 22 00 00  01 00 04 04   01 00 0e ff  08 04 01 01
[18601.658517]     07 03 03 00  00 00
[18601.658523]    -----------------------------------------------------
[18601.658547]     SAA7160 ROM: Device @ 0x21
[18601.658550]     SAA7160 ROM: Size=16 bytes
[18601.658552]     SAA7160 ROM: Device ID=0x06
[18601.658554]     SAA7160 ROM: Master ID=0x00
[18601.658556]     SAA7160 ROM: Bus ID=0x01
[18601.658559]     SAA7160 ROM: Device type=0x3d
[18601.658561]     SAA7160 ROM: Implementation ID=0x01
[18601.658563]     SAA7160 ROM: Path ID=0x01
[18601.658565]     SAA7160 ROM: GPIO ID=0x00
[18601.658568]     SAA7160 ROM: Address=1 bytes
[18601.658570]     SAA7160 ROM: Extended data=117 bytes
[18601.658571]
[18601.658573]         SAA7160 ROM: Found decoder device
[18601.658575]        -------------------------------------------------
[18601.658597]         02 04 6e 7d  00 00
[18601.658603]        -------------------------------------------------
[18601.658626]         SAA7160 ROM: Size=2 bytes
[18601.658629]         SAA7160 ROM: Ext Data=4 bytes
[18601.658630]
[18601.658632]         SAA7160 ROM: Found Video Decoder device
[18601.658634]        -------------------------------------------------
[18601.658656]         0c 00 ff ff  02 00 00 01   01 01 ff 2c  01 00 00 00
[18601.658669]         01 00 00 00  07 00 00 00   0d 00 00 00  04 04 04 04
[18601.658682]         04 04 04 04  00 00 00 00   6e 7d 00 00  32 09 02 14
[18601.658695]         04 05 06 07  08 00 00 00
[18601.658702]        -------------------------------------------------
[18601.658725]         SAA7160 ROM: Size=12 bytes
[18601.658727]         SAA7160 ROM: PORT 0=0x00
[18601.658730]         SAA7160 ROM: PORT 1=0xff
[18601.658732]         SAA7160 ROM: PORT 2=0xff
[18601.658734]         SAA7160 ROM: VBI PORT ID=0x02
[18601.658736]         SAA7160 ROM: Video PORT Type=0x00
[18601.658739]         SAA7160 ROM: VBI PORT Type=0x00
[18601.658741]         SAA7160 ROM: Encoder PORT Type=0x01
[18601.658743]         SAA7160 ROM: Video Output=0x01
[18601.658746]         SAA7160 ROM: VBI Output=0x01
[18601.658748]         SAA7160 ROM: Encoder Output=0xff
[18601.658751]         SAA7160 ROM: Ext data=44 bytes
[18601.658752]
[18601.658754]         SAA7160 ROM: Found Audio Decoder device
[18601.658756]        -------------------------------------------------
[18601.658778]         04 0a 03 1c  00 01 00 01   01 01 01 01  01 02 00 01
[18601.658791]         00 02 01 14  14 14 14 14   6e 7d 00 00  55 95 72 00
[18601.658804]        -------------------------------------------------
[18601.658827]         SAA7160 ROM: Size=4 bytes
[18601.658829]         SAA7160 ROM: Ext data=28 bytes
[18601.658830]
[18601.658832]         SAA7160 ROM: Found Event source
[18601.658835]        -------------------------------------------------
[18601.658856]         06 00 22 00  00 01 00
[18601.658863]        -------------------------------------------------
[18601.658886]         SAA7160 ROM: Size=6 bytes
[18601.658888]         SAA7160 ROM: Ext data=1 bytes
[18601.658890]
[18601.658892]         SAA7160 ROM: Found Crossbar device
[18601.658894]        -------------------------------------------------
[18601.658916]         04 04 01 00
[18601.658920]        -------------------------------------------------
[18601.658943]         SAA7160 ROM: Size=4 bytes
[18601.658945]         SAA7160 ROM: Pairs=4
[18601.658948]         SAA7160 ROM: Ext data=0 bytes
[18601.658949]
[18601.658950]
[18601.658952]     SAA7160 ROM: ===== Device 6 =====
[18601.658954]    -----------------------------------------------------
[18601.658978]     10 07 00 01  40 00 00 00   29 00 01 00  01 00 07 00
[18601.658991]     c0 02 05 32  02 01 0f 00
[18601.658998]    -----------------------------------------------------
[18601.659023]     SAA7160 ROM: Device @ 0x60
[18601.659025]     SAA7160 ROM: Size=16 bytes
[18601.659027]     SAA7160 ROM: Device ID=0x07
[18601.659029]     SAA7160 ROM: Master ID=0x00
[18601.659032]     SAA7160 ROM: Bus ID=0x01
[18601.659034]     SAA7160 ROM: Device type=0x40
[18601.659036]     SAA7160 ROM: Implementation ID=0x29
[18601.659038]     SAA7160 ROM: Path ID=0x01
[18601.659041]     SAA7160 ROM: GPIO ID=0x00
[18601.659043]     SAA7160 ROM: Address=1 bytes
[18601.659045]     SAA7160 ROM: Extended data=7 bytes
[18601.659047]
[18601.659049]         SAA7160 ROM: Found Tuner device
[18601.659051]        -------------------------------------------------
[18601.659072]         02 05 32 02  01 0f 00
[18601.659079]        -------------------------------------------------
[18601.659102]         SAA7160 ROM: Size=2 bytes
[18601.659104]         SAA7160 ROM: Ext data=5 bytes
[18601.659106]
[18601.659107]
[18601.659109]     SAA7160 ROM: ===== Device 7 =====
[18601.659111]    -----------------------------------------------------
[18601.659134]     10 08 00 01  80 00 00 00   29 00 01 00  01 00 02 00
[18601.659147]     42 02 00
[18601.659151]    -----------------------------------------------------
[18601.659176]     SAA7160 ROM: Device @ 0x21
[18601.659178]     SAA7160 ROM: Size=16 bytes
[18601.659180]     SAA7160 ROM: Device ID=0x08
[18601.659182]     SAA7160 ROM: Master ID=0x00
[18601.659185]     SAA7160 ROM: Bus ID=0x01
[18601.659187]     SAA7160 ROM: Device type=0x80
[18601.659189]     SAA7160 ROM: Implementation ID=0x29
[18601.659191]     SAA7160 ROM: Path ID=0x01
[18601.659194]     SAA7160 ROM: GPIO ID=0x00
[18601.659196]     SAA7160 ROM: Address=1 bytes
[18601.659198]     SAA7160 ROM: Extended data=2 bytes
[18601.659200]
[18601.659201]         SAA7160 ROM: Found PLL device
[18601.659203]        -------------------------------------------------
[18601.659225]         02 00
[18601.659229]        -------------------------------------------------
[18601.659252]         SAA7160 ROM: Size=2 bytes
[18601.659254]         SAA7160 ROM: Ext data=0 bytes
[18601.659255]
[18601.659257]
[18601.659259]     SAA7160 ROM: ===== Device 8 =====
[18601.659261]    -----------------------------------------------------
[18601.659284]     10 09 00 01  00 01 00 00   29 00 01 00  01 00 03 00
[18601.659297]     10 03 07 00
[18601.659302]    -----------------------------------------------------
[18601.659326]     SAA7160 ROM: Device @ 0x08
[18601.659328]     SAA7160 ROM: Size=16 bytes
[18601.659330]     SAA7160 ROM: Device ID=0x09
[18601.659333]     SAA7160 ROM: Master ID=0x00
[18601.659335]     SAA7160 ROM: Bus ID=0x01
[18601.659337]     SAA7160 ROM: Device type=0x100
[18601.659339]     SAA7160 ROM: Implementation ID=0x29
[18601.659342]     SAA7160 ROM: Path ID=0x01
[18601.659344]     SAA7160 ROM: GPIO ID=0x00
[18601.659346]     SAA7160 ROM: Address=1 bytes
[18601.659349]     SAA7160 ROM: Extended data=3 bytes
[18601.659350]
[18601.659352]         SAA7160 ROM: Found Channel Demodulator device
[18601.659354]        -------------------------------------------------
[18601.659376]         03 07 00
[18601.659380]        -------------------------------------------------
[18601.659403]         SAA7160 ROM: Size=3 bytes
[18601.659405]         SAA7160 ROM: Ext data=0 bytes
[18601.659406]
[18601.659408]
[18601.659411] saa716x_dvb_init (0): dvb_register_adapter
[18601.660392] DVB: registering new adapter (SAA716x dvb adapter)
[18601.660395] saa716x_dvb_init (0): dvb_dmx_init
[18601.660558] saa716x_dvb_init (0): dvb_dmxdev_init
[18601.661872] saa716x_dvb_init (0): Frontend Init
[18601.661876] saa716x_vp1028_frontend_attach (0): Adapter (0) Power ON
[18601.691854] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>
[18601.772030] saa716x_vp1028_frontend_attach (0): Adapter (0) Reset
[18602.096009] saa716x_vp1028_frontend_attach (0): Probing for MB86A16 (DVB-S/DSS)
[18602.096018] i2c-adapter i2c-8: master_xfer[0] W, addr=0x08, len=1
[18602.096022] i2c-adapter i2c-8: master_xfer[1] R, addr=0x08, len=1
[18602.096025]
[18602.096027] saa716x_i2c_xfer (0): Bus(c000) I2C transfer
[18602.096030] saa716x_i2c_xfer (0): length=1 Addr:0x110
[18602.096041]     <W 0000> 0x7f
[18602.097327] saa716x_i2c_send (0): TXFIFO not empty after Timeout, tried 1000 loops!
[18602.097330] saa716x_i2c_send (0): I2C Send failed (Err=-5)
[18602.097333] saa716x_i2c_xfer (0): Data send failed
[18602.097335] saa716x_i2c_xfer (0): Error in Transfer, try 0
[18602.097338] saa716x_i2c_xfer (0): msg 0, addr = 0x08, len=1, flags=0x0
[18602.097341] saa716x_i2c_xfer (0):     <W 0000> 0x7f
[18602.097345] saa716x_i2c_xfer (0): msg 1, addr = 0x08, len=1, flags=0x1
[18602.097352] saa716x_i2c_hwinit (0): Adapter (c000) SAA716x I2C Core 1 RESET
[18602.097355] saa716x_i2c_hwinit (0): Initializing Adapter SAA716x I2C Core 1 @ 100k
[18602.097362] saa716x_i2c_hwinit (0): Adapter (c000) Autowake <0> Active <1>
[18602.097365] saa716x_i2c_xfer (0): length=1 Addr:0x110
[18602.097375]     <W 0000> 0x7f
[18602.098661] saa716x_i2c_send (0): TXFIFO not empty after Timeout, tried 1000 loops!
[18602.098664] saa716x_i2c_send (0): I2C Send failed (Err=-5)
[18602.098667] saa716x_i2c_xfer (0): Data send failed
[18602.098669] saa716x_i2c_xfer (0): Error in Transfer, try 1
[18602.098672] saa716x_i2c_xfer (0): msg 0, addr = 0x08, len=1, flags=0x0
[18602.098675] saa716x_i2c_xfer (0):     <W 0000> 0x7f
[18602.098678] saa716x_i2c_xfer (0): msg 1, addr = 0x08, len=1, flags=0x1
[18602.098685] saa716x_i2c_hwinit (0): Adapter (c000) SAA716x I2C Core 1 RESET
[18602.098688] saa716x_i2c_hwinit (0): Initializing Adapter SAA716x I2C Core 1 @ 100k
[18602.098695] saa716x_i2c_hwinit (0): Adapter (c000) Autowake <0> Active <1>
[18602.098698] saa716x_i2c_xfer (0): length=1 Addr:0x110
[18602.098708]     <W 0000> 0x7f
[18602.100139] saa716x_i2c_send (0): TXFIFO not empty after Timeout, tried 1000 loops!
[18602.100143] saa716x_i2c_send (0): I2C Send failed (Err=-5)
[18602.100145] saa716x_i2c_xfer (0): Data send failed
[18602.100148] saa716x_i2c_xfer (0): Error in Transfer, try 2
[18602.100151] saa716x_i2c_xfer (0): msg 0, addr = 0x08, len=1, flags=0x0
[18602.100154] saa716x_i2c_xfer (0):     <W 0000> 0x7f
[18602.100157] saa716x_i2c_xfer (0): msg 1, addr = 0x08, len=1, flags=0x1
[18602.100164] saa716x_i2c_hwinit (0): Adapter (c000) SAA716x I2C Core 1 RESET
[18602.100167] saa716x_i2c_hwinit (0): Initializing Adapter SAA716x I2C Core 1 @ 100k
[18602.100174] saa716x_i2c_hwinit (0): Adapter (c000) Autowake <0> Active <1>
[18602.100183] saa716x_vp1028_frontend_attach (0): Frontend attach failed
[18602.100186] saa716x_dvb_init (0): SAA716x frontend attach failed
[18602.100190] saa716x_dvb_init (0): A frontend driver was not found for [1131:7160] subsystem [1822:0044]
[18602.100192]
[18602.100195] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100203] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100208] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100258] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100265] saa716x_dmabuf_sgalloc (0): Done!
[18602.100268] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100272] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100281] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100286] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100316] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100320] saa716x_dmabuf_sgalloc (0): Done!
[18602.100324] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100331] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100340] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100344] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100365] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100369] saa716x_dmabuf_sgalloc (0): Done!
[18602.100371] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100375] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100381] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100386] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100412] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100415] saa716x_dmabuf_sgalloc (0): Done!
[18602.100418] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100422] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100428] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100432] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100448] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100452] saa716x_dmabuf_sgalloc (0): Done!
[18602.100454] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100458] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100464] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100468] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100494] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100498] saa716x_dmabuf_sgalloc (0): Done!
[18602.100500] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100504] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100519] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100523] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100541] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100544] saa716x_dmabuf_sgalloc (0): Done!
[18602.100547] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.100551] saa716x_allocate_ptable (0): SG Page table allocate
[18602.100555] saa716x_dmabuf_sgalloc (0): SG allocate
[18602.100559] saa716x_dmabuf_sgalloc (0): Initializing SG table
[18602.100586] saa716x_dmabuf_sgalloc (0): Allocating SG pages
[18602.100589] saa716x_dmabuf_sgalloc (0): Done!
[18602.100592] saa716x_dmabuf_sgpagefill (0): SG page fill
[18602.691779] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>
[18603.691706] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>
[18603.933751] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>
[18603.933842] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>
[18604.691637] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>
[18604.933691] saa716x_budget_pci_irq (0): MSI STAT L=<00> H=<00>, CTL L=<00> H=<00>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 795caf6489fa6..9798ff41d73c9 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -289,7 +289,7 @@ struct mb86a16_config vp1028_mb86a16_config = {
 static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[0];
+	struct saa716x_i2c *i2c = &saa716x->i2c[1];
 
 	if (count == 0) {
 

From 66f9f6df8e9240d21bd4502d4259edee0e6a889e Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Wed, 20 Jan 2010 17:51:51 +0400
Subject: [PATCH 146/364] saa716x: Code simplification

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 19 -------------------
 drivers/media/pci/saa716x/saa716x_hybrid.c | 21 ---------------------
 drivers/media/pci/saa716x/saa716x_priv.h   |  2 --
 3 files changed, 42 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9798ff41d73c9..f79a24fe89722 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -235,18 +235,6 @@ static struct saa716x_config saa716x_vp3071_config = {
 	.frontend_attach	= saa716x_vp3071_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
-
-	.adap_config		= {
-		{
-			/* Adapter 0 */
-			.power_ctl	= GPIO_08 | GPIO_17,
-			.reset_ctl	= GPIO_14,
-		},{
-			/* Adapter 1 */
-			.power_ctl	= GPIO_09 | GPIO_17,
-			.reset_ctl	= GPIO_15,
-		}
-	}
 };
 
 static int load_config_vp1028(struct saa716x_dev *saa716x)
@@ -345,13 +333,6 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.frontend_attach	= saa716x_vp1028_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
-
-	.adap_config		= {
-		{ /* Adapter 0 */
-			.power_ctl	= GPIO_10,
-			.reset_ctl	= GPIO_12,
-		}
-	}
 };
 
 static int load_config_vp6002(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 76eedec073884..6eff0f3895f64 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -491,19 +491,9 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_averhc82,
 	.adapters		= 1,
-	.demodulator_addr	= 0x1f,
-	.tuner_addr		= 0xc0,
-	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averhc82_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
-
-	.adap_config		= {
-		{ /* Adapter 0 */
-			.power_ctl	= GPIO_06 | GPIO_15,
-			.reset_ctl	= GPIO_05,
-		}
-	}
 };
 
 #define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"
@@ -531,20 +521,9 @@ static struct saa716x_config saa716x_averh788_config = {
 	.boot_mode		= SAA716x_EXT_BOOT,
 	.load_config		= &load_config_averh788,
 	.adapters		= 1,
-	.demodulator_addr	= 0x1f,
-	.tuner_addr		= 0xc0,
-	.decoder_addr		= 0x42,
 	.frontend_attach	= saa716x_averh88_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
-
-	.adap_config		= {
-		{ /* Adapter 0 */
-			.power_ctl	= GPIO_14,
-			.reset_ctl	= GPIO_15,
-		}
-	}
-
 };
 
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 9f608a0608928..1193dcf129855 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -84,8 +84,6 @@ struct saa716x_spi_config;
 typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 
 struct saa716x_adap_config {
-	u32				power_ctl;
-	u32				reset_ctl;
 	u32				ts_port;
 };
 

From aedaa5553a410ab8dd6be2252d06f6c8bfd37140 Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Wed, 20 Jan 2010 18:34:08 +0400
Subject: [PATCH 147/364] saa716x: Try to attach frontend on the Nemo reference
 board

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 20 +++++++++++++++++---
 1 file changed, 17 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 6eff0f3895f64..67fac5e44e980 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -428,17 +428,31 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 	struct saa716x_dev *saa716x = adapter->saa716x;
 	struct saa716x_i2c *i2c = &saa716x->i2c[1];
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
 	if (count  == 0) {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-		saa716x_gpio_write(saa716x, GPIO_14, 1);
+
+		saa716x_gpio_set_output(saa716x, 14);
+		saa716x_gpio_write(saa716x, 14, 1);
 		msleep(100);
+
 		adapter->fe = tda10046_attach(&tda1004x_nemo_config, &i2c->i2c_adapter);
+		if (adapter->fe) {
+			dprintk(SAA716x_ERROR, 1, "found TDA10046 DVB-T frontend @0x%02x",
+				tda1004x_nemo_config.demod_address);
+
+		} else {
+			goto exit;
+		}
+		dprintk(SAA716x_ERROR, 1, "Done!");
 	}
 
 	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	return -ENODEV;
 }
 
 static struct saa716x_config saa716x_nemo_config = {

From b7e4b49915670187d8b0750563784f6e4a39ae1a Mon Sep 17 00:00:00 2001
From: Manu Abraham <manu@linuxtv.org>
Date: Thu, 21 Jan 2010 03:52:02 +0400
Subject: [PATCH 148/364] saa716x: Do not report non-fatal errors to avoid
 issues with buggy BIOS's

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 507c8706cab02..21e59d04249b4 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -222,8 +222,31 @@ int saa716x_core_boot(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL_GPL(saa716x_core_boot);
 
+static void saa716x_bus_report(struct pci_dev *pdev, int enable)
+{
+	u32 reg;
+
+	pci_read_config_dword(pdev, 0x04, &reg);
+	if (enable)
+		reg |= 0x00000100; /* enable SERR */
+	else
+		reg &= 0xfffffeff; /* disable SERR */
+	pci_write_config_dword(pdev, 0x04, reg);
+
+	pci_read_config_dword(pdev, 0x58, &reg);
+	reg &= 0xfffffffd;
+	pci_write_config_dword(pdev, 0x58, reg);
+}
+
 int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 {
+	/*
+	 * configure PHY through config space not to report
+	 * non-fatal error messages to avoid problems with
+	 * quirky BIOS'es
+	 */
+	saa716x_bus_report(saa716x->pdev, 0);
+
 	/*
 	 * create time out for blocks that have no clock
 	 * helps with lower bitrates on FGPI

From 160c7fb721e20999422d216aafca68580178ac3d Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 8 Jan 2010 17:58:11 +0100
Subject: [PATCH 149/364] saa716x: fix kernel oops caused by missing
 initialisation

Variable k was not initialised with 0 in saa716x_dmabuf_sgpagefill. That could lead to kernel oops.

From Oliver Endriss <o.endriss@gmx.de>

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 7b3f9e4041800..21d1dd8c34d1e 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -160,7 +160,7 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 	struct scatterlist *sg_cur;
 
 	u32 *page;
-	int i, j, k;
+	int i, j, k = 0;
 	dma_addr_t addr = 0;
 
 	BUG_ON(dmabuf == NULL);

From 6355eca6cf800dbe56e8f6ffd4c5f2478d6e6613 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 9 Feb 2010 22:18:10 +0100
Subject: [PATCH 150/364] saa716x: fixed double frontend detach

dvb_unregister_frontend and dvb_frontend_detach were called twice per adapter when unloading the driver. That lead to a kernel oops.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 81b2de8ce6564..8e6d695903298 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -238,11 +238,6 @@ void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
 		dvb_dmxdev_release(&saa716x_adap->dmxdev);
 		dvb_dmx_release(&saa716x_adap->demux);
 
-		if (saa716x_adap->fe) {
-			dvb_unregister_frontend(saa716x_adap->fe);
-			dvb_frontend_detach(saa716x_adap->fe);
-		}
-
 		dprintk(SAA716x_DEBUG, 1, "dvb_unregister_adapter");
 		dvb_unregister_adapter(&saa716x_adap->dvb_adapter);
 

From 4f4232ea71c602c0e88168db29550a0bf2250c18 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 9 Feb 2010 22:22:09 +0100
Subject: [PATCH 151/364] saa716x: 1ms is enough when waiting for the PLL

There was a delay of 1 second in saa716x_set_clk_internal and saa716x_set_clk_external to wait for the PLL. This was way too much and slowed things down, p.e. when starting or stopping the TS capturing. Now the delay is 1ms which is enough.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 7198309ba1e27..c4a064d8e849e 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -199,7 +199,7 @@ int saa716x_set_clk_internal(struct saa716x_dev *saa716x, u32 port)
 
 	/* wait for PLL */
 	if (delay)
-		msleep(1000);
+		msleep(1);
 
 	return 0;
 }
@@ -309,7 +309,7 @@ int saa716x_set_clk_external(struct saa716x_dev *saa716x, u32 port)
 	}
 
 	if (delay)
-		msleep(1000);
+		msleep(1);
 
 	return 0;
 }

From b328e265c51230160e968765956bb3466cf1137f Mon Sep 17 00:00:00 2001
From: Oliver Endriss <o.endriss@gmx.de>
Date: Wed, 31 Mar 2010 03:29:50 +0200
Subject: [PATCH 152/364] saa716x_ff: Rename saa716x_ff.c to saa716x_ff_main.c

From: Oliver Endriss <o.endriss@gmx.de>

Renamed saa716x_ff.c to saa716x_ff_main.c.
Otherwise the next commit would cause a circular dependency.

Priority: normal

Signed-off-by: Oliver Endriss <o.endriss@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile                            | 2 ++
 drivers/media/pci/saa716x/{saa716x_ff.c => saa716x_ff_main.c} | 0
 2 files changed, 2 insertions(+)
 rename drivers/media/pci/saa716x/{saa716x_ff.c => saa716x_ff_main.c} (100%)

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 189f3a84174af..fbd60c5908c21 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -14,6 +14,8 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_rom.o	\
 			   saa716x_spi.o
 
+saa716x_ff-objs		:= saa716x_ff_main.o
+
 obj-$(CONFIG_SAA716X_CORE)	  += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
diff --git a/drivers/media/pci/saa716x/saa716x_ff.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
similarity index 100%
rename from drivers/media/pci/saa716x/saa716x_ff.c
rename to drivers/media/pci/saa716x/saa716x_ff_main.c

From c830849c8d208449cbd586894d196fd0f37e1eed Mon Sep 17 00:00:00 2001
From: Oliver Endriss <o.endriss@gmx.de>
Date: Wed, 31 Mar 2010 03:46:11 +0200
Subject: [PATCH 153/364] saa716x_ff: Support remote control receiver

From: Oliver Endriss <o.endriss@gmx.de>

Initial support for infrared remote control.

Priority: normal

Signed-off-by: Oliver Endriss <o.endriss@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig           |   1 +
 drivers/media/pci/saa716x/Makefile          |   3 +-
 drivers/media/pci/saa716x/saa716x_ff_ir.c   | 259 ++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_ff_main.c |  15 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |   8 +
 5 files changed, 281 insertions(+), 5 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff_ir.c

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index c5f81ffa0eee2..d678dc2232d29 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -48,6 +48,7 @@ config DVB_SAA716X_HYBRID
 config DVB_SAA716X_FF
 	tristate "SAA7160/1/2 based Full Fledged PCIe cards"
 	depends on SAA716X_CORE && DVB_CORE
+	depends on INPUT # IR
 
 	help
 	  Support for the SAA7160/1/2 based  Full fledged PCIe DVB cards
diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index fbd60c5908c21..232c1e2189f25 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -14,7 +14,8 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_rom.o	\
 			   saa716x_spi.o
 
-saa716x_ff-objs		:= saa716x_ff_main.o
+saa716x_ff-objs		:= saa716x_ff_main.o	\
+			   saa716x_ff_ir.o
 
 obj-$(CONFIG_SAA716X_CORE)	  += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
new file mode 100644
index 0000000000000..55fcd057a90fc
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -0,0 +1,259 @@
+/*
+ * Driver for the remote control of the TT6400 DVB-S2 card
+ *
+ * Copyright (C) 2010 Oliver Endriss <o.endriss@gmx.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ * Or, point your browser to http://www.gnu.org/copyleft/gpl.html
+ *
+ */
+
+#include <linux/types.h>
+#include <linux/input.h>
+
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
+#include "saa716x_ff.h"
+
+
+/* infrared remote control */
+struct infrared {
+	u16			key_map[128];
+	struct input_dev	*input_dev;
+	char			input_phys[32];
+	struct timer_list	keyup_timer;
+	struct tasklet_struct	tasklet;
+	u32			command;
+	u32			device_mask;
+	u8			protocol;
+	u16			last_key;
+	u16			last_toggle;
+	bool			delay_timer_finished;
+};
+
+#define IR_RC5		0
+#define UP_TIMEOUT	(HZ*7/25)
+
+
+/* key-up timer */
+static void ir_emit_keyup(unsigned long parm)
+{
+	struct infrared *ir = (struct infrared *) parm;
+
+	if (!ir || !test_bit(ir->last_key, ir->input_dev->key))
+		return;
+
+	input_report_key(ir->input_dev, ir->last_key, 0);
+	input_sync(ir->input_dev);
+}
+
+
+/* tasklet */
+static void ir_emit_key(unsigned long parm)
+{
+	struct saa716x_dev *saa716x = (struct saa716x_dev *) parm;
+	struct infrared *ir = saa716x->ir_priv;
+	u32 ircom = ir->command;
+	u8 data;
+	u8 addr;
+	u16 toggle;
+	u16 keycode;
+
+	/* extract device address and data */
+	switch (ir->protocol) {
+	case IR_RC5: /* extended RC5: 5 bits device address, 7 bits data */
+		addr = (ircom >> 6) & 0x1f;
+		/* data bits 1..6 */
+		data = ircom & 0x3f;
+		/* data bit 7 (inverted) */
+		if (!(ircom & 0x1000))
+			data |= 0x40;
+		toggle = ircom & 0x0800;
+		break;
+
+	default:
+		printk(KERN_ERR "%s: invalid protocol %x\n",
+			__func__, ir->protocol);
+		return;
+	}
+
+	input_event(ir->input_dev, EV_MSC, MSC_RAW, (addr << 16) | data);
+	input_event(ir->input_dev, EV_MSC, MSC_SCAN, data);
+
+	keycode = ir->key_map[data];
+
+	dprintk(SAA716x_DEBUG, 0,
+		"%s: code %08x -> addr %i data 0x%02x -> keycode %i\n",
+		__func__, ircom, addr, data, keycode);
+
+	/* check device address */
+	if (!(ir->device_mask & (1 << addr)))
+		return;
+
+	if (!keycode) {
+		printk(KERN_WARNING "%s: code %08x -> addr %i data 0x%02x -> unknown key!\n",
+			__func__, ircom, addr, data);
+		return;
+	}
+
+	if (timer_pending(&ir->keyup_timer)) {
+		del_timer(&ir->keyup_timer);
+		if (ir->last_key != keycode || toggle != ir->last_toggle) {
+			ir->delay_timer_finished = false;
+			input_event(ir->input_dev, EV_KEY, ir->last_key, 0);
+			input_event(ir->input_dev, EV_KEY, keycode, 1);
+			input_sync(ir->input_dev);
+		} else if (ir->delay_timer_finished) {
+			input_event(ir->input_dev, EV_KEY, keycode, 2);
+			input_sync(ir->input_dev);
+		}
+	} else {
+		ir->delay_timer_finished = false;
+		input_event(ir->input_dev, EV_KEY, keycode, 1);
+		input_sync(ir->input_dev);
+	}
+
+	ir->last_key = keycode;
+	ir->last_toggle = toggle;
+
+	ir->keyup_timer.expires = jiffies + UP_TIMEOUT;
+	add_timer(&ir->keyup_timer);
+
+}
+
+
+/* register with input layer */
+static void ir_register_keys(struct infrared *ir)
+{
+	int i;
+
+	set_bit(EV_KEY, ir->input_dev->evbit);
+	set_bit(EV_REP, ir->input_dev->evbit);
+	set_bit(EV_MSC, ir->input_dev->evbit);
+
+	set_bit(MSC_RAW, ir->input_dev->mscbit);
+	set_bit(MSC_SCAN, ir->input_dev->mscbit);
+
+	memset(ir->input_dev->keybit, 0, sizeof(ir->input_dev->keybit));
+
+	for (i = 0; i < ARRAY_SIZE(ir->key_map); i++) {
+		if (ir->key_map[i] > KEY_MAX)
+			ir->key_map[i] = 0;
+		else if (ir->key_map[i] > KEY_RESERVED)
+			set_bit(ir->key_map[i], ir->input_dev->keybit);
+	}
+
+	ir->input_dev->keycode = ir->key_map;
+	ir->input_dev->keycodesize = sizeof(ir->key_map[0]);
+	ir->input_dev->keycodemax = ARRAY_SIZE(ir->key_map);
+}
+
+
+/* called by the input driver after rep[REP_DELAY] ms */
+static void ir_repeat_key(unsigned long parm)
+{
+	struct infrared *ir = (struct infrared *) parm;
+
+	ir->delay_timer_finished = true;
+}
+
+
+/* interrupt handler */
+void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd)
+{
+	struct infrared *ir = saa716x->ir_priv;
+
+	if (!ir)
+		return;
+
+	ir->command = ir_cmd;
+	tasklet_schedule(&ir->tasklet);
+}
+
+
+int saa716x_ir_init(struct saa716x_dev *saa716x)
+{
+	struct input_dev *input_dev;
+	struct infrared *ir;
+	int rc;
+	int i;
+
+	if (!saa716x)
+		return -ENOMEM;
+
+	ir = kzalloc(sizeof(struct infrared), GFP_KERNEL);
+	if (!ir)
+		return -ENOMEM;
+
+	init_timer(&ir->keyup_timer);
+	ir->keyup_timer.function = ir_emit_keyup;
+	ir->keyup_timer.data = (unsigned long) ir;
+
+	input_dev = input_allocate_device();
+	if (!input_dev)
+		goto err;
+
+	ir->input_dev = input_dev;
+	input_dev->name = "TT6400 DVB IR receiver";
+	snprintf(ir->input_phys, sizeof(ir->input_phys),
+		"pci-%s/ir0", pci_name(saa716x->pdev));
+	input_dev->phys = ir->input_phys;
+	input_dev->id.bustype = BUS_PCI;
+	input_dev->id.version = 1;
+	input_dev->id.vendor = saa716x->pdev->subsystem_vendor;
+	input_dev->id.product = saa716x->pdev->subsystem_device;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 22)
+	input_dev->dev.parent = &saa716x->pdev->dev;
+#else
+	input_dev->cdev.dev = &saa716x->pdev->dev;
+#endif
+	rc = input_register_device(input_dev);
+	if (rc)
+		goto err;
+
+	/* TODO: fix setup/keymap */
+	ir->protocol = IR_RC5;
+	ir->device_mask = 0xffffffff;
+	for (i = 0; i < ARRAY_SIZE(ir->key_map); i++)
+		ir->key_map[i] = i+1;
+	ir_register_keys(ir);
+
+	/* override repeat timer */
+	input_dev->timer.function = ir_repeat_key;
+	input_dev->timer.data = (unsigned long) ir;
+
+	tasklet_init(&ir->tasklet, ir_emit_key, (unsigned long) saa716x);
+	saa716x->ir_priv = ir;
+
+	return 0;
+
+err:
+	if (ir->input_dev)
+		input_free_device(ir->input_dev);
+	kfree(ir);
+	return -ENOMEM;
+}
+
+
+void saa716x_ir_exit(struct saa716x_dev *saa716x)
+{
+	struct infrared *ir = saa716x->ir_priv;
+
+	saa716x->ir_priv = NULL;
+	tasklet_kill(&ir->tasklet);
+	del_timer_sync(&ir->keyup_timer);
+	input_unregister_device(ir->input_dev);
+	kfree(ir);
+}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index f480e224ec3d6..cc0582059ed2f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -901,6 +901,10 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail9;
 	}
 
+	err = saa716x_ir_init(saa716x);
+	if (err)
+		goto fail9;
+
 	return 0;
 
 fail9:
@@ -935,6 +939,8 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 	struct sti7109_dev *sti7109 = saa716x->priv;
 
+	saa716x_ir_exit(saa716x);
+
 	saa716x_ff_osd_exit(saa716x);
 
 	saa716x_ff_audio_exit(saa716x);
@@ -1212,15 +1218,16 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[4];
 
 			saa716x_phi_read(saa716x, ADDR_REMOTE_EVENT, data, 4);
-			sti7109->remote_event = (data[0] << 24)
-					      | (data[1] << 16)
-					      | (data[2] << 8)
-					      | (data[3]);
+			sti7109->remote_event = (data[3] << 24)
+					      | (data[2] << 16)
+					      | (data[1] << 8)
+					      | (data[0]);
 
 			phiISR &= ~ISR_REMOTE_EVENT_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
 
 			dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %u", sti7109->remote_event);
+			saa716x_ir_handler(saa716x, sti7109->remote_event);
 		}
 
 		if (phiISR & ISR_DVO_FORMAT_MASK) {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 1193dcf129855..d0fafd87abdcb 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -164,6 +164,9 @@ struct saa716x_dev {
 	u32				id_offst;
 	u32				id_len;
 	void				*priv;
+
+	/* remote control */
+	void				*ir_priv;
 };
 
 /* PCI */
@@ -187,4 +190,9 @@ extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 
+/* Remote control */
+extern int saa716x_ir_init(struct saa716x_dev *saa716x);
+extern void saa716x_ir_exit(struct saa716x_dev *saa716x);
+extern void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd);
+
 #endif /* __SAA716x_PRIV_H */

From 876f934ebdabb409b921de28af1d42da5a137fe2 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 5 Apr 2010 15:45:21 +0200
Subject: [PATCH 154/364] saa716x_ff: Adapted frontend init to latest driver
 changes.

With latest changes on stv090x and stv6110x drivers regardings the tuner I2C gate locking it is needed to initialize the demodulator directly after attaching it. This leads to a correct setup of the tuner's clock output divider. In case of the TT S2-6400 we must initialize adapter 1 as the second tuner drives the STV0900.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index cc0582059ed2f..cf7d28e077e1d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1373,6 +1373,7 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 					 i2c_adapter);
 
 			tt6400_stv090x_config.tuner_init	  = ctl->tuner_init;
+			tt6400_stv090x_config.tuner_sleep	  = ctl->tuner_sleep;
 			tt6400_stv090x_config.tuner_set_mode	  = ctl->tuner_set_mode;
 			tt6400_stv090x_config.tuner_set_frequency = ctl->tuner_set_frequency;
 			tt6400_stv090x_config.tuner_get_frequency = ctl->tuner_get_frequency;
@@ -1383,6 +1384,16 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 			tt6400_stv090x_config.tuner_set_refclk	  = ctl->tuner_set_refclk;
 			tt6400_stv090x_config.tuner_get_status	  = ctl->tuner_get_status;
 
+			if (count == 1) {
+				/* call the init function once to initialize
+				   tuner's clock output divider and demod's
+				   master clock */
+				/* The second tuner drives the STV0900 so
+				   call it only for adapter 1 */
+				if (adapter->fe->ops.init)
+					adapter->fe->ops.init(adapter->fe);
+			}
+
 			dvb_attach(isl6423_attach,
 				   adapter->fe,
 				   i2c_adapter,

From 6644e14c63ebffb64cb4886da1a9f4bc0703681d Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 24 May 2010 21:41:12 +0200
Subject: [PATCH 155/364] saa716x: Improve PHI performance by shorten timings a
 bit.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_phi.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 0535cce72e7c7..7df9a989e08be 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -99,8 +99,8 @@ int saa716x_phi_init(struct saa716x_dev *saa716x)
 	value = 0;
 	value |= 0x01; /* chip select 0 */
 	value |= 0x00 << 8; /* ready mask */
-	value |= 0x04 << 12; /* strobe time */
-	value |= 0x08 << 20; /* cycle time */
+	value |= 0x03 << 12; /* strobe time */
+	value |= 0x05 << 20; /* cycle time */
 	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, value);
 
 	value = 0;

From 7ab6637c80c9559cde8731b0901d83131d5bd9d8 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 24 May 2010 21:48:29 +0200
Subject: [PATCH 156/364] saa716x_ff: use double buffering for block transfers.

This is done by splitting the 14K data buffer in DPRAM into two 7K blocks. While one buffer is read by the STi7109 the other one can be updated by the PC. This improves data transfer performance by 70 percent. Firmware version 0.2.0 is required to be able to use it.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 39 ++++++++++++++-------
 1 file changed, 26 insertions(+), 13 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index cf7d28e077e1d..6a6ce01ba3aec 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -359,6 +359,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	u16 blockIndex;
 	u8 blockHeader[SIZE_BLOCK_HEADER];
 	u8 * blockPtr;
+	int activeBlock;
 
 	timeout = 1 * HZ;
 	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
@@ -383,7 +384,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	 * 16 bit - current block data size
 	 * 16 bit - block handle. This is used to reference the data in the command that uses it.
 	 */
-	blockSize = SIZE_BLOCK_DATA - SIZE_BLOCK_HEADER;
+	blockSize = (SIZE_BLOCK_DATA / 2) - SIZE_BLOCK_HEADER;
 	numBlocks = data->data_length / blockSize;
 	lastBlockSize = data->data_length % blockSize;
 	if (lastBlockSize > 0)
@@ -394,6 +395,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
 	blockHeader[7] = (u8) sti7109->data_handle;
 	blockPtr = (u8 *) data->data_buffer;
+	activeBlock = 0;
 	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
 
 		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
@@ -405,21 +407,32 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		blockHeader[5] = (uint8_t) blockSize;
 
 		sti7109->block_done = 0;
-		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA, blockHeader, SIZE_BLOCK_HEADER);
-		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + SIZE_BLOCK_HEADER, blockPtr, blockSize);
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
-
-		timeout = 1 * HZ;
-		timeout = wait_event_timeout(sti7109->block_done_wq,
-					     sti7109->block_done == 1,
-					     timeout);
-
-		if (sti7109->block_done == 0) {
-			dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
-			return -EIO;
+		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2), blockHeader, SIZE_BLOCK_HEADER);
+		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2) + SIZE_BLOCK_HEADER, blockPtr, blockSize);
+		activeBlock = (activeBlock + 1) & 1;
+		if (blockIndex > 0) {
+			timeout = 1 * HZ;
+			timeout = wait_event_timeout(sti7109->block_done_wq,
+						     sti7109->block_done == 1,
+						     timeout);
+
+			if (sti7109->block_done == 0) {
+				dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+				return -EIO;
+			}
 		}
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
 		blockPtr += blockSize;
 	}
+	timeout = 1 * HZ;
+	timeout = wait_event_timeout(sti7109->block_done_wq,
+				     sti7109->block_done == 1,
+				     timeout);
+
+	if (sti7109->block_done == 0) {
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+		return -EIO;
+	}
 
 	data->data_handle = sti7109->data_handle;
 	sti7109->data_handle++;

From e819262f6a0e2080c96477aef6a2ae7562da313c Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 7 Jun 2010 21:42:37 +0200
Subject: [PATCH 157/364] saa716x_ff: Reset block_done after receiving it.

This fixes not waiting for the last block to be transfered which lead, p.e. missing OSD parts.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 6a6ce01ba3aec..f39b0f7d91390 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -406,7 +406,6 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		blockHeader[4] = (uint8_t) (blockSize >> 8);
 		blockHeader[5] = (uint8_t) blockSize;
 
-		sti7109->block_done = 0;
 		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2), blockHeader, SIZE_BLOCK_HEADER);
 		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2) + SIZE_BLOCK_HEADER, blockPtr, blockSize);
 		activeBlock = (activeBlock + 1) & 1;
@@ -421,6 +420,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 				return -EIO;
 			}
 		}
+		sti7109->block_done = 0;
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
 		blockPtr += blockSize;
 	}
@@ -433,6 +433,7 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
 		return -EIO;
 	}
+	sti7109->block_done = 0;
 
 	data->data_handle = sti7109->data_handle;
 	sti7109->data_handle++;

From e9d7d7cb6000222f02da500697a14dedb210a34e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 30 Jan 2011 16:39:04 +0100
Subject: [PATCH 158/364] saa716x_ff: add interrupt source for firmware log
 messages

The unused FIFO2 interrupt is replaced by a new one that is used for indicating log messages coming from the firmware. The log message itself is transferred in a memory area in the DPRAM.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  4 +++-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 13 +++++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 1c4ddb661f078..61ca23ee77732 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -49,7 +49,7 @@
 #define ISR_OSD_READY_MASK	0x0800 /* interrupt source for OSD command acknowledge */
 #define ISR_FE_CMD_MASK		0x1000 /* interrupt source for frontend cmds */
 #define ISR_FE_READY_MASK	0x2000 /* interrupt source for frontend command acknowledge */
-#define ISR_FIFO2_EMPTY_MASK	0x4000 /* interrupt source for FIFO2 empty */
+#define ISR_LOG_MESSAGE_MASK	0x4000 /* interrupt source for log messages */
 #define ISR_FIFO1_EMPTY_MASK	0x8000 /* interrupt source for FIFO1 empty */
 
 #define ADDR_CMD_DATA		0x0000 /* address for cmd data in fpga dpram */
@@ -61,11 +61,13 @@
 #define ADDR_CURRENT_STC	0x3E10 /* address for system clock (64 Bits) */
 #define ADDR_DVO_FORMAT		0x3E18 /* address for DVO format 32 Bits) */
 #define ADDR_REMOTE_EVENT	0x3F00 /* address for remote events (32 Bits) */
+#define ADDR_LOG_MESSAGE	0x3F80 /* address for log messages */
 
 #define SIZE_CMD_DATA		0x01A0 /* maximum size for command data (416 Bytes) */
 #define SIZE_OSD_CMD_DATA	0x0420 /* maximum size for OSD command data (1056 Bytes) */
 #define SIZE_FE_CMD_DATA	0x0040 /* maximum size for frontend command data (64 Bytes) */
 #define SIZE_BLOCK_DATA		0x3800 /* maximum size for block data (14 kB) */
+#define SIZE_LOG_MESSAGE_DATA	0x0080 /* maximum size for log message data (128 Bytes) */
 
 #define SIZE_BLOCK_HEADER	8      /* block header size */
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index f39b0f7d91390..ef3af303737e3 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1260,6 +1260,19 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			dprintk(SAA716x_INFO, 1, "DVO FORMAT CHANGE: %u", format);
 		}
 
+		if (phiISR & ISR_LOG_MESSAGE_MASK) {
+			char message[SIZE_LOG_MESSAGE_DATA];
+
+			saa716x_phi_read(saa716x, ADDR_LOG_MESSAGE, message,
+					 SIZE_LOG_MESSAGE_DATA);
+
+			phiISR &= ~ISR_LOG_MESSAGE_MASK;
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_LOG_MESSAGE_MASK);
+
+			dprintk(SAA716x_INFO, 1, "LOG MESSAGE: %.*s",
+				SIZE_LOG_MESSAGE_DATA, message);
+		}
+
 		if (phiISR & ISR_FIFO1_EMPTY_MASK) {
 			u32 fifoCtrl;
 			u32 fifoStat;

From 667982a80ed6de7d72cec4c723953dd0b485887e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 30 Jan 2011 19:49:48 +0100
Subject: [PATCH 159/364] saa716x_ff: read FPGA version register

After a successful initialize of the FPGA the version of the bitstream is read out.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 4 ++++
 2 files changed, 6 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 61ca23ee77732..10aec9011c1c3 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -35,6 +35,8 @@
 #define FPGA_ADDR_FIFO_CTRL	0x8300 /* FIFO control register */
 #define FPGA_ADDR_FIFO_STAT	0x8310 /* FIFO status register */
 
+#define FPGA_ADDR_VERSION	0x80F0 /* FPGA bitstream version register */
+
 #define ISR_CMD_MASK		0x0001 /* interrupt source for normal cmds (osd, fre, av, ...) */
 #define ISR_READY_MASK		0x0002 /* interrupt source for command acknowledge */
 #define ISR_BLOCK_MASK		0x0004 /* interrupt source for single block transfers and acknowledge */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index ef3af303737e3..1c1984610f1b2 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -65,6 +65,7 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	int rounds;
 	int ret;
 	const struct firmware *fw;
+	u32 fpgaVersion;
 
 	/* request the FPGA firmware, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
@@ -120,6 +121,9 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	if (!fpgaDone)
 		return -EINVAL;
 
+	fpgaVersion = SAA716x_EPRD(PHI_1, FPGA_ADDR_VERSION);
+	dprintk(SAA716x_INFO, 1, "SAA716x FPGA version=%X", fpgaVersion);
+
 	return 0;
 }
 

From e8d7179c1ef098887addedf490c3a0ba17b54d51 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 7 Mar 2011 19:39:57 +0100
Subject: [PATCH 160/364] saa716x_ff: fixed PTS/STC signed/unsigned issue

There was a sign extension when building the PTS values from the byte array. Fixed this by moving the type cast.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 34 ++++++++++-----------
 1 file changed, 17 insertions(+), 17 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 1c1984610f1b2..1fef4e5e9207a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1188,43 +1188,43 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[8];
 
 			saa716x_phi_read(saa716x, ADDR_AUDIO_PTS, data, 8);
-			sti7109->audio_pts = ((u64) (data[3] & 0x01) << 32)
-					    | (u64) (data[4] << 24)
-					    | (u64) (data[5] << 16)
-					    | (u64) (data[6] << 8)
-					    | (u64) (data[7]);
+			sti7109->audio_pts = (((u64) data[3] & 0x01) << 32)
+					    | ((u64) data[4] << 24)
+					    | ((u64) data[5] << 16)
+					    | ((u64) data[6] << 8)
+					    | ((u64) data[7]);
 
 			phiISR &= ~ISR_AUDIO_PTS_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_AUDIO_PTS_MASK);
 
-			/*dprintk(SAA716x_INFO, 1, "AUDIO PTS: %llu", sti7109->audio_pts);*/
+			/*dprintk(SAA716x_INFO, 1, "AUDIO PTS: %llX", sti7109->audio_pts);*/
 		}
 
 		if (phiISR & ISR_VIDEO_PTS_MASK) {
 			u8 data[8];
 
 			saa716x_phi_read(saa716x, ADDR_VIDEO_PTS, data, 8);
-			sti7109->video_pts = ((u64) (data[3] & 0x01) << 32)
-					    | (u64) (data[4] << 24)
-					    | (u64) (data[5] << 16)
-					    | (u64) (data[6] << 8)
-					    | (u64) (data[7]);
+			sti7109->video_pts = (((u64) data[3] & 0x01) << 32)
+					    | ((u64) data[4] << 24)
+					    | ((u64) data[5] << 16)
+					    | ((u64) data[6] << 8)
+					    | ((u64) data[7]);
 
 			phiISR &= ~ISR_VIDEO_PTS_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_VIDEO_PTS_MASK);
 
-			/*dprintk(SAA716x_INFO, 1, "VIDEO PTS: %llu", sti7109->video_pts);*/
+			/*dprintk(SAA716x_INFO, 1, "VIDEO PTS: %llX", sti7109->video_pts);*/
 		}
 
 		if (phiISR & ISR_CURRENT_STC_MASK) {
 			u8 data[8];
 
 			saa716x_phi_read(saa716x, ADDR_CURRENT_STC, data, 8);
-			sti7109->current_stc = ((u64) (data[3] & 0x01) << 32)
-					      | (u64) (data[4] << 24)
-					      | (u64) (data[5] << 16)
-					      | (u64) (data[6] << 8)
-					      | (u64) (data[7]);
+			sti7109->current_stc = (((u64) data[3] & 0x01) << 32)
+					      | ((u64) data[4] << 24)
+					      | ((u64) data[5] << 16)
+					      | ((u64) data[6] << 8)
+					      | ((u64) data[7]);
 
 			phiISR &= ~ISR_CURRENT_STC_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CURRENT_STC_MASK);

From ef5a9aed5d69cc4777b6e4d8b5ee4a0602eca927 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Mar 2011 14:47:55 +0100
Subject: [PATCH 161/364] saa716x_ff: query and print loader and firmware
 versions

The version of the loader binary is read from the binary data itself. The SZi7109 firmware version is queried through its command interface.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 61 ++++++++++++++++++---
 1 file changed, 53 insertions(+), 8 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 1fef4e5e9207a..3c15078a67fff 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -99,7 +99,8 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 		fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
 		rounds++;
 	}
-	dprintk(SAA716x_INFO, 1, "SAA716x FPGA INITN=%d, rounds=%d", fpgaInit, rounds);
+	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA INITN=%d, rounds=%d",
+		fpgaInit, rounds);
 
 	SAA716x_EPWR(SPI, SPI_CLOCK_COUNTER, 0x08);
 	SAA716x_EPWR(SPI, SPI_CONTROL_REG, SPI_MODE_SELECT);
@@ -107,12 +108,12 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	msleep(10);
 
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
-	dprintk(SAA716x_INFO, 1, "SAA716x FPGA DONE=%d", fpgaDone);
-	dprintk(SAA716x_INFO, 1, "SAA716x FPGA write bitstream");
+	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA DONE=%d", fpgaDone);
+	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA write bitstream");
 	saa716x_spi_write(saa716x, fw->data, fw->size);
-	dprintk(SAA716x_INFO, 1, "SAA716x FPGA write bitstream done");
+	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA write bitstream done");
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
-	dprintk(SAA716x_INFO, 1, "SAA716x FPGA DONE=%d", fpgaDone);
+	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA DONE=%d", fpgaDone);
 
 	msleep(10);
 
@@ -122,7 +123,8 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 		return -EINVAL;
 
 	fpgaVersion = SAA716x_EPRD(PHI_1, FPGA_ADDR_VERSION);
-	dprintk(SAA716x_INFO, 1, "SAA716x FPGA version=%X", fpgaVersion);
+	printk(KERN_INFO "SAA716x FF FPGA version %X.%02X\n",
+		fpgaVersion >> 8, fpgaVersion & 0xFF);
 
 	return 0;
 }
@@ -141,6 +143,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	u64 waitTime;
 	int ret;
 	const struct firmware *fw;
+	u32 loaderVersion;
 
 	/* request the st7109 loader, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
@@ -155,6 +158,9 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 			       " (error %i)\n", ret);
 		return -EINVAL;
 	}
+	loaderVersion = (fw->data[0x1385] << 8) | fw->data[0x1384];
+	printk(KERN_INFO "SAA716x FF loader version %X.%02X\n",
+		loaderVersion >> 8, loaderVersion & 0xFF);
 
 	saa716x_phi_write(saa716x, 0, fw->data, fw->size);
 	msleep(10);
@@ -195,7 +201,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 		return -EINVAL;
 	}
 
-	dprintk(SAA716x_INFO, 1, "SAA716x download ST7109 firmware");
+	dprintk(SAA716x_INFO, 1, "SAA716x FF download ST7109 firmware");
 	writtenBlock = 0;
 	blockSize = 0x3c00;
 	length = fw->size;
@@ -236,7 +242,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	writtenBlock |= 0x80000000;
 	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
 
-	dprintk(SAA716x_INFO, 1, "SAA716x download ST7109 firmware done");
+	dprintk(SAA716x_INFO, 1, "SAA716x FF download ST7109 firmware done");
 
 	release_firmware(fw);
 
@@ -444,6 +450,37 @@ static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	return 0;
 }
 
+static int sti7109_get_fw_version(struct sti7109_dev *sti7109, u32 *fw_version)
+{
+	osd_raw_cmd_t cmd;
+	u8 cmd_data[6];
+	u8 result_data[MAX_RESULT_LEN];
+	int ret_val = -EINVAL;
+
+	cmd_data[0] = 0x00;
+	cmd_data[1] = 0x04;
+	cmd_data[2] = 0x00;
+	cmd_data[3] = 0x00;
+	cmd_data[4] = 0x00;
+	cmd_data[5] = 0x00;
+	cmd.cmd_data = cmd_data;
+	cmd.cmd_len = sizeof(cmd_data);
+	cmd.result_data = result_data;
+	cmd.result_len = sizeof(result_data);
+
+	mutex_lock(&sti7109->cmd_lock);
+	ret_val = sti7109_raw_cmd(sti7109, &cmd);
+	mutex_unlock(&sti7109->cmd_lock);
+
+	if (ret_val == 0) {
+		*fw_version = (result_data[6] << 16)
+			    | (result_data[7] << 8)
+			    | result_data[8];
+	}
+
+	return ret_val;
+}
+
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 			 unsigned int cmd, void *parg)
 {
@@ -729,6 +766,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	int err = 0;
 	u32 value;
 	unsigned long timeout;
+	u32 fw_version;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -919,6 +957,13 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail9;
 	}
 
+	err = sti7109_get_fw_version(sti7109, &fw_version);
+	if (!err) {
+		printk(KERN_INFO "SAA716x FF firmware version %X.%X.%X\n",
+			(fw_version >> 16) & 0xFF, (fw_version >> 8) & 0xFF,
+			fw_version & 0xFF);
+	}
+
 	err = saa716x_ir_init(saa716x);
 	if (err)
 		goto fail9;

From aed9e63c888f533331614bd894512d4a4bfd98d4 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Mar 2011 14:56:40 +0100
Subject: [PATCH 162/364] saa716x: disable debug printk

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 8e6d695903298..3dfb8c5ad1456 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -58,7 +58,6 @@ static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
 
 	if (saa716x_adap->feeds == 1) {
 		dprintk(SAA716x_DEBUG, 1, "SAA716x start feed & dma");
-		printk("saa716x start feed & dma\n");
 		saa716x_dma_start(saa716x, saa716x_adap->count);
 	}
 
@@ -79,7 +78,6 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	saa716x_adap->feeds--;
 	if (saa716x_adap->feeds == 0) {
 		dprintk(SAA716x_DEBUG, 1, "saa716x stop feed and dma");
-		printk("saa716x stop feed and dma\n");
 		saa716x_dma_stop(saa716x, saa716x_adap->count);
 	}
 

From 28b3b9e4825354a0a1c09c76825694378fcb47e3 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Mar 2011 18:52:47 +0100
Subject: [PATCH 163/364] osd.h: Add const keyword to struct members

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 include/uapi/linux/dvb/osd.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/include/uapi/linux/dvb/osd.h b/include/uapi/linux/dvb/osd.h
index ca31285dada48..a518a5c9865dd 100644
--- a/include/uapi/linux/dvb/osd.h
+++ b/include/uapi/linux/dvb/osd.h
@@ -143,14 +143,14 @@ typedef struct osd_cap_s {
 #define OSD_GET_CAPABILITY      _IOR('o', 161, osd_cap_t)
 
 typedef struct osd_raw_cmd_s {
-	void __user *cmd_data;
+	const void __user *cmd_data;
 	int cmd_len;
 	void __user *result_data;
 	int result_len;
 } osd_raw_cmd_t;
 
 typedef struct osd_raw_data_s {
-	void __user *data_buffer;
+	const void __user *data_buffer;
 	int data_length;
 	int data_handle;
 } osd_raw_data_t;

From b63d86ce1efdcf3abf70446ffc230e6df6191b90 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 20 Mar 2011 15:16:05 +0100
Subject: [PATCH 164/364] saa716x_ff: implement ioctl VIDEO_GET_SIZE

Implement video device ioctl VIDEO_GET_SIZE by calling the proper function of the firmware's command interface.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 39 +++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 3c15078a67fff..caea09e1c45d1 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -481,6 +481,40 @@ static int sti7109_get_fw_version(struct sti7109_dev *sti7109, u32 *fw_version)
 	return ret_val;
 }
 
+static int sti7109_get_video_format(struct sti7109_dev *sti7109, video_size_t *vs)
+{
+	osd_raw_cmd_t cmd;
+	u8 cmd_data[7];
+	u8 result_data[MAX_RESULT_LEN];
+	int ret_val = -EINVAL;
+
+	cmd_data[0] = 0x00;
+	cmd_data[1] = 0x05; /* command length */
+	cmd_data[2] = 0x00;
+	cmd_data[3] = 0x01; /* A/V decoder command group */
+	cmd_data[4] = 0x00;
+	cmd_data[5] = 0x10; /* get video format info command */
+	cmd_data[6] = 0x00; /* decoder index 0 */
+	cmd.cmd_data = cmd_data;
+	cmd.cmd_len = sizeof(cmd_data);
+	cmd.result_data = result_data;
+	cmd.result_len = sizeof(result_data);
+
+	mutex_lock(&sti7109->cmd_lock);
+	ret_val = sti7109_raw_cmd(sti7109, &cmd);
+	mutex_unlock(&sti7109->cmd_lock);
+
+	if (ret_val == 0) {
+		vs->w = (result_data[7] << 8)
+		      | result_data[8];
+		vs->h = (result_data[9] << 8)
+		      | result_data[10];
+		vs->aspect_ratio = result_data[11] >> 4;
+	}
+
+	return ret_val;
+}
+
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 			 unsigned int cmd, void *parg)
 {
@@ -710,6 +744,11 @@ static int dvb_video_ioctl(struct inode *inode, struct file *file,
 		*(u64 *)parg = sti7109->video_pts;
 		break;
 	}
+	case VIDEO_GET_SIZE:
+	{
+		ret = sti7109_get_video_format(sti7109, (video_size_t *) parg);
+		break;
+	}
 	default:
 		ret = -ENOIOCTLCMD;
 		break;

From c2dc7711e5316067b99e294a4ae0d4e02eb2a5c6 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 29 Mar 2011 19:50:12 +0200
Subject: [PATCH 165/364] saa716x_ff: support production version of the S2-6400

The driver now supports both the development samples and the production version of the S2-6400 device.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      | 3 ++-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 10aec9011c1c3..deb46012fcdf8 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -5,7 +5,8 @@
 #include "dvb_ringbuffer.h"
 
 #define TECHNOTREND			0x13c2
-#define S2_6400_DUAL_S2_PREMIUM		0x3009
+#define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009
+#define S2_6400_DUAL_S2_PREMIUM_PROD	0x300A
 
 #define TT_PREMIUM_GPIO_POWER_ENABLE	27
 #define TT_PREMIUM_GPIO_RESET_BACKEND	26
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index caea09e1c45d1..2e53667ed1418 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1543,7 +1543,8 @@ static struct saa716x_config saa716x_s26400_config = {
 
 static struct pci_device_id saa716x_ff_pci_table[] = {
 
-	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM, SAA7160, &saa716x_s26400_config), /* S2 6400 Dual */
+	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_DEVEL, SAA7160, &saa716x_s26400_config),  /* S2 6400 Dual development version */
+	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_PROD, SAA7160, &saa716x_s26400_config), /* S2 6400 Dual production version */
 	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_ff_pci_table);

From 58a7289e811f21d9bda9fd3a050fc1a0cbc0120b Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 3 Apr 2011 17:49:37 +0200
Subject: [PATCH 166/364] saa716x: disable OVERFLOW and AV interrupts in FGPI

As the OVERFLOW and AV interrupts are not needed for TS capturing, disable them.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 8aa3df7e97095..337209a8d61ed 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -287,8 +287,6 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 	SAA716x_EPWR(fgpi_port, FGPI_CONTROL, val);
 
 	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_tagack[port]);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_ovrflw[port]);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_avint[port]);
 
 	return 0;
 }
@@ -301,8 +299,6 @@ int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port)
 	fgpi_port = fgpi_ch[port];
 
 	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_tagack[port]);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_ovrflw[port]);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_avint[port]);
 
 	val = SAA716x_EPRD(fgpi_port, FGPI_CONTROL);
 	val &= ~0x3000;

From 43ce592df9199daab561d04c38e9658d4b77eef3 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 3 Apr 2011 17:51:14 +0200
Subject: [PATCH 167/364] saa716x_ff: add some FPGA register definitions

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index deb46012fcdf8..7fb8cb3153505 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -26,6 +26,7 @@
 #define FPGA_ADDR_EMI_ISET	0x8120 /* EMI Interrupt Set Register */
 #define FPGA_ADDR_EMI_ICLR	0x8130 /* EMI Interrupt Clear Register */
 
+/* fpga TS router register addresses */
 #define FPGA_ADDR_TSR_CTRL	0x8200 /* TS router control register */
 #define FPGA_ADDR_TSR_MUX1	0x8210 /* TS multiplexer 1 selection register */
 #define FPGA_ADDR_TSR_MUX2	0x8220 /* TS multiplexer 2 selection register */
@@ -33,6 +34,14 @@
 #define FPGA_ADDR_TSR_MUXCI1	0x8240 /* TS multiplexer CI 1 selection register */
 #define FPGA_ADDR_TSR_MUXCI2	0x8250 /* TS multiplexer CI 2 selection register */
 
+#define FPGA_ADDR_TSR_BRFE1	0x8280 /* bit rate for TS coming from frontend 1 */
+#define FPGA_ADDR_TSR_BRFE2	0x8284 /* bit rate for TS coming from frontend 2 */
+#define FPGA_ADDR_TSR_BRFF1	0x828C /* bit rate for TS coming from FIFO 1 */
+#define FPGA_ADDR_TSR_BRO1	0x8294 /* bit rate for TS going to output 1 */
+#define FPGA_ADDR_TSR_BRO2	0x8298 /* bit rate for TS going to output 2 */
+#define FPGA_ADDR_TSR_BRO3	0x829C /* bit rate for TS going to output 3 */
+
+/* fpga TS FIFO register addresses */
 #define FPGA_ADDR_FIFO_CTRL	0x8300 /* FIFO control register */
 #define FPGA_ADDR_FIFO_STAT	0x8310 /* FIFO status register */
 

From 979c8939cb9f22db5f9644e18e0dcbd7d62fdedd Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 3 Apr 2011 18:00:34 +0200
Subject: [PATCH 168/364] saa716x_ff: restart TS capturing in case of
 non-aligned TS error

From time to time the TS capturing of the SAA716x is not aligned after starting it. So when an alignment error is detected, just restart the FGPI module that is responsible for TS capture.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 24 +++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 2e53667ed1418..c9f2104d8853b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1137,6 +1137,18 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				u8 * data = (u8 *)saa716x->fgpi[2].dma_buf[activeBuffer].mem_virt;
 				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
 					data[0], data[1], data[2], data[3]);
+				if (data[0] != 0x47) {
+					u32 val = SAA716x_EPRD(FGPI2, FGPI_CONTROL);
+					val &= ~0x3000;
+					SAA716x_EPWR(FGPI2, FGPI_CONTROL, val);
+					val |= 0x3000;
+					SAA716x_EPWR(FGPI2, FGPI_CONTROL, val);
+
+					dprintk(SAA716x_ERROR, 1,
+						"TS 0: %02X%02X%02X%02X%02X%02X%02X%02X",
+						data[0], data[1], data[2], data[3],
+						data[4], data[5], data[6], data[7]);
+				}
 				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[0].demux, data, 348);
 			}
 			if (fgpiStatus) {
@@ -1159,6 +1171,18 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				u8 * data = (u8 *)saa716x->fgpi[3].dma_buf[activeBuffer].mem_virt;
 				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
 					data[0], data[1], data[2], data[3]);
+				if (data[0] != 0x47) {
+					u32 val = SAA716x_EPRD(FGPI3, FGPI_CONTROL);
+					val &= ~0x3000;
+					SAA716x_EPWR(FGPI3, FGPI_CONTROL, val);
+					val |= 0x3000;
+					SAA716x_EPWR(FGPI3, FGPI_CONTROL, val);
+
+					dprintk(SAA716x_ERROR, 1,
+						"TS 1: %02X%02X%02X%02X%02X%02X%02X%02X",
+						data[0], data[1], data[2], data[3],
+						data[4], data[5], data[6], data[7]);
+				}
 				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[1].demux, data, 348);
 			}
 			if (fgpiStatus) {

From 5bff1d021fae13aa9f6d03a9b95e81be1295a5f2 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 3 Apr 2011 18:05:49 +0200
Subject: [PATCH 169/364] saa716x_ff: don't clear FGPI interrupts in IRQ
 routine.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index c9f2104d8853b..f148cb66db507 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1151,9 +1151,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				}
 				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[0].demux, data, 348);
 			}
-			if (fgpiStatus) {
-				SAA716x_EPWR(FGPI2, INT_CLR_STATUS, fgpiStatus);
-			}
 		}
 		if (msiStatusL & MSI_INT_TAGACK_FGPI_3) {
 			u32 fgpiStatus;
@@ -1185,9 +1182,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				}
 				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[1].demux, data, 348);
 			}
-			if (fgpiStatus) {
-				SAA716x_EPWR(FGPI3, INT_CLR_STATUS, fgpiStatus);
-			}
 		}
 	}
 	if (msiStatusH) {

From 3aa6c32dc40ef6d29b0abba7aa2e11d3d35925ee Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 16 Apr 2011 09:54:45 +0200
Subject: [PATCH 170/364] saa716x: comment out SPI functions that are not
 needed currently

There is no need to provide a fully working SPI interface yet. It just adds dependencies on the kernel.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_spi.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_spi.c b/drivers/media/pci/saa716x/saa716x_spi.c
index 6a1ec10c586ea..7bf928eaaa2d3 100644
--- a/drivers/media/pci/saa716x/saa716x_spi.c
+++ b/drivers/media/pci/saa716x/saa716x_spi.c
@@ -11,6 +11,7 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
+#if 0 // not needed atm
 int saa716x_spi_irqevent(struct saa716x_dev *saa716x)
 {
 	u32 stat, mask;
@@ -37,7 +38,7 @@ int saa716x_spi_irqevent(struct saa716x_dev *saa716x)
 
 	return 0;
 }
-
+#endif
 
 void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
 {
@@ -58,6 +59,7 @@ void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
 }
 EXPORT_SYMBOL_GPL(saa716x_spi_write);
 
+#if 0 // not needed atm
 static int saa716x_spi_status(struct saa716x_dev *saa716x, u32 *status)
 {
 	u32 stat;
@@ -307,3 +309,5 @@ void __devexit saa716x_spi_exit(struct saa716x_dev *saa716x)
 	dprintk(SAA716x_DEBUG, 1, "SAA%02x SPI succesfully removed", saa716x->pdev->device);
 }
 EXPORT_SYMBOL(saa716x_spi_exit);
+#endif
+

From 1edcf19e640ee237bf8869aa9ccde558070f898e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 3 May 2011 20:31:12 +0200
Subject: [PATCH 171/364] saa716x: add changes needed for kernel 2.6.36 and up.

That does not mean that the whole repository works with that kernels. It won't!

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 24 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_i2c.c     |  1 -
 2 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index f148cb66db507..47c30f9d6b5c9 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -515,7 +515,11 @@ static int sti7109_get_video_format(struct sti7109_dev *sti7109, video_size_t *v
 	return ret_val;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
+#else
+static int dvb_osd_ioctl(struct file *file,
+#endif
 			 unsigned int cmd, void *parg)
 {
 	struct dvb_device *dvbdev	= file->private_data;
@@ -548,7 +552,11 @@ static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 
 static struct file_operations dvb_osd_fops = {
 	.owner		= THIS_MODULE,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
 	.ioctl		= dvb_generic_ioctl,
+#else
+	.unlocked_ioctl	= dvb_generic_ioctl,
+#endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 };
@@ -583,7 +591,11 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
 static int dvb_audio_ioctl(struct inode *inode, struct file *file,
+#else
+static int dvb_audio_ioctl(struct file *file,
+#endif
 			   unsigned int cmd, void *parg)
 {
 	struct dvb_device *dvbdev	= file->private_data;
@@ -606,7 +618,11 @@ static int dvb_audio_ioctl(struct inode *inode, struct file *file,
 
 static struct file_operations dvb_audio_fops = {
 	.owner		= THIS_MODULE,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
 	.ioctl		= dvb_generic_ioctl,
+#else
+	.unlocked_ioctl	= dvb_generic_ioctl,
+#endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 };
@@ -703,7 +719,11 @@ static unsigned int dvb_video_poll(struct file *file, poll_table *wait)
 	return mask;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
 static int dvb_video_ioctl(struct inode *inode, struct file *file,
+#else
+static int dvb_video_ioctl(struct file *file,
+#endif
 			   unsigned int cmd, void *parg)
 {
 	struct dvb_device *dvbdev	= file->private_data;
@@ -759,7 +779,11 @@ static int dvb_video_ioctl(struct inode *inode, struct file *file,
 static struct file_operations dvb_video_fops = {
 	.owner		= THIS_MODULE,
 	.write		= dvb_video_write,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
 	.ioctl		= dvb_generic_ioctl,
+#else
+	.unlocked_ioctl	= dvb_generic_ioctl,
+#endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 	.poll		= dvb_video_poll,
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 34630e15a09dc..85b205a689b07 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -525,7 +525,6 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			strcpy(adapter->name, SAA716x_I2C_ADAPTER(i));
 
 			adapter->owner		= THIS_MODULE;
-			adapter->class		= I2C_CLASS_TV_DIGITAL;
 			adapter->algo		= &saa716x_algo;
 			adapter->algo_data 	= NULL;
 			adapter->id		= I2C_HW_B_SAA716x;

From 1b2bd0cf25a650d191bc8d5b6334424eeed2b394 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 5 May 2011 19:18:34 +0200
Subject: [PATCH 172/364] saa716x: support building with
 media_build_experimental

Support building the saa716x driver with media_build_experimental tree under kernels older than 2.3.36.

From: Oliver Endriss <o.endriss@gmx.de>

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 47c30f9d6b5c9..fa312916e1b2f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -515,7 +515,7 @@ static int sti7109_get_video_format(struct sti7109_dev *sti7109, video_size_t *v
 	return ret_val;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 #else
 static int dvb_osd_ioctl(struct file *file,
@@ -552,7 +552,7 @@ static int dvb_osd_ioctl(struct file *file,
 
 static struct file_operations dvb_osd_fops = {
 	.owner		= THIS_MODULE,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 	.ioctl		= dvb_generic_ioctl,
 #else
 	.unlocked_ioctl	= dvb_generic_ioctl,
@@ -591,7 +591,7 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 static int dvb_audio_ioctl(struct inode *inode, struct file *file,
 #else
 static int dvb_audio_ioctl(struct file *file,
@@ -618,7 +618,7 @@ static int dvb_audio_ioctl(struct file *file,
 
 static struct file_operations dvb_audio_fops = {
 	.owner		= THIS_MODULE,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 	.ioctl		= dvb_generic_ioctl,
 #else
 	.unlocked_ioctl	= dvb_generic_ioctl,
@@ -719,7 +719,7 @@ static unsigned int dvb_video_poll(struct file *file, poll_table *wait)
 	return mask;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 static int dvb_video_ioctl(struct inode *inode, struct file *file,
 #else
 static int dvb_video_ioctl(struct file *file,
@@ -779,7 +779,7 @@ static int dvb_video_ioctl(struct file *file,
 static struct file_operations dvb_video_fops = {
 	.owner		= THIS_MODULE,
 	.write		= dvb_video_write,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 	.ioctl		= dvb_generic_ioctl,
 #else
 	.unlocked_ioctl	= dvb_generic_ioctl,

From f1517e5e6601fbe8b10f1db20939dc76f29b7ccf Mon Sep 17 00:00:00 2001
From: Oliver Endriss <o.endriss@gmx.de>
Date: Thu, 5 May 2011 19:26:18 +0200
Subject: [PATCH 173/364] saa716x: Use tasklet to transfer data to the demuxer
 (TT S2-6400)

From: Oliver Endriss <o.endriss@gmx.de>

Use tasklet to transfer data to the demuxer (TT S2-6400).

Priority: normal

Signed-off-by: Oliver Endriss <o.endriss@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    |   3 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 136 +++++++++++---------
 drivers/media/pci/saa716x/saa716x_fgpi.c    |   8 +-
 drivers/media/pci/saa716x/saa716x_fgpi.h    |   8 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |   1 +
 5 files changed, 89 insertions(+), 67 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 3dfb8c5ad1456..f11a2cd275d9d 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -189,7 +189,8 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Frontend attach = NULL");
 		}
 
-		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port);
+		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port,
+				  config->adap_config[i].worker);
 
 		saa716x_adap++;
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index fa312916e1b2f..1119e5df2d16a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1087,6 +1087,70 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 	kfree(saa716x);
 }
 
+static void demux_worker(unsigned long data)
+{
+	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
+	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
+	struct dvb_demux *demux;
+	u32 fgpi;
+	u32 write_index;
+	u32 fgpiStatus;
+
+	switch (fgpi_entry->dma_channel - 6) {
+	case 2:	/* FGPI_2 */
+		demux = &saa716x->saa716x_adap[0].demux;
+		fgpi = FGPI2;
+		write_index = (SAA716x_EPRD(BAM, BAM_FGPI2_DMA_BUF_MODE) >> 3) & 0x7;
+		break;
+
+	case 3: /* FGPI_3 */
+		demux = &saa716x->saa716x_adap[1].demux;
+		fgpi = FGPI3;
+		write_index = (SAA716x_EPRD(BAM, BAM_FGPI3_DMA_BUF_MODE) >> 3) & 0x7;
+		break;
+
+	default:
+		printk(KERN_ERR "%s: unexpected channel %u\n",
+		       __func__, fgpi_entry->dma_channel);
+		return;
+	}
+
+	fgpiStatus = SAA716x_EPRD(fgpi, INT_STATUS);
+	dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
+		fgpiStatus, write_index);
+
+	if (write_index == fgpi_entry->read_index) {
+		printk(KERN_ERR "%s: called but nothing to do\n", __func__);
+		return;
+	}
+
+	do {
+		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
+
+		pci_dma_sync_sg_for_cpu(saa716x->pdev,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
+			PCI_DMA_FROMDEVICE);
+
+		if (data[0] != 0x47) {
+			u32 val = SAA716x_EPRD(fgpi, FGPI_CONTROL);
+			val &= ~0x3000;
+			SAA716x_EPWR(fgpi, FGPI_CONTROL, val);
+			val |= 0x3000;
+			SAA716x_EPWR(fgpi, FGPI_CONTROL, val);
+
+			printk(KERN_WARNING "%s %u TS: %02X %02X %02X %02X %02X %02X %02X %02X",
+				__func__, fgpi_entry->dma_channel - 6,
+				data[0], data[1], data[2], data[3],
+				data[4], data[5], data[6], data[7]);
+		}
+
+		dvb_dmx_swfilter_packets(demux, data, 348);
+
+		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
+	} while (write_index != fgpi_entry->read_index);
+}
+
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
@@ -1145,68 +1209,10 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
 	if (msiStatusL) {
-		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
-			u32 fgpiStatus;
-			u32 activeBuffer;
-
-			fgpiStatus = SAA716x_EPRD(FGPI2, INT_STATUS);
-			activeBuffer = (SAA716x_EPRD(BAM, BAM_FGPI2_DMA_BUF_MODE) >> 3) & 0x7;
-			dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
-				fgpiStatus, activeBuffer);
-			if (activeBuffer > 0)
-				activeBuffer -= 1;
-			else
-				activeBuffer = 7;
-			if (saa716x->fgpi[2].dma_buf[activeBuffer].mem_virt) {
-				u8 * data = (u8 *)saa716x->fgpi[2].dma_buf[activeBuffer].mem_virt;
-				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
-					data[0], data[1], data[2], data[3]);
-				if (data[0] != 0x47) {
-					u32 val = SAA716x_EPRD(FGPI2, FGPI_CONTROL);
-					val &= ~0x3000;
-					SAA716x_EPWR(FGPI2, FGPI_CONTROL, val);
-					val |= 0x3000;
-					SAA716x_EPWR(FGPI2, FGPI_CONTROL, val);
-
-					dprintk(SAA716x_ERROR, 1,
-						"TS 0: %02X%02X%02X%02X%02X%02X%02X%02X",
-						data[0], data[1], data[2], data[3],
-						data[4], data[5], data[6], data[7]);
-				}
-				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[0].demux, data, 348);
-			}
-		}
-		if (msiStatusL & MSI_INT_TAGACK_FGPI_3) {
-			u32 fgpiStatus;
-			u32 activeBuffer;
-
-			fgpiStatus = SAA716x_EPRD(FGPI3, INT_STATUS);
-			activeBuffer = (SAA716x_EPRD(BAM, BAM_FGPI3_DMA_BUF_MODE) >> 3) & 0x7;
-			dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
-				fgpiStatus, activeBuffer);
-			if (activeBuffer > 0)
-				activeBuffer -= 1;
-			else
-				activeBuffer = 7;
-			if (saa716x->fgpi[3].dma_buf[activeBuffer].mem_virt) {
-				u8 * data = (u8 *)saa716x->fgpi[3].dma_buf[activeBuffer].mem_virt;
-				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
-					data[0], data[1], data[2], data[3]);
-				if (data[0] != 0x47) {
-					u32 val = SAA716x_EPRD(FGPI3, FGPI_CONTROL);
-					val &= ~0x3000;
-					SAA716x_EPWR(FGPI3, FGPI_CONTROL, val);
-					val |= 0x3000;
-					SAA716x_EPWR(FGPI3, FGPI_CONTROL, val);
-
-					dprintk(SAA716x_ERROR, 1,
-						"TS 1: %02X%02X%02X%02X%02X%02X%02X%02X",
-						data[0], data[1], data[2], data[3],
-						data[4], data[5], data[6], data[7]);
-				}
-				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[1].demux, data, 348);
-			}
-		}
+		if (msiStatusL & MSI_INT_TAGACK_FGPI_2)
+			tasklet_schedule(&saa716x->fgpi[2].tasklet);
+		if (msiStatusL & MSI_INT_TAGACK_FGPI_3)
+			tasklet_schedule(&saa716x->fgpi[3].tasklet);
 	}
 	if (msiStatusH) {
 		//dprintk(SAA716x_INFO, 1, "msiStatusH: %08X", msiStatusH);
@@ -1574,10 +1580,12 @@ static struct saa716x_config saa716x_s26400_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
-			.ts_port = 2
+			.ts_port = 2,
+			.worker = demux_worker
 		},{
 			/* Adapter 1 */
-			.ts_port = 3
+			.ts_port = 3,
+			.worker = demux_worker
 		}
 	}
 };
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 337209a8d61ed..c92840c3a454e 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -309,7 +309,8 @@ int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port)
 	return 0;
 }
 
-int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port)
+int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port,
+		      void (*worker)(unsigned long))
 {
 	int i;
 	int ret;
@@ -323,6 +324,10 @@ int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port)
 			return ret;
 		}
 	}
+	saa716x->fgpi[port].saa716x = saa716x;
+	tasklet_init(&saa716x->fgpi[port].tasklet, worker,
+		     (unsigned long)&saa716x->fgpi[port]);
+	saa716x->fgpi[port].read_index = 0;
 
 	return 0;
 }
@@ -331,6 +336,7 @@ int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port)
 {
 	int i;
 
+	tasklet_kill(&saa716x->fgpi[port].tasklet);
 	for (i = 0; i < FGPI_BUFFERS; i++)
 	{
 		saa716x_dmabuf_free(saa716x, &saa716x->fgpi[port].dma_buf[i]);
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index e5fc5fc2b2274..a1df3e55f5ffc 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_FGPI_H
 #define __SAA716x_FGPI_H
 
+#include <linux/interrupt.h>
+
 #define FGPI_BUFFERS		8
 #define PTA_LSB(__mem)		((u32 ) (__mem))
 #define PTA_MSB(__mem)		((u32 ) ((u64)(__mem) >> 32))
@@ -91,6 +93,9 @@ struct saa716x_dmabuf;
 struct saa716x_fgpi_stream_port {
 	u8			dma_channel;
 	struct saa716x_dmabuf	dma_buf[FGPI_BUFFERS];
+	struct saa716x_dev	*saa716x;
+	struct tasklet_struct	tasklet;
+	u8			read_index;
 };
 
 extern void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel);
@@ -98,7 +103,8 @@ extern int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 			      struct fgpi_stream_params *stream_params);
 extern int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port);
 
-extern int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port);
+extern int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port,
+			     void (*worker)(unsigned long));
 extern int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port);
 
 #endif /* __SAA716x_FGPI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index d0fafd87abdcb..957b24011ac2b 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -85,6 +85,7 @@ typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
 
 struct saa716x_adap_config {
 	u32				ts_port;
+	void				(*worker)(unsigned long);
 };
 
 struct saa716x_config {

From 5c596cdb2b2849c2e807c079f36d5bcd94e01d6f Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 5 May 2011 19:52:13 +0200
Subject: [PATCH 174/364] saa716x_ff: use tasklet for FIFO transfer

To make the time in irq function as short as possible, use a tasklet for the FIFO transfers of played TS data.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  2 +
 drivers/media/pci/saa716x/saa716x_ff_main.c | 66 +++++++++++++--------
 2 files changed, 42 insertions(+), 26 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 7fb8cb3153505..f47e62d79e8e2 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -99,6 +99,8 @@ struct sti7109_dev {
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
 	u8			*tsbuf;  /* temp ts buffer */
 
+	struct tasklet_struct	fifo_tasklet;
+
 	wait_queue_head_t	boot_finish_wq;
 	int			boot_finished;
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 1119e5df2d16a..5aa304f44d7e3 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -657,6 +657,41 @@ static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
+static void fifo_worker(unsigned long data)
+{
+	struct saa716x_dev *saa716x = (struct saa716x_dev *) data;
+	struct sti7109_dev *sti7109 = saa716x->priv;
+	u32 fifoCtrl;
+	u32 fifoStat;
+	u16 fifoSize;
+	u16 fifoUsage;
+	u16 fifoFree;
+	int len;
+
+	fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
+	fifoStat = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_STAT);
+	fifoSize = (u16) (fifoStat >> 16);
+	fifoUsage = (u16) fifoStat;
+	fifoFree = fifoSize - fifoUsage;
+	spin_lock(&sti7109->tsout.lock);
+	len = dvb_ringbuffer_avail(&sti7109->tsout);
+	if (len > fifoFree)
+		len = fifoFree;
+	if (len >= TS_SIZE)
+	{
+		while (len >= TS_SIZE)
+		{
+			dvb_ringbuffer_read(&sti7109->tsout, sti7109->tsbuf, (size_t) TS_SIZE);
+			saa716x_phi_write_fifo(saa716x, sti7109->tsbuf, TS_SIZE);
+			len -= TS_SIZE;
+		}
+		wake_up(&sti7109->tsout.queue);
+		fifoCtrl |= 0x4;
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+	}
+	spin_unlock(&sti7109->tsout.lock);
+}
+
 #define FREE_COND_TS (dvb_ringbuffer_free(&sti7109->tsout) >= TS_SIZE)
 
 static ssize_t dvb_video_write(struct file *file, const char __user *buf,
@@ -801,6 +836,7 @@ static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)
 {
 	struct sti7109_dev *sti7109 = saa716x->priv;
 
+	tasklet_kill(&sti7109->fifo_tasklet);
 	dvb_unregister_device(sti7109->video_dev);
 	return 0;
 }
@@ -819,6 +855,9 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 			    sti7109,
 			    DVB_DEVICE_VIDEO);
 
+	tasklet_init(&sti7109->fifo_tasklet, fifo_worker,
+		     (unsigned long)saa716x);
+
 	return 0;
 }
 
@@ -1411,37 +1450,12 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 		if (phiISR & ISR_FIFO1_EMPTY_MASK) {
 			u32 fifoCtrl;
-			u32 fifoStat;
-			u16 fifoSize;
-			u16 fifoUsage;
-			u16 fifoFree;
-			int len;
 
 			/*dprintk(SAA716x_INFO, 1, "FIFO EMPTY interrupt source");*/
 			fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
 			fifoCtrl &= ~0x4;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
-			fifoStat = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_STAT);
-			fifoSize = (u16) (fifoStat >> 16);
-			fifoUsage = (u16) fifoStat;
-			fifoFree = fifoSize - fifoUsage;
-			spin_lock(&sti7109->tsout.lock);
-			len = dvb_ringbuffer_avail(&sti7109->tsout);
-			if (len > fifoFree)
-				len = fifoFree;
-			if (len >= TS_SIZE)
-			{
-				while (len >= TS_SIZE)
-				{
-					dvb_ringbuffer_read(&sti7109->tsout, sti7109->tsbuf, (size_t) TS_SIZE);
-					saa716x_phi_write_fifo(saa716x, sti7109->tsbuf, TS_SIZE);
-					len -= TS_SIZE;
-				}
-				wake_up(&sti7109->tsout.queue);
-				fifoCtrl |= 0x4;
-				SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
-			}
-			spin_unlock(&sti7109->tsout.lock);
+			tasklet_schedule(&sti7109->fifo_tasklet);
 			phiISR &= ~ISR_FIFO1_EMPTY_MASK;
 		}
 

From 292c43f25654ce0403ed95385b85345305cdde59 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 8 May 2011 11:11:59 +0200
Subject: [PATCH 175/364] saa716x: fix not working MSI

When MSI was used by setting int_type=1 an empty interrupt handler was
supplied to request_irq resulting in not working driver. Now the irq_handler
given in config structure is used instead.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index d5dbc11d9f8e3..1ffcecbbbaaa6 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -74,7 +74,7 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 
 	if (saa716x->int_type == MODE_MSI) {
 		ret = request_irq(pdev->irq,
-				  saa716x_msi_handler,
+				  config->irq_handler,
 				  IRQF_SHARED,
 				  DRIVER_NAME,
 				  saa716x);

From f191fc85c83e2abdb6522e2cfd4fca4aa623b9cc Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 9 May 2011 21:11:08 +0200
Subject: [PATCH 176/364] saa716x: Disable shared IRQ when using MSI mode.

Disable shared IRQ when using MSI mode.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 1ffcecbbbaaa6..de7ad9a88c876 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -75,7 +75,7 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 	if (saa716x->int_type == MODE_MSI) {
 		ret = request_irq(pdev->irq,
 				  config->irq_handler,
-				  IRQF_SHARED,
+				  0,
 				  DRIVER_NAME,
 				  saa716x);
 

From 1717f54540f1fdf62c1c40b66efa166240048bbe Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 9 May 2011 21:15:18 +0200
Subject: [PATCH 177/364] saa716x_ff: Do an explicit demodulator reset.

When loading the driver an explicit hardware reset of the demodulator is now
done using the FPGA. FPGA firmware version 1.05 is needed for this to work.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 6 ++++++
 2 files changed, 8 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index f47e62d79e8e2..c5e2ad31ff04c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -47,6 +47,8 @@
 
 #define FPGA_ADDR_VERSION	0x80F0 /* FPGA bitstream version register */
 
+#define FPGA_ADDR_PIO_CTRL	0x8500 /* FPGA GPIO control register */
+
 #define ISR_CMD_MASK		0x0001 /* interrupt source for normal cmds (osd, fre, av, ...) */
 #define ISR_READY_MASK		0x0002 /* interrupt source for command acknowledge */
 #define ISR_BLOCK_MASK		0x0004 /* interrupt source for single block transfers and acknowledge */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 5aa304f44d7e3..2489f9f6f8ada 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -997,6 +997,12 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	SAA716x_EPWR(MSI, MSI_CONFIG33, value);
 	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_EXTINT_0);
 
+	/* enable tuner reset */
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PIO_CTRL, 0);
+	msleep(50);
+	/* disable tuner reset */
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PIO_CTRL, 1);
+
 	err = saa716x_ff_st7109_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x FF STi7109 initialization failed");

From 3d60ca6ab4d83c10533666ea32026451a02318fa Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 29 May 2011 12:29:30 +0200
Subject: [PATCH 178/364] saa716x: enable wait for PLL lock when setting clocks
 of all ports.

Enable wait for PLL lock when calling saa716x_set_clk_internal with PORT_ALL
to enable the clocks of all ports.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index c4a064d8e849e..a0ffb042acdf6 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -188,12 +188,11 @@ int saa716x_set_clk_internal(struct saa716x_dev *saa716x, u32 port)
 		cgu->clk_int_port[PORT_FGPI3] = 1;
 		cgu->clk_int_port[PORT_AI0] = 1;
 		cgu->clk_int_port[PORT_AI1] = 1;
-
-		delay = 0;
 		break;
 
 	default:
 		dprintk(SAA716x_ERROR, 1, "Unknown port <%02x>", port);
+		delay = 0;
 		break;
 	}
 

From 2c2fc15101801d8034f8b76ac311b87378744146 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 29 May 2011 13:01:29 +0200
Subject: [PATCH 179/364] saa716x_ff: add counting of interrupts

Add counting of interrupts including the different external interrupt sources.
Counting is enabled by module parameter "int_count_enable", the counters will
be printed every second to syslog.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  7 +++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 67 +++++++++++++++++++--
 2 files changed, 70 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index c5e2ad31ff04c..2ff4617862d55 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -136,6 +136,13 @@ struct sti7109_dev {
 	u64			video_pts;
 	u64			current_stc;
 	u32			remote_event;
+
+	u32			int_count_enable;
+	u32			total_int_count;
+	u32			fgpi_int_count[2];
+	u32			ext_int_total_count;
+	u32			ext_int_source_count[16];
+	u32			last_int_ticks;
 };
 
 #endif /* __SAA716x_FF_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 2489f9f6f8ada..d1d3847225436 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -56,6 +56,10 @@ unsigned int int_type;
 module_param(int_type, int, 0644);
 MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
 
+unsigned int int_count_enable;
+module_param(int_count_enable, int, 0644);
+MODULE_PARM_DESC(int_count_enable, "enable counting of interrupts");
+
 #define DRIVER_NAME	"SAA716x FF"
 
 static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
@@ -965,6 +969,13 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	init_waitqueue_head(&sti7109->block_done_wq);
 	sti7109->block_done = 0;
 
+	sti7109->int_count_enable = int_count_enable;
+	sti7109->total_int_count = 0;
+	memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
+	sti7109->ext_int_total_count = 0;
+	memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
+	sti7109->last_int_ticks = jiffies;
+
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
@@ -1199,6 +1210,7 @@ static void demux_worker(unsigned long data)
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+	struct sti7109_dev *sti7109;
 	u32 msiStatusL;
 	u32 msiStatusH;
 	u32 phiISR;
@@ -1207,6 +1219,9 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		printk("%s: saa716x=NULL", __func__);
 		return IRQ_NONE;
 	}
+	sti7109 = saa716x->priv;
+	if (sti7109->int_count_enable)
+		sti7109->total_int_count++;
 #if 0
 	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
 		SAA716x_EPRD(VI0, INT_STATUS),
@@ -1254,10 +1269,16 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
 	if (msiStatusL) {
-		if (msiStatusL & MSI_INT_TAGACK_FGPI_2)
+		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
+			if (sti7109->int_count_enable)
+				sti7109->fgpi_int_count[0]++;
 			tasklet_schedule(&saa716x->fgpi[2].tasklet);
-		if (msiStatusL & MSI_INT_TAGACK_FGPI_3)
+		}
+		if (msiStatusL & MSI_INT_TAGACK_FGPI_3) {
+			if (sti7109->int_count_enable)
+				sti7109->fgpi_int_count[1]++;
 			tasklet_schedule(&saa716x->fgpi[3].tasklet);
+		}
 	}
 	if (msiStatusH) {
 		//dprintk(SAA716x_INFO, 1, "msiStatusH: %08X", msiStatusH);
@@ -1265,10 +1286,17 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 	if (msiStatusH & MSI_INT_EXTINT_0) {
 
-		struct sti7109_dev *sti7109 = saa716x->priv;
-
 		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
 		//dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
+
+		if (sti7109->int_count_enable) {
+			int i;
+			sti7109->ext_int_total_count++;
+			for (i = 0; i < 16; i++)
+				if (phiISR & (1 << i))
+					sti7109->ext_int_source_count[i]++;
+		}
+
 		if (phiISR & ISR_CMD_MASK) {
 
 			u32 value;
@@ -1471,6 +1499,37 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 	}
 
+	if (sti7109->int_count_enable) {
+		if (jiffies - sti7109->last_int_ticks >= HZ) {
+			dprintk(SAA716x_INFO, 1, "int count: t: %d, f:%d %d, "
+				"e: %d (%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)",
+				sti7109->total_int_count,
+				sti7109->fgpi_int_count[0],
+				sti7109->fgpi_int_count[1],
+				sti7109->ext_int_total_count,
+				sti7109->ext_int_source_count[0],
+				sti7109->ext_int_source_count[1],
+				sti7109->ext_int_source_count[2],
+				sti7109->ext_int_source_count[3],
+				sti7109->ext_int_source_count[4],
+				sti7109->ext_int_source_count[5],
+				sti7109->ext_int_source_count[6],
+				sti7109->ext_int_source_count[7],
+				sti7109->ext_int_source_count[8],
+				sti7109->ext_int_source_count[9],
+				sti7109->ext_int_source_count[10],
+				sti7109->ext_int_source_count[11],
+				sti7109->ext_int_source_count[12],
+				sti7109->ext_int_source_count[13],
+				sti7109->ext_int_source_count[14],
+				sti7109->ext_int_source_count[15]);
+			sti7109->total_int_count = 0;
+			memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
+			sti7109->ext_int_total_count = 0;
+			memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
+			sti7109->last_int_ticks = jiffies;
+		}
+	}
 	return IRQ_HANDLED;
 }
 

From a18e8c493a4812c99ff182705129cd19ec60357e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 29 May 2011 13:18:06 +0200
Subject: [PATCH 180/364] saa716x: don't set i2c_adapter id field

Don't set i2c_adapter id field. It is not used and has been removed in
recent kernel versions.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 85b205a689b07..c18e870f3106e 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -479,8 +479,6 @@ static const struct i2c_algorithm saa716x_algo = {
 	.functionality	= saa716x_i2c_func,
 };
 
-#define I2C_HW_B_SAA716x		0x12
-
 struct saa716x_i2cvec {
 	u32			vector;
 	enum saa716x_edge	edge;
@@ -527,7 +525,6 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 			adapter->owner		= THIS_MODULE;
 			adapter->algo		= &saa716x_algo;
 			adapter->algo_data 	= NULL;
-			adapter->id		= I2C_HW_B_SAA716x;
 			adapter->timeout	= 500; /* FIXME ! */
 			adapter->retries	= 3; /* FIXME ! */
 			adapter->dev.parent	= &pdev->dev;

From e325adcc75150ae8ab8207cce1d2297a4f5b28ea Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 3 Jun 2011 18:21:32 +0200
Subject: [PATCH 181/364] saa716x_ff: support non-aligned TS data

Support non-aligned TS data by using dvb_dmx_swfilter instead of
dvb_dmx_swfilter_packets. Removed reset of the FGPI module, as it did not
lead to an aligned TS in any case.

From: Oliver Endriss <o.endriss@gmx.de>

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 17 ++---------------
 1 file changed, 2 insertions(+), 15 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index d1d3847225436..9b0be1024bed5 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1176,7 +1176,7 @@ static void demux_worker(unsigned long data)
 		fgpiStatus, write_index);
 
 	if (write_index == fgpi_entry->read_index) {
-		printk(KERN_ERR "%s: called but nothing to do\n", __func__);
+		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
 		return;
 	}
 
@@ -1188,20 +1188,7 @@ static void demux_worker(unsigned long data)
 			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
 			PCI_DMA_FROMDEVICE);
 
-		if (data[0] != 0x47) {
-			u32 val = SAA716x_EPRD(fgpi, FGPI_CONTROL);
-			val &= ~0x3000;
-			SAA716x_EPWR(fgpi, FGPI_CONTROL, val);
-			val |= 0x3000;
-			SAA716x_EPWR(fgpi, FGPI_CONTROL, val);
-
-			printk(KERN_WARNING "%s %u TS: %02X %02X %02X %02X %02X %02X %02X %02X",
-				__func__, fgpi_entry->dma_channel - 6,
-				data[0], data[1], data[2], data[3],
-				data[4], data[5], data[6], data[7]);
-		}
-
-		dvb_dmx_swfilter_packets(demux, data, 348);
+		dvb_dmx_swfilter(demux, data, 348 * 188);
 
 		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
 	} while (write_index != fgpi_entry->read_index);

From 0051a93d0568fce8df6db078bbc808d517fd6c6e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 21 Aug 2011 17:11:06 +0200
Subject: [PATCH 182/364] saa716x_ff: Use a TS clock of 135Mhz instead of 90
 Mhz.

The STV0900's TS output has a bad duty cycle when driven with a
frequency between 67.5 and 135 Mhz. With FPGA firmware 106 and up it
is possible to use the full 135Mhz which has a better signal quality.

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 9b0be1024bed5..d22438a83748e 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1540,8 +1540,8 @@ static struct stv090x_config tt6400_stv090x_config = {
 
 	.ts1_mode		= STV090x_TSMODE_SERIAL_CONTINUOUS,
 	.ts2_mode		= STV090x_TSMODE_SERIAL_CONTINUOUS,
-	.ts1_clk		= 90000000,
-	.ts2_clk		= 90000000,
+	.ts1_clk		= 135000000,
+	.ts2_clk		= 135000000,
 
 	.repeater_level		= STV090x_RPTLEVEL_16,
 

From 0417bb6d54cbcb5185b5e92ae876326b7ce4253c Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 21 Aug 2011 17:18:00 +0200
Subject: [PATCH 183/364] saa716x_ff: Ignore false remote events.

Add a work-around to ignore false remote events. Should fix the
"IR ghost" issue until the real cause of the problem will be found.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  1 -
 drivers/media/pci/saa716x/saa716x_ff_main.c | 19 +++++++++++++------
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 2ff4617862d55..9aca855903255 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -135,7 +135,6 @@ struct sti7109_dev {
 	u64			audio_pts;
 	u64			video_pts;
 	u64			current_stc;
-	u32			remote_event;
 
 	u32			int_count_enable;
 	u32			total_int_count;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index d22438a83748e..79bc833c634e2 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1426,18 +1426,25 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 		if (phiISR & ISR_REMOTE_EVENT_MASK) {
 			u8 data[4];
+			u32 remote_event;
 
 			saa716x_phi_read(saa716x, ADDR_REMOTE_EVENT, data, 4);
-			sti7109->remote_event = (data[3] << 24)
-					      | (data[2] << 16)
-					      | (data[1] << 8)
-					      | (data[0]);
+			remote_event = (data[3] << 24)
+				     | (data[2] << 16)
+				     | (data[1] << 8)
+				     | (data[0]);
+			memset(data, 0, sizeof(data));
+			saa716x_phi_write(saa716x, ADDR_REMOTE_EVENT, data, 4);
 
 			phiISR &= ~ISR_REMOTE_EVENT_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
 
-			dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %u", sti7109->remote_event);
-			saa716x_ir_handler(saa716x, sti7109->remote_event);
+			if (remote_event == 0) {
+				dprintk(SAA716x_ERROR, 1, "REMOTE EVENT: %u ignored", remote_event);
+			} else {
+				dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %u", remote_event);
+				saa716x_ir_handler(saa716x, remote_event);
+			}
 		}
 
 		if (phiISR & ISR_DVO_FORMAT_MASK) {

From abf927ceeea6eb93c5123450fdea3e0308d7cec9 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 11 Oct 2011 18:05:04 +0200
Subject: [PATCH 184/364] saa716x_ff: Fix possible crash in IRQ handler.

During loading or unloading the saa716x_ff module it could happen that
saa716x->priv was accessed in the IRQ handler before being initialized
or after the pointer was freed already.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 79bc833c634e2..dbd3639216131 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -938,8 +938,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail3;
 	}
 
-	sti7109->dev	= saa716x;
-	saa716x->priv	= sti7109;
+	sti7109->dev = saa716x;
 
 	sti7109->iobuf = vmalloc(TSOUT_LEN + TSBUF_LEN);
 	if (!sti7109->iobuf)
@@ -976,6 +975,8 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
 	sti7109->last_int_ticks = jiffies;
 
+	saa716x->priv = sti7109;
+
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
@@ -1136,6 +1137,7 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 	/* disable board power */
 	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
 
+	saa716x->priv = NULL;
 	kfree(sti7109);
 
 	saa716x_i2c_exit(saa716x);
@@ -1207,6 +1209,10 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		return IRQ_NONE;
 	}
 	sti7109 = saa716x->priv;
+	if (unlikely(sti7109 == NULL)) {
+		printk("%s: sti7109=NULL", __func__);
+		return IRQ_NONE;
+	}
 	if (sti7109->int_count_enable)
 		sti7109->total_int_count++;
 #if 0

From 8935d86af5c075230761d8e9cbbe67623790ef82 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 24 Oct 2011 19:42:05 +0200
Subject: [PATCH 185/364] saa716x_ff: move firmware command interface code to
 separate file.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile          |   1 +
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  | 329 ++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_ff_cmd.h  |  16 +
 drivers/media/pci/saa716x/saa716x_ff_main.c | 304 +-----------------
 4 files changed, 355 insertions(+), 295 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff_cmd.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff_cmd.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 232c1e2189f25..484033047eafe 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -15,6 +15,7 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_spi.o
 
 saa716x_ff-objs		:= saa716x_ff_main.o	\
+                           saa716x_ff_cmd.o	\
 			   saa716x_ff_ir.o
 
 obj-$(CONFIG_SAA716X_CORE)	  += saa716x_core.o
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
new file mode 100644
index 0000000000000..021f631efda1c
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -0,0 +1,329 @@
+#include <linux/types.h>
+
+#include <linux/dvb/video.h>
+#include <linux/dvb/osd.h>
+
+#include "saa716x_phi_reg.h"
+
+#include "saa716x_phi.h"
+#include "saa716x_spi.h"
+#include "saa716x_priv.h"
+#include "saa716x_ff.h"
+#include "saa716x_ff_cmd.h"
+
+
+int sti7109_cmd_init(struct sti7109_dev *sti7109)
+{
+	mutex_init(&sti7109->cmd_lock);
+	mutex_init(&sti7109->osd_cmd_lock);
+	mutex_init(&sti7109->data_lock);
+
+	init_waitqueue_head(&sti7109->boot_finish_wq);
+	sti7109->boot_finished = 0;
+
+	init_waitqueue_head(&sti7109->cmd_ready_wq);
+	sti7109->cmd_ready = 0;
+
+	init_waitqueue_head(&sti7109->result_avail_wq);
+	sti7109->result_avail = 0;
+
+	init_waitqueue_head(&sti7109->osd_cmd_ready_wq);
+	sti7109->osd_cmd_ready = 0;
+	init_waitqueue_head(&sti7109->osd_result_avail_wq);
+	sti7109->osd_result_avail = 0;
+
+	sti7109->data_handle = 0;
+	init_waitqueue_head(&sti7109->data_ready_wq);
+	sti7109->data_ready = 0;
+	init_waitqueue_head(&sti7109->block_done_wq);
+	sti7109->block_done = 0;
+	return 0;
+}
+
+int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
+						   sti7109->cmd_ready == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			dprintk(SAA716x_ERROR, 1, "cmd ERESTARTSYS");
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1,
+			"timed out waiting for command ready");
+		return -EIO;
+	}
+
+	sti7109->cmd_ready = 0;
+	sti7109->result_avail = 0;
+	saa716x_phi_write(saa716x, ADDR_CMD_DATA, cmd->cmd_data, cmd->cmd_len);
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
+
+	if (cmd->result_len > 0) {
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(
+				sti7109->result_avail_wq,
+				sti7109->result_avail == 1,
+				timeout);
+
+		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
+			cmd->result_len = 0;
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				dprintk(SAA716x_ERROR, 1, "result ERESTARTSYS");
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1,
+				"timed out waiting for command result");
+			return -EIO;
+		}
+
+		if (sti7109->result_len > 0) {
+			if (sti7109->result_len > cmd->result_len) {
+				memcpy(cmd->result_data, sti7109->result_data,
+					cmd->result_len);
+			} else {
+				memcpy(cmd->result_data, sti7109->result_data,
+					sti7109->result_len);
+				cmd->result_len = sti7109->result_len;
+			}
+		}
+	}
+
+	return 0;
+}
+
+int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->osd_cmd_ready_wq,
+						   sti7109->osd_cmd_ready == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->osd_cmd_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			dprintk(SAA716x_ERROR, 1, "osd cmd ERESTARTSYS");
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1,
+			"timed out waiting for osd command ready");
+		return -EIO;
+	}
+
+	sti7109->osd_cmd_ready = 0;
+	sti7109->osd_result_avail = 0;
+	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, cmd->cmd_data,
+			  cmd->cmd_len);
+	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
+
+	if (cmd->result_len > 0) {
+		timeout = 1 * HZ;
+		timeout = wait_event_interruptible_timeout(
+				sti7109->osd_result_avail_wq,
+				sti7109->osd_result_avail == 1,
+				timeout);
+
+		if (timeout == -ERESTARTSYS || sti7109->osd_result_avail == 0) {
+			cmd->result_len = 0;
+			if (timeout == -ERESTARTSYS) {
+				/* a signal arrived */
+				dprintk(SAA716x_ERROR, 1,
+					"osd result ERESTARTSYS");
+				return -ERESTARTSYS;
+			}
+			dprintk(SAA716x_ERROR, 1,
+				"timed out waiting for osd command result");
+			return -EIO;
+		}
+
+		if (sti7109->osd_result_len > 0) {
+			if (sti7109->osd_result_len > cmd->result_len) {
+				memcpy(cmd->result_data,
+					sti7109->osd_result_data,
+					cmd->result_len);
+			} else {
+				memcpy(cmd->result_data,
+					sti7109->osd_result_data,
+					sti7109->osd_result_len);
+				cmd->result_len = sti7109->osd_result_len;
+			}
+		}
+	}
+
+	return 0;
+}
+
+int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	unsigned long timeout;
+	u16 blockSize;
+	u16 lastBlockSize;
+	u16 numBlocks;
+	u16 blockIndex;
+	u8 blockHeader[SIZE_BLOCK_HEADER];
+	u8 * blockPtr;
+	int activeBlock;
+
+	timeout = 1 * HZ;
+	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
+						   sti7109->data_ready == 1,
+						   timeout);
+
+	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			dprintk(SAA716x_ERROR, 1, "data ERESTARTSYS");
+			return -ERESTARTSYS;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
+		return -EIO;
+	}
+
+	sti7109->data_ready = 0;
+
+	/*
+	 * 8 bytes is the size of the block header. Block header structure is:
+	 * 16 bit - block index
+	 * 16 bit - number of blocks
+	 * 16 bit - current block data size
+	 * 16 bit - block handle. This is used to reference the data in the
+	 *          command that uses it.
+	 */
+	blockSize = (SIZE_BLOCK_DATA / 2) - SIZE_BLOCK_HEADER;
+	numBlocks = data->data_length / blockSize;
+	lastBlockSize = data->data_length % blockSize;
+	if (lastBlockSize > 0)
+		numBlocks++;
+
+	blockHeader[2] = (u8) (numBlocks >> 8);
+	blockHeader[3] = (u8) numBlocks;
+	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
+	blockHeader[7] = (u8) sti7109->data_handle;
+	blockPtr = (u8 *) data->data_buffer;
+	activeBlock = 0;
+	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
+		u32 addr;
+
+		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
+			blockSize = lastBlockSize;
+
+		blockHeader[0] = (uint8_t) (blockIndex >> 8);
+		blockHeader[1] = (uint8_t) blockIndex;
+		blockHeader[4] = (uint8_t) (blockSize >> 8);
+		blockHeader[5] = (uint8_t) blockSize;
+
+		addr = ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2);
+		saa716x_phi_write(saa716x, addr, blockHeader,
+				  SIZE_BLOCK_HEADER);
+		saa716x_phi_write(saa716x, addr + SIZE_BLOCK_HEADER, blockPtr,
+				  blockSize);
+		activeBlock = (activeBlock + 1) & 1;
+		if (blockIndex > 0) {
+			timeout = 1 * HZ;
+			timeout = wait_event_timeout(sti7109->block_done_wq,
+						     sti7109->block_done == 1,
+						     timeout);
+
+			if (sti7109->block_done == 0) {
+				dprintk(SAA716x_ERROR, 1,
+					"timed out waiting for block done");
+				return -EIO;
+			}
+		}
+		sti7109->block_done = 0;
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
+		blockPtr += blockSize;
+	}
+	timeout = 1 * HZ;
+	timeout = wait_event_timeout(sti7109->block_done_wq,
+				     sti7109->block_done == 1,
+				     timeout);
+
+	if (sti7109->block_done == 0) {
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+		return -EIO;
+	}
+	sti7109->block_done = 0;
+
+	data->data_handle = sti7109->data_handle;
+	sti7109->data_handle++;
+	return 0;
+}
+
+int sti7109_cmd_get_fw_version(struct sti7109_dev *sti7109, u32 *fw_version)
+{
+	osd_raw_cmd_t cmd;
+	u8 cmd_data[6];
+	u8 result_data[MAX_RESULT_LEN];
+	int ret_val = -EINVAL;
+
+	cmd_data[0] = 0x00;
+	cmd_data[1] = 0x04;
+	cmd_data[2] = 0x00;
+	cmd_data[3] = 0x00;
+	cmd_data[4] = 0x00;
+	cmd_data[5] = 0x00;
+	cmd.cmd_data = cmd_data;
+	cmd.cmd_len = sizeof(cmd_data);
+	cmd.result_data = result_data;
+	cmd.result_len = sizeof(result_data);
+
+	mutex_lock(&sti7109->cmd_lock);
+	ret_val = sti7109_raw_cmd(sti7109, &cmd);
+	mutex_unlock(&sti7109->cmd_lock);
+
+	if (ret_val == 0) {
+		*fw_version = (result_data[6] << 16)
+			    | (result_data[7] << 8)
+			    | result_data[8];
+	}
+
+	return ret_val;
+}
+
+int sti7109_cmd_get_video_format(struct sti7109_dev *sti7109, video_size_t *vs)
+{
+	osd_raw_cmd_t cmd;
+	u8 cmd_data[7];
+	u8 result_data[MAX_RESULT_LEN];
+	int ret_val = -EINVAL;
+
+	cmd_data[0] = 0x00;
+	cmd_data[1] = 0x05; /* command length */
+	cmd_data[2] = 0x00;
+	cmd_data[3] = 0x01; /* A/V decoder command group */
+	cmd_data[4] = 0x00;
+	cmd_data[5] = 0x10; /* get video format info command */
+	cmd_data[6] = 0x00; /* decoder index 0 */
+	cmd.cmd_data = cmd_data;
+	cmd.cmd_len = sizeof(cmd_data);
+	cmd.result_data = result_data;
+	cmd.result_len = sizeof(result_data);
+
+	mutex_lock(&sti7109->cmd_lock);
+	ret_val = sti7109_raw_cmd(sti7109, &cmd);
+	mutex_unlock(&sti7109->cmd_lock);
+
+	if (ret_val == 0) {
+		vs->w = (result_data[7] << 8)
+		      | result_data[8];
+		vs->h = (result_data[9] << 8)
+		      | result_data[10];
+		vs->aspect_ratio = result_data[11] >> 4;
+	}
+
+	return ret_val;
+}
+
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.h b/drivers/media/pci/saa716x/saa716x_ff_cmd.h
new file mode 100644
index 0000000000000..fc79f080ccde4
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.h
@@ -0,0 +1,16 @@
+#ifndef __SAA716x_FF_CMD_H
+#define __SAA716x_FF_CMD_H
+
+extern int sti7109_cmd_init(struct sti7109_dev *sti7109);
+extern int sti7109_raw_cmd(struct sti7109_dev * sti7109,
+			   osd_raw_cmd_t * cmd);
+extern int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109,
+			       osd_raw_cmd_t * cmd);
+extern int sti7109_raw_data(struct sti7109_dev * sti7109,
+			    osd_raw_data_t * data);
+extern int sti7109_cmd_get_fw_version(struct sti7109_dev *sti7109,
+				      u32 *fw_version);
+extern int sti7109_cmd_get_video_format(struct sti7109_dev *sti7109,
+					video_size_t *vs);
+
+#endif /* __SAA716x_FF_CMD_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index dbd3639216131..aa785662c3a30 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -20,6 +20,10 @@
 
 #include <linux/i2c.h>
 
+#include <linux/dvb/video.h>
+#include <linux/dvb/audio.h>
+#include <linux/dvb/osd.h>
+
 #include "saa716x_mod.h"
 
 #include "saa716x_dma_reg.h"
@@ -32,7 +36,6 @@
 #include "saa716x_vip.h"
 #include "saa716x_aip.h"
 #include "saa716x_msi.h"
-#include "saa716x_ff.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
 #include "saa716x_phi.h"
@@ -40,9 +43,8 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
-#include <linux/dvb/video.h>
-#include <linux/dvb/audio.h>
-#include <linux/dvb/osd.h>
+#include "saa716x_ff.h"
+#include "saa716x_ff_cmd.h"
 
 #include "stv6110x.h"
 #include "stv090x.h"
@@ -253,272 +255,6 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
-{
-	struct saa716x_dev * saa716x = sti7109->dev;
-	unsigned long timeout;
-
-	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->cmd_ready_wq,
-						   sti7109->cmd_ready == 1,
-						   timeout);
-
-	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			dprintk(SAA716x_ERROR, 1, "cmd ERESTARTSYS");
-			return -ERESTARTSYS;
-		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for command ready");
-		return -EIO;
-	}
-
-	sti7109->cmd_ready = 0;
-	sti7109->result_avail = 0;
-	saa716x_phi_write(saa716x, ADDR_CMD_DATA, cmd->cmd_data, cmd->cmd_len);
-	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
-
-	if (cmd->result_len > 0) {
-		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->result_avail_wq,
-							   sti7109->result_avail == 1,
-							   timeout);
-
-		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
-			cmd->result_len = 0;
-			if (timeout == -ERESTARTSYS) {
-				/* a signal arrived */
-				dprintk(SAA716x_ERROR, 1, "result ERESTARTSYS");
-				return -ERESTARTSYS;
-			}
-			dprintk(SAA716x_ERROR, 1, "timed out waiting for command result");
-			return -EIO;
-		}
-
-		if (sti7109->result_len > 0) {
-			if (sti7109->result_len > cmd->result_len) {
-				memcpy(cmd->result_data, sti7109->result_data, cmd->result_len);
-			} else {
-				memcpy(cmd->result_data, sti7109->result_data, sti7109->result_len);
-				cmd->result_len = sti7109->result_len;
-			}
-		}
-	}
-
-	return 0;
-}
-
-static int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
-{
-	struct saa716x_dev * saa716x = sti7109->dev;
-	unsigned long timeout;
-
-	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->osd_cmd_ready_wq,
-						   sti7109->osd_cmd_ready == 1,
-						   timeout);
-
-	if (timeout == -ERESTARTSYS || sti7109->osd_cmd_ready == 0) {
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			dprintk(SAA716x_ERROR, 1, "osd cmd ERESTARTSYS");
-			return -ERESTARTSYS;
-		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for osd command ready");
-		return -EIO;
-	}
-
-	sti7109->osd_cmd_ready = 0;
-	sti7109->osd_result_avail = 0;
-	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, cmd->cmd_data, cmd->cmd_len);
-	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
-
-	if (cmd->result_len > 0) {
-		timeout = 1 * HZ;
-		timeout = wait_event_interruptible_timeout(sti7109->osd_result_avail_wq,
-							   sti7109->osd_result_avail == 1,
-							   timeout);
-
-		if (timeout == -ERESTARTSYS || sti7109->osd_result_avail == 0) {
-			cmd->result_len = 0;
-			if (timeout == -ERESTARTSYS) {
-				/* a signal arrived */
-				dprintk(SAA716x_ERROR, 1, "osd result ERESTARTSYS");
-				return -ERESTARTSYS;
-			}
-			dprintk(SAA716x_ERROR, 1, "timed out waiting for osd command result");
-			return -EIO;
-		}
-
-		if (sti7109->osd_result_len > 0) {
-			if (sti7109->osd_result_len > cmd->result_len) {
-				memcpy(cmd->result_data, sti7109->osd_result_data, cmd->result_len);
-			} else {
-				memcpy(cmd->result_data, sti7109->osd_result_data, sti7109->osd_result_len);
-				cmd->result_len = sti7109->osd_result_len;
-			}
-		}
-	}
-
-	return 0;
-}
-
-static int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
-{
-	struct saa716x_dev * saa716x = sti7109->dev;
-	unsigned long timeout;
-	u16 blockSize;
-	u16 lastBlockSize;
-	u16 numBlocks;
-	u16 blockIndex;
-	u8 blockHeader[SIZE_BLOCK_HEADER];
-	u8 * blockPtr;
-	int activeBlock;
-
-	timeout = 1 * HZ;
-	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
-						   sti7109->data_ready == 1,
-						   timeout);
-
-	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			dprintk(SAA716x_ERROR, 1, "data ERESTARTSYS");
-			return -ERESTARTSYS;
-		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
-		return -EIO;
-	}
-
-	sti7109->data_ready = 0;
-
-	/* 8 bytes is the size of the block header. Block header structure is:
-	 * 16 bit - block index
-	 * 16 bit - number of blocks
-	 * 16 bit - current block data size
-	 * 16 bit - block handle. This is used to reference the data in the command that uses it.
-	 */
-	blockSize = (SIZE_BLOCK_DATA / 2) - SIZE_BLOCK_HEADER;
-	numBlocks = data->data_length / blockSize;
-	lastBlockSize = data->data_length % blockSize;
-	if (lastBlockSize > 0)
-		numBlocks++;
-
-	blockHeader[2] = (u8) (numBlocks >> 8);
-	blockHeader[3] = (u8) numBlocks;
-	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
-	blockHeader[7] = (u8) sti7109->data_handle;
-	blockPtr = (u8 *) data->data_buffer;
-	activeBlock = 0;
-	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
-
-		if (lastBlockSize && (blockIndex == (numBlocks - 1)))
-			blockSize = lastBlockSize;
-
-		blockHeader[0] = (uint8_t) (blockIndex >> 8);
-		blockHeader[1] = (uint8_t) blockIndex;
-		blockHeader[4] = (uint8_t) (blockSize >> 8);
-		blockHeader[5] = (uint8_t) blockSize;
-
-		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2), blockHeader, SIZE_BLOCK_HEADER);
-		saa716x_phi_write(saa716x, ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2) + SIZE_BLOCK_HEADER, blockPtr, blockSize);
-		activeBlock = (activeBlock + 1) & 1;
-		if (blockIndex > 0) {
-			timeout = 1 * HZ;
-			timeout = wait_event_timeout(sti7109->block_done_wq,
-						     sti7109->block_done == 1,
-						     timeout);
-
-			if (sti7109->block_done == 0) {
-				dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
-				return -EIO;
-			}
-		}
-		sti7109->block_done = 0;
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_BLOCK_MASK);
-		blockPtr += blockSize;
-	}
-	timeout = 1 * HZ;
-	timeout = wait_event_timeout(sti7109->block_done_wq,
-				     sti7109->block_done == 1,
-				     timeout);
-
-	if (sti7109->block_done == 0) {
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
-		return -EIO;
-	}
-	sti7109->block_done = 0;
-
-	data->data_handle = sti7109->data_handle;
-	sti7109->data_handle++;
-	return 0;
-}
-
-static int sti7109_get_fw_version(struct sti7109_dev *sti7109, u32 *fw_version)
-{
-	osd_raw_cmd_t cmd;
-	u8 cmd_data[6];
-	u8 result_data[MAX_RESULT_LEN];
-	int ret_val = -EINVAL;
-
-	cmd_data[0] = 0x00;
-	cmd_data[1] = 0x04;
-	cmd_data[2] = 0x00;
-	cmd_data[3] = 0x00;
-	cmd_data[4] = 0x00;
-	cmd_data[5] = 0x00;
-	cmd.cmd_data = cmd_data;
-	cmd.cmd_len = sizeof(cmd_data);
-	cmd.result_data = result_data;
-	cmd.result_len = sizeof(result_data);
-
-	mutex_lock(&sti7109->cmd_lock);
-	ret_val = sti7109_raw_cmd(sti7109, &cmd);
-	mutex_unlock(&sti7109->cmd_lock);
-
-	if (ret_val == 0) {
-		*fw_version = (result_data[6] << 16)
-			    | (result_data[7] << 8)
-			    | result_data[8];
-	}
-
-	return ret_val;
-}
-
-static int sti7109_get_video_format(struct sti7109_dev *sti7109, video_size_t *vs)
-{
-	osd_raw_cmd_t cmd;
-	u8 cmd_data[7];
-	u8 result_data[MAX_RESULT_LEN];
-	int ret_val = -EINVAL;
-
-	cmd_data[0] = 0x00;
-	cmd_data[1] = 0x05; /* command length */
-	cmd_data[2] = 0x00;
-	cmd_data[3] = 0x01; /* A/V decoder command group */
-	cmd_data[4] = 0x00;
-	cmd_data[5] = 0x10; /* get video format info command */
-	cmd_data[6] = 0x00; /* decoder index 0 */
-	cmd.cmd_data = cmd_data;
-	cmd.cmd_len = sizeof(cmd_data);
-	cmd.result_data = result_data;
-	cmd.result_len = sizeof(result_data);
-
-	mutex_lock(&sti7109->cmd_lock);
-	ret_val = sti7109_raw_cmd(sti7109, &cmd);
-	mutex_unlock(&sti7109->cmd_lock);
-
-	if (ret_val == 0) {
-		vs->w = (result_data[7] << 8)
-		      | result_data[8];
-		vs->h = (result_data[9] << 8)
-		      | result_data[10];
-		vs->aspect_ratio = result_data[11] >> 4;
-	}
-
-	return ret_val;
-}
-
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 #else
@@ -805,7 +541,7 @@ static int dvb_video_ioctl(struct file *file,
 	}
 	case VIDEO_GET_SIZE:
 	{
-		ret = sti7109_get_video_format(sti7109, (video_size_t *) parg);
+		ret = sti7109_cmd_get_video_format(sti7109, (video_size_t *) parg);
 		break;
 	}
 	default:
@@ -944,29 +680,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	if (!sti7109->iobuf)
 		goto fail4;
 
-	mutex_init(&sti7109->cmd_lock);
-	mutex_init(&sti7109->osd_cmd_lock);
-	mutex_init(&sti7109->data_lock);
-
-	init_waitqueue_head(&sti7109->boot_finish_wq);
-	sti7109->boot_finished = 0;
-
-	init_waitqueue_head(&sti7109->cmd_ready_wq);
-	sti7109->cmd_ready = 0;
-
-	init_waitqueue_head(&sti7109->result_avail_wq);
-	sti7109->result_avail = 0;
-
-	init_waitqueue_head(&sti7109->osd_cmd_ready_wq);
-	sti7109->osd_cmd_ready = 0;
-	init_waitqueue_head(&sti7109->osd_result_avail_wq);
-	sti7109->osd_result_avail = 0;
-
-	sti7109->data_handle = 0;
-	init_waitqueue_head(&sti7109->data_ready_wq);
-	sti7109->data_ready = 0;
-	init_waitqueue_head(&sti7109->block_done_wq);
-	sti7109->block_done = 0;
+	sti7109_cmd_init(sti7109);
 
 	sti7109->int_count_enable = int_count_enable;
 	sti7109->total_int_count = 0;
@@ -1077,7 +791,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail9;
 	}
 
-	err = sti7109_get_fw_version(sti7109, &fw_version);
+	err = sti7109_cmd_get_fw_version(sti7109, &fw_version);
 	if (!err) {
 		printk(KERN_INFO "SAA716x FF firmware version %X.%X.%X\n",
 			(fw_version >> 16) & 0xFF, (fw_version >> 8) & 0xFF,

From ca4ccfe8d2bc69bc93cede5e6e19c4f6359dfef7 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 24 Oct 2011 19:55:09 +0200
Subject: [PATCH 186/364] saa716x_ff: Allow to have osd device opened twice.

As the osd device is used to control the firmware functions it is useful to be
able to access it from two processes at the same time.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index aa785662c3a30..d67188993b346 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -303,8 +303,8 @@ static struct file_operations dvb_osd_fops = {
 
 static struct dvb_device dvbdev_osd = {
 	.priv		= NULL,
-	.users		= 1,
-	.writers	= 1,
+	.users		= 2,
+	.writers	= 2,
 	.fops		= &dvb_osd_fops,
 	.kernel_ioctl	= dvb_osd_ioctl,
 };

From f7c234f90d37c3579a470f68c5ef560f0dd4cbd6 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 6 Nov 2011 19:04:22 +0100
Subject: [PATCH 187/364] saa716x_ff: support correct TS mux setting for FPGA
 1.10.

With FPGA bitstream version 1.10 and up the TS muxer settings have
changed. With this change the driver supports both old and new types.
Also the TS muxer configuration is now done only once during
initialization of the card.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 19 ++++++++++++-------
 2 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 9aca855903255..8381a9fb4a87f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -142,6 +142,8 @@ struct sti7109_dev {
 	u32			ext_int_total_count;
 	u32			ext_int_source_count[16];
 	u32			last_int_ticks;
+
+	u16			fpga_version;
 };
 
 #endif /* __SAA716x_FF_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index d67188993b346..5dad6ad7704da 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -66,12 +66,12 @@ MODULE_PARM_DESC(int_count_enable, "enable counting of interrupts");
 
 static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 {
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	int fpgaInit;
 	int fpgaDone;
 	int rounds;
 	int ret;
 	const struct firmware *fw;
-	u32 fpgaVersion;
 
 	/* request the FPGA firmware, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
@@ -128,9 +128,9 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	if (!fpgaDone)
 		return -EINVAL;
 
-	fpgaVersion = SAA716x_EPRD(PHI_1, FPGA_ADDR_VERSION);
+	sti7109->fpga_version = SAA716x_EPRD(PHI_1, FPGA_ADDR_VERSION);
 	printk(KERN_INFO "SAA716x FF FPGA version %X.%02X\n",
-		fpgaVersion >> 8, fpgaVersion & 0xFF);
+		sti7109->fpga_version >> 8, sti7109->fpga_version & 0xFF);
 
 	return 0;
 }
@@ -513,15 +513,11 @@ static int dvb_video_ioctl(struct file *file,
 
 		stream_source = (video_stream_source_t) parg;
 		if (stream_source == VIDEO_SOURCE_DEMUX) {
-			/* select TS input 3 for TS mux 3 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX3, 3);
 			/* stop and reset FIFO 1 */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
 		}
 		else {
 			dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
-			/* select FIFO 1 for TS mux 3 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX3, 4);
 			/* reset FIFO 1 */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
 			/* start FIFO 1 */
@@ -714,6 +710,15 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 		goto fail5;
 	}
 
+	/* configure TS muxer */
+	if (sti7109->fpga_version < 0x110) {
+		/* select FIFO 1 for TS mux 3 */
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX3, 4);
+	} else {
+		/* select FIFO 1 for TS mux 3 */
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_TSR_MUX3, 1);
+	}
+
 	/* enable interrupts from ST7109 -> PC */
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICTRL, 0x3);
 

From 20617b4511d91dbb0982afccfdb9226478d12735 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 8 Nov 2011 21:23:06 +0100
Subject: [PATCH 188/364] saa716x_budget: Add missing GPIO initialization.

saa716x_gpio_init was not called.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index f79a24fe89722..f6d704830bfed 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -99,6 +99,8 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		goto fail3;
 	}
 
+	saa716x_gpio_init(saa716x);
+
 	err = saa716x_dump_eeprom(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");

From 74ea89eefc27e09ba8a6bec6f4a7de55b7278c02 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 8 Nov 2011 21:25:53 +0100
Subject: [PATCH 189/364] saa716x_hybrid: Add missing GPIO initialization.

- saa716x_gpio_init was not called
- GPIOs that are written are now configured properly as output
- wrong parameter was used when calling saa716x_gpio_write

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 67fac5e44e980..bd9bee1f73604 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -103,6 +103,8 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail3;
 	}
 
+	saa716x_gpio_init(saa716x);
+
 	err = saa716x_dump_eeprom(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
@@ -284,8 +286,10 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 
 	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
 
-	saa716x_gpio_write(saa716x, GPIO_11, 1);
-	saa716x_gpio_write(saa716x, GPIO_10, 1);
+	saa716x_gpio_set_output(saa716x, 11);
+	saa716x_gpio_set_output(saa716x, 10);
+	saa716x_gpio_write(saa716x, 11, 1);
+	saa716x_gpio_write(saa716x, 10, 1);
 	msleep(100);
 #if 0
 	dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
@@ -363,7 +367,9 @@ static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter, int
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
-		saa716x_gpio_write(saa716x, GPIO_14, 1);
+
+		saa716x_gpio_set_output(saa716x, 14);
+		saa716x_gpio_write(saa716x, 14, 1);
 		msleep(100);
 
 		adapter->fe = tda10046_attach(&tda1004x_atlantis_config, &i2c->i2c_adapter);

From f080c890ec33edb845ea03d3b347df78de0f6c56 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 10 Nov 2011 21:05:07 +0100
Subject: [PATCH 190/364] saa716x_hybrid: fix tuner settings for nemo reference
 board

The initialization of TDA10046 and TDA8175 now basically works, the TDA10046
loads its firmware. Changes made are:

- use correct I2C buses, the TDA10046 is connected to I2C bus B, TDA8275 is
  connected to bus A
- use correct clock of 16 MHz
- use correct IF setting (low IF)
- use correct AGC setting
- properly reset the TDA10046
- attach the TDA8275

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 38 ++++++++++++++++++----
 1 file changed, 32 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index bd9bee1f73604..26109ce7b915a 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -35,6 +35,7 @@
 #include "zl10353.h"
 #include "mb86a16.h"
 #include "tda1004x.h"
+#include "tda827x.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -417,10 +418,19 @@ static struct tda1004x_config tda1004x_nemo_config = {
 	.demod_address		= 0x8,
 	.invert			= 0,
 	.invert_oclk		= 0,
-	.xtal_freq		= TDA10046_XTAL_4M,
-	.agc_config		= TDA10046_AGC_DEFAULT,
-	.if_freq		= TDA10046_FREQ_3617,
+	.xtal_freq		= TDA10046_XTAL_16M,
+	.agc_config		= TDA10046_AGC_TDA827X,
+	.if_freq		= TDA10046_FREQ_045,
 	.request_firmware	= tda1004x_nemo_request_firmware,
+	.tuner_address          = 0x60,
+};
+
+static struct tda827x_config tda827x_nemo_config = {
+	.init		= NULL,
+	.sleep		= NULL,
+	.config		= 0,
+	.switch_addr	= 0,
+	.agcf		= NULL,
 };
 
 static int load_config_nemo(struct saa716x_dev *saa716x)
@@ -432,7 +442,8 @@ static int load_config_nemo(struct saa716x_dev *saa716x)
 static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[1];
+	struct saa716x_i2c *demod_i2c = &saa716x->i2c[SAA716x_I2C_BUS_B];
+	struct saa716x_i2c *tuner_i2c = &saa716x->i2c[SAA716x_I2C_BUS_A];
 
 
 	if (count  == 0) {
@@ -441,10 +452,17 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
 
 		saa716x_gpio_set_output(saa716x, 14);
+
+		/* Reset the demodulator */
 		saa716x_gpio_write(saa716x, 14, 1);
-		msleep(100);
+		msleep(10);
+		saa716x_gpio_write(saa716x, 14, 0);
+		msleep(10);
+		saa716x_gpio_write(saa716x, 14, 1);
+		msleep(10);
 
-		adapter->fe = tda10046_attach(&tda1004x_nemo_config, &i2c->i2c_adapter);
+		adapter->fe = tda10046_attach(&tda1004x_nemo_config,
+					      &demod_i2c->i2c_adapter);
 		if (adapter->fe) {
 			dprintk(SAA716x_ERROR, 1, "found TDA10046 DVB-T frontend @0x%02x",
 				tda1004x_nemo_config.demod_address);
@@ -452,6 +470,14 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 		} else {
 			goto exit;
 		}
+		if (dvb_attach(tda827x_attach, adapter->fe,
+			       tda1004x_nemo_config.tuner_address,
+			       &tuner_i2c->i2c_adapter, &tda827x_nemo_config)) {
+			dprintk(SAA716x_ERROR, 1, "found TDA8275 tuner @0x%02x",
+				tda1004x_nemo_config.tuner_address);
+		} else {
+			goto exit;
+		}
 		dprintk(SAA716x_ERROR, 1, "Done!");
 	}
 

From 8883803a7bb4da7a001a1d26fc7e24f085a76818 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 12 Nov 2011 20:06:52 +0100
Subject: [PATCH 191/364] saa716x_hybrid: TS capturing on the nemo reference
 board works.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 79 +++++++++++++++++++++-
 1 file changed, 78 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 26109ce7b915a..bd61018dae693 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -20,8 +20,11 @@
 
 #include "saa716x_mod.h"
 
-#include "saa716x_msi_reg.h"
+#include "saa716x_dma_reg.h"
+#include "saa716x_fgpi_reg.h"
 #include "saa716x_gpio_reg.h"
+#include "saa716x_greg_reg.h"
+#include "saa716x_msi_reg.h"
 
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
@@ -116,6 +119,11 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
 
+	/* set default port mapping */
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F44);
+	/* enable FGPI3 and FGPI0 for TS input from Port 3 and 6 */
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x894);
+
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -212,9 +220,66 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 #endif
 
+	if (stat_l) {
+		if (stat_l & MSI_INT_TAGACK_FGPI_3) {
+			tasklet_schedule(&saa716x->fgpi[3].tasklet);
+		}
+	}
+
 	return IRQ_HANDLED;
 }
 
+static void demux_worker(unsigned long data)
+{
+	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
+	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
+	struct dvb_demux *demux;
+	u32 fgpi;
+	u32 buf_mode;
+	u32 write_index;
+	u32 fgpiStatus;
+
+	switch (fgpi_entry->dma_channel - 6) {
+	case 3: /* FGPI_3 */
+		demux = &saa716x->saa716x_adap[0].demux;
+		fgpi = FGPI3;
+		buf_mode = SAA716x_EPRD(BAM, BAM_FGPI3_DMA_BUF_MODE);
+		if (saa716x->revision < 2) {
+			/* restore buffer numbers on BAM for revision 1 */
+			SAA716x_EPWR(fgpi, INT_CLR_STATUS, 0x7F);
+			SAA716x_EPWR(BAM, BAM_FGPI3_DMA_BUF_MODE, buf_mode | 7);
+		}
+		write_index = (buf_mode >> 3) & 0x7;
+		break;
+
+	default:
+		printk(KERN_ERR "%s: unexpected channel %u\n",
+		       __func__, fgpi_entry->dma_channel);
+		return;
+	}
+
+	fgpiStatus = SAA716x_EPRD(fgpi, INT_STATUS);
+	dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
+		fgpiStatus, write_index);
+
+	if (write_index == fgpi_entry->read_index) {
+		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
+		return;
+	}
+
+	do {
+		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
+
+		pci_dma_sync_sg_for_cpu(saa716x->pdev,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
+			PCI_DMA_FROMDEVICE);
+
+		dvb_dmx_swfilter(demux, data, 348 * 188);
+
+		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
+	} while (write_index != fgpi_entry->read_index);
+}
 
 /*
  * Twinhan/Azurewave VP-6090
@@ -451,6 +516,10 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
 
+		/* GPIO 26 controls a +15dB gain */
+		saa716x_gpio_set_output(saa716x, 26);
+		saa716x_gpio_write(saa716x, 26, 0);
+
 		saa716x_gpio_set_output(saa716x, 14);
 
 		/* Reset the demodulator */
@@ -496,6 +565,14 @@ static struct saa716x_config saa716x_nemo_config = {
 	.frontend_attach	= saa716x_nemo_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
+
+	.adap_config		= {
+		{
+			/* Adapter 0 */
+			.ts_port = 3, /* using FGPI 3 */
+			.worker = demux_worker
+		}
+	}
 };
 
 

From 93dfd03b56ab834bd952fd63f546a096625733e6 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 12 Nov 2011 20:32:37 +0100
Subject: [PATCH 192/364] saa716x_hybrid: Make TS capturing code more generic.

This makes it easier to support other cards.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 66 ++++++++++++++++++----
 1 file changed, 54 insertions(+), 12 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index bd61018dae693..f3eebf07bd81c 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -221,6 +221,15 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 #endif
 
 	if (stat_l) {
+		if (stat_l & MSI_INT_TAGACK_FGPI_0) {
+			tasklet_schedule(&saa716x->fgpi[0].tasklet);
+		}
+		if (stat_l & MSI_INT_TAGACK_FGPI_1) {
+			tasklet_schedule(&saa716x->fgpi[1].tasklet);
+		}
+		if (stat_l & MSI_INT_TAGACK_FGPI_2) {
+			tasklet_schedule(&saa716x->fgpi[2].tasklet);
+		}
 		if (stat_l & MSI_INT_TAGACK_FGPI_3) {
 			tasklet_schedule(&saa716x->fgpi[3].tasklet);
 		}
@@ -234,22 +243,47 @@ static void demux_worker(unsigned long data)
 	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
 	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
 	struct dvb_demux *demux;
-	u32 fgpi;
+	u32 fgpi_index;
+	u32 i;
+	u32 fgpi_base;
+	u32 buf_mode_reg;
 	u32 buf_mode;
 	u32 write_index;
 	u32 fgpiStatus;
 
-	switch (fgpi_entry->dma_channel - 6) {
-	case 3: /* FGPI_3 */
-		demux = &saa716x->saa716x_adap[0].demux;
-		fgpi = FGPI3;
-		buf_mode = SAA716x_EPRD(BAM, BAM_FGPI3_DMA_BUF_MODE);
-		if (saa716x->revision < 2) {
-			/* restore buffer numbers on BAM for revision 1 */
-			SAA716x_EPWR(fgpi, INT_CLR_STATUS, 0x7F);
-			SAA716x_EPWR(BAM, BAM_FGPI3_DMA_BUF_MODE, buf_mode | 7);
+	fgpi_index = fgpi_entry->dma_channel - 6;
+	demux = NULL;
+	for (i = 0; i < saa716x->config->adapters; i++) {
+		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
+			demux = &saa716x->saa716x_adap[i].demux;
+			break;
 		}
-		write_index = (buf_mode >> 3) & 0x7;
+	}
+	if (demux == NULL) {
+		printk(KERN_ERR "%s: unexpected channel %u\n",
+		       __func__, fgpi_entry->dma_channel);
+		return;
+	}
+
+	switch (fgpi_index) {
+	case 0: /* FGPI_0 */
+		fgpi_base = FGPI0;
+		buf_mode_reg = BAM_FGPI0_DMA_BUF_MODE;
+		break;
+
+	case 1: /* FGPI_1 */
+		fgpi_base = FGPI1;
+		buf_mode_reg = BAM_FGPI1_DMA_BUF_MODE;
+		break;
+
+	case 2: /* FGPI_2 */
+		fgpi_base = FGPI2;
+		buf_mode_reg = BAM_FGPI2_DMA_BUF_MODE;
+		break;
+
+	case 3: /* FGPI_3 */
+		fgpi_base = FGPI3;
+		buf_mode_reg = BAM_FGPI3_DMA_BUF_MODE;
 		break;
 
 	default:
@@ -258,7 +292,15 @@ static void demux_worker(unsigned long data)
 		return;
 	}
 
-	fgpiStatus = SAA716x_EPRD(fgpi, INT_STATUS);
+	buf_mode = SAA716x_EPRD(BAM, buf_mode_reg);
+	if (saa716x->revision < 2) {
+		/* restore buffer numbers on BAM for revision 1 */
+		SAA716x_EPWR(fgpi_base, INT_CLR_STATUS, 0x7F);
+		SAA716x_EPWR(BAM, buf_mode_reg, buf_mode | 7);
+	}
+	write_index = (buf_mode >> 3) & 0x7;
+
+	fgpiStatus = SAA716x_EPRD(fgpi_base, INT_STATUS);
 	dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
 		fgpiStatus, write_index);
 

From e0d1edc1b6fbcb07038bf7a3f6430b2c597d6392 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 10:38:10 +0100
Subject: [PATCH 193/364] saa716x: remove unused members from struct
 saa716x_config.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 957b24011ac2b..b396b25cb0f1a 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -98,9 +98,6 @@ struct saa716x_config {
 
 	int				adapters;
 	int				frontends;
-	u8				demodulator_addr;
-	u8				tuner_addr;
-	u8				decoder_addr;
 
 	int (*frontend_attach)(struct saa716x_adapter *adapter, int count);
 	irqreturn_t (*irq_handler)(int irq, void *dev_id);

From edd535dce30421fd21f9855a1e9e0879e4b1e4b0 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 11:55:25 +0100
Subject: [PATCH 194/364] saa716x: Add function saa716x_fgpi_get_write_index.

This function returns the currently active DMA buffer. Making this a
global function simplifies TS capturing code in the drivers a bit.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 43 ++++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_fgpi.h |  2 ++
 2 files changed, 45 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index c92840c3a454e..8bdb13d0f8f8a 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -97,6 +97,49 @@ void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel)
 }
 EXPORT_SYMBOL_GPL(saa716x_fgpiint_disable);
 
+int saa716x_fgpi_get_write_index(struct saa716x_dev *saa716x, u32 fgpi_index)
+{
+	u32 fgpi_base;
+	u32 buf_mode_reg;
+	u32 buf_mode;
+
+ 	switch (fgpi_index) {
+	case 0: /* FGPI_0 */
+		fgpi_base = FGPI0;
+		buf_mode_reg = BAM_FGPI0_DMA_BUF_MODE;
+		break;
+
+	case 1: /* FGPI_1 */
+		fgpi_base = FGPI1;
+		buf_mode_reg = BAM_FGPI1_DMA_BUF_MODE;
+		break;
+
+	case 2: /* FGPI_2 */
+		fgpi_base = FGPI2;
+		buf_mode_reg = BAM_FGPI2_DMA_BUF_MODE;
+		break;
+
+	case 3: /* FGPI_3 */
+		fgpi_base = FGPI3;
+		buf_mode_reg = BAM_FGPI3_DMA_BUF_MODE;
+		break;
+
+	default:
+		printk(KERN_ERR "%s: unexpected fgpi %u\n",
+		       __func__, fgpi_index);
+		return -1;
+	}
+
+	buf_mode = SAA716x_EPRD(BAM, buf_mode_reg);
+	if (saa716x->revision < 2) {
+		/* workaround for revision 1: restore buffer numbers on BAM */
+		SAA716x_EPWR(fgpi_base, INT_CLR_STATUS, 0x7F);
+		SAA716x_EPWR(BAM, buf_mode_reg, buf_mode | 7);
+	}
+	return (buf_mode >> 3) & 0x7;
+}
+EXPORT_SYMBOL_GPL(saa716x_fgpi_get_write_index);
+
 static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
 {
 	struct saa716x_dev *saa716x = dmabuf->saa716x;
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index a1df3e55f5ffc..225aff00f34d7 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -99,6 +99,8 @@ struct saa716x_fgpi_stream_port {
 };
 
 extern void saa716x_fgpiint_disable(struct saa716x_dmabuf *dmabuf, int channel);
+extern int saa716x_fgpi_get_write_index(struct saa716x_dev *saa716x,
+					u32 fgpi_index);
 extern int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 			      struct fgpi_stream_params *stream_params);
 extern int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port);

From c5230315b57656f24285a527e2aceea49880718c Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 12:17:19 +0100
Subject: [PATCH 195/364] saa716x_hybrid: Use saa716x_fgpi_get_write_index to
 simplify code.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 43 ++--------------------
 1 file changed, 3 insertions(+), 40 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index f3eebf07bd81c..dc4b167189040 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -245,11 +245,7 @@ static void demux_worker(unsigned long data)
 	struct dvb_demux *demux;
 	u32 fgpi_index;
 	u32 i;
-	u32 fgpi_base;
-	u32 buf_mode_reg;
-	u32 buf_mode;
 	u32 write_index;
-	u32 fgpiStatus;
 
 	fgpi_index = fgpi_entry->dma_channel - 6;
 	demux = NULL;
@@ -265,44 +261,11 @@ static void demux_worker(unsigned long data)
 		return;
 	}
 
-	switch (fgpi_index) {
-	case 0: /* FGPI_0 */
-		fgpi_base = FGPI0;
-		buf_mode_reg = BAM_FGPI0_DMA_BUF_MODE;
-		break;
-
-	case 1: /* FGPI_1 */
-		fgpi_base = FGPI1;
-		buf_mode_reg = BAM_FGPI1_DMA_BUF_MODE;
-		break;
-
-	case 2: /* FGPI_2 */
-		fgpi_base = FGPI2;
-		buf_mode_reg = BAM_FGPI2_DMA_BUF_MODE;
-		break;
-
-	case 3: /* FGPI_3 */
-		fgpi_base = FGPI3;
-		buf_mode_reg = BAM_FGPI3_DMA_BUF_MODE;
-		break;
-
-	default:
-		printk(KERN_ERR "%s: unexpected channel %u\n",
-		       __func__, fgpi_entry->dma_channel);
+	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
+	if (write_index < 0)
 		return;
-	}
-
-	buf_mode = SAA716x_EPRD(BAM, buf_mode_reg);
-	if (saa716x->revision < 2) {
-		/* restore buffer numbers on BAM for revision 1 */
-		SAA716x_EPWR(fgpi_base, INT_CLR_STATUS, 0x7F);
-		SAA716x_EPWR(BAM, buf_mode_reg, buf_mode | 7);
-	}
-	write_index = (buf_mode >> 3) & 0x7;
 
-	fgpiStatus = SAA716x_EPRD(fgpi_base, INT_STATUS);
-	dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
-		fgpiStatus, write_index);
+	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
 
 	if (write_index == fgpi_entry->read_index) {
 		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);

From 68d9a18b0fecd8fee4cc48230db97c5c838fe3d0 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 12:24:37 +0100
Subject: [PATCH 196/364] saa716x_ff: Use saa716x_fgpi_get_write_index to
 simplify code.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 35 ++++++++++-----------
 1 file changed, 16 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 5dad6ad7704da..bb07359d02ded 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -869,32 +869,29 @@ static void demux_worker(unsigned long data)
 	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
 	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
 	struct dvb_demux *demux;
-	u32 fgpi;
+	u32 fgpi_index;
+	u32 i;
 	u32 write_index;
-	u32 fgpiStatus;
 
-	switch (fgpi_entry->dma_channel - 6) {
-	case 2:	/* FGPI_2 */
-		demux = &saa716x->saa716x_adap[0].demux;
-		fgpi = FGPI2;
-		write_index = (SAA716x_EPRD(BAM, BAM_FGPI2_DMA_BUF_MODE) >> 3) & 0x7;
-		break;
-
-	case 3: /* FGPI_3 */
-		demux = &saa716x->saa716x_adap[1].demux;
-		fgpi = FGPI3;
-		write_index = (SAA716x_EPRD(BAM, BAM_FGPI3_DMA_BUF_MODE) >> 3) & 0x7;
-		break;
-
-	default:
+	fgpi_index = fgpi_entry->dma_channel - 6;
+	demux = NULL;
+	for (i = 0; i < saa716x->config->adapters; i++) {
+		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
+			demux = &saa716x->saa716x_adap[i].demux;
+			break;
+		}
+	}
+	if (demux == NULL) {
 		printk(KERN_ERR "%s: unexpected channel %u\n",
 		       __func__, fgpi_entry->dma_channel);
 		return;
 	}
 
-	fgpiStatus = SAA716x_EPRD(fgpi, INT_STATUS);
-	dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
-		fgpiStatus, write_index);
+	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
+	if (write_index < 0)
+		return;
+
+	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
 
 	if (write_index == fgpi_entry->read_index) {
 		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);

From 8a530c20370e502019513e54c37ad76782da9d53 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 12:25:16 +0100
Subject: [PATCH 197/364] saa716x: Set maximum number of adapters per saa716x
 to 4.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index b396b25cb0f1a..4a8f4790d17df 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -29,6 +29,7 @@
 
 #define SAA716x_DEV		(saa716x)->num
 #define SAA716x_VERBOSE		(saa716x)->verbose
+#define SAA716x_MAX_ADAPTERS	4
 
 #define dprintk(__x, __y, __fmt, __arg...) do {								\
 	if (__y) {											\
@@ -102,7 +103,7 @@ struct saa716x_config {
 	int (*frontend_attach)(struct saa716x_adapter *adapter, int count);
 	irqreturn_t (*irq_handler)(int irq, void *dev_id);
 
-	struct saa716x_adap_config	adap_config[2];
+	struct saa716x_adap_config	adap_config[SAA716x_MAX_ADAPTERS];
 	enum saa716x_i2c_rate		i2c_rate;
 };
 
@@ -150,7 +151,7 @@ struct saa716x_dev {
 	struct saa716x_spi_state	*saa716x_spi;
 	struct saa716x_spi_config	spi_config;
 
-	struct saa716x_adapter		saa716x_adap[2];
+	struct saa716x_adapter		saa716x_adap[SAA716x_MAX_ADAPTERS];
 	struct mutex			adap_lock;
 	struct saa716x_cgu		cgu;
 

From 39f7aff44851bdff89123168073a058373d0bf97 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 12:41:45 +0100
Subject: [PATCH 198/364] saa716x_budget: Add TS capturing code.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 76 ++++++++++++++++++++--
 1 file changed, 72 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index f6d704830bfed..6191a72f8f266 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -20,14 +20,14 @@
 
 #include "saa716x_mod.h"
 
-#include "saa716x_msi_reg.h"
 #include "saa716x_gpio_reg.h"
+#include "saa716x_greg_reg.h"
+#include "saa716x_msi_reg.h"
 
-#include "saa716x_vip.h"
-#include "saa716x_aip.h"
+#include "saa716x_adap.h"
+#include "saa716x_i2c.h"
 #include "saa716x_msi.h"
 #include "saa716x_budget.h"
-#include "saa716x_adap.h"
 #include "saa716x_gpio.h"
 #include "saa716x_rom.h"
 #include "saa716x_spi.h"
@@ -111,6 +111,11 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM read failed");
 	}
 
+	/* set default port mapping */
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F44);
+	/* enable FGPI3 and FGPI0 for TS input from Port 3 and 6 */
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x894);
+
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -206,9 +211,72 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
 #endif
 
+	if (stat_l) {
+		if (stat_l & MSI_INT_TAGACK_FGPI_0) {
+			tasklet_schedule(&saa716x->fgpi[0].tasklet);
+		}
+		if (stat_l & MSI_INT_TAGACK_FGPI_1) {
+			tasklet_schedule(&saa716x->fgpi[1].tasklet);
+		}
+		if (stat_l & MSI_INT_TAGACK_FGPI_2) {
+			tasklet_schedule(&saa716x->fgpi[2].tasklet);
+		}
+		if (stat_l & MSI_INT_TAGACK_FGPI_3) {
+			tasklet_schedule(&saa716x->fgpi[3].tasklet);
+		}
+	}
+
 	return IRQ_HANDLED;
 }
 
+static void demux_worker(unsigned long data)
+{
+	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
+	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
+	struct dvb_demux *demux;
+	u32 fgpi_index;
+	u32 i;
+	u32 write_index;
+
+	fgpi_index = fgpi_entry->dma_channel - 6;
+	demux = NULL;
+	for (i = 0; i < saa716x->config->adapters; i++) {
+		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
+			demux = &saa716x->saa716x_adap[i].demux;
+			break;
+		}
+	}
+	if (demux == NULL) {
+		printk(KERN_ERR "%s: unexpected channel %u\n",
+		       __func__, fgpi_entry->dma_channel);
+		return;
+	}
+
+	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
+	if (write_index < 0)
+		return;
+
+	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
+
+	if (write_index == fgpi_entry->read_index) {
+		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
+		return;
+	}
+
+	do {
+		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
+
+		pci_dma_sync_sg_for_cpu(saa716x->pdev,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
+			PCI_DMA_FROMDEVICE);
+
+		dvb_dmx_swfilter(demux, data, 348 * 188);
+
+		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
+	} while (write_index != fgpi_entry->read_index);
+}
+
 static int load_config_vp3071(struct saa716x_dev *saa716x)
 {
 	int ret = 0;

From 8e2195673f6cf4e49ff47ea2ccd84b771273e4df Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 13 Nov 2011 12:42:11 +0100
Subject: [PATCH 199/364] saa716x_hybrid: Do some cleanups.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index dc4b167189040..a42199ea7450b 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -20,8 +20,6 @@
 
 #include "saa716x_mod.h"
 
-#include "saa716x_dma_reg.h"
-#include "saa716x_fgpi_reg.h"
 #include "saa716x_gpio_reg.h"
 #include "saa716x_greg_reg.h"
 #include "saa716x_msi_reg.h"
@@ -54,7 +52,6 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 {
 	struct saa716x_dev *saa716x;
 	int err = 0;
-	u32 sts;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -99,8 +96,6 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		goto fail1;
 	}
 
-	pci_read_config_dword(pdev, 0x06, &sts);
-
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
@@ -140,7 +135,6 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	saa716x_pci_exit(saa716x);
 fail1:
 	kfree(saa716x);
-
 fail0:
 	return err;
 }

From fc6de28dba2748ee2810c510f431dfe705452545 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 14 Nov 2011 21:00:22 +0100
Subject: [PATCH 200/364] saa716x: remove unused load_config functions.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  | 28 ----------------
 drivers/media/pci/saa716x/saa716x_ff_main.c |  8 -----
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 36 ---------------------
 drivers/media/pci/saa716x/saa716x_priv.h    |  4 ---
 4 files changed, 76 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 6191a72f8f266..fbed7fcf04e3b 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -277,12 +277,6 @@ static void demux_worker(unsigned long data)
 	} while (write_index != fgpi_entry->read_index);
 }
 
-static int load_config_vp3071(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-
-	return ret;
-}
 
 #define SAA716x_MODEL_TWINHAN_VP3071	"Twinhan/Azurewave VP-3071"
 #define SAA716x_DEV_TWINHAN_VP3071	"2x DVB-T"
@@ -300,19 +294,12 @@ static struct saa716x_config saa716x_vp3071_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP3071,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP3071,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_vp3071,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_vp3071_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
-static int load_config_vp1028(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-
-	return ret;
-}
 
 #define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
 #define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
@@ -398,19 +385,12 @@ static struct saa716x_config saa716x_vp1028_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_vp1028,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp1028_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
-static int load_config_vp6002(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-
-	return ret;
-}
 
 #define SAA716x_MODEL_TWINHAN_VP6002	"Twinhan/Azurewave VP-6002"
 #define SAA716x_DEV_TWINHAN_VP6002	"DVB-S"
@@ -429,19 +409,12 @@ static struct saa716x_config saa716x_vp6002_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6002,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6002,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_vp6002,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6002_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
-static int load_config_knc1_duals2(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-
-	return ret;
-}
 
 #define SAA716x_MODEL_KNC1_DUALS2	"KNC One Dual S2"
 #define SAA716x_DEV_KNC1_DUALS2		"1xDVB-S + 1xDVB-S/S2"
@@ -460,7 +433,6 @@ static struct saa716x_config saa716x_knc1_duals2_config = {
 	.model_name		= SAA716x_MODEL_KNC1_DUALS2,
 	.dev_type		= SAA716x_DEV_KNC1_DUALS2,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_knc1_duals2,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_knc1_duals2_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index bb07359d02ded..fd48db7a0f089 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1249,13 +1249,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static int load_config_s26400(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-
-	return ret;
-}
-
 #define SAA716x_MODEL_S2_6400_DUAL	"Technotrend S2 6400 Dual S2 Premium"
 #define SAA716x_DEV_S2_6400_DUAL	"2x DVB-S/S2 + Hardware decode"
 
@@ -1366,7 +1359,6 @@ static struct saa716x_config saa716x_s26400_config = {
 	.model_name		= SAA716x_MODEL_S2_6400_DUAL,
 	.dev_type		= SAA716x_DEV_S2_6400_DUAL,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_s26400,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_s26400_frontend_attach,
 	.irq_handler		= saa716x_ff_pci_irq,
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index a42199ea7450b..2d31cda52fa0f 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -307,13 +307,6 @@ static struct tda1004x_config tda1004x_vp6090_config = {
 	.request_firmware	= tda1004x_vp6090_request_firmware,
 };
 
-static int load_config_vp6090(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-
-	return ret;
-}
-
 static int vp6090_dvbs_set_voltage(struct dvb_frontend *fe, fe_sec_voltage_t voltage)
 {
 	struct saa716x_dev *saa716x = fe->dvb->priv;
@@ -383,7 +376,6 @@ static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_vp6090,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6090_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -417,12 +409,6 @@ static struct tda1004x_config tda1004x_atlantis_config = {
 	.request_firmware	= tda1004x_atlantis_request_firmware,
 };
 
-static int load_config_atlantis(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-	return ret;
-}
-
 static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
@@ -454,7 +440,6 @@ static struct saa716x_config saa716x_atlantis_config = {
 	.model_name		= SAA716x_MODEL_NXP_ATLANTIS,
 	.dev_type		= SAA716x_DEV_NXP_ATLANTIS,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_atlantis,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_atlantis_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -497,12 +482,6 @@ static struct tda827x_config tda827x_nemo_config = {
 	.agcf		= NULL,
 };
 
-static int load_config_nemo(struct saa716x_dev *saa716x)
-{
-    int ret = 0;
-    return ret;
-}
-
 static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
@@ -559,7 +538,6 @@ static struct saa716x_config saa716x_nemo_config = {
 	.model_name		= SAA716x_MODEL_NXP_NEMO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_nemo,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_nemo_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -578,12 +556,6 @@ static struct saa716x_config saa716x_nemo_config = {
 #define SAA716x_MODEL_AVERMEDIA_HC82	"Avermedia HC82 Express-54"
 #define SAA716x_DEV_AVERMEDIA_HC82	"DVB-T + Analog"
 
-static int load_config_averhc82(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-	return ret;
-}
-
 #if 0
 static struct zl10353_config saa716x_averhc82_zl10353_config = {
 	.demod_address		= 0x1f,
@@ -611,7 +583,6 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.model_name		= SAA716x_MODEL_AVERMEDIA_HC82,
 	.dev_type		= SAA716x_DEV_AVERMEDIA_HC82,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_averhc82,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_averhc82_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -621,12 +592,6 @@ static struct saa716x_config saa716x_averhc82_config = {
 #define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"
 #define SAA716x_DEV_AVERMEDIA_H788	"DVB-T + Analaog"
 
-static int load_config_averh788(struct saa716x_dev *saa716x)
-{
-	int ret = 0;
-	return ret;
-}
-
 static int saa716x_averh88_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
@@ -641,7 +606,6 @@ static struct saa716x_config saa716x_averh788_config = {
 	.model_name		= SAA716x_MODEL_AVERMEDIA_H788,
 	.dev_type		= SAA716x_DEV_AVERMEDIA_H788,
 	.boot_mode		= SAA716x_EXT_BOOT,
-	.load_config		= &load_config_averh788,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_averh88_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 4a8f4790d17df..53dca74afba02 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -82,8 +82,6 @@ struct saa716x_dev;
 struct saa716x_adapter;
 struct saa716x_spi_config;
 
-typedef int (*saa716x_load_config_t)(struct saa716x_dev *saa716x);
-
 struct saa716x_adap_config {
 	u32				ts_port;
 	void				(*worker)(unsigned long);
@@ -95,8 +93,6 @@ struct saa716x_config {
 
 	enum saa716x_boot_mode		boot_mode;
 
-	saa716x_load_config_t		load_config;
-
 	int				adapters;
 	int				frontends;
 

From 824311b5c95e47a41ecf933b8c187b76c2722b34 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 14 Nov 2011 21:15:49 +0100
Subject: [PATCH 201/364] saa716x_budget: Started with SkyStar 2 eXpress HD.

PCI IDs should be correct, frontend and port configuration is missing.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 44 +++++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_budget.h |  3 ++
 2 files changed, 46 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index fbed7fcf04e3b..271a03ffe8a43 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -439,12 +439,54 @@ static struct saa716x_config saa716x_knc1_duals2_config = {
 	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
+
+#define SAA716x_MODEL_SKYSTAR2_EXPRESS_HD	"SkyStar 2 eXpress HD"
+#define SAA716x_DEV_SKYSTAR2_EXPRESS_HD		"DVB-S/S2"
+
+static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
+					       int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+
+	if (count < saa716x->config->adapters) {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init",
+			count);
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
+			saa716x->pdev->subsystem_device);
+
+		dprintk(SAA716x_ERROR, 1, "Done!");
+		return 0;
+	}
+exit:
+	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	return -ENODEV;
+}
+
+static struct saa716x_config skystar2_express_hd_config = {
+	.model_name		= SAA716x_MODEL_SKYSTAR2_EXPRESS_HD,
+	.dev_type		= SAA716x_DEV_SKYSTAR2_EXPRESS_HD,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.adapters		= 1,
+	.frontend_attach	= skystar2_express_hd_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_100,
+	.adap_config		= {
+		{
+			/* Adapter 0 */
+			.ts_port = 3, /* using FGPI 3, TODO: check */
+			.worker = demux_worker
+		}
+	}
+};
+
+
 static struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
-	MAKE_ENTRY(KNC_One,		 KNC_Dual_S2,	  SAA7160, &saa716x_knc1_duals2_config),
+	MAKE_ENTRY(KNC_One, KNC_Dual_S2, SAA7160, &saa716x_knc1_duals2_config),
+	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
 	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_budget_pci_table);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 572cd6f856635..387c2027850d0 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -9,4 +9,7 @@
 #define KNC_One			0x1894
 #define KNC_Dual_S2		0x0110
 
+#define TECHNISAT		0x1AE4
+#define SKYSTAR2_EXPRESS_HD	0x0700
+
 #endif /* __SAA716x_BUDGET_H */

From 07cac06db326b31795264acd7e77411de5414233 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 15 Nov 2011 20:45:27 +0100
Subject: [PATCH 202/364] saa716x_hybrid: Add support for KWorld Dual DVB-T
 PE310.

This card is similar to the Atlantis reference design from NXP. Also
fixed the settings for the Atlantis:

- Activate the two video decoders (SAA7136) in the SAA7162.
- Use correct I2C buses.
- Activate the silent I2C buses hidden by the two internal SAA7136 of
  the SAA7162.
- Use correct settings for the TDA10046.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 120 +++++++++++++++++----
 drivers/media/pci/saa716x/saa716x_hybrid.h |   2 +
 2 files changed, 101 insertions(+), 21 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 2d31cda52fa0f..693141997c9b9 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -114,6 +114,20 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
 
+	/* enable decoders on 7162 */
+	if (pdev->device == SAA7162) {
+		saa716x_gpio_set_output(saa716x, 24);
+		saa716x_gpio_set_output(saa716x, 25);
+
+		saa716x_gpio_write(saa716x, 24, 0);
+		saa716x_gpio_write(saa716x, 25, 0);
+
+		msleep(10);
+
+		saa716x_gpio_write(saa716x, 24, 1);
+		saa716x_gpio_write(saa716x, 25, 1);
+	}
+
 	/* set default port mapping */
 	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F44);
 	/* enable FGPI3 and FGPI0 for TS input from Port 3 and 6 */
@@ -403,37 +417,88 @@ static struct tda1004x_config tda1004x_atlantis_config = {
 	.demod_address		= 0x8,
 	.invert			= 0,
 	.invert_oclk		= 0,
-	.xtal_freq		= TDA10046_XTAL_4M,
-	.agc_config		= TDA10046_AGC_DEFAULT,
-	.if_freq		= TDA10046_FREQ_3617,
+	.xtal_freq		= TDA10046_XTAL_16M,
+	.agc_config		= TDA10046_AGC_TDA827X,
+	.if_freq		= TDA10046_FREQ_045,
 	.request_firmware	= tda1004x_atlantis_request_firmware,
+	.tuner_address          = 0x60,
+};
+
+static struct tda827x_config tda827x_atlantis_config = {
+	.init		= NULL,
+	.sleep		= NULL,
+	.config		= 0,
+	.switch_addr	= 0,
+	.agcf		= NULL,
 };
 
-static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter, int count)
+static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter,
+					    int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[count];
+	struct saa716x_i2c *i2c;
+	u8 i2c_buf[3] = { 0x05, 0x23, 0x01 }; /* activate the silent I2C bus */
+	struct i2c_msg msg = {
+		.addr  = 0x42 >> 1,
+		.flags = 0,
+		.buf   = i2c_buf,
+		.len   = sizeof(i2c_buf)
+	};
+
+	if (count < saa716x->config->adapters) {
+		u32 reset_gpio;
+
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init",
+			count);
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
+			saa716x->pdev->subsystem_device);
+
+		if (count == 0) {
+			reset_gpio = 14;
+			i2c = &saa716x->i2c[SAA716x_I2C_BUS_A];
+		} else {
+			reset_gpio = 15;
+			i2c = &saa716x->i2c[SAA716x_I2C_BUS_B];
+		}
 
-	if (count  == 0) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+		/* activate the silent I2C bus */
+		i2c_transfer(&i2c->i2c_adapter, &msg, 1);
 
-		saa716x_gpio_set_output(saa716x, 14);
-		saa716x_gpio_write(saa716x, 14, 1);
-		msleep(100);
+		saa716x_gpio_set_output(saa716x, reset_gpio);
+
+		/* Reset the demodulator */
+		saa716x_gpio_write(saa716x, reset_gpio, 1);
+		msleep(10);
+		saa716x_gpio_write(saa716x, reset_gpio, 0);
+		msleep(10);
+		saa716x_gpio_write(saa716x, reset_gpio, 1);
+		msleep(10);
 
-		adapter->fe = tda10046_attach(&tda1004x_atlantis_config, &i2c->i2c_adapter);
-		if (adapter->fe == NULL) {
-			dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
-			return -ENODEV;
+		adapter->fe = tda10046_attach(&tda1004x_atlantis_config,
+					      &i2c->i2c_adapter);
+		if (adapter->fe == NULL)
+			goto exit;
+
+		dprintk(SAA716x_ERROR, 1,
+			"found TDA10046 DVB-T frontend @0x%02x",
+			tda1004x_atlantis_config.demod_address);
+
+		if (dvb_attach(tda827x_attach, adapter->fe,
+			       tda1004x_atlantis_config.tuner_address,
+			       &i2c->i2c_adapter, &tda827x_atlantis_config)) {
+			dprintk(SAA716x_ERROR, 1, "found TDA8275 tuner @0x%02x",
+				tda1004x_atlantis_config.tuner_address);
 		} else {
-			dprintk(SAA716x_ERROR, 1, "Done!");
-			return 0;
+			goto exit;
 		}
+
+		dprintk(SAA716x_ERROR, 1, "Done!");
+		return 0;
 	}
 
-	return 0;
+exit:
+	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	return -ENODEV;
 }
 
 static struct saa716x_config saa716x_atlantis_config = {
@@ -444,6 +509,18 @@ static struct saa716x_config saa716x_atlantis_config = {
 	.frontend_attach	= saa716x_atlantis_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
+	.adap_config		= {
+		{
+			/* Adapter 0 */
+			.ts_port = 3, /* using FGPI 3 */
+			.worker = demux_worker
+		},
+		{
+			/* Adapter 1 */
+			.ts_port = 0, /* using FGPI 0 */
+			.worker = demux_worker
+		}
+	}
 };
 
 /*
@@ -615,10 +692,11 @@ static struct saa716x_config saa716x_averh788_config = {
 static struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
-	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7162, &saa716x_atlantis_config),
-	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_H788, SAA7160, &saa716x_averh788_config),
+	MAKE_ENTRY(KWORLD, KWORLD_DVB_T_PE310, SAA7162, &saa716x_atlantis_config),
+	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7162, &saa716x_atlantis_config),
+	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
 	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_hybrid_pci_table);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index ff8cb7f816278..df34a59b2aee7 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -3,9 +3,11 @@
 
 #define TWINHAN_TECHNOLOGIES	0x1822
 #define AVERMEDIA		0x1461
+#define KWORLD			0x17DE
 
 #define TWINHAN_VP_6090		0x0027
 #define AVERMEDIA_HC82		0x2355
 #define AVERMEDIA_H788		0x1455
+#define KWORLD_DVB_T_PE310	0x7521
 
 #endif /* __SAA716x_HYBRID_H */

From ac910b2bfde8b29c264669e12b68c5f5d7339aac Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 18 Nov 2011 20:05:02 +0100
Subject: [PATCH 203/364] saa716x: Fix I2C bus assignment on SAA7160ET.

The SAA7160ET has revision 3 that lead to wrong I2C bus assignment.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.h | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 2aca0fbd2d6fc..9210654ec7e7c 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -8,11 +8,7 @@
 		"SAA716x I2C Core 1" :	\
 		"SAA716x I2C Core 0"))
 
-#define SAA716x_I2C_BUS(__x) (( 				\
-	(__x == 1) ?						\
-	((saa716x->revision > 2) ? 0x0000b000 : 0x0000c000) :	\
-	((saa716x->revision > 2) ? 0x0000c000 : 0x0000b000)	\
-))
+#define SAA716x_I2C_BUS(__x) ((__x == 1) ? 0x0000c000 : 0x0000b000)
 
 #define SAA716x_I2C_BUS_A		0x01
 #define SAA716x_I2C_BUS_B		0x00

From e3cbbd4ad0ec1f983d6ec5dd6cc0bb10aaea7df7 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 20 Nov 2011 18:23:35 +0100
Subject: [PATCH 204/364] saa716x: Fix stack corruption when parsing ROM info.

When the address size of a device descriptor in EEPROM was longer than
1 byte, the stack was corrupted.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_rom.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index e254b90ca5d3b..100ebf1dcd0e8 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -779,7 +779,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 	*offset += device->struct_size;
 
 	if (device->addr_size) {
-		memcpy(&address, &buf[*offset], device->addr_size);
+		address = buf[*offset];
 		address >>= 1;
 		*offset += device->addr_size;
 	}

From 05bb188c4a76e36dcbf16a4116bf22b666fa4af4 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 20 Nov 2011 18:25:45 +0100
Subject: [PATCH 205/364] saa716x: Fix memory leak in ROM parsing.

After the contents of the EEPROM was parsed, the device structure
pointer was not freed.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_rom.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 100ebf1dcd0e8..1851ee5a5d0c8 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -992,7 +992,7 @@ int saa716x_eeprom_data(struct saa716x_dev *saa716x)
 	device = kzalloc(sizeof (struct saa716x_devinfo) * rom_header.devices, GFP_KERNEL);
 	if (device == NULL) {
 		dprintk(SAA716x_ERROR, 1, "ERROR: out of memory");
-		goto err1;
+		goto err0;
 	}
 
 	for (i = 0; i < rom_header.devices; i++) {
@@ -1007,6 +1007,8 @@ int saa716x_eeprom_data(struct saa716x_dev *saa716x)
 		}
 	}
 
+	kfree(device);
+
 	return 0;
 
 err1:

From 639949272a467ce8814b14f1997974b95326f3c5 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 20 Nov 2011 18:37:09 +0100
Subject: [PATCH 206/364] saa716x: Skip unknown device descriptors when parsing
 the ROM

When there were unknown device descriptors detected during parsing of
the EEPROM's data, the corresponding bytes where not skipped, so that
following device descriptors could not be parsed.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_rom.c | 287 ++++++++++++++----------
 1 file changed, 169 insertions(+), 118 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 1851ee5a5d0c8..010a7a8cc25c9 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -720,6 +720,33 @@ static int saa716x_streamdev_info(struct saa716x_dev *saa716x,
 	return 0;
 }
 
+static int saa716x_unknown_device_info(struct saa716x_dev *saa716x,
+				       u8 *buf,
+				       u32 *offset)
+{
+	u8 size;
+	u8 ext_size = 0;
+
+	size = buf[*offset];
+	if (size > 1)
+		ext_size = buf[*offset + size -1];
+
+	saa716x_descriptor_dbg(saa716x, buf, offset, size, ext_size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Size=%d bytes\n",
+		saa716x->pdev->device,
+		size);
+
+	dprintk(SAA716x_NOTICE, 0,
+		"        SAA%02x ROM: Ext data=%d bytes\n\n",
+		saa716x->pdev->device,
+		ext_size);
+
+	*offset += size + ext_size;
+	return 0;
+}
+
 
 static void saa716x_device_dbg(struct saa716x_dev *saa716x,
 			       u8 *buf,
@@ -829,138 +856,162 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 		device->extd_data_size);
 
 	if (device->extd_data_size) {
-		if (device->device_type & DECODER_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found decoder device\n",
-				saa716x->pdev->device);
-
-			saa716x_decoder_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & GPIO_SOURCE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found GPIO device\n",
-				saa716x->pdev->device);
-
-			saa716x_gpio_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & VIDEO_DECODER) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Video Decoder device\n",
-				saa716x->pdev->device);
-
-			saa716x_video_decoder_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & AUDIO_DECODER) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Audio Decoder device\n",
-				saa716x->pdev->device);
-
-			saa716x_audio_decoder_info(saa716x, buf, offset);
-		}
+		u32 mask;
 
-		if (device->device_type & EVENT_SOURCE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Event source\n",
-				saa716x->pdev->device);
+		mask = 0x00000001;
+		while (mask) {
+			if (device->device_type & mask) {
+				switch (mask) {
+				case DECODER_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found decoder device\n",
+						saa716x->pdev->device);
 
-			saa716x_event_source_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & CROSSBAR) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Crossbar device\n",
-				saa716x->pdev->device);
-
-			saa716x_crossbar_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & TUNER_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Tuner device\n",
-				saa716x->pdev->device);
-
-			saa716x_tuner_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & PLL_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found PLL device\n",
-				saa716x->pdev->device);
-
-			saa716x_pll_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & CHANNEL_DECODER) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Channel Demodulator device\n",
-				saa716x->pdev->device);
-
-			saa716x_channel_decoder_info(saa716x, buf, offset);
-		}
+					saa716x_decoder_info(saa716x, buf, offset);
+					break;
+
+				case GPIO_SOURCE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found GPIO device\n",
+						saa716x->pdev->device);
 
-		if (device->device_type & RDS_DECODER) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found RDS Decoder device\n",
-				saa716x->pdev->device);
-		}
+					saa716x_gpio_info(saa716x, buf, offset);
+					break;
+
+				case VIDEO_DECODER:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Video Decoder device\n",
+						saa716x->pdev->device);
 
-		if (device->device_type & ENCODER_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Encoder device\n",
-				saa716x->pdev->device);
+					saa716x_video_decoder_info(saa716x, buf, offset);
+					break;
+
+				case AUDIO_DECODER:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Audio Decoder device\n",
+						saa716x->pdev->device);
 
-			saa716x_encoder_info(saa716x, buf, offset);
-		}
+					saa716x_audio_decoder_info(saa716x, buf, offset);
+					break;
+
+				case EVENT_SOURCE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Event source\n",
+						saa716x->pdev->device);
 
-		if (device->device_type & IR_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found IR device\n",
-				saa716x->pdev->device);
+					saa716x_event_source_info(saa716x, buf, offset);
+					break;
+
+				case CROSSBAR:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Crossbar device\n",
+						saa716x->pdev->device);
+
+					saa716x_crossbar_info(saa716x, buf, offset);
+					break;
+
+				case TUNER_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Tuner device\n",
+						saa716x->pdev->device);
+
+					saa716x_tuner_info(saa716x, buf, offset);
+					break;
+
+				case PLL_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found PLL device\n",
+						saa716x->pdev->device);
+
+					saa716x_pll_info(saa716x, buf, offset);
+					break;
+
+				case CHANNEL_DECODER:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Channel Demodulator device\n",
+						saa716x->pdev->device);
+
+					saa716x_channel_decoder_info(saa716x, buf, offset);
+					break;
+
+				case RDS_DECODER:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found RDS Decoder device\n",
+						saa716x->pdev->device);
+
+					saa716x_unknown_device_info(saa716x, buf, offset);
+					break;
+
+				case ENCODER_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Encoder device\n",
+						saa716x->pdev->device);
+
+					saa716x_encoder_info(saa716x, buf, offset);
+					break;
+
+				case IR_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found IR device\n",
+						saa716x->pdev->device);
+
+					saa716x_ir_info(saa716x, buf, offset);
+					break;
+
+				case EEPROM_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found EEPROM device\n",
+						saa716x->pdev->device);
+
+					saa716x_eeprom_info(saa716x, buf, offset);
+					break;
 
-			saa716x_ir_info(saa716x, buf, offset);
-		}
+				case NOISE_FILTER:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Noise filter device\n",
+						saa716x->pdev->device);
+
+					saa716x_filter_info(saa716x, buf, offset);
+					break;
 
-		if (device->device_type & EEPROM_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found EEPROM device\n",
-				saa716x->pdev->device);
+				case LNx_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found LNx device\n",
+						saa716x->pdev->device);
+
+					saa716x_unknown_device_info(saa716x, buf, offset);
+					break;
 
-			saa716x_eeprom_info(saa716x, buf, offset);
-		}
+				case STREAM_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found streaming device\n",
+						saa716x->pdev->device);
+
+					saa716x_streamdev_info(saa716x, buf, offset);
+					break;
 
-		if (device->device_type & NOISE_FILTER) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Noise filter device\n",
-				saa716x->pdev->device);
+				case CONFIGSPACE_DEVICE:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found Configspace device\n",
+						saa716x->pdev->device);
+
+					saa716x_unknown_device_info(saa716x, buf, offset);
+					break;
 
-			saa716x_filter_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & LNx_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found LNx device\n",
-				saa716x->pdev->device);
-		}
-
-		if (device->device_type & STREAM_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found streaming device\n",
-				saa716x->pdev->device);
-
-			saa716x_streamdev_info(saa716x, buf, offset);
-		}
-
-		if (device->device_type & CONFIGSPACE_DEVICE) {
-			dprintk(SAA716x_NOTICE, 0,
-				"        SAA%02x ROM: Found Configspace device\n",
-				saa716x->pdev->device);
+				default:
+					dprintk(SAA716x_NOTICE, 0,
+						"        SAA%02x ROM: Found unknown device\n",
+						saa716x->pdev->device);
+
+					saa716x_unknown_device_info(saa716x, buf, offset);
+					break;
+				}
+			}
+			mask <<= 1;
 		}
 	}
 
-	dprintk(SAA716x_DEBUG, 0, "\n");
+	dprintk(SAA716x_NOTICE, 0, "\n");
 
 	return 0;
 }

From 219be30f83eff3c9bc03b727bc66e31eeeb32b2d Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 20 Nov 2011 18:47:05 +0100
Subject: [PATCH 207/364] saa716x: change verbose level for some dprintk

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_rom.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 010a7a8cc25c9..629fb26572396 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -69,7 +69,7 @@ static int saa716x_read_rombytes(struct saa716x_dev *saa716x, u16 reg, u16 len,
 			/* last message */
 			if (len % DUMP_BYTES) {
 				msg[1].len = len % DUMP_BYTES;
-				dprintk(SAA716x_ERROR, 1, "Last Message length=%d", len % DUMP_BYTES);
+				dprintk(SAA716x_DEBUG, 1, "Last Message length=%d", len % DUMP_BYTES);
 			} else {
 				msg[1].len = DUMP_BYTES;
 			}
@@ -99,7 +99,7 @@ static int saa716x_get_offset(struct saa716x_dev *saa716x, u8 *buf, u32 *offset)
 		if (!(strncmp("START", buf + i, 5)))
 			break;
 	}
-	dprintk(SAA716x_ERROR, 1, "Offset @ %d", i);
+	dprintk(SAA716x_INFO, 1, "Offset @ %d", i);
 	*offset = i;
 
 	return 0;
@@ -1047,7 +1047,7 @@ int saa716x_eeprom_data(struct saa716x_dev *saa716x)
 	}
 
 	for (i = 0; i < rom_header.devices; i++) {
-		dprintk(SAA716x_ERROR, 0, "    SAA%02x ROM: ===== Device %d =====\n",
+		dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: ===== Device %d =====\n",
 			saa716x->pdev->device,
 			i);
 

From 2006b91546ffca56f8c8b5e20a5b5a2b6c121d52 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 20 Nov 2011 18:48:16 +0100
Subject: [PATCH 208/364] saa716x_ff: Enable now working EEPROM parsing.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index fd48db7a0f089..98d2e0bf4445b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -744,12 +744,11 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
-#if 0
+
 	err = saa716x_eeprom_data(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
 	}
-#endif
 
 	/* enable FGPI2 and FGPI3 for TS inputs */
 	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x0689F04);

From 9185b77edb60a664f99d5f9e143b7e265249f88e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 22 Nov 2011 21:01:13 +0100
Subject: [PATCH 209/364] saa716x_ff: Add error message when FPGA is not
 responding.

This error is often caused by a not connected power supply.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 98d2e0bf4445b..cd411edf4ede6 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -125,8 +125,11 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 
 	release_firmware(fw);
 
-	if (!fpgaDone)
+	if (!fpgaDone) {
+		printk(KERN_ERR "SAA716x FF FPGA is not responding, did you "
+				"connect the power supply?\n");
 		return -EINVAL;
+	}
 
 	sti7109->fpga_version = SAA716x_EPRD(PHI_1, FPGA_ADDR_VERSION);
 	printk(KERN_INFO "SAA716x FF FPGA version %X.%02X\n",

From 82476b262a349e1b27aeec02e7b5876456547674 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 22 Nov 2011 21:24:35 +0100
Subject: [PATCH 210/364] saa716x_budget: Add frontend attach for the Skystar2
 eXpress HD.

The STV0903 and STV6110 should work now, the Intersil 9491 is still
missing, so no LNB power yet.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 78 ++++++++++++++++++++++
 1 file changed, 78 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 271a03ffe8a43..74efca2ba635b 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -34,6 +34,8 @@
 #include "saa716x_priv.h"
 
 #include "mb86a16.h"
+#include "stv6110x.h"
+#include "stv090x.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -443,10 +445,44 @@ static struct saa716x_config saa716x_knc1_duals2_config = {
 #define SAA716x_MODEL_SKYSTAR2_EXPRESS_HD	"SkyStar 2 eXpress HD"
 #define SAA716x_DEV_SKYSTAR2_EXPRESS_HD		"DVB-S/S2"
 
+static struct stv090x_config skystar2_stv090x_config = {
+	.device			= STV0903,
+	.demod_mode		= STV090x_SINGLE,
+	.clk_mode		= STV090x_CLK_EXT,
+
+	.xtal			= 13500000,
+	.address		= 0x68,
+
+	.ts1_mode		= STV090x_TSMODE_DVBCI,
+	.ts2_mode		= STV090x_TSMODE_SERIAL_CONTINUOUS,
+
+	.repeater_level		= STV090x_RPTLEVEL_16,
+
+	.tuner_init		= NULL,
+	.tuner_sleep		= NULL,
+	.tuner_set_mode		= NULL,
+	.tuner_set_frequency	= NULL,
+	.tuner_get_frequency	= NULL,
+	.tuner_set_bandwidth	= NULL,
+	.tuner_get_bandwidth	= NULL,
+	.tuner_set_bbgain	= NULL,
+	.tuner_get_bbgain	= NULL,
+	.tuner_set_refclk	= NULL,
+	.tuner_get_status	= NULL,
+};
+
+static struct stv6110x_config skystar2_stv6110x_config = {
+	.addr			= 0x60,
+	.refclk			= 27000000,
+	.clk_div		= 2,
+};
+
 static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 					       int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[SAA716x_I2C_BUS_A];
+	struct stv6110x_devctl *ctl;
 
 	if (count < saa716x->config->adapters) {
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init",
@@ -454,6 +490,48 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
 			saa716x->pdev->subsystem_device);
 
+		adapter->fe = dvb_attach(stv090x_attach,
+					 &skystar2_stv090x_config,
+					 &i2c->i2c_adapter,
+					 STV090x_DEMODULATOR_0);
+
+		if (adapter->fe) {
+			dprintk(SAA716x_NOTICE, 1, "found STV0903 @0x%02x",
+				skystar2_stv090x_config.address);
+		} else {
+			goto exit;
+		}
+
+		ctl = dvb_attach(stv6110x_attach,
+				 adapter->fe,
+				 &skystar2_stv6110x_config,
+				 &i2c->i2c_adapter);
+
+		if (ctl) {
+			dprintk(SAA716x_NOTICE, 1, "found STV6110(A) @0x%02x",
+				skystar2_stv6110x_config.addr);
+
+			skystar2_stv090x_config.tuner_init	    = ctl->tuner_init;
+			skystar2_stv090x_config.tuner_sleep	    = ctl->tuner_sleep;
+			skystar2_stv090x_config.tuner_set_mode	    = ctl->tuner_set_mode;
+			skystar2_stv090x_config.tuner_set_frequency = ctl->tuner_set_frequency;
+			skystar2_stv090x_config.tuner_get_frequency = ctl->tuner_get_frequency;
+			skystar2_stv090x_config.tuner_set_bandwidth = ctl->tuner_set_bandwidth;
+			skystar2_stv090x_config.tuner_get_bandwidth = ctl->tuner_get_bandwidth;
+			skystar2_stv090x_config.tuner_set_bbgain    = ctl->tuner_set_bbgain;
+			skystar2_stv090x_config.tuner_get_bbgain    = ctl->tuner_get_bbgain;
+			skystar2_stv090x_config.tuner_set_refclk    = ctl->tuner_set_refclk;
+			skystar2_stv090x_config.tuner_get_status    = ctl->tuner_get_status;
+
+			/* call the init function once to initialize
+			   tuner's clock output divider and demod's
+			   master clock */
+			if (adapter->fe->ops.init)
+				adapter->fe->ops.init(adapter->fe);
+		} else {
+			goto exit;
+		}
+
 		dprintk(SAA716x_ERROR, 1, "Done!");
 		return 0;
 	}

From 60897de051e385d344fa23577cdd24c5e226f941 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 25 Nov 2011 19:39:03 +0100
Subject: [PATCH 211/364] saa716x_ff: Reset the frontend on the SkyStar2
 eXpress HD.

From looking at photographs it seems that the RESETB pin of the
STV0903 is connected to GPIO20 of the SAA7160ET.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 74efca2ba635b..14c7da77ad0b4 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -490,6 +490,16 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
 			saa716x->pdev->subsystem_device);
 
+		saa716x_gpio_set_output(saa716x, 20);
+
+		/* Reset the demodulator */
+		saa716x_gpio_write(saa716x, 20, 1);
+		msleep(10);
+		saa716x_gpio_write(saa716x, 20, 0);
+		msleep(10);
+		saa716x_gpio_write(saa716x, 20, 1);
+		msleep(10);
+
 		adapter->fe = dvb_attach(stv090x_attach,
 					 &skystar2_stv090x_config,
 					 &i2c->i2c_adapter,

From e8c4a8612ec69eba195db2101ce4350186225c40 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 2 Jan 2012 20:34:27 +0100
Subject: [PATCH 212/364] saa716x_ff: support CEC remote codes.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_ir.c | 36 +++++++++++++----------
 1 file changed, 21 insertions(+), 15 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 55fcd057a90fc..35624789aa862 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -72,21 +72,27 @@ static void ir_emit_key(unsigned long parm)
 	u16 keycode;
 
 	/* extract device address and data */
-	switch (ir->protocol) {
-	case IR_RC5: /* extended RC5: 5 bits device address, 7 bits data */
-		addr = (ircom >> 6) & 0x1f;
-		/* data bits 1..6 */
-		data = ircom & 0x3f;
-		/* data bit 7 (inverted) */
-		if (!(ircom & 0x1000))
-			data |= 0x40;
-		toggle = ircom & 0x0800;
-		break;
-
-	default:
-		printk(KERN_ERR "%s: invalid protocol %x\n",
-			__func__, ir->protocol);
-		return;
+	if (ircom & 0x80000000) { /* CEC remote command */
+		addr = 0;
+		data = ircom & 0x7F;
+		toggle = 0;
+	} else {
+		switch (ir->protocol) {
+		case IR_RC5: /* extended RC5: 5 bits device address, 7 bits data */
+			addr = (ircom >> 6) & 0x1f;
+			/* data bits 1..6 */
+			data = ircom & 0x3f;
+			/* data bit 7 (inverted) */
+			if (!(ircom & 0x1000))
+				data |= 0x40;
+			toggle = ircom & 0x0800;
+			break;
+
+		default:
+			printk(KERN_ERR "%s: invalid protocol %x\n",
+				__func__, ir->protocol);
+			return;
+		}
 	}
 
 	input_event(ir->input_dev, EV_MSC, MSC_RAW, (addr << 16) | data);

From 57ee29d52a1fdfe0cecda513624a18f8dd9f3bb0 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 19 Jan 2012 21:36:16 +0100
Subject: [PATCH 213/364] saa716x: Use interrupts for I2C writes instead of
 polling.

Up to now, the I2C_STATUS register was polled when waiting for a data
byte to be sent out via I2C. This could lead to high CPU load, e.g.
when tuning during bad reception conditions. With this change the write
access to the I2C is using interrupts when waiting for data to be sent.
Now the CPU load in similar conditions is around 0.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  1 +
 drivers/media/pci/saa716x/saa716x_ff_main.c | 19 +++++++-
 drivers/media/pci/saa716x/saa716x_i2c.c     | 54 +++++++++++++++------
 drivers/media/pci/saa716x/saa716x_i2c.h     |  2 +
 4 files changed, 60 insertions(+), 16 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 8381a9fb4a87f..ef8682f391298 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -139,6 +139,7 @@ struct sti7109_dev {
 	u32			int_count_enable;
 	u32			total_int_count;
 	u32			fgpi_int_count[2];
+	u32			i2c_int_count[2];
 	u32			ext_int_total_count;
 	u32			ext_int_source_count[16];
 	u32			last_int_ticks;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index cd411edf4ede6..38d7a0d1d8778 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -684,6 +684,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	sti7109->int_count_enable = int_count_enable;
 	sti7109->total_int_count = 0;
 	memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
+	memset(sti7109->i2c_int_count, 0, sizeof(sti7109->i2c_int_count));
 	sti7109->ext_int_total_count = 0;
 	memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
 	sti7109->last_int_ticks = jiffies;
@@ -995,6 +996,19 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		//dprintk(SAA716x_INFO, 1, "msiStatusH: %08X", msiStatusH);
 	}
 
+	if (msiStatusH & MSI_INT_I2CINT_0) {
+		if (sti7109->int_count_enable)
+			sti7109->i2c_int_count[0]++;
+		saa716x->i2c[0].i2c_op = 0;
+		wake_up(&saa716x->i2c[0].i2c_wq);
+	}
+	if (msiStatusH & MSI_INT_I2CINT_1) {
+		if (sti7109->int_count_enable)
+			sti7109->i2c_int_count[1]++;
+		saa716x->i2c[1].i2c_op = 0;
+		wake_up(&saa716x->i2c[1].i2c_wq);
+	}
+
 	if (msiStatusH & MSI_INT_EXTINT_0) {
 
 		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
@@ -1219,11 +1233,13 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 	if (sti7109->int_count_enable) {
 		if (jiffies - sti7109->last_int_ticks >= HZ) {
-			dprintk(SAA716x_INFO, 1, "int count: t: %d, f:%d %d, "
+			dprintk(SAA716x_INFO, 1, "int count: t: %d, f:%d %d, i:%d %d,"
 				"e: %d (%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)",
 				sti7109->total_int_count,
 				sti7109->fgpi_int_count[0],
 				sti7109->fgpi_int_count[1],
+				sti7109->i2c_int_count[0],
+				sti7109->i2c_int_count[1],
 				sti7109->ext_int_total_count,
 				sti7109->ext_int_source_count[0],
 				sti7109->ext_int_source_count[1],
@@ -1243,6 +1259,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				sti7109->ext_int_source_count[15]);
 			sti7109->total_int_count = 0;
 			memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
+			memset(sti7109->i2c_int_count, 0, sizeof(sti7109->i2c_int_count));
 			sti7109->ext_int_total_count = 0;
 			memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
 			sti7109->last_int_ticks = jiffies;
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index c18e870f3106e..8253a91f31ab0 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -27,6 +27,8 @@
 #define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
 				 I2C_RECEIVE_CLEAR)
 
+#define SAA716x_I2C_USE_IRQ	1
+
 static const char* state[] = {
 	"Idle",
 	"DoneStop",
@@ -235,28 +237,21 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	/* Disable all interrupts and clear status */
 	SAA716x_EPWR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
 	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
-#if 0
+
+#if SAA716x_I2C_USE_IRQ
 	/* Enabled interrupts:
-	* Master Transaction Done (),
-	* Master Arbitration Failure,
-	* Master Transaction No Ack,
-	* I2C Error IBE
+	* Master Transaction Done,
 	* Master Transaction Data Request
-	* (0xc7)
+	* (0x81)
 	*/
 	msleep(5);
 
-	SAA716x_EPWR(I2C_DEV[i],
-			INT_SET_ENABLE,
-			I2C_MASTER_INTERRUPT_MTDR	| \
-			I2C_ERROR_IBE		| \
-			I2C_ENABLE_MTNA		| \
-			I2C_ENABLE_MAF		| \
-			I2C_ENABLE_MTD);
+	SAA716x_EPWR(I2C_DEV, INT_SET_ENABLE,
+		I2C_SET_ENABLE_MTDR | I2C_SET_ENABLE_MTD);
 
 	/* Check interrupt enable status */
-	reg = SAA716x_EPRD(I2C_DEV[i], INT_ENABLE);
-	if (reg != 0xc7) {
+	reg = SAA716x_EPRD(I2C_DEV, INT_ENABLE);
+	if (reg != 0x81) {
 
 		dprintk(SAA716x_ERROR, 1,
 			"Adapter (%d) %s Interrupt enable failed, Exiting !",
@@ -302,6 +297,9 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	struct saa716x_dev *saa716x = i2c->saa716x;
 	int i, err = 0;
 	u32 reg;
+#if SAA716x_I2C_USE_IRQ
+	unsigned long timeout;
+#endif
 
 	/* Check FIFO status before TX */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
@@ -327,9 +325,27 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 		}
 	}
 
+	i2c->i2c_op = 1;
+	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+
 	/* Write to FIFO */
 	SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
 
+#if SAA716x_I2C_USE_IRQ
+	timeout = HZ/100 + 1; /* 10ms */
+	timeout = wait_event_interruptible_timeout(i2c->i2c_wq, i2c->i2c_op == 0, timeout);
+	if (timeout == -ERESTARTSYS || i2c->i2c_op) {
+		SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			err = -ERESTARTSYS;
+			goto exit;
+		}
+		dprintk(SAA716x_ERROR, 1, "timed out waiting for end of xfer!");
+		err = -EIO;
+		goto exit;
+	}
+#endif
 	/* Check for data write */
 	for (i = 0; i < 1000; i++) {
 		/* TODO! check for hotplug devices */
@@ -512,6 +528,9 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 		mutex_init(&i2c->i2c_lock);
 
+		init_waitqueue_head(&i2c->i2c_wq);
+		i2c->i2c_op = 0;
+
 		i2c->i2c_dev	= i;
 		i2c->i2c_rate	= saa716x->config->i2c_rate;
 		adapter		= &i2c->i2c_adapter;
@@ -545,6 +564,11 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		i2c++;
 	}
 
+#if SAA716x_I2C_USE_IRQ
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_0);
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_1);
+#endif
+
 	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully initialized",
 		saa716x->pdev->device);
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 9210654ec7e7c..9ed6de11cce94 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -31,6 +31,8 @@ struct saa716x_i2c {
 
 	u32				stat_tx_prior;
 	u32				stat_tx_done;
+	wait_queue_head_t		i2c_wq;
+	int				i2c_op;
 };
 
 extern int saa716x_i2c_init(struct saa716x_dev *saa716x);

From 2dc16fe870228e34b4354b956f70da8a7c412dd0 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 22 Jan 2012 19:06:29 +0100
Subject: [PATCH 214/364] saa716x: separate I2C reading and writing into two
 functions.

This makes things a bit clearer. It's also a preparation to do further
optimizations regarding interrupt use.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 123 +++++++++++++++++-------
 1 file changed, 86 insertions(+), 37 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 8253a91f31ab0..e219383e37fbe 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -397,6 +397,85 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 	return err;
 }
 
+static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
+				 u16 addr, u8 *buf, u16 len, u8 add_stop)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	u32 data;
+	int err;
+	int i;
+
+	/* first write START with I2C address */
+	data = I2C_START_BIT | (addr << 1);
+	dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x", len, data);
+	err = saa716x_i2c_send(i2c, I2C_DEV, data);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "Address write failed");
+		goto exit;
+	}
+
+	/* now write the data */
+	for (i = 0; i < len; i++) {
+		data = buf[i];
+		dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n", i, data);
+		if (add_stop && i == (len - 1))
+			data |= I2C_STOP_BIT;
+		err = saa716x_i2c_send(i2c, I2C_DEV, data);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Data send failed");
+			goto exit;
+		}
+	}
+
+	return 0;
+
+exit:
+	dprintk(SAA716x_ERROR, 1, "Error writing data, err=%d", err);
+	return err;
+}
+
+static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
+				u16 addr, u8 *buf, u16 len, u8 add_stop)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	u32 data;
+	int err;
+	int i;
+
+	/* first write START with I2C address */
+	data = I2C_START_BIT | (addr << 1) | 1;
+	dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x", len, data);
+	err = saa716x_i2c_send(i2c, I2C_DEV, data);
+	if (err < 0) {
+		dprintk(SAA716x_ERROR, 1, "Address write failed");
+		goto exit;
+	}
+
+	/* now read the data */
+	for (i = 0; i < len; i++) {
+		data = 0x00; /* dummy write for reading */
+		if (add_stop && i == (len - 1))
+			data |= I2C_STOP_BIT;
+		err = saa716x_i2c_send(i2c, I2C_DEV, data);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Data send failed");
+			goto exit;
+		}
+		err = saa716x_i2c_recv(i2c, I2C_DEV, &data);
+		if (err < 0) {
+			dprintk(SAA716x_ERROR, 1, "Data receive failed");
+			goto exit;
+		}
+		dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n", i, data);
+		buf[i] = data;
+	}
+	return 0;
+
+exit:
+	dprintk(SAA716x_ERROR, 1, "Error reading data, err=%d", err);
+	return err;
+}
+
 static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
 {
 	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
@@ -405,7 +484,6 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 	u32 DEV = SAA716x_I2C_BUS(i2c->i2c_dev);
 	int i, j, err = 0;
 	int t;
-	u32 data;
 
 	dprintk(SAA716x_DEBUG, 0, "\n");
 	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
@@ -413,47 +491,18 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 
 	for (t = 0; t < 3; t++) {
 		for (i = 0; i < num; i++) {
-			/* first write START width I2C address */
-			data = (msgs[i].addr << 1) | I2C_START_BIT;
 			if (msgs[i].flags & I2C_M_RD)
-				data |= 1;
-			dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x",
-				msgs[i].len, data);
-			err = saa716x_i2c_send(i2c, DEV, data);
+				err = saa716x_i2c_read_msg(i2c, DEV,
+					msgs[i].addr, msgs[i].buf, msgs[i].len,
+					i == (num - 1));
+			else
+				err = saa716x_i2c_write_msg(i2c, DEV,
+					msgs[i].addr, msgs[i].buf, msgs[i].len,
+					i == (num - 1));
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Address write failed");
 				err = -EIO;
 				goto retry;
 			}
-			/* now read or write the data */
-			for (j = 0; j < msgs[i].len; j++) {
-				if (msgs[i].flags & I2C_M_RD)
-					data = 0x00; /* dummy write for reading */
-				else {
-					data = msgs[i].buf[j];
-					dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n",
-						j, data);
-				}
-				if (i == (num - 1) && j == (msgs[i].len - 1))
-					data |= I2C_STOP_BIT;
-				err = saa716x_i2c_send(i2c, DEV, data);
-				if (err < 0) {
-					dprintk(SAA716x_ERROR, 1, "Data send failed");
-					err = -EIO;
-					goto retry;
-				}
-				if (msgs[i].flags & I2C_M_RD) {
-					err = saa716x_i2c_recv(i2c, DEV, &data);
-					if (err < 0) {
-						dprintk(SAA716x_ERROR, 1, "Data receive failed");
-						err = -EIO;
-						goto retry;
-					}
-					dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n",
-						j, data);
-					msgs[i].buf[j] = data;
-				}
-			}
 		}
 		break;
 retry:

From 3fed1979a46eb084472013ee1ad3bf3c8320a1b9 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 23 Jan 2012 18:33:33 +0100
Subject: [PATCH 215/364] saa716x_ff: change remote event printk to hexadecimal
 output.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 38d7a0d1d8778..48089ace59d97 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1178,9 +1178,9 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
 
 			if (remote_event == 0) {
-				dprintk(SAA716x_ERROR, 1, "REMOTE EVENT: %u ignored", remote_event);
+				dprintk(SAA716x_ERROR, 1, "REMOTE EVENT: %X ignored", remote_event);
 			} else {
-				dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %u", remote_event);
+				dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %X", remote_event);
 				saa716x_ir_handler(saa716x, remote_event);
 			}
 		}

From dc153497c2392dee5efa0a8f1fce85780edf41f6 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 23 Jan 2012 19:21:54 +0100
Subject: [PATCH 216/364] saa716x: Support buffered I2C transaction using
 interrupts.

This SAA716x has a FIFO for I2C transfers that seems to have a size of
8 bytes. This change adds support for this FIFO which reduces number
of I2C interrupts by a factor of up to 8.

The mode of operation for I2C can be configured now via a new member
of saa716x_config. Possible values are
 - CPU polling
 - byte-wise interrupt mode
 - buffered interrupt mode.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c  | 207 ++++++++++++++++-------
 drivers/media/pci/saa716x/saa716x_i2c.h  |   9 +
 drivers/media/pci/saa716x/saa716x_priv.h |   1 +
 3 files changed, 152 insertions(+), 65 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index e219383e37fbe..274a28b9ea342 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -27,8 +27,6 @@
 #define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
 				 I2C_RECEIVE_CLEAR)
 
-#define SAA716x_I2C_USE_IRQ	1
-
 static const char* state[] = {
 	"Idle",
 	"DoneStop",
@@ -238,30 +236,31 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	SAA716x_EPWR(I2C_DEV, INT_CLR_ENABLE, 0x1fff);
 	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
-#if SAA716x_I2C_USE_IRQ
-	/* Enabled interrupts:
-	* Master Transaction Done,
-	* Master Transaction Data Request
-	* (0x81)
-	*/
-	msleep(5);
+	if (i2c->i2c_mode >= SAA716x_I2C_MODE_IRQ) {
+		/* Enabled interrupts:
+		* Master Transaction Done,
+		* Master Transaction Data Request
+		* (0x81)
+		*/
+		msleep(5);
 
-	SAA716x_EPWR(I2C_DEV, INT_SET_ENABLE,
-		I2C_SET_ENABLE_MTDR | I2C_SET_ENABLE_MTD);
+		SAA716x_EPWR(I2C_DEV, INT_SET_ENABLE,
+			I2C_SET_ENABLE_MTDR | I2C_SET_ENABLE_MTD);
 
-	/* Check interrupt enable status */
-	reg = SAA716x_EPRD(I2C_DEV, INT_ENABLE);
-	if (reg != 0x81) {
+		/* Check interrupt enable status */
+		reg = SAA716x_EPRD(I2C_DEV, INT_ENABLE);
+		if (reg != 0x81) {
 
-		dprintk(SAA716x_ERROR, 1,
-			"Adapter (%d) %s Interrupt enable failed, Exiting !",
-			i,
-			adapter->name);
+			dprintk(SAA716x_ERROR, 1,
+				"Adapter (%d) %s Interrupt enable failed, Exiting !",
+				i,
+				adapter->name);
 
-		err = -EIO;
-		goto exit;
+			err = -EIO;
+			goto exit;
+		}
 	}
-#endif
+
 	/* Check status */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (!(reg & 0xd)) {
@@ -297,9 +296,12 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	struct saa716x_dev *saa716x = i2c->saa716x;
 	int i, err = 0;
 	u32 reg;
-#if SAA716x_I2C_USE_IRQ
-	unsigned long timeout;
-#endif
+
+	if (i2c->i2c_mode >= SAA716x_I2C_MODE_IRQ) {
+		/* Write to FIFO */
+		SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
+		return 0;
+	}
 
 	/* Check FIFO status before TX */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
@@ -325,27 +327,9 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 		}
 	}
 
-	i2c->i2c_op = 1;
-	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
-
 	/* Write to FIFO */
 	SAA716x_EPWR(I2C_DEV, TX_FIFO, data);
 
-#if SAA716x_I2C_USE_IRQ
-	timeout = HZ/100 + 1; /* 10ms */
-	timeout = wait_event_interruptible_timeout(i2c->i2c_wq, i2c->i2c_op == 0, timeout);
-	if (timeout == -ERESTARTSYS || i2c->i2c_op) {
-		SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
-		if (timeout == -ERESTARTSYS) {
-			/* a signal arrived */
-			err = -ERESTARTSYS;
-			goto exit;
-		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for end of xfer!");
-		err = -EIO;
-		goto exit;
-	}
-#endif
 	/* Check for data write */
 	for (i = 0; i < 1000; i++) {
 		/* TODO! check for hotplug devices */
@@ -397,6 +381,41 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 	return err;
 }
 
+static void saa716x_i2c_irq_start(struct saa716x_i2c *i2c, u32 I2C_DEV)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+
+	if (i2c->i2c_mode == SAA716x_I2C_MODE_POLLING)
+		return;
+
+	i2c->i2c_op = 1;
+	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+}
+
+static int saa716x_i2c_irq_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
+{
+	struct saa716x_dev *saa716x = i2c->saa716x;
+	unsigned long timeout;
+	int err = 0;
+
+	if (i2c->i2c_mode == SAA716x_I2C_MODE_POLLING)
+		return 0;
+
+	timeout = HZ/100 + 1; /* 10ms */
+	timeout = wait_event_interruptible_timeout(i2c->i2c_wq, i2c->i2c_op == 0, timeout);
+	if (timeout == -ERESTARTSYS || i2c->i2c_op) {
+		SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
+		if (timeout == -ERESTARTSYS) {
+			/* a signal arrived */
+			err = -ERESTARTSYS;
+		} else {
+			dprintk(SAA716x_ERROR, 1, "timed out waiting for end of xfer!");
+			err = -EIO;
+		}
+	}
+	return err;
+}
+
 static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 				 u16 addr, u8 *buf, u16 len, u8 add_stop)
 {
@@ -404,6 +423,9 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	u32 data;
 	int err;
 	int i;
+	int bytes;
+
+	saa716x_i2c_irq_start(i2c, I2C_DEV);
 
 	/* first write START with I2C address */
 	data = I2C_START_BIT | (addr << 1);
@@ -414,17 +436,38 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 		goto exit;
 	}
 
+	bytes = i2c->block_size - 1;
+
 	/* now write the data */
-	for (i = 0; i < len; i++) {
-		data = buf[i];
-		dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n", i, data);
-		if (add_stop && i == (len - 1))
-			data |= I2C_STOP_BIT;
-		err = saa716x_i2c_send(i2c, I2C_DEV, data);
+	while (len > 0) {
+		if (bytes == i2c->block_size) {
+			/* this is not the first round, so restart irq */
+			saa716x_i2c_irq_start(i2c, I2C_DEV);
+		}
+
+		if (bytes > len)
+			bytes = len;
+
+		for (i = 0; i < bytes; i++) {
+			data = buf[i];
+			dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n", i, data);
+			if (add_stop && i == (len - 1))
+				data |= I2C_STOP_BIT;
+			err = saa716x_i2c_send(i2c, I2C_DEV, data);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Data send failed");
+				goto exit;
+			}
+		}
+
+		err = saa716x_i2c_irq_wait(i2c, I2C_DEV);
 		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Data send failed");
 			goto exit;
 		}
+
+		len -= bytes;
+		buf += bytes;
+		bytes = i2c->block_size;
 	}
 
 	return 0;
@@ -441,6 +484,9 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	u32 data;
 	int err;
 	int i;
+	int bytes;
+
+	saa716x_i2c_irq_start(i2c, I2C_DEV);
 
 	/* first write START with I2C address */
 	data = I2C_START_BIT | (addr << 1) | 1;
@@ -451,24 +497,49 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 		goto exit;
 	}
 
+	bytes = i2c->block_size - 1;
+
 	/* now read the data */
-	for (i = 0; i < len; i++) {
-		data = 0x00; /* dummy write for reading */
-		if (add_stop && i == (len - 1))
-			data |= I2C_STOP_BIT;
-		err = saa716x_i2c_send(i2c, I2C_DEV, data);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Data send failed");
-			goto exit;
+	while (len > 0) {
+		if (bytes == i2c->block_size) {
+			/* this is not the first round, so restart irq */
+			saa716x_i2c_irq_start(i2c, I2C_DEV);
+		}
+
+		if (bytes > len)
+			bytes = len;
+
+		for (i = 0; i < bytes; i++) {
+			data = 0x00; /* dummy write for reading */
+			if (add_stop && i == (len - 1))
+				data |= I2C_STOP_BIT;
+			err = saa716x_i2c_send(i2c, I2C_DEV, data);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Data send failed");
+				goto exit;
+			}
 		}
-		err = saa716x_i2c_recv(i2c, I2C_DEV, &data);
+
+		err = saa716x_i2c_irq_wait(i2c, I2C_DEV);
 		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Data receive failed");
 			goto exit;
 		}
-		dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n", i, data);
-		buf[i] = data;
+
+		for (i = 0; i < bytes; i++) {
+			err = saa716x_i2c_recv(i2c, I2C_DEV, &data);
+			if (err < 0) {
+				dprintk(SAA716x_ERROR, 1, "Data receive failed");
+				goto exit;
+			}
+			dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n", i, data);
+			buf[i] = data;
+		}
+
+		len -= bytes;
+		buf += bytes;
+		bytes = i2c->block_size;
 	}
+
 	return 0;
 
 exit:
@@ -582,8 +653,14 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 		i2c->i2c_dev	= i;
 		i2c->i2c_rate	= saa716x->config->i2c_rate;
+		i2c->i2c_mode	= saa716x->config->i2c_mode;
 		adapter		= &i2c->i2c_adapter;
 
+		if (i2c->i2c_mode == SAA716x_I2C_MODE_IRQ_BUFFERED)
+			i2c->block_size = 8;
+		else
+			i2c->block_size = 1;
+
 		if (adapter != NULL) {
 
 			i2c_set_adapdata(adapter, i2c);
@@ -613,10 +690,10 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 		i2c++;
 	}
 
-#if SAA716x_I2C_USE_IRQ
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_0);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_1);
-#endif
+	if (saa716x->config->i2c_mode >= SAA716x_I2C_MODE_IRQ) {
+		SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_0);
+		SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_1);
+	}
 
 	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully initialized",
 		saa716x->pdev->device);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 9ed6de11cce94..da767ac634f17 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -20,6 +20,12 @@ enum saa716x_i2c_rate {
 	SAA716x_I2C_RATE_100,
 };
 
+enum saa716x_i2c_mode {
+	SAA716x_I2C_MODE_POLLING = 0,
+	SAA716x_I2C_MODE_IRQ,
+	SAA716x_I2C_MODE_IRQ_BUFFERED
+};
+
 struct saa716x_i2c {
 	struct i2c_adapter		i2c_adapter;
 	struct mutex			i2c_lock;
@@ -27,6 +33,9 @@ struct saa716x_i2c {
 	u8				i2c_dev;
 
 	enum saa716x_i2c_rate		i2c_rate; /* run time */
+	enum saa716x_i2c_mode		i2c_mode;
+	u32				block_size; /* block size for buffered
+						       mode, 1 otherwise */
 	u32				i2c_stat;
 
 	u32				stat_tx_prior;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 53dca74afba02..1ad1d9c37a34a 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -101,6 +101,7 @@ struct saa716x_config {
 
 	struct saa716x_adap_config	adap_config[SAA716x_MAX_ADAPTERS];
 	enum saa716x_i2c_rate		i2c_rate;
+	enum saa716x_i2c_mode		i2c_mode;
 };
 
 struct saa716x_adapter {

From 5844e6844cab24683365baa33950ab2367ee1a97 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 23 Jan 2012 19:23:11 +0100
Subject: [PATCH 217/364] saa716x_ff: Use buffered I2C interrupt mode.

This reduces number of I2C interrupts on the S2-6400 to around 1/3.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 48089ace59d97..3ca918fcacc03 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1382,6 +1382,7 @@ static struct saa716x_config saa716x_s26400_config = {
 	.frontend_attach	= saa716x_s26400_frontend_attach,
 	.irq_handler		= saa716x_ff_pci_irq,
 	.i2c_rate		= SAA716x_I2C_RATE_100,
+	.i2c_mode		= SAA716x_I2C_MODE_IRQ_BUFFERED,
 
 	.adap_config		= {
 		{

From fc37d399ca81d0807dd17da1c901e12fb8febd65 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 29 Jan 2012 20:17:10 +0100
Subject: [PATCH 218/364] saa716x_ff: Don't use dvb_generic_ioctl.

As dvb_generic_ioctl uses dvb-global locking since october 2010, which
is not needed for the saa716x_ff, support for using it has been
removed. Instead local ioctl functions are used that do the usercopy
internally.

This has the positive effect that an access to the firmware e.g. drawing
to the OSD is no longer slowed down by a frontend access, especially
during bad reception conditions.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 149 ++++++++++++++++----
 1 file changed, 119 insertions(+), 30 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 3ca918fcacc03..27b079deeef9b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -258,14 +258,69 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-static int dvb_osd_ioctl(struct inode *inode, struct file *file,
-#else
-static int dvb_osd_ioctl(struct file *file,
-#endif
-			 unsigned int cmd, void *parg)
+static int saa716x_usercopy(struct dvb_device *dvbdev,
+			    unsigned int cmd, unsigned long arg,
+			    int (*func)(struct dvb_device *dvbdev,
+			    unsigned int cmd, void *arg))
+{
+	char    sbuf[128];
+	void    *mbuf = NULL;
+	void    *parg = NULL;
+	int     err  = -EINVAL;
+
+	/*  Copy arguments into temp kernel buffer  */
+	switch (_IOC_DIR(cmd)) {
+	case _IOC_NONE:
+		/*
+		 * For this command, the pointer is actually an integer
+		 * argument.
+		 */
+		parg = (void *) arg;
+		break;
+	case _IOC_READ: /* some v4l ioctls are marked wrong ... */
+	case _IOC_WRITE:
+	case (_IOC_WRITE | _IOC_READ):
+		if (_IOC_SIZE(cmd) <= sizeof(sbuf)) {
+			parg = sbuf;
+		} else {
+			/* too big to allocate from stack */
+			mbuf = kmalloc(_IOC_SIZE(cmd),GFP_KERNEL);
+			if (NULL == mbuf)
+				return -ENOMEM;
+			parg = mbuf;
+		}
+
+		err = -EFAULT;
+		if (copy_from_user(parg, (void __user *)arg, _IOC_SIZE(cmd)))
+			goto out;
+		break;
+	}
+
+	/* call driver */
+	if ((err = func(dvbdev, cmd, parg)) == -ENOIOCTLCMD)
+		err = -EINVAL;
+
+	if (err < 0)
+		goto out;
+
+	/*  Copy results into user buffer  */
+	switch (_IOC_DIR(cmd))
+	{
+	case _IOC_READ:
+	case (_IOC_WRITE | _IOC_READ):
+		if (copy_to_user((void __user *)arg, parg, _IOC_SIZE(cmd)))
+			err = -EFAULT;
+		break;
+	}
+
+out:
+	kfree(mbuf);
+	return err;
+}
+
+static int do_dvb_osd_ioctl(struct dvb_device *dvbdev,
+			    unsigned int cmd, void *parg)
 {
-	struct dvb_device *dvbdev	= file->private_data;
 	struct sti7109_dev *sti7109	= dvbdev->priv;
 	int ret_val = -EINVAL;
 
@@ -292,13 +347,27 @@ static int dvb_osd_ioctl(struct file *file,
 	return ret_val;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
+static int dvb_osd_ioctl(struct inode *inode, struct file *file,
+#else
+static long dvb_osd_ioctl(struct file *file,
+#endif
+			 unsigned int cmd, unsigned long arg)
+{
+	struct dvb_device *dvbdev = file->private_data;
+
+	if (!dvbdev)
+		return -ENODEV;
+
+	return saa716x_usercopy (dvbdev, cmd, arg, do_dvb_osd_ioctl);
+}
 
 static struct file_operations dvb_osd_fops = {
 	.owner		= THIS_MODULE,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-	.ioctl		= dvb_generic_ioctl,
+	.ioctl		= dvb_osd_ioctl,
 #else
-	.unlocked_ioctl	= dvb_generic_ioctl,
+	.unlocked_ioctl	= dvb_osd_ioctl,
 #endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
@@ -309,7 +378,7 @@ static struct dvb_device dvbdev_osd = {
 	.users		= 2,
 	.writers	= 2,
 	.fops		= &dvb_osd_fops,
-	.kernel_ioctl	= dvb_osd_ioctl,
+	.kernel_ioctl	= NULL,
 };
 
 static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x)
@@ -334,14 +403,9 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-static int dvb_audio_ioctl(struct inode *inode, struct file *file,
-#else
-static int dvb_audio_ioctl(struct file *file,
-#endif
-			   unsigned int cmd, void *parg)
+static int do_dvb_audio_ioctl(struct dvb_device *dvbdev,
+			      unsigned int cmd, void *parg)
 {
-	struct dvb_device *dvbdev	= file->private_data;
 	struct sti7109_dev *sti7109	= dvbdev->priv;
 	//struct saa716x_dev *saa716x	= sti7109->dev;
 	int ret = 0;
@@ -359,12 +423,27 @@ static int dvb_audio_ioctl(struct file *file,
 	return ret;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
+static int dvb_audio_ioctl(struct inode *inode, struct file *file,
+#else
+static long dvb_audio_ioctl(struct file *file,
+#endif
+			   unsigned int cmd, unsigned long arg)
+{
+	struct dvb_device *dvbdev = file->private_data;
+
+	if (!dvbdev)
+		return -ENODEV;
+
+	return saa716x_usercopy (dvbdev, cmd, arg, do_dvb_audio_ioctl);
+}
+
 static struct file_operations dvb_audio_fops = {
 	.owner		= THIS_MODULE,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-	.ioctl		= dvb_generic_ioctl,
+	.ioctl		= dvb_audio_ioctl,
 #else
-	.unlocked_ioctl	= dvb_generic_ioctl,
+	.unlocked_ioctl	= dvb_audio_ioctl,
 #endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
@@ -375,7 +454,7 @@ static struct dvb_device dvbdev_audio = {
 	.users		= 1,
 	.writers	= 1,
 	.fops		= &dvb_audio_fops,
-	.kernel_ioctl	= dvb_audio_ioctl,
+	.kernel_ioctl	= NULL,
 };
 
 static int saa716x_ff_audio_exit(struct saa716x_dev *saa716x)
@@ -497,14 +576,9 @@ static unsigned int dvb_video_poll(struct file *file, poll_table *wait)
 	return mask;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-static int dvb_video_ioctl(struct inode *inode, struct file *file,
-#else
-static int dvb_video_ioctl(struct file *file,
-#endif
-			   unsigned int cmd, void *parg)
+static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
+			      unsigned int cmd, void *parg)
 {
-	struct dvb_device *dvbdev	= file->private_data;
 	struct sti7109_dev *sti7109	= dvbdev->priv;
 	struct saa716x_dev *saa716x	= sti7109->dev;
 	int ret = 0;
@@ -550,13 +624,28 @@ static int dvb_video_ioctl(struct file *file,
 	return ret;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
+static int dvb_video_ioctl(struct inode *inode, struct file *file,
+#else
+static long dvb_video_ioctl(struct file *file,
+#endif
+			   unsigned int cmd, unsigned long arg)
+{
+	struct dvb_device *dvbdev = file->private_data;
+
+	if (!dvbdev)
+		return -ENODEV;
+
+	return saa716x_usercopy (dvbdev, cmd, arg, do_dvb_video_ioctl);
+}
+
 static struct file_operations dvb_video_fops = {
 	.owner		= THIS_MODULE,
 	.write		= dvb_video_write,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-	.ioctl		= dvb_generic_ioctl,
+	.ioctl		= dvb_video_ioctl,
 #else
-	.unlocked_ioctl	= dvb_generic_ioctl,
+	.unlocked_ioctl	= dvb_video_ioctl,
 #endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
@@ -568,7 +657,7 @@ static struct dvb_device dvbdev_video = {
 	.users		= 1,
 	.writers	= 1,
 	.fops		= &dvb_video_fops,
-	.kernel_ioctl	= dvb_video_ioctl,
+	.kernel_ioctl	= NULL,
 };
 
 static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)

From af09769fb690a192e53da6ec8c523b59391a657d Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 26 Feb 2012 12:17:40 +0100
Subject: [PATCH 219/364] saa716x_budget: Use GPIO 26 for reset on the Skystar
 2 eXpress HD.

The demodulator reset PIN is connected to GPIO 26 of the SAA7160 on
the Skystar 2 eXpress HD.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 14c7da77ad0b4..a97ad7e666a0c 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -490,14 +490,14 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
 			saa716x->pdev->subsystem_device);
 
-		saa716x_gpio_set_output(saa716x, 20);
+		saa716x_gpio_set_output(saa716x, 26);
 
 		/* Reset the demodulator */
-		saa716x_gpio_write(saa716x, 20, 1);
+		saa716x_gpio_write(saa716x, 26, 1);
 		msleep(10);
-		saa716x_gpio_write(saa716x, 20, 0);
+		saa716x_gpio_write(saa716x, 26, 0);
 		msleep(10);
-		saa716x_gpio_write(saa716x, 20, 1);
+		saa716x_gpio_write(saa716x, 26, 1);
 		msleep(10);
 
 		adapter->fe = dvb_attach(stv090x_attach,

From 74e152909f83cf2585597fd465be263aaa622b08 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 26 Feb 2012 12:19:08 +0100
Subject: [PATCH 220/364] saa716x_budget: Use I2C B for accessing the frontend
 on the Skystar.

On the Skystar 2 eXpress HD the frontend is connected to I2C bus B of
the SAA7160.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index a97ad7e666a0c..6fc591ec8c766 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -481,7 +481,7 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 					       int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[SAA716x_I2C_BUS_A];
+	struct saa716x_i2c *i2c = &saa716x->i2c[SAA716x_I2C_BUS_B];
 	struct stv6110x_devctl *ctl;
 
 	if (count < saa716x->config->adapters) {

From 49ce730685d0522db3b7d7ef7f0631d4d854543f Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 26 Feb 2012 14:27:19 +0100
Subject: [PATCH 221/364] saa716x_budget: Get the Skystar 2 eXpress HD to work.

The Skystar 2 eXpress HD is working now.

- Fixed tuner and demodulator clock setting.
- Set STV0903 GPIO port for LNB power supply control.
- Use correct setup for FGPI port to get TS capturing to work.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 6fc591ec8c766..2447d044dbcb1 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -114,9 +114,9 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	}
 
 	/* set default port mapping */
-	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F44);
-	/* enable FGPI3 and FGPI0 for TS input from Port 3 and 6 */
-	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x894);
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x04080FA9);
+	/* enable FGPI3 and FGPI1 for TS input from Port 2 and 6 */
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x321);
 
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
@@ -450,7 +450,7 @@ static struct stv090x_config skystar2_stv090x_config = {
 	.demod_mode		= STV090x_SINGLE,
 	.clk_mode		= STV090x_CLK_EXT,
 
-	.xtal			= 13500000,
+	.xtal			= 8000000,
 	.address		= 0x68,
 
 	.ts1_mode		= STV090x_TSMODE_DVBCI,
@@ -458,6 +458,10 @@ static struct stv090x_config skystar2_stv090x_config = {
 
 	.repeater_level		= STV090x_RPTLEVEL_16,
 
+	.gpio_voltage_enable	= 2,
+	.gpio_voltage_select	= 3,
+	.gpio_voltage_boost	= 4,
+
 	.tuner_init		= NULL,
 	.tuner_sleep		= NULL,
 	.tuner_set_mode		= NULL,
@@ -473,7 +477,7 @@ static struct stv090x_config skystar2_stv090x_config = {
 
 static struct stv6110x_config skystar2_stv6110x_config = {
 	.addr			= 0x60,
-	.refclk			= 27000000,
+	.refclk			= 16000000,
 	.clk_div		= 2,
 };
 
@@ -561,7 +565,7 @@ static struct saa716x_config skystar2_express_hd_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
-			.ts_port = 3, /* using FGPI 3, TODO: check */
+			.ts_port = 1, /* using FGPI 1 */
 			.worker = demux_worker
 		}
 	}

From 1636d3461ed37699df2cefc3aa205952fcd55c18 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 27 Feb 2012 20:39:35 +0100
Subject: [PATCH 222/364] saa716x_budget: Implement LNB power switching for
 Skystar 2 eXpress HD.

The LNB power supply is controlled by GPIO 2 to 4 of the STV0903.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 64 ++++++++++++++++++++--
 1 file changed, 60 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 2447d044dbcb1..62c15b3f2e6c3 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -458,10 +458,6 @@ static struct stv090x_config skystar2_stv090x_config = {
 
 	.repeater_level		= STV090x_RPTLEVEL_16,
 
-	.gpio_voltage_enable	= 2,
-	.gpio_voltage_select	= 3,
-	.gpio_voltage_boost	= 4,
-
 	.tuner_init		= NULL,
 	.tuner_sleep		= NULL,
 	.tuner_set_mode		= NULL,
@@ -475,6 +471,63 @@ static struct stv090x_config skystar2_stv090x_config = {
 	.tuner_get_status	= NULL,
 };
 
+static int skystar2_set_voltage(struct dvb_frontend *fe,
+				enum fe_sec_voltage voltage)
+{
+	int err;
+	u8 en = 0;
+	u8 sel = 0;
+
+	switch (voltage) {
+	case SEC_VOLTAGE_OFF:
+		en = 0;
+		break;
+
+	case SEC_VOLTAGE_13:
+		en = 1;
+		sel = 0;
+		break;
+
+	case SEC_VOLTAGE_18:
+		en = 1;
+		sel = 1;
+		break;
+
+	default:
+		break;
+	}
+
+	err = stv090x_set_gpio(fe, 2, 0, en, 0);
+	if (err < 0)
+		goto exit;
+	err = stv090x_set_gpio(fe, 3, 0, sel, 0);
+	if (err < 0)
+		goto exit;
+
+	return 0;
+exit:
+	return err;
+}
+
+static int skystar2_voltage_boost(struct dvb_frontend *fe, long arg)
+{
+	int err;
+	u8 value;
+
+	if (arg)
+		value = 1;
+	else
+		value = 0;
+
+	err = stv090x_set_gpio(fe, 4, 0, value, 0);
+	if (err < 0)
+		goto exit;
+
+	return 0;
+exit:
+	return err;
+}
+
 static struct stv6110x_config skystar2_stv6110x_config = {
 	.addr			= 0x60,
 	.refclk			= 16000000,
@@ -516,6 +569,9 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 			goto exit;
 		}
 
+		adapter->fe->ops.set_voltage = skystar2_set_voltage;
+		adapter->fe->ops.enable_high_lnb_voltage = skystar2_voltage_boost;
+
 		ctl = dvb_attach(stv6110x_attach,
 				 adapter->fe,
 				 &skystar2_stv6110x_config,

From 3e7377a0fdce07f44728e05a34db5e35c43dd311 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 4 Mar 2012 17:45:57 +0100
Subject: [PATCH 223/364] saa716x_ff: Fix memory leak.

iobuf was not freed when unloading the driver leading to a memory leak
of around 200K.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 27b079deeef9b..f3827c98270ee 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -948,6 +948,8 @@ static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
 	/* disable board power */
 	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 0);
 
+	vfree(sti7109->iobuf);
+
 	saa716x->priv = NULL;
 	kfree(sti7109);
 

From fcdb676ef09a3ea7222fedcf50df05de94008778 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 4 Mar 2012 18:01:07 +0100
Subject: [PATCH 224/364] saa716x_ff: Fix missing copy user <-> kernel space.

Data buffers that were given through the pointers in the raw command and data
structure was not transferred to kernel mode using copy_to_user. The same
applies to the result buffer for command answers. This has been fixed with
this change.

Additionally some checks for maximum command and data sizes were added.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |   8 +
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  | 227 +++++++++++++-------
 drivers/media/pci/saa716x/saa716x_ff_main.c |  75 ++++---
 3 files changed, 207 insertions(+), 103 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index ef8682f391298..cb65929f66ca2 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -86,6 +86,7 @@
 #define SIZE_BLOCK_HEADER	8      /* block header size */
 
 #define MAX_RESULT_LEN		256
+#define MAX_DATA_LEN		(1024 * 1024)
 
 #define TSOUT_LEN		(1024 * TS_SIZE)
 #define TSBUF_LEN		(8 * 1024)
@@ -108,21 +109,28 @@ struct sti7109_dev {
 
 	wait_queue_head_t	cmd_ready_wq;
 	int			cmd_ready;
+	u8			cmd_data[SIZE_CMD_DATA];
+	u32			cmd_len;
 
 	wait_queue_head_t	result_avail_wq;
 	int			result_avail;
 	u8			result_data[MAX_RESULT_LEN];
 	u32			result_len;
+	u32			result_max_len;
 
 	wait_queue_head_t	osd_cmd_ready_wq;
 	int			osd_cmd_ready;
+	u8			osd_cmd_data[SIZE_OSD_CMD_DATA];
+	u32			osd_cmd_len;
 
 	wait_queue_head_t	osd_result_avail_wq;
 	int			osd_result_avail;
 	u8			osd_result_data[MAX_RESULT_LEN];
 	u32			osd_result_len;
+	u32			osd_result_max_len;
 
 	u16			data_handle;
+	u8			*data_buffer; /* raw data transfer buffer */
 	wait_queue_head_t	data_ready_wq;
 	int			data_ready;
 	wait_queue_head_t	block_done_wq;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 021f631efda1c..81c1078146d68 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -33,6 +33,7 @@ int sti7109_cmd_init(struct sti7109_dev *sti7109)
 	sti7109->osd_result_avail = 0;
 
 	sti7109->data_handle = 0;
+	sti7109->data_buffer = (u8 *) (sti7109->iobuf + TSOUT_LEN + TSBUF_LEN);
 	init_waitqueue_head(&sti7109->data_ready_wq);
 	sti7109->data_ready = 0;
 	init_waitqueue_head(&sti7109->block_done_wq);
@@ -40,7 +41,7 @@ int sti7109_cmd_init(struct sti7109_dev *sti7109)
 	return 0;
 }
 
-int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+static int sti7109_do_raw_cmd(struct sti7109_dev * sti7109)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
 	unsigned long timeout;
@@ -63,10 +64,11 @@ int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 
 	sti7109->cmd_ready = 0;
 	sti7109->result_avail = 0;
-	saa716x_phi_write(saa716x, ADDR_CMD_DATA, cmd->cmd_data, cmd->cmd_len);
+	saa716x_phi_write(saa716x, ADDR_CMD_DATA, sti7109->cmd_data,
+			  sti7109->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
-	if (cmd->result_len > 0) {
+	if (sti7109->result_max_len > 0) {
 		timeout = 1 * HZ;
 		timeout = wait_event_interruptible_timeout(
 				sti7109->result_avail_wq,
@@ -74,7 +76,7 @@ int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 				timeout);
 
 		if (timeout == -ERESTARTSYS || sti7109->result_avail == 0) {
-			cmd->result_len = 0;
+			sti7109->result_len = 0;
 			if (timeout == -ERESTARTSYS) {
 				/* a signal arrived */
 				dprintk(SAA716x_ERROR, 1, "result ERESTARTSYS");
@@ -85,22 +87,54 @@ int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 			return -EIO;
 		}
 
-		if (sti7109->result_len > 0) {
-			if (sti7109->result_len > cmd->result_len) {
-				memcpy(cmd->result_data, sti7109->result_data,
-					cmd->result_len);
-			} else {
-				memcpy(cmd->result_data, sti7109->result_data,
-					sti7109->result_len);
-				cmd->result_len = sti7109->result_len;
-			}
+		if (sti7109->result_len > sti7109->result_max_len) {
+			sti7109->result_len = sti7109->result_max_len;
+			dprintk(SAA716x_NOTICE, 1,
+				"not enough space in result buffer");
 		}
 	}
 
 	return 0;
 }
 
-int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	int err;
+
+	if (cmd->cmd_len > SIZE_CMD_DATA) {
+		dprintk(SAA716x_ERROR, 1, "command too long");
+		return -EFAULT;
+	}
+
+	mutex_lock(&sti7109->cmd_lock);
+
+	err = -EFAULT;
+	if (copy_from_user(sti7109->cmd_data, (void __user *)cmd->cmd_data,
+			   cmd->cmd_len))
+		goto out;
+
+	sti7109->cmd_len = cmd->cmd_len;
+	sti7109->result_max_len = cmd->result_len;
+
+	err = sti7109_do_raw_cmd(sti7109);
+	if (err)
+		goto out;
+
+	cmd->result_len = sti7109->result_len;
+	if (sti7109->result_len > 0) {
+		if (copy_to_user((void __user *)cmd->result_data,
+				 sti7109->result_data,
+				 sti7109->result_len))
+			err = -EFAULT;
+	}
+
+out:
+	mutex_unlock(&sti7109->cmd_lock);
+	return err;
+}
+
+static int sti7109_do_raw_osd_cmd(struct sti7109_dev * sti7109)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
 	unsigned long timeout;
@@ -123,11 +157,11 @@ int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 
 	sti7109->osd_cmd_ready = 0;
 	sti7109->osd_result_avail = 0;
-	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, cmd->cmd_data,
-			  cmd->cmd_len);
+	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
+			  sti7109->osd_cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
 
-	if (cmd->result_len > 0) {
+	if (sti7109->osd_result_max_len > 0) {
 		timeout = 1 * HZ;
 		timeout = wait_event_interruptible_timeout(
 				sti7109->osd_result_avail_wq,
@@ -135,7 +169,7 @@ int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 				timeout);
 
 		if (timeout == -ERESTARTSYS || sti7109->osd_result_avail == 0) {
-			cmd->result_len = 0;
+			sti7109->osd_result_len = 0;
 			if (timeout == -ERESTARTSYS) {
 				/* a signal arrived */
 				dprintk(SAA716x_ERROR, 1,
@@ -147,24 +181,54 @@ int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 			return -EIO;
 		}
 
-		if (sti7109->osd_result_len > 0) {
-			if (sti7109->osd_result_len > cmd->result_len) {
-				memcpy(cmd->result_data,
-					sti7109->osd_result_data,
-					cmd->result_len);
-			} else {
-				memcpy(cmd->result_data,
-					sti7109->osd_result_data,
-					sti7109->osd_result_len);
-				cmd->result_len = sti7109->osd_result_len;
-			}
+		if (sti7109->osd_result_len > sti7109->osd_result_max_len) {
+			sti7109->osd_result_len = sti7109->osd_result_max_len;
+			dprintk(SAA716x_NOTICE, 1,
+				"not enough space in result buffer");
 		}
 	}
 
 	return 0;
 }
 
-int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	int err;
+
+	if (cmd->cmd_len > SIZE_OSD_CMD_DATA) {
+		dprintk(SAA716x_ERROR, 1, "command too long");
+		return -EFAULT;
+	}
+
+	mutex_lock(&sti7109->osd_cmd_lock);
+
+	err = -EFAULT;
+	if (copy_from_user(sti7109->osd_cmd_data, (void __user *)cmd->cmd_data,
+			   cmd->cmd_len))
+		goto out;
+
+	sti7109->osd_cmd_len = cmd->cmd_len;
+	sti7109->osd_result_max_len = cmd->result_len;
+
+	err = sti7109_do_raw_osd_cmd(sti7109);
+	if (err)
+		goto out;
+
+	cmd->result_len = sti7109->osd_result_len;
+	if (sti7109->osd_result_len > 0) {
+		if (copy_to_user((void __user *)cmd->result_data,
+				 sti7109->osd_result_data,
+				 sti7109->osd_result_len))
+			err = -EFAULT;
+	}
+
+out:
+	mutex_unlock(&sti7109->osd_cmd_lock);
+	return err;
+}
+
+static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 {
 	struct saa716x_dev * saa716x = sti7109->dev;
 	unsigned long timeout;
@@ -211,7 +275,7 @@ int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	blockHeader[3] = (u8) numBlocks;
 	blockHeader[6] = (u8) (sti7109->data_handle >> 8);
 	blockHeader[7] = (u8) sti7109->data_handle;
-	blockPtr = (u8 *) data->data_buffer;
+	blockPtr = sti7109->data_buffer;
 	activeBlock = 0;
 	for (blockIndex = 0; blockIndex < numBlocks; blockIndex++) {
 		u32 addr;
@@ -262,68 +326,87 @@ int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
 	return 0;
 }
 
+int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+{
+	struct saa716x_dev * saa716x = sti7109->dev;
+	int err;
+
+	if (data->data_length > MAX_DATA_LEN) {
+		dprintk(SAA716x_ERROR, 1, "data too big");
+		return -EFAULT;
+	}
+
+	mutex_lock(&sti7109->data_lock);
+
+	err = -EFAULT;
+	if (copy_from_user(sti7109->data_buffer,
+			   (void __user *)data->data_buffer,
+			   data->data_length))
+		goto out;
+
+	err = sti7109_do_raw_data(sti7109, data);
+	if (err)
+		goto out;
+
+out:
+	mutex_unlock(&sti7109->data_lock);
+	return err;
+}
+
 int sti7109_cmd_get_fw_version(struct sti7109_dev *sti7109, u32 *fw_version)
 {
-	osd_raw_cmd_t cmd;
-	u8 cmd_data[6];
-	u8 result_data[MAX_RESULT_LEN];
 	int ret_val = -EINVAL;
 
-	cmd_data[0] = 0x00;
-	cmd_data[1] = 0x04;
-	cmd_data[2] = 0x00;
-	cmd_data[3] = 0x00;
-	cmd_data[4] = 0x00;
-	cmd_data[5] = 0x00;
-	cmd.cmd_data = cmd_data;
-	cmd.cmd_len = sizeof(cmd_data);
-	cmd.result_data = result_data;
-	cmd.result_len = sizeof(result_data);
-
 	mutex_lock(&sti7109->cmd_lock);
-	ret_val = sti7109_raw_cmd(sti7109, &cmd);
-	mutex_unlock(&sti7109->cmd_lock);
 
+	sti7109->cmd_data[0] = 0x00;
+	sti7109->cmd_data[1] = 0x04;
+	sti7109->cmd_data[2] = 0x00;
+	sti7109->cmd_data[3] = 0x00;
+	sti7109->cmd_data[4] = 0x00;
+	sti7109->cmd_data[5] = 0x00;
+	sti7109->cmd_len = 6;
+	sti7109->result_max_len = MAX_RESULT_LEN;
+
+	ret_val = sti7109_do_raw_cmd(sti7109);
 	if (ret_val == 0) {
-		*fw_version = (result_data[6] << 16)
-			    | (result_data[7] << 8)
-			    | result_data[8];
+		*fw_version = (sti7109->result_data[6] << 16)
+			    | (sti7109->result_data[7] << 8)
+			    | sti7109->result_data[8];
 	}
 
+	mutex_unlock(&sti7109->cmd_lock);
+
 	return ret_val;
 }
 
 int sti7109_cmd_get_video_format(struct sti7109_dev *sti7109, video_size_t *vs)
 {
-	osd_raw_cmd_t cmd;
-	u8 cmd_data[7];
-	u8 result_data[MAX_RESULT_LEN];
 	int ret_val = -EINVAL;
 
-	cmd_data[0] = 0x00;
-	cmd_data[1] = 0x05; /* command length */
-	cmd_data[2] = 0x00;
-	cmd_data[3] = 0x01; /* A/V decoder command group */
-	cmd_data[4] = 0x00;
-	cmd_data[5] = 0x10; /* get video format info command */
-	cmd_data[6] = 0x00; /* decoder index 0 */
-	cmd.cmd_data = cmd_data;
-	cmd.cmd_len = sizeof(cmd_data);
-	cmd.result_data = result_data;
-	cmd.result_len = sizeof(result_data);
-
 	mutex_lock(&sti7109->cmd_lock);
-	ret_val = sti7109_raw_cmd(sti7109, &cmd);
-	mutex_unlock(&sti7109->cmd_lock);
 
+	sti7109->cmd_data[0] = 0x00;
+	sti7109->cmd_data[1] = 0x05; /* command length */
+	sti7109->cmd_data[2] = 0x00;
+	sti7109->cmd_data[3] = 0x01; /* A/V decoder command group */
+	sti7109->cmd_data[4] = 0x00;
+	sti7109->cmd_data[5] = 0x10; /* get video format info command */
+	sti7109->cmd_data[6] = 0x00; /* decoder index 0 */
+	sti7109->cmd_len = 7;
+	sti7109->result_max_len = MAX_RESULT_LEN;
+
+	ret_val = sti7109_do_raw_cmd(sti7109);
 	if (ret_val == 0) {
-		vs->w = (result_data[7] << 8)
-		      | result_data[8];
-		vs->h = (result_data[9] << 8)
-		      | result_data[10];
-		vs->aspect_ratio = result_data[11] >> 4;
+		vs->w = (sti7109->result_data[7] << 8)
+		      | sti7109->result_data[8];
+		vs->h = (sti7109->result_data[9] << 8)
+		      | sti7109->result_data[10];
+		vs->aspect_ratio = sti7109->result_data[11] >> 4;
 	}
 
+	mutex_unlock(&sti7109->cmd_lock);
+
 	return ret_val;
 }
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index f3827c98270ee..d105f41a46fd1 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -318,35 +318,6 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 	return err;
 }
 
-static int do_dvb_osd_ioctl(struct dvb_device *dvbdev,
-			    unsigned int cmd, void *parg)
-{
-	struct sti7109_dev *sti7109	= dvbdev->priv;
-	int ret_val = -EINVAL;
-
-	if (cmd == OSD_RAW_CMD) {
-		osd_raw_cmd_t * pcmd = (osd_raw_cmd_t *) parg;
-		u8 * pdata = (u8 *) pcmd->cmd_data;
-		if (pdata[3] == 4) {
-			mutex_lock(&sti7109->osd_cmd_lock);
-			ret_val = sti7109_raw_osd_cmd(sti7109, (osd_raw_cmd_t *) parg);
-			mutex_unlock(&sti7109->osd_cmd_lock);
-		}
-		else {
-			mutex_lock(&sti7109->cmd_lock);
-			ret_val = sti7109_raw_cmd(sti7109, (osd_raw_cmd_t *) parg);
-			mutex_unlock(&sti7109->cmd_lock);
-		}
-	}
-	else if (cmd == OSD_RAW_DATA) {
-		mutex_lock(&sti7109->data_lock);
-		ret_val = sti7109_raw_data(sti7109, (osd_raw_data_t *) parg);
-		mutex_unlock(&sti7109->data_lock);
-	}
-
-	return ret_val;
-}
-
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 static int dvb_osd_ioctl(struct inode *inode, struct file *file,
 #else
@@ -355,11 +326,53 @@ static long dvb_osd_ioctl(struct file *file,
 			 unsigned int cmd, unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
+	struct sti7109_dev *sti7109 = dvbdev->priv;
+	int err = -EINVAL;
 
 	if (!dvbdev)
 		return -ENODEV;
 
-	return saa716x_usercopy (dvbdev, cmd, arg, do_dvb_osd_ioctl);
+	if (cmd == OSD_RAW_CMD) {
+		osd_raw_cmd_t raw_cmd;
+		u8 hdr[4];
+
+		err = -EFAULT;
+		if (copy_from_user(&raw_cmd, (void __user *)arg,
+				   _IOC_SIZE(cmd)))
+			goto out;
+
+		if (copy_from_user(hdr, (void __user *)raw_cmd.cmd_data, 4))
+			goto out;
+
+		if (hdr[3] == 4)
+			err = sti7109_raw_osd_cmd(sti7109, &raw_cmd);
+		else
+			err = sti7109_raw_cmd(sti7109, &raw_cmd);
+
+		if (err)
+			goto out;
+
+		if (copy_to_user((void __user *)arg, &raw_cmd, _IOC_SIZE(cmd)))
+			err = -EFAULT;
+	}
+	else if (cmd == OSD_RAW_DATA) {
+		osd_raw_data_t raw_data;
+
+		err = -EFAULT;
+		if (copy_from_user(&raw_data, (void __user *)arg,
+				   _IOC_SIZE(cmd)))
+			goto out;
+
+		err = sti7109_raw_data(sti7109, &raw_data);
+		if (err)
+			goto out;
+
+		if (copy_to_user((void __user *)arg, &raw_data, _IOC_SIZE(cmd)))
+			err = -EFAULT;
+	}
+
+out:
+	return err;
 }
 
 static struct file_operations dvb_osd_fops = {
@@ -764,7 +777,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 
 	sti7109->dev = saa716x;
 
-	sti7109->iobuf = vmalloc(TSOUT_LEN + TSBUF_LEN);
+	sti7109->iobuf = vmalloc(TSOUT_LEN + TSBUF_LEN + MAX_DATA_LEN);
 	if (!sti7109->iobuf)
 		goto fail4;
 

From a26e40403d69aac7c4a54acdd868d8d92760a91a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 18 Dec 2012 12:40:36 +0100
Subject: [PATCH 225/364] saa716x: FGPI DMA buffer size is passed to
 saa716x_fgpi_init.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 5 ++++-
 drivers/media/pci/saa716x/saa716x_fgpi.c | 7 ++++---
 drivers/media/pci/saa716x/saa716x_fgpi.h | 3 ++-
 3 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index f11a2cd275d9d..b120c81dc7654 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -13,6 +13,8 @@
 #include "saa716x_priv.h"
 
 
+#define SAA716X_TS_DMA_BUF_SIZE		(16 * SAA716x_PAGE_SIZE)
+
 DVB_DEFINE_MOD_OPT_ADAPTER_NR(adapter_nr);
 
 
@@ -24,7 +26,7 @@ void saa716x_dma_start(struct saa716x_dev *saa716x, u8 adapter)
 
 	params.bits		= 8;
 	params.samples		= 188;
-	params.lines		= 348;
+	params.lines		= SAA716X_TS_DMA_BUF_SIZE / 188;
 	params.pitch		= 188;
 	params.offset		= 0;
 	params.page_tables	= 0;
@@ -190,6 +192,7 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 		}
 
 		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port,
+				  SAA716X_TS_DMA_BUF_SIZE,
 				  config->adap_config[i].worker);
 
 		saa716x_adap++;
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 8bdb13d0f8f8a..0257bdbfe70b5 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -352,7 +352,7 @@ int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port)
 	return 0;
 }
 
-int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port,
+int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port, int dma_buf_size,
 		      void (*worker)(unsigned long))
 {
 	int i;
@@ -361,8 +361,9 @@ int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port,
 	saa716x->fgpi[port].dma_channel = port + 6;
 	for (i = 0; i < FGPI_BUFFERS; i++)
 	{
-		/* TODO: what is a good size for TS DMA buffer? */
-		ret = saa716x_dmabuf_alloc(saa716x, &saa716x->fgpi[port].dma_buf[i], 16 * SAA716x_PAGE_SIZE);
+		ret = saa716x_dmabuf_alloc(saa716x,
+					   &saa716x->fgpi[port].dma_buf[i],
+					   dma_buf_size);
 		if (ret < 0) {
 			return ret;
 		}
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index 225aff00f34d7..b81edb728ebc9 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -106,7 +106,8 @@ extern int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 extern int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port);
 
 extern int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port,
-			     void (*worker)(unsigned long));
+			      int dma_buf_size,
+			      void (*worker)(unsigned long));
 extern int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port);
 
 #endif /* __SAA716x_FGPI_H */

From 15e4d49b8d99dba39b4886dc18b2826137b9298e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 20 Dec 2012 13:19:27 +0100
Subject: [PATCH 226/364] saa716x: Fix FGPI settings for SD video capture.

- Add DMA buffer setup for interlaced mode.
- Use correct capture mode.
- Use line length from stream parameters instead of hardcoded value.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 72 ++++++++++++++++--------
 1 file changed, 49 insertions(+), 23 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 0257bdbfe70b5..a5038815a40ac 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -140,7 +140,8 @@ int saa716x_fgpi_get_write_index(struct saa716x_dev *saa716x, u32 fgpi_index)
 }
 EXPORT_SYMBOL_GPL(saa716x_fgpi_get_write_index);
 
-static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
+static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel,
+				struct fgpi_stream_params *stream_params)
 {
 	struct saa716x_dev *saa716x = dmabuf->saa716x;
 
@@ -152,22 +153,46 @@ static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel)
 	config = mmu_dma_cfg[channel]; /* DMACONFIGx */
 
 	SAA716x_EPWR(MMU, config, (FGPI_BUFFERS - 1));
-	SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
-	SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
-	SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+
+	if ((stream_params->stream_flags & FGPI_INTERLACED) &&
+	    (stream_params->stream_flags & FGPI_ODD_FIELD) &&
+	    (stream_params->stream_flags & FGPI_EVEN_FIELD)) {
+		/* In interlaced mode the same buffer is written twice, once
+		   the odd field and once the even field */
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+	} else {
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+	}
 
 	return 0;
 }
@@ -190,7 +215,8 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 
 	/* Reset DMA channel */
 	SAA716x_EPWR(BAM, buf_mode, 0x00000040);
-	saa716x_init_ptables(dmabuf, saa716x->fgpi[port].dma_channel);
+	saa716x_init_ptables(dmabuf, saa716x->fgpi[port].dma_channel,
+			     stream_params);
 
 
 	/* monitor BAM reset */
@@ -242,7 +268,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		break;
 
 	case FGPI_VIDEO_STREAM:
-		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000088);
+		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000040);
 		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_START, 0x00000002);
 
 		if ((stream_params->stream_flags & FGPI_INTERLACED) &&
@@ -250,19 +276,19 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		    (stream_params->stream_flags & FGPI_EVEN_FIELD)) {
 
 			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines / 2);
-			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, 768 * 4); /* interlaced stride of 2 lines */
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->samples * 4); /* interlaced stride of 2 lines */
 
 			D1_XY_END  = (stream_params->samples << 16);
 			D1_XY_END |= (stream_params->lines / 2) + 2;
 
 			if (stream_params->stream_flags & FGPI_PAL)
-				offst_1 = 768 * 2;
+				offst_1 = stream_params->samples * 2;
 			else
-				offst_2 = 768 * 2;
+				offst_2 = stream_params->samples * 2;
 
 		} else {
 			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
-			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, 768 * 2); /* stride of 1 line */
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->samples * 2); /* stride of 1 line */
 
 			D1_XY_END  = stream_params->samples << 16;
 			D1_XY_END |= stream_params->lines + 2;

From e44b1832081a75bb31278536c80db6e005046196 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 20 Dec 2012 13:26:53 +0100
Subject: [PATCH 227/364] saa716x: Export some FGPI functions.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index a5038815a40ac..0a8caf2de22f4 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -359,6 +359,7 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(saa716x_fgpi_start);
 
 int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port)
 {
@@ -377,6 +378,7 @@ int saa716x_fgpi_stop(struct saa716x_dev *saa716x, int port)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(saa716x_fgpi_stop);
 
 int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port, int dma_buf_size,
 		      void (*worker)(unsigned long))
@@ -401,6 +403,7 @@ int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port, int dma_buf_size,
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(saa716x_fgpi_init);
 
 int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port)
 {
@@ -414,3 +417,4 @@ int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(saa716x_fgpi_exit);

From 4eedf145ff09f52903c04876012b0134577a12c5 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 20 Dec 2012 14:47:32 +0100
Subject: [PATCH 228/364] saa716x: Remove unused header file.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_reg.h | 1279 -----------------------
 1 file changed, 1279 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_reg.h

diff --git a/drivers/media/pci/saa716x/saa716x_reg.h b/drivers/media/pci/saa716x/saa716x_reg.h
deleted file mode 100644
index effd966bca463..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_reg.h
+++ /dev/null
@@ -1,1279 +0,0 @@
-#ifndef __SAA716x_REG_H
-#define __SAA716x_REG_H
-
-/* BAR = 17 bits */
-/*
-	VI0	0x00000000
-	VI1	0x00001000
-	FGPI0	0x00002000
-	FGPI1	0x00003000
-	FGPI2	0x00004000
-	FGPI3	0x00005000
-	AI0	0x00006000
-	AI1	0x00007000
-	BAM	0x00008000
-	MMU	0x00009000
-	MSI	0x0000a000
-	I2C_B	0x0000b000
-	I2C_A	0x0000c000
-	SPI	0x0000d000
-	GPIO	0x0000e000
-	PHI_0	0x0000f000
-	CGU	0x00013000
-	DCS	0x00014000
-	GREG	0x00012000
-
-	PHI_1	0x00020000
-*/
-
-/* -------------- VIP Registers -------------- */
-
-#define VI0				0x00000000
-#define VI1				0x00001000
-
-#define VI_MODE				0x000
-#define VID_CFEN			(0x00000003 << 30)
-#define VID_OSM				(0x00000001 << 29)
-#define VID_FSEQ			(0x00000001 << 28)
-#define AUX_CFEN			(0x00000003 << 26)
-#define AUX_OSM				(0x00000001 << 25)
-#define AUX_FSEQ			(0x00000001 << 24)
-#define AUX_ANC_DATA			(0x00000003 << 22)
-#define AUX_ANC_RAW			(0x00000001 << 21)
-#define RST_ON_ERR			(0x00000001 << 17)
-#define SOFT_RESET			(0x00000001 << 16)
-#define IFF_CLAMP			(0x00000001 << 14)
-#define IFF_MODE			(0x00000003 << 12)
-#define DFF_CLAMP			(0x00000001 << 10)
-#define DFF_MODE			(0x00000003 <<  8)
-#define HSP_CLAMP			(0x00000001 <<  3)
-#define HSP_RGB				(0x00000001 <<  2)
-#define HSP_MODE			(0x00000003 <<  0)
-
-#define RCRB_CTRL			0x004
-#define RCRB_CFG_ADDR			0x008
-#define RCRB_CFG_EXT_ADDR		0x00c
-#define RCRB_IO_ADDR			0x010
-#define RCRB_MEM_LADDR			0x014
-#define RCRB_MEM_UADDR			0x018
-#define RCRB_DATA			0x01c
-#define RCRB_MASK			0x020
-#define RCRB_MSG_HDR			0x040
-#define RCRB_MSG_PL0			0x044
-#define RCRB_MSG_PL1			0x048
-
-#define ID_MASK0			0x020
-#define VI_ID_MASK_0			(0x000000ff <<  8)
-#define VI_DATA_ID_0			(0x000000ff <<  0)
-
-#define ID_MASK1			0x024
-#define VI_ID_MASK_1			(0x000000ff <<  8)
-#define VI_DATA_ID_1			(0x000000ff <<  0)
-
-#define VIP_LINE_THRESH			0x040
-#define VI_LCTHR			(0x000007ff <<  0)
-
-#define VIN_FORMAT			0x100
-#define VI_VSRA				(0x00000003 << 30)
-#define VI_SYNCHD			(0x00000001 << 25)
-#define VI_DUAL_STREAM			(0x00000001 << 24)
-#define VI_NHDAUX			(0x00000001 << 20)
-#define VI_NPAR				(0x00000001 << 19)
-#define VI_VSEL				(0x00000003 << 14)
-#define VI_TWOS				(0x00000001 << 13)
-#define VI_TPG				(0x00000001 << 12)
-#define VI_FREF				(0x00000001 << 10)
-#define VI_FTGL				(0x00000001 <<  9)
-#define VI_SF				(0x00000001 <<  3)
-#define VI_FZERO			(0x00000001 <<  2)
-#define VI_REVS				(0x00000001 <<  1)
-#define VI_REHS				(0x00000001 <<  0)
-
-#define TC76543210			0x800
-#define TCFEDCBA98			0x804
-#define PHYCFG				0x900
-#define CONFIG				0xfd4
-#define INT_ENABLE_CLR			0xfd8
-#define INT_ENABLE_SET			0xfdc
-
-
-#define INT_STATUS			0xfe0
-#define VI_STAT_FID_AUX			(0x00000001 << 31)
-#define VI_STAT_FID_VID			(0x00000001 << 30)
-#define VI_STAT_FID_VPI			(0x00000001 << 29)
-#define VI_STAT_LINE_COUNT		(0x00000fff << 16)
-#define VI_STAT_AUX_OVRFLW		(0x00000001 <<  9)
-#define VI_STAT_VID_OVRFLW		(0x00000001 <<  8)
-#define VI_STAT_WIN_SEQBRK		(0x00000001 <<  7)
-#define VI_STAT_FID_SEQBRK		(0x00000001 <<  6)
-#define VI_STAT_LINE_THRESH		(0x00000001 <<  5)
-#define VI_STAT_AUX_WRAP		(0x00000001 <<  4)
-#define VI_STAT_AUX_START_IN		(0x00000001 <<  3)
-#define VI_STAT_AUX_END_OUT		(0x00000001 <<  2)
-#define VI_STAT_VID_START_IN		(0x00000001 <<  1)
-#define VI_STAT_VID_END_OUT		(0x00000001 <<  0)
-
-#define INT_ENABLE			0xfe4
-#define VI_ENABLE_AUX_OVRFLW		(0x00000001 <<  9)
-#define VI_ENABLE_VID_OVRFLW		(0x00000001 <<  8)
-#define VI_ENABLE_WIN_SEQBRK		(0x00000001 <<  7)
-#define VI_ENABLE_FID_SEQBRK		(0x00000001 <<  6)
-#define VI_ENABLE_LINE_THRESH		(0x00000001 <<  5)
-#define VI_ENABLE_AUX_WRAP		(0x00000001 <<  4)
-#define VI_ENABLE_AUX_START_IN		(0x00000001 <<  3)
-#define VI_ENABLE_AUX_END_OUT		(0x00000001 <<  2)
-#define VI_ENABLE_VID_START_IN		(0x00000001 <<  1)
-#define VI_ENABLE_VID_END_OUT		(0x00000001 <<  0)
-
-#define INT_CLR_STATUS			0xfe8
-#define VI_CLR_STATUS_AUX_OVRFLW	(0x00000001 <<  9)
-#define VI_CLR_STATUS_VID_OVRFLW	(0x00000001 <<  8)
-#define VI_CLR_STATUS_WIN_SEQBRK	(0x00000001 <<  7)
-#define VI_CLR_STATUS_FID_SEQBRK	(0x00000001 <<  6)
-#define VI_CLR_STATUS_LINE_THRESH	(0x00000001 <<  5)
-#define VI_CLR_STATUS_AUX_WRAP		(0x00000001 <<  4)
-#define VI_CLR_STATUS_AUX_START_IN	(0x00000001 <<  3)
-#define VI_CLR_STATUS_AUX_END_OUT	(0x00000001 <<  2)
-#define VI_CLR_STATUS_VID_START_IN	(0x00000001 <<  1)
-#define VI_CLR_STATUS_VID_END_OUT	(0x00000001 <<  0)
-
-#define INT_SET_STATUS			0xfec
-#define VI_SET_STATUS_AUX_OVRFLW	(0x00000001 <<  9)
-#define VI_SET_STATUS_VID_OVRFLW	(0x00000001 <<  8)
-#define VI_SET_STATUS_WIN_SEQBRK	(0x00000001 <<  7)
-#define VI_SET_STATUS_FID_SEQBRK	(0x00000001 <<  6)
-#define VI_SET_STATUS_LINE_THRESH	(0x00000001 <<  5)
-#define VI_SET_STATUS_AUX_WRAP		(0x00000001 <<  4)
-#define VI_SET_STATUS_AUX_START_IN	(0x00000001 <<  3)
-#define VI_SET_STATUS_AUX_END_OUT	(0x00000001 <<  2)
-#define VI_SET_STATUS_VID_START_IN	(0x00000001 <<  1)
-#define VI_SET_STATUS_VID_END_OUT	(0x00000001 <<  0)
-
-#define VIP_POWER_DOWN			0xff4
-#define VI_PWR_DWN			(0x00000001 << 31)
-
-
-
-
-/* -------------- FGPI Registers -------------- */
-
-#define FGPI0				0x00002000
-#define FGPI1				0x00003000
-#define FGPI2				0x00004000
-#define FGPI3				0x00005000
-
-#define FGPI_CONTROL			0x000
-#define FGPI_CAPTURE_ENABLE_2		(0x00000001 << 13)
-#define FGPI_CAPTURE_ENABLE_1		(0x00000001 << 12)
-#define FGPI_MODE			(0x00000001 << 11)
-#define FGPI_SAMPLE_SIZE		(0x00000003 <<  8)
-#define FGPI_BUF_SYNC_MSG_STOP		(0x00000003 <<  5)
-#define FGPI_REC_START_MSG_START	(0x00000003 <<  2)
-#define FGPI_TSTAMP_SELECT		(0x00000001 <<  1)
-#define FGPI_VAR_LENGTH			(0x00000001 <<  0)
-
-#define FGPI_BASE_1			0x004
-#define FGPI_BASE_2			0x008
-#define FGPI_SIZE			0x00c
-#define FGPI_REC_SIZE			0x010
-#define FGPI_STRIDE			0x014
-#define FGPI_NUM_RECORD_1		0x018
-#define FGPI_NUM_RECORD_2		0x01c
-#define FGPI_THRESHOLD_1		0x020
-#define FGPI_THRESHOLD_2		0x024
-#define FGPI_D1_XY_START		0x028
-#define FGPI_D1_XY_END			0x02c
-
-#define INT_STATUS			0xfe0
-#define FGPI_BUF1_ACTIVE		(0x00000001 <<  7)
-#define FGPI_OVERFLOW			(0x00000001 <<  6)
-#define FGPI_MBE			(0x00000001 <<  5)
-#define FGPI_UNDERRUN			(0x00000001 <<  4)
-#define FGPI_THRESH2_REACHED		(0x00000001 <<  3)
-#define FGPI_THRESH1_REACHED		(0x00000001 <<  2)
-#define FGPI_BUF2_FULL			(0x00000001 <<  1)
-#define FGPI_BUF1_FULL			(0x00000001 <<  0)
-
-#define INT_ENABLE			0xfe4
-#define FGPI_OVERFLOW_ENA		(0x00000001 <<  6)
-#define FGPI_MBE_ENA			(0x00000001 <<  5)
-#define FGPI_UNDERRUN_ENA		(0x00000001 <<  4)
-#define FGPI_THRESH2_REACHED_ENA	(0x00000001 <<  3)
-#define FGPI_THRESH1_REACHED_ENA	(0x00000001 <<  2)
-#define FGPI_BUF2_FULL_ENA		(0x00000001 <<  1)
-#define FGPI_BUF1_FULL_ENA		(0x00000001 <<  0)
-
-#define INT_CLR_STATUS			0xfe8
-#define FGPI_OVERFLOW_ACK		(0x00000001 <<  6)
-#define FGPI_MBE_ACK			(0x00000001 <<  5)
-#define FGPI_UNDERRUN_ACK		(0x00000001 <<  4)
-#define FGPI_THRESH2_REACHED_ACK	(0x00000001 <<  3)
-#define FGPI_THRESH1_REACHED_ACK	(0x00000001 <<  2)
-#define FGPI_BUF2_DONE_ACK		(0x00000001 <<  1)
-#define FGPI_BUF1_DONE_ACK		(0x00000001 <<  0)
-
-#define INT_SET_STATUS			0xfec
-#define FGPI_OVERFLOW_SET		(0x00000001 <<  6)
-#define FGPI_MBE_SET			(0x00000001 <<  5)
-#define FGPI_UNDERRUN_SET		(0x00000001 <<  4)
-#define FGPI_THRESH2_REACHED_SET	(0x00000001 <<  3)
-#define FGPI_THRESH1_REACHED_SET	(0x00000001 <<  2)
-#define FGPI_BUF2_DONE_SET		(0x00000001 <<  1)
-#define FGPI_BUF1_DONE_SET		(0x00000001 <<  0)
-
-#define FGPI_SOFT_RESET			0xff0
-#define FGPI_SOFTWARE_RESET		(0x00000001 <<  0)
-
-#define FGPI_INTERFACE			0xff4
-#define FGPI_DISABLE_BUS_IF		(0x00000001 <<  0)
-
-#define FGPI_MOD_ID_EXT			0xff8
-#define FGPI_MODULE_ID			0xffc
-
-
-/* -------------- AI Registers ---------------- */
-
-#define AI0				0x00006000
-#define AI1				0x00007000
-
-#define AI_STATUS			0x000
-#define AI_BUF1_ACTIVE			(0x00000001 <<  4)
-#define AI_OVERRUN			(0x00000001 <<  3)
-#define AI_HBE				(0x00000001 <<  2)
-#define AI_BUF2_FULL			(0x00000001 <<  1)
-#define AI_BUF1_FULL			(0x00000001 <<  0)
-
-#define AI_CTL				0x004
-#define AI_RESET			(0x00000001 <<  31)
-#define AI_CAP_ENABLE			(0x00000001 <<  30)
-#define AI_CAP_MODE			(0x00000003 <<  28)
-#define AI_SIGN_CONVERT			(0x00000001 <<  27)
-#define AI_EARLYMODE			(0x00000001 <<  26)
-#define AI_DIAGMODE			(0x00000001 <<  25)
-#define AI_RAWMODE			(0x00000001 <<  24)
-#define AI_OVR_INTEN			(0x00000001 <<   7)
-#define AI_HBE_INTEN			(0x00000001 <<   6)
-#define AI_BUF2_INTEN			(0x00000001 <<   5)
-#define AI_BUF1_INTEN			(0x00000001 <<   4)
-#define AI_ACK_OVR			(0x00000001 <<   3)
-#define AI_ACK_HBE			(0x00000001 <<   2)
-#define AI_ACK2				(0x00000001 <<   1)
-#define AI_ACK1				(0x00000001 <<   0)
-
-#define AI_SERIAL			0x008
-#define AI_SER_MASTER			(0x00000001 <<  31)
-#define AI_DATAMODE			(0x00000001 <<  30)
-#define AI_FRAMEMODE			(0x00000003 <<  28)
-#define AI_CLOCK_EDGE			(0x00000001 <<  27)
-#define AI_SSPOS4			(0x00000001 <<  19)
-#define AI_NR_CHAN			(0x00000003 <<  17)
-#define AI_WSDIV			(0x000001ff <<   8)
-#define AI_SCKDIV			(0x000000ff <<   0)
-
-#define AI_FRAMING			0x00c
-#define AI_VALIDPOS			(0x000001ff << 22)
-#define AI_LEFTPOS			(0x000001ff << 13)
-#define AI_RIGHTPOS			(0x000001ff <<  4)
-#define AI_SSPOS_3_0			(0x0000000f <<  0)
-
-#define AI_BASE1			0x014
-#define AI_BASE2			0x018
-#define AI_BASE				(0x03ffffff <<  6)
-
-#define AI_SIZE				0x01c
-#define AI_SAMPLE_SIZE			(0x03ffffff <<  6)
-
-#define AI_INT_ACK			0x020
-#define AI_ACK_OVR			(0x00000001 <<  3)
-#define AI_ACK_HBE			(0x00000001 <<  2)
-#define AI_ACK2				(0x00000001 <<  1)
-#define AI_ACK1				(0x00000001 <<  0)
-
-#define AI_PWR_DOWN			0xff4
-#define AI_PWR_DWN			(0x00000001 <<  0)
-
-/* -------------- BAM Registers -------------- */
-
-#define BAM				0x00008000
-
-#define BAM_VI0_0_DMA_BUF_MODE		0x000
-
-#define BAM_VI0_0_ADDR_OFFST_0		0x004
-#define BAM_VI0_0_ADDR_OFFST_1		0x008
-#define BAM_VI0_0_ADDR_OFFST_2		0x00c
-#define BAM_VI0_0_ADDR_OFFST_3		0x010
-#define BAM_VI0_0_ADDR_OFFST_4		0x014
-#define BAM_VI0_0_ADDR_OFFST_5		0x018
-#define BAM_VI0_0_ADDR_OFFST_6		0x01c
-#define BAM_VI0_0_ADDR_OFFST_7		0x020
-
-#define BAM_VI0_1_DMA_BUF_MODE		0x024
-#define BAM_VI0_1_ADDR_OFFST_0		0x028
-#define BAM_VI0_1_ADDR_OFFST_1		0x02c
-#define BAM_VI0_1_ADDR_OFFST_2		0x030
-#define BAM_VI0_1_ADDR_OFFST_3		0x034
-#define BAM_VI0_1_ADDR_OFFST_4		0x038
-#define BAM_VI0_1_ADDR_OFFST_5		0x03c
-#define BAM_VI0_1_ADDR_OFFST_6		0x040
-#define BAM_VI0_1_ADDR_OFFST_7		0x044
-
-#define BAM_VI0_2_DMA_BUF_MODE		0x048
-#define BAM_VI0_2_ADDR_OFFST_0		0x04c
-#define BAM_VI0_2_ADDR_OFFST_1		0x050
-#define BAM_VI0_2_ADDR_OFFST_2		0x054
-#define BAM_VI0_2_ADDR_OFFST_3		0x058
-#define BAM_VI0_2_ADDR_OFFST_4		0x05c
-#define BAM_VI0_2_ADDR_OFFST_5		0x060
-#define BAM_VI0_2_ADDR_OFFST_6		0x064
-#define BAM_VI0_2_ADDR_OFFST_7		0x068
-
-
-#define BAM_VI1_0_DMA_BUF_MODE		0x06c
-#define BAM_VI1_0_ADDR_OFFST_0		0x070
-#define BAM_VI1_0_ADDR_OFFST_1		0x074
-#define BAM_VI1_0_ADDR_OFFST_2		0x078
-#define BAM_VI1_0_ADDR_OFFST_3		0x07c
-#define BAM_VI1_0_ADDR_OFFST_4		0x080
-#define BAM_VI1_0_ADDR_OFFST_5		0x084
-#define BAM_VI1_0_ADDR_OFFST_6		0x088
-#define BAM_VI1_0_ADDR_OFFST_7		0x08c
-
-#define BAM_VI1_1_DMA_BUF_MODE		0x090
-#define BAM_VI1_1_ADDR_OFFST_0		0x094
-#define BAM_VI1_1_ADDR_OFFST_1		0x098
-#define BAM_VI1_1_ADDR_OFFST_2		0x09c
-#define BAM_VI1_1_ADDR_OFFST_3		0x0a0
-#define BAM_VI1_1_ADDR_OFFST_4		0x0a4
-#define BAM_VI1_1_ADDR_OFFST_5		0x0a8
-#define BAM_VI1_1_ADDR_OFFST_6		0x0ac
-#define BAM_VI1_1_ADDR_OFFST_7		0x0b0
-
-#define BAM_VI1_2_DMA_BUF_MODE		0x0b4
-#define BAM_VI1_2_ADDR_OFFST_0		0x0b8
-#define BAM_VI1_2_ADDR_OFFST_1		0x0bc
-#define BAM_VI1_2_ADDR_OFFST_2		0x0c0
-#define BAM_VI1_2_ADDR_OFFST_3		0x0c4
-#define BAM_VI1_2_ADDR_OFFST_4		0x0c8
-#define BAM_VI1_2_ADDR_OFFST_5		0x0cc
-#define BAM_VI1_2_ADDR_OFFST_6		0x0d0
-#define BAM_VI1_2_ADDR_OFFST_7		0x0d4
-
-
-#define BAM_FGPI0_DMA_BUF_MODE		0x0d8
-#define BAM_FGPI0_ADDR_OFFST_0		0x0dc
-#define BAM_FGPI0_ADDR_OFFST_1		0x0e0
-#define BAM_FGPI0_ADDR_OFFST_2		0x0e4
-#define BAM_FGPI0_ADDR_OFFST_3		0x0e8
-#define BAM_FGPI0_ADDR_OFFST_4		0x0ec
-#define BAM_FGPI0_ADDR_OFFST_5		0x0f0
-#define BAM_FGPI0_ADDR_OFFST_6		0x0f4
-#define BAM_FGPI0_ADDR_OFFST_7		0x0f8
-
-#define BAM_FGPI1_DMA_BUF_MODE		0x0fc
-#define BAM_FGPI1_ADDR_OFFST_0		0x100
-#define BAM_FGPI1_ADDR_OFFST_1		0x104
-#define BAM_FGPI1_ADDR_OFFST_2		0x108
-#define BAM_FGPI1_ADDR_OFFST_3		0x10c
-#define BAM_FGPI1_ADDR_OFFST_4		0x110
-#define BAM_FGPI1_ADDR_OFFST_5		0x114
-#define BAM_FGPI1_ADDR_OFFST_6		0x118
-#define BAM_FGPI1_ADDR_OFFST_7		0x11c
-
-#define BAM_FGPI2_DMA_BUF_MODE		0x120
-#define BAM_FGPI2_ADDR_OFFST_0		0x124
-#define BAM_FGPI2_ADDR_OFFST_1		0x128
-#define BAM_FGPI2_ADDR_OFFST_2		0x12c
-#define BAM_FGPI2_ADDR_OFFST_3		0x130
-#define BAM_FGPI2_ADDR_OFFST_4		0x134
-#define BAM_FGPI2_ADDR_OFFST_5		0x138
-#define BAM_FGPI2_ADDR_OFFST_6		0x13c
-#define BAM_FGPI2_ADDR_OFFST_7		0x140
-
-#define BAM_FGPI3_DMA_BUF_MODE		0x144
-#define BAM_FGPI3_ADDR_OFFST_0		0x148
-#define BAM_FGPI3_ADDR_OFFST_1		0x14c
-#define BAM_FGPI3_ADDR_OFFST_2		0x150
-#define BAM_FGPI3_ADDR_OFFST_3		0x154
-#define BAM_FGPI3_ADDR_OFFST_4		0x158
-#define BAM_FGPI3_ADDR_OFFST_5		0x15c
-#define BAM_FGPI3_ADDR_OFFST_6		0x160
-#define BAM_FGPI3_ADDR_OFFST_7		0x164
-
-
-#define BAM_AI0_DMA_BUF_MODE		0x168
-#define BAM_AI0_ADDR_OFFST_0		0x16c
-#define BAM_AI0_ADDR_OFFST_1		0x170
-#define BAM_AI0_ADDR_OFFST_2		0x174
-#define BAM_AI0_ADDR_OFFST_3		0x178
-#define BAM_AI0_ADDR_OFFST_4		0x17c
-#define BAM_AIO_ADDR_OFFST_5		0x180
-#define BAM_AI0_ADDR_OFFST_6		0x184
-#define BAM_AIO_ADDR_OFFST_7		0x188
-
-#define BAM_AI1_DMA_BUF_MODE		0x18c
-#define BAM_AI1_ADDR_OFFST_0		0x190
-#define BAM_AI1_ADDR_OFFST_1		0x194
-#define BAM_AI1_ADDR_OFFST_2		0x198
-#define BAM_AI1_ADDR_OFFST_3		0x19c
-#define BAM_AI1_ADDR_OFFST_4		0x1a0
-#define BAM_AI1_ADDR_OFFST_5		0x1a4
-#define BAM_AI1_ADDR_OFFST_6		0x1a8
-#define BAM_AI1_ADDR_OFFST_7		0x1ac
-
-#define BAM_SW_RST			0xff0
-#define BAM_SW_RESET			(0x00000001 <<  0)
-
-
-
-
-
-/* -------------- MMU Registers -------------- */
-
-#define MMU				0x00009000
-
-#define MMU_MODE			0x000
-
-#define MMU_DMA_CONFIG0			0x004
-#define MMU_DMA_CONFIG1			0x008
-#define MMU_DMA_CONFIG2			0x00c
-#define MMU_DMA_CONFIG3			0x010
-#define MMU_DMA_CONFIG4			0x014
-#define MMU_DMA_CONFIG5			0x018
-#define MMU_DMA_CONFIG6			0x01c
-#define MMU_DMA_CONFIG7			0x020
-#define MMU_DMA_CONFIG8			0x024
-#define MMU_DMA_CONFIG9			0x028
-#define MMU_DMA_CONFIG10		0x02c
-#define MMU_DMA_CONFIG11		0x030
-#define MMU_DMA_CONFIG12		0x034
-#define MMU_DMA_CONFIG13		0x038
-#define MMU_DMA_CONFIG14		0x03c
-#define MMU_DMA_CONFIG15		0x040
-
-#define MMU_SW_RST			0xff0
-#define MMU_SW_RESET			(0x0001 <<  0)
-
-#define MMU_PTA_BASE0			0x044 /* DMA 0 */
-#define MMU_PTA_BASE1			0x084 /* DMA 1 */
-#define MMU_PTA_BASE2			0x0c4 /* DMA 2 */
-#define MMU_PTA_BASE3			0x104 /* DMA 3 */
-#define MMU_PTA_BASE4			0x144 /* DMA 4 */
-#define MMU_PTA_BASE5			0x184 /* DMA 5 */
-#define MMU_PTA_BASE6			0x1c4 /* DMA 6 */
-#define MMU_PTA_BASE7			0x204 /* DMA 7 */
-#define MMU_PTA_BASE8			0x244 /* DMA 8 */
-#define MMU_PTA_BASE9			0x284 /* DMA 9 */
-#define MMU_PTA_BASE10			0x2c4 /* DMA 10 */
-#define MMU_PTA_BASE11			0x304 /* DMA 11 */
-#define MMU_PTA_BASE12			0x344 /* DMA 12 */
-#define MMU_PTA_BASE13			0x384 /* DMA 13 */
-#define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
-#define MMU_PTA_BASE15			0x404 /* DMA 15 */
-
-#define MMU_PTA_BASE			0x044 /* DMA 0 */
-#define MMU_PTA_OFFSET			0x40
-
-#define PTA_BASE(__ch)			(MMU_PTA_BASE + (MMU_PTA_OFFSET * __ch))
-
-#define MMU_PTA0_LSB(__ch)		PTA_BASE(__ch) + 0x00
-#define MMU_PTA0_MSB(__ch)		PTA_BASE(__ch) + 0x04
-#define MMU_PTA1_LSB(__ch)		PTA_BASE(__ch) + 0x08
-#define MMU_PTA1_MSB(__ch)		PTA_BASE(__ch) + 0x0c
-#define MMU_PTA2_LSB(__ch)		PTA_BASE(__ch) + 0x10
-#define MMU_PTA2_MSB(__ch)		PTA_BASE(__ch) + 0x14
-#define MMU_PTA3_LSB(__ch)		PTA_BASE(__ch) + 0x18
-#define MMU_PTA3_MSB(__ch)		PTA_BASE(__ch) + 0x1c
-#define MMU_PTA4_LSB(__ch)		PTA_BASE(__ch) + 0x20
-#define MMU_PTA4_MSB(__ch)		PTA_BASE(__ch) + 0x24
-#define MMU_PTA5_LSB(__ch)		PTA_BASE(__ch) + 0x28
-#define MMU_PTA5_MSB(__ch)		PTA_BASE(__ch) + 0x2c
-#define MMU_PTA6_LSB(__ch)		PTA_BASE(__ch) + 0x30
-#define MMU_PTA6_MSB(__ch)		PTA_BASE(__ch) + 0x34
-#define MMU_PTA7_LSB(__ch)		PTA_BASE(__ch) + 0x38
-#define MMU_PTA7_MSB(__ch)		PTA_BASE(__ch) + 0x3c
-
-
-/* -------------- MSI Registers -------------- */
-
-#define MSI				0x0000a000
-
-#define MSI_DELAY_TIMER			0x000
-#define MSI_DELAY_1CLK			(0x00000001 <<  0)
-#define MSI_DELAY_2CLK			(0x00000002 <<  0)
-
-#define MSI_INTA_POLARITY		0x004
-#define MSI_INTA_POLARITY_HIGH		(0x00000001 <<  0)
-
-#define MSI_CONFIG0			0x008
-#define MSI_CONFIG1			0x00c
-#define MSI_CONFIG2			0x010
-#define MSI_CONFIG3			0x014
-#define MSI_CONFIG4			0x018
-#define MSI_CONFIG5			0x01c
-#define MSI_CONFIG6			0x020
-#define MSI_CONFIG7			0x024
-#define MSI_CONFIG8			0x028
-#define MSI_CONFIG9			0x02c
-#define MSI_CONFIG10			0x030
-#define MSI_CONFIG11			0x034
-#define MSI_CONFIG12			0x038
-#define MSI_CONFIG13			0x03c
-#define MSI_CONFIG14			0x040
-#define MSI_CONFIG15			0x044
-#define MSI_CONFIG16			0x048
-#define MSI_CONFIG17			0x04c
-#define MSI_CONFIG18			0x050
-#define MSI_CONFIG19			0x054
-#define MSI_CONFIG20			0x058
-#define MSI_CONFIG21			0x05c
-#define MSI_CONFIG22			0x060
-#define MSI_CONFIG23			0x064
-#define MSI_CONFIG24			0x068
-#define MSI_CONFIG25			0x06c
-#define MSI_CONFIG26			0x070
-#define MSI_CONFIG27			0x074
-#define MSI_CONFIG28			0x078
-#define MSI_CONFIG29			0x07c
-#define MSI_CONFIG30			0x080
-#define MSI_CONFIG31			0x084
-#define MSI_CONFIG32			0x088
-#define MSI_CONFIG33			0x08c
-#define MSI_CONFIG34			0x090
-#define MSI_CONFIG35			0x094
-#define MSI_CONFIG36			0x098
-#define MSI_CONFIG37			0x09c
-#define MSI_CONFIG38			0x0a0
-#define MSI_CONFIG39			0x0a4
-#define MSI_CONFIG40			0x0a8
-#define MSI_CONFIG41			0x0ac
-#define MSI_CONFIG42			0x0b0
-#define MSI_CONFIG43			0x0b4
-#define MSI_CONFIG44			0x0b8
-#define MSI_CONFIG45			0x0bc
-#define MSI_CONFIG46			0x0c0
-#define MSI_CONFIG47			0x0c4
-#define MSI_CONFIG48			0x0c8
-#define MSI_CONFIG49			0x0cc
-#define MSI_CONFIG50			0x0d0
-
-#define MSI_INT_POL_EDGE_RISE		(0x00000001 << 24)
-#define MSI_INT_POL_EDGE_FALL		(0x00000002 << 24)
-#define MSI_INT_POL_EDGE_ANY		(0x00000003 << 24)
-#define MSI_TC				(0x00000007 << 16)
-#define MSI_ID				(0x0000000f <<  0)
-
-#define MSI_INT_STATUS_L		0xfc0
-#define MSI_INT_TAGACK_VI0_0		(0x00000001 <<  0)
-#define MSI_INT_TAGACK_VI0_1		(0x00000001 <<  1)
-#define MSI_INT_TAGACK_VI0_2		(0x00000001 <<  2)
-#define MSI_INT_TAGACK_VI1_0		(0x00000001 <<  3)
-#define MSI_INT_TAGACK_VI1_1		(0x00000001 <<  4)
-#define MSI_INT_TAGACK_VI1_2		(0x00000001 <<  5)
-#define MSI_INT_TAGACK_FGPI_0		(0x00000001 <<  6)
-#define MSI_INT_TAGACK_FGPI_1		(0x00000001 <<  7)
-#define MSI_INT_TAGACK_FGPI_2		(0x00000001 <<  8)
-#define MSI_INT_TAGACK_FGPI_3		(0x00000001 <<  9)
-#define MSI_INT_TAGACK_AI_0		(0x00000001 << 10)
-#define MSI_INT_TAGACK_AI_1		(0x00000001 << 11)
-#define MSI_INT_OVRFLW_VI0_0		(0x00000001 << 12)
-#define MSI_INT_OVRFLW_VI0_1		(0x00000001 << 13)
-#define MSI_INT_OVRFLW_VI0_2		(0x00000001 << 14)
-#define MSI_INT_OVRFLW_VI1_0		(0x00000001 << 15)
-#define MSI_INT_OVRFLW_VI1_1		(0x00000001 << 16)
-#define MSI_INT_OVRFLW_VI1_2		(0x00000001 << 17)
-#define MSI_INT_OVRFLW_FGPI_O		(0x00000001 << 18)
-#define MSI_INT_OVRFLW_FGPI_1		(0x00000001 << 19)
-#define MSI_INT_OVRFLW_FGPI_2		(0x00000001 << 20)
-#define MSI_INT_OVRFLW_FGPI_3		(0x00000001 << 21)
-#define MSI_INT_OVRFLW_AI_0		(0x00000001 << 22)
-#define MSI_INT_OVRFLW_AI_1		(0x00000001 << 23)
-#define MSI_INT_AVINT_VI0		(0x00000001 << 24)
-#define MSI_INT_AVINT_VI1		(0x00000001 << 25)
-#define MSI_INT_AVINT_FGPI_0		(0x00000001 << 26)
-#define MSI_INT_AVINT_FGPI_1		(0x00000001 << 27)
-#define MSI_INT_AVINT_FGPI_2		(0x00000001 << 28)
-#define MSI_INT_AVINT_FGPI_3		(0x00000001 << 29)
-#define MSI_INT_AVINT_AI_0		(0x00000001 << 30)
-#define MSI_INT_AVINT_AI_1		(0x00000001 << 31)
-
-#define MSI_INT_STATUS_H		0xfc4
-#define MSI_INT_UNMAPD_TC_INT		(0x00000001 <<  0)
-#define MSI_INT_EXTINT_0		(0x00000001 <<  1)
-#define MSI_INT_EXTINT_1		(0x00000001 <<  2)
-#define MSI_INT_EXTINT_2		(0x00000001 <<  3)
-#define MSI_INT_EXTINT_3		(0x00000001 <<  4)
-#define MSI_INT_EXTINT_4		(0x00000001 <<  5)
-#define MSI_INT_EXTINT_5		(0x00000001 <<  6)
-#define MSI_INT_EXTINT_6		(0x00000001 <<  7)
-#define MSI_INT_EXTINT_7		(0x00000001 <<  8)
-#define MSI_INT_EXTINT_8		(0x00000001 <<  9)
-#define MSI_INT_EXTINT_9		(0x00000001 << 10)
-#define MSI_INT_EXTINT_10		(0x00000001 << 11)
-#define MSI_INT_EXTINT_11		(0x00000001 << 12)
-#define MSI_INT_EXTINT_12		(0x00000001 << 13)
-#define MSI_INT_EXTINT_13		(0x00000001 << 14)
-#define MSI_INT_EXTINT_14		(0x00000001 << 15)
-#define MSI_INT_EXTINT_15		(0x00000001 << 16)
-#define MSI_INT_I2CINT_0		(0x00000001 << 17)
-#define MSI_INT_I2CINT_1		(0x00000001 << 18)
-
-#define MSI_INT_STATUS_CLR_L		0xfc8
-#define MSI_INT_STATUS_CLR_H		0xfcc
-#define MSI_INT_STATUS_SET_L		0xfd0
-#define MSI_INT_STATUS_SET_H		0xfd4
-#define MSI_INT_ENA_L			0xfd8
-#define MSI_INT_ENA_H			0xfdc
-#define MSI_INT_ENA_CLR_L		0xfe0
-#define MSI_INT_ENA_CLR_H		0xfe4
-#define MSI_INT_ENA_SET_L		0xfe8
-#define MSI_INT_ENA_SET_H		0xfec
-
-#define MSI_SW_RST			0xff0
-#define MSI_SW_RESET			(0x0001 <<  0)
-
-#define MSI_MODULE_ID			0xffc
-
-
-/* -------------- I2C Registers -------------- */
-
-#define I2C_B				0x0000b000
-#define I2C_A				0x0000c000
-
-#define RX_FIFO				0x000
-#define I2C_RX_BYTE			(0x000000ff <<  0)
-
-#define TX_FIFO				0x000
-#define I2C_STOP_BIT			(0x00000001 <<  9)
-#define I2C_START_BIT			(0x00000001 <<  8)
-#define I2C_TX_BYTE			(0x000000ff <<  0)
-
-#define I2C_STATUS			0x008
-#define I2C_TRANSMIT			(0x00000001 << 11)
-#define I2C_RECEIVE			(0x00000001 << 10)
-#define I2C_TRANSMIT_S_PROG		(0x00000001 <<  9)
-#define I2C_TRANSMIT_S_CLEAR		(0x00000001 <<  8)
-#define I2C_TRANSMIT_PROG		(0x00000001 <<  7)
-#define I2C_TRANSMIT_CLEAR		(0x00000001 <<  6)
-#define I2C_RECEIVE_PROG		(0x00000001 <<  5)
-#define I2C_RECEIVE_CLEAR		(0x00000001 <<  4)
-#define I2C_SDA_LINE			(0x00000001 <<  3)
-#define I2C_SCL_LINE			(0x00000001 <<  2)
-#define I2C_START_STOP_FLAG		(0x00000001 <<  1)
-#define I2C_MODE_STATUS			(0x00000001 <<  0)
-
-#define I2C_CONTROL			0x00c
-#define I2C_SCL_CONTROL			(0x00000001 <<  7)
-#define I2C_SDA_CONTROL			(0x00000001 <<  6)
-#define I2C_RECEIVE_PROTECT		(0x00000001 <<  5)
-#define I2C_RECEIVE_PRO_READ		(0x00000001 <<  4)
-#define I2C_TRANS_SELF_CLEAR		(0x00000001 <<  3)
-#define I2C_TRANS_S_SELF_CLEAR		(0x00000001 <<  2)
-#define I2C_SLAVE_ADDR_10BIT		(0x00000001 <<  1)
-#define I2C_RESET			(0x00000001 <<  0)
-
-#define I2C_CLOCK_DIVISOR_HIGH		0x010
-#define I2C_CLOCK_HIGH			(0x0000ffff <<  0)
-
-#define I2C_CLOCK_DIVISOR_LOW		0x014
-#define I2C_CLOCK_LOW			(0x0000ffff <<  0)
-
-#define I2C_RX_LEVEL			0x01c
-#define I2C_RECEIVE_RANGE		(0x0000007f <<  0)
-
-#define I2C_TX_LEVEL			0x020
-#define I2C_TRANSMIT_RANGE		(0x0000007f <<  0)
-
-#define I2C_SDA_HOLD			0x028
-#define I2C_HOLD_TIME			(0x0000007f <<  0)
-
-#define MODULE_CONF			0xfd4
-#define INT_CLR_ENABLE			0xfd8
-#define I2C_CLR_ENABLE_STFNF		(0x00000001 << 12)
-#define I2C_CLR_ENABLE_MTFNF		(0x00000001 << 11)
-#define I2C_CLR_ENABLE_RFDA		(0x00000001 << 10)
-#define I2C_CLR_ENABLE_RFF		(0x00000001 <<  9)
-#define I2C_CLR_ENABLE_STDR		(0x00000001 <<  8)
-#define I2C_CLR_ENABLE_MTDR		(0x00000001 <<  7)
-#define I2C_CLR_ENABLE_IBE		(0x00000001 <<  6)
-#define I2C_CLR_ENABLE_MSMC		(0x00000001 <<  5)
-#define I2C_CLR_ENABLE_SRSD		(0x00000001 <<  4)
-#define I2C_CLR_ENABLE_STSD		(0x00000001 <<  3)
-#define I2C_CLR_ENABLE_MTNA		(0x00000001 <<  2)
-#define I2C_CLR_ENABLE_MAF		(0x00000001 <<  1)
-#define I2C_CLR_ENABLE_MTD		(0x00000001 <<  0)
-
-#define INT_SET_ENABLE			0xfdc
-#define I2C_SET_ENABLE_STFNF		(0x00000001 << 12)
-#define I2C_SET_ENABLE_MTFNF		(0x00000001 << 11)
-#define I2C_SET_ENABLE_RFDA		(0x00000001 << 10)
-#define I2C_SET_ENABLE_RFF		(0x00000001 <<  9)
-#define I2C_SET_ENABLE_STDR		(0x00000001 <<  8)
-#define I2C_SET_ENABLE_MTDR		(0x00000001 <<  7)
-#define I2C_SET_ENABLE_IBE		(0x00000001 <<  6)
-#define I2C_SET_ENABLE_MSMC		(0x00000001 <<  5)
-#define I2C_SET_ENABLE_SRSD		(0x00000001 <<  4)
-#define I2C_SET_ENABLE_STSD		(0x00000001 <<  3)
-#define I2C_SET_ENABLE_MTNA		(0x00000001 <<  2)
-#define I2C_SET_ENABLE_MAF		(0x00000001 <<  1)
-#define I2C_SET_ENABLE_MTD		(0x00000001 <<  0)
-
-#define INT_STATUS			0xfe0
-#define I2C_INTERRUPT_STFNF		(0x00000001 << 12)
-#define I2C_INTERRUPT_MTFNF		(0x00000001 << 11)
-#define I2C_INTERRUPT_RFDA		(0x00000001 << 10)
-#define I2C_INTERRUPTE_RFF		(0x00000001 <<  9)
-#define I2C_SLAVE_INTERRUPT_STDR	(0x00000001 <<  8)
-#define I2C_MASTER_INTERRUPT_MTDR	(0x00000001 <<  7)
-#define I2C_ERROR_IBE			(0x00000001 <<  6)
-#define I2C_MODE_CHANGE_INTER_MSMC	(0x00000001 <<  5)
-#define I2C_SLAVE_RECEIVE_INTER_SRSD	(0x00000001 <<  4)
-#define I2C_SLAVE_TRANSMIT_INTER_STSD	(0x00000001 <<  3)
-#define I2C_ACK_INTER_MTNA		(0x00000001 <<  2)
-#define I2C_FAILURE_INTER_MAF		(0x00000001 <<  1)
-#define I2C_INTERRUPT_MTD		(0x00000001 <<  0)
-
-#define INT_ENABLE			0xfe4
-#define I2C_ENABLE_STFNF		(0x00000001 << 12)
-#define I2C_ENABLE_MTFNF		(0x00000001 << 11)
-#define I2C_ENABLE_RFDA			(0x00000001 << 10)
-#define I2C_ENABLE_RFF			(0x00000001 <<  9)
-#define I2C_ENABLE_STDR			(0x00000001 <<  8)
-#define I2C_ENABLE_MTDR			(0x00000001 <<  7)
-#define I2C_ENABLE_IBE			(0x00000001 <<  6)
-#define I2C_ENABLE_MSMC			(0x00000001 <<  5)
-#define I2C_ENABLE_SRSD			(0x00000001 <<  4)
-#define I2C_ENABLE_STSD			(0x00000001 <<  3)
-#define I2C_ENABLE_MTNA			(0x00000001 <<  2)
-#define I2C_ENABLE_MAF			(0x00000001 <<  1)
-#define I2C_ENABLE_MTD			(0x00000001 <<  0)
-
-#define INT_CLR_STATUS			0xfe8
-#define I2C_CLR_STATUS_STFNF		(0x00000001 << 12)
-#define I2C_CLR_STATUS_MTFNF		(0x00000001 << 11)
-#define I2C_CLR_STATUS_RFDA		(0x00000001 << 10)
-#define I2C_CLR_STATUS_RFF		(0x00000001 <<  9)
-#define I2C_CLR_STATUS_STDR		(0x00000001 <<  8)
-#define I2C_CLR_STATUS_MTDR		(0x00000001 <<  7)
-#define I2C_CLR_STATUS_IBE		(0x00000001 <<  6)
-#define I2C_CLR_STATUS_MSMC		(0x00000001 <<  5)
-#define I2C_CLR_STATUS_SRSD		(0x00000001 <<  4)
-#define I2C_CLR_STATUS_STSD		(0x00000001 <<  3)
-#define I2C_CLR_STATUS_MTNA		(0x00000001 <<  2)
-#define I2C_CLR_STATUS_MAF		(0x00000001 <<  1)
-#define I2C_CLR_STATIS_MTD		(0x00000001 <<  0)
-
-#define INT_SET_STATUS			0xfec
-#define I2C_SET_STATUS_STFNF		(0x00000001 << 12)
-#define I2C_SET_STATUS_MTFNF		(0x00000001 << 11)
-#define I2C_SET_STATUS_RFDA		(0x00000001 << 10)
-#define I2C_SET_STATUS_RFF		(0x00000001 <<  9)
-#define I2C_SET_STATUS_STDR		(0x00000001 <<  8)
-#define I2C_SET_STATUS_MTDR		(0x00000001 <<  7)
-#define I2C_SET_STATUS_IBE		(0x00000001 <<  6)
-#define I2C_SET_STATUS_MSMC		(0x00000001 <<  5)
-#define I2C_SET_STATUS_SRSD		(0x00000001 <<  4)
-#define I2C_SET_STATUS_STSD		(0x00000001 <<  3)
-#define I2C_SET_STATUS_MTNA		(0x00000001 <<  2)
-#define I2C_SET_STATUS_MAF		(0x00000001 <<  1)
-#define I2C_SET_STATIS_MTD		(0x00000001 <<  0)
-
-
-
-
-/* -------------- SPI Registers -------------- */
-
-#define SPI				0x0000d000
-
-#define SPI_CONTROL_REG			0x000
-#define SPI_SERIAL_INTER_ENABLE		(0x00000001 <<  7)
-#define SPI_LSB_FIRST_ENABLE		(0x00000001 <<  6)
-#define SPI_MODE_SELECT			(0x00000001 <<  5)
-#define SPI_CLOCK_POLARITY		(0x00000001 <<  4)
-#define SPI_CLOCK_PHASE			(0x00000001 <<  3)
-
-#define SPI_STATUS			0x004
-#define SPI_TRANSFER_FLAG		(0x00000001 <<  7)
-#define SPI_WRITE_COLLISSION		(0x00000001 <<  6)
-#define SPI_READ_OVERRUN		(0x00000001 <<  5)
-#define SPI_MODE_FAULT			(0x00000001 <<  4)
-#define SPI_SLAVE_ABORT			(0x00000001 <<  3)
-
-#define SPI_DATA			0x008
-#define SPI_BIDI_DATA			(0x000000ff <<  0)
-
-#define SPI_CLOCK_COUNTER		0x00c
-#define SPI_CLOCK			(0x00000001 <<  0)
-
-
-
-
-/* -------------- GPIO Registers -------------- */
-
-#define GPIO				0x0000e000
-
-#define GPIO_RD				0x000
-#define GPIO_WR				0x004
-#define GPIO_WR_MODE			0x008
-#define GPIO_OEN			0x00c
-
-#define GPIO_SW_RST			0xff0
-#define GPIO_SW_RESET			(0x00000001 <<  0)
-
-#define GPIO_31				(1 << 31)
-#define GPIO_30				(1 << 30)
-#define GPIO_29				(1 << 29)
-#define GPIO_28				(1 << 28)
-#define GPIO_27				(1 << 27)
-#define GPIO_26				(1 << 26)
-#define GPIO_25				(1 << 25)
-#define GPIO_24				(1 << 24)
-#define GPIO_23				(1 << 23)
-#define GPIO_22				(1 << 22)
-#define GPIO_21				(1 << 21)
-#define GPIO_20				(1 << 20)
-#define GPIO_19				(1 << 19)
-#define GPIO_18				(1 << 18)
-#define GPIO_17				(1 << 17)
-#define GPIO_16				(1 << 16)
-#define GPIO_15				(1 << 15)
-#define GPIO_14				(1 << 14)
-#define GPIO_13				(1 << 13)
-#define GPIO_12				(1 << 12)
-#define GPIO_11				(1 << 11)
-#define GPIO_10				(1 << 10)
-#define GPIO_09				(1 <<  9)
-#define GPIO_08				(1 <<  8)
-#define GPIO_07				(1 <<  7)
-#define GPIO_06				(1 <<  6)
-#define GPIO_05				(1 <<  5)
-#define GPIO_04				(1 <<  4)
-#define GPIO_03				(1 <<  3)
-#define GPIO_02				(1 <<  2)
-#define GPIO_01				(1 <<  1)
-#define GPIO_00				(1 <<  0)
-
-/* -------------- PHI_0 Registers -------------- */
-
-#define	PHI_0				0x0000f000
-
-#define PHI_0_MODE			0x0000
-#define PHI_0_0_CONFIG			0x0008
-#define PHI_0_1_CONFIG			0x000c
-#define PHI_0_2_CONFIG			0x0010
-#define PHI_0_3_CONFIG			0x0014
-
-#define PHI_POLARITY			0x0038
-#define PHI_TIMEOUT			0x003c
-#define PHI_SW_RST			0x0ff0
-
-#define PHI_0_0_RW_0			0x1000
-#define PHI_0_0_RW_511			0x17fc
-
-#define PHI_0_1_RW_0			0x1800
-#define PHI_0_1_RW_511			0x1ffc
-
-#define PHI_0_2_RW_0			0x2000
-#define PHI_0_2_RW_511			0x27fc
-
-#define PHI_0_3_RW_0			0x2800
-#define PHI_0_3_RW_511			0x2ffc
-
-#define PHI_CSN_DEASSERT		(0x00000001 <<  2)
-#define PHI_AUTO_INCREMENT		(0x00000001 <<  1)
-#define PHI_FIFO_MODE			(0x00000001 <<  0)
-
-#define PHI_DELAY_RD_WR			(0x0000001f << 27)
-#define PHI_EXTEND_RDY3			(0x00000003 << 25)
-#define PHI_EXTEND_RDY2			(0x00000003 << 23)
-#define PHI_EXTEND_RDY1			(0x00000003 << 21)
-#define PHI_EXTEND_RDY0			(0x00000003 << 19)
-#define PHI_RDY3_OD			(0x00000001 << 18)
-#define PHI_RDY2_OD			(0x00000001 << 17)
-#define PHI_RDY1_OD			(0x00000001 << 16)
-#define PHI_RDY0_OD			(0x00000001 << 15)
-#define PHI_ALE_POL			(0x00000001 << 14)
-#define PHI_WRN_POL			(0x00000001 << 13)
-#define PHI_RDN_POL			(0x00000001 << 12)
-#define PHI_RDY3_POL			(0x00000001 << 11)
-#define PHI_RDY2_POL			(0x00000001 << 10)
-#define PHI_RDY1_POL			(0x00000001 <<  9)
-#define PHI_RDY0_POL			(0x00000001 <<  8)
-#define PHI_CSN7_POL			(0x00000001 <<  7)
-#define PHI_CSN6_POL			(0x00000001 <<  6)
-#define PHI_CSN5_POL			(0x00000001 <<  5)
-#define PHI_CSN4_POL			(0x00000001 <<  4)
-#define PHI_CSN3_POL			(0x00000001 <<  3)
-#define PHI_CSN2_POL			(0x00000001 <<  2)
-#define PHI_CSN1_POL			(0x00000001 <<  1)
-#define PHI_CSN0_POL			(0x00000001 <<  0)
-
-/* -------------- PHI_1 Registers -------------- */
-
-#define	PHI_1				0x00020000
-
-#define PHI_1_MODE			0x00004
-#define PHI_1_0_CONFIG			0x00018
-#define PHI_1_1_CONFIG			0x0001c
-#define PHI_1_2_CONFIG			0x00020
-#define PHI_1_3_CONFIG			0x00024
-#define PHI_1_4_CONFIG			0x00028
-#define PHI_1_5_CONFIG			0x0002c
-#define PHI_1_6_CONFIG			0x00030
-#define PHI_1_7_CONFIG			0x00034
-
-#define PHI_1_0_RW_0			0x00000
-#define PHI_1_0_RW_16383		0x0fffc
-
-#define PHI_1_1_RW_0			0x1000
-#define PHI_1_1_RW_16383		0x1ffc
-
-#define PHI_1_2_RW_0			0x2000
-#define PHI_1_2_RW_16383		0x2ffc
-
-#define PHI_1_3_RW_0			0x3000
-#define PHI_1_3_RW_16383		0x3ffc
-
-#define PHI_1_4_RW_0			0x4000
-#define PHI_1_4_RW_16383		0x4ffc
-
-#define PHI_1_5_RW_0			0x5000
-#define PHI_1_5_RW_16383		0x5ffc
-
-#define PHI_1_6_RW_0			0x6000
-#define PHI_1_6_RW_16383		0x6ffc
-
-#define PHI_1_7_RW_0			0x7000
-#define PHI_1_7_RW_16383		0x7ffc
-
-/* -------------- CGU Registers -------------- */
-
-#define CGU				0x00013000
-
-#define CGU_SCR_0			0x000
-#define CGU_SCR_1			0x004
-#define CGU_SCR_2			0x008
-#define CGU_SCR_3			0x00c
-#define CGU_SCR_4			0x010
-#define CGU_SCR_5			0x014
-#define CGU_SCR_6			0x018
-#define CGU_SCR_7			0x01c
-#define CGU_SCR_8			0x020
-#define CGU_SCR_9			0x024
-#define CGU_SCR_10			0x028
-#define CGU_SCR_11			0x02c
-#define CGU_SCR_12			0x030
-#define CGU_SCR_13			0x034
-#define CGU_SCR_STOP			(0x00000001 <<  3)
-#define CGU_SCR_RESET			(0x00000001 <<  2)
-#define CGU_SCR_ENF2			(0x00000001 <<  1)
-#define CGU_SCR_ENF1			(0x00000001 <<  0)
-
-#define CGU_FS1_0			0x038
-#define CGU_FS1_1			0x03c
-#define CGU_FS1_2			0x040
-#define CGU_FS1_3			0x044
-#define CGU_FS1_4			0x048
-#define CGU_FS1_5			0x04c
-#define CGU_FS1_6			0x050
-#define CGU_FS1_7			0x054
-#define CGU_FS1_8			0x058
-#define CGU_FS1_9			0x05c
-#define CGU_FS1_10			0x060
-#define CGU_FS1_11			0x064
-#define CGU_FS1_12			0x068
-#define CGU_FS1_13			0x06c
-#define CGU_FS1_PLL			(0x00000000 <<  0)
-
-
-#define CGU_FS2_0			0x070
-#define CGU_FS2_1			0x074
-#define CGU_FS2_2			0x078
-#define CGU_FS2_3			0x07c
-#define CGU_FS2_4			0x080
-#define CGU_FS2_5			0x084
-#define CGU_FS2_6			0x088
-#define CGU_FS2_7			0x08c
-#define CGU_FS2_8			0x090
-#define CGU_FS2_9			0x094
-#define CGU_FS2_10			0x098
-#define CGU_FS2_11			0x09c
-#define CGU_FS2_12			0x0a0
-#define CGU_FS2_13			0x0a4
-
-#define CGU_SSR_0			0x0a8
-#define CGU_SSR_1			0x0ac
-#define CGU_SSR_2			0x0b0
-#define CGU_SSR_3			0x0b4
-#define CGU_SSR_4			0x0b8
-#define CGU_SSR_5			0x0bc
-#define CGU_SSR_6			0x0c0
-#define CGU_SSR_7			0x0c4
-#define CGU_SSR_8			0x0c8
-#define CGU_SSR_9			0x0cc
-#define CGU_SSR_10			0x0d0
-#define CGU_SSR_11			0x0d4
-#define CGU_SSR_12			0x0d8
-#define CGU_SSR_13			0x0dc
-
-#define CGU_PCR_0_0			0x0e0
-#define CGU_PCR_0_1			0x0e4
-#define CGU_PCR_0_2			0x0e8
-#define CGU_PCR_0_3			0x0ec
-#define CGU_PCR_0_4			0x0f0
-#define CGU_PCR_0_5			0x0f4
-#define CGU_PCR_0_6			0x0f8
-#define CGU_PCR_0_7			0x0fc
-#define CGU_PCR_1_0			0x100
-#define CGU_PCR_1_1			0x104
-#define CGU_PCR_2_0			0x108
-#define CGU_PCR_2_1			0x10c
-#define CGU_PCR_3_0			0x110
-#define CGU_PCR_3_1			0x114
-#define CGU_PCR_3_2			0x118
-#define CGU_PCR_4_0			0x11c
-#define CGU_PCR_4_1			0x120
-#define CGU_PCR_5			0x124
-#define CGU_PCR_6			0x128
-#define CGU_PCR_7			0x12c
-#define CGU_PCR_8			0x130
-#define CGU_PCR_9			0x134
-#define CGU_PCR_10			0x138
-#define CGU_PCR_11			0x13c
-#define CGU_PCR_12			0x140
-#define CGU_PCR_13			0x144
-#define CGU_PCR_WAKE_EN			(0x00000001 <<  2)
-#define CGU_PCR_AUTO			(0x00000001 <<  1)
-#define CGU_PCR_RUN			(0x00000001 <<  0)
-
-
-#define CGU_PSR_0_0			0x148
-#define CGU_PSR_0_1			0x14c
-#define CGU_PSR_0_2			0x150
-#define CGU_PSR_0_3			0x154
-#define CGU_PSR_0_4			0x158
-#define CGU_PSR_0_5			0x15c
-#define CGU_PSR_0_6			0x160
-#define CGU_PSR_0_7			0x164
-#define CGU_PSR_1_0			0x168
-#define CGU_PSR_1_1			0x16c
-#define CGU_PSR_2_0			0x170
-#define CGU_PSR_2_1			0x174
-#define CGU_PSR_3_0			0x178
-#define CGU_PSR_3_1			0x17c
-#define CGU_PSR_3_2			0x180
-#define CGU_PSR_4_0			0x184
-#define CGU_PSR_4_1			0x188
-#define CGU_PSR_5			0x18c
-#define CGU_PSR_6			0x190
-#define CGU_PSR_7			0x194
-#define CGU_PSR_8			0x198
-#define CGU_PSR_9			0x19c
-#define CGU_PSR_10			0x1a0
-#define CGU_PSR_11			0x1a4
-#define CGU_PSR_12			0x1a8
-#define CGU_PSR_13			0x1ac
-
-#define CGU_ESR_0_0			0x1b0
-#define CGU_ESR_0_1			0x1b4
-#define CGU_ESR_0_2			0x1b8
-#define CGU_ESR_0_3			0x1bc
-#define CGU_ESR_0_4			0x1c0
-#define CGU_ESR_0_5			0x1c4
-#define CGU_ESR_0_6			0x1c8
-#define CGU_ESR_0_7			0x1cc
-#define CGU_ESR_1_0			0x1d0
-#define CGU_ESR_1_1			0x1d4
-#define CGU_ESR_2_0			0x1d8
-#define CGU_ESR_2_1			0x1dc
-#define CGU_ESR_3_0			0x1e0
-#define CGU_ESR_3_1			0x1e4
-#define CGU_ESR_3_2			0x1e8
-#define CGU_ESR_4_0			0x1ec
-#define CGU_ESR_4_1			0x1f0
-#define CGU_ESR_5			0x1f4
-#define CGU_ESR_6			0x1f8
-#define CGU_ESR_7			0x1fc
-#define CGU_ESR_8			0x200
-#define CGU_ESR_9			0x204
-#define CGU_ESR_10			0x208
-#define CGU_ESR_11			0x20c
-#define CGU_ESR_12			0x210
-#define CGU_ESR_13			0x214
-#define CGU_ESR_FD_EN			(0x00000001 <<  0)
-
-#define CGU_FDC_0			0x218
-#define CGU_FDC_1			0x21c
-#define CGU_FDC_2			0x220
-#define CGU_FDC_3			0x224
-#define CGU_FDC_4			0x228
-#define CGU_FDC_5			0x22c
-#define CGU_FDC_6			0x230
-#define CGU_FDC_7			0x234
-#define CGU_FDC_8			0x238
-#define CGU_FDC_9			0x23c
-#define CGU_FDC_10			0x240
-#define CGU_FDC_11			0x244
-#define CGU_FDC_12			0x248
-#define CGU_FDC_13			0x24c
-#define CGU_FDC_STRETCH			(0x00000001 <<  0)
-#define CGU_FDC_RESET			(0x00000001 <<  1)
-#define CGU_FDC_RUN1			(0x00000001 <<  2)
-#define CGU_FDC_MADD			(0x000000ff <<  3)
-#define CGU_FDC_MSUB			(0x000000ff << 11)
-
-/* -------------- DCS Registers -------------- */
-
-#define DCS				0x00014000
-
-#define DCSC_CTRL			0x000
-#define DCSC_SEL_PLLDI			(0x03ffffff <<  5)
-#define DCSC_TOUT_SEL			(0x0000000f <<  1)
-#define DCSC_TOUT_OFF			(0x00000001 <<  0)
-
-#define DCSC_ADDR			0x00c
-#define DCSC_ERR_TOUT_ADDR		(0x3fffffff <<  2)
-
-#define DCSC_STAT			0x010
-#define DCSC_ERR_TOUT_GNT		(0x0000001f << 24)
-#define DCSC_ERR_TOUT_SEL		(0x0000007f << 10)
-#define DCSC_ERR_TOUT_READ		(0x00000001 <<  8)
-#define DCSC_ERR_TOUT_MASK		(0x0000000f <<  4)
-#define DCSC_ERR_ACK			(0x00000001 <<  1)
-
-#define DCSC_FEATURES			0x040
-#define DCSC_UNIQUE_ID			(0x00000007 << 16)
-#define DCSC_SECURITY			(0x00000001 << 14)
-#define DCSC_NUM_BASE_REGS		(0x00000003 << 11)
-#define DCSC_NUM_TARGETS		(0x0000001f <<  5)
-#define DCSC_NUM_INITIATORS		(0x0000001f <<  0)
-
-#define DCSC_BASE_REG0			0x100
-#define DCSC_BASE_N_REG			(0x00000fff << 20)
-
-#define DCSC_INT_CLR_ENABLE		0xfd8
-#define DCSC_INT_CLR_ENABLE_TOUT	(0x00000001 <<  1)
-#define DCSC_INT_CLR_ENABLE_ERROR	(0x00000001 <<  0)
-
-#define DCSC_INT_SET_ENABLE		0xfdc
-#define DCSC_INT_SET_ENABLE_TOUT	(0x00000001 <<  1)
-#define DCSC_INT_SET_ENABLE_ERROR	(0x00000001 <<  0)
-
-#define DCSC_INT_STATUS			0xfe0
-#define DCSC_INT_STATUS_TOUT		(0x00000001 <<  1)
-#define DCSC_INT_STATUS_ERROR		(0x00000001 <<  0)
-
-#define DCSC_INT_ENABLE			0xfe4
-#define DCSC_INT_ENABLE_TOUT		(0x00000001 <<  1)
-#define DCSC_INT_ENABLE_ERROR		(0x00000001 <<  0)
-
-#define DCSC_INT_CLR_STATUS		0xfe8
-#define DCSC_INT_CLEAR_TOUT		(0x00000001 <<  1)
-#define DCSC_INT_CLEAR_ERROR		(0x00000001 <<  0)
-
-#define DCSC_INT_SET_STATUS		0xfec
-#define DCSC_INT_SET_TOUT		(0x00000001 <<  1)
-#define DCSC_INT_SET_ERROR		(0x00000001 <<  0)
-
-
-
-
-/* -------------- GREG Registers -------------- */
-
-#define GREG				0x00012000
-
-#define GREG_SUBSYS_CONFIG		0x000
-#define GREG_SUBSYS_ID			(0x0000ffff << 16)
-#define GREG_SUBSYS_VID			(0x0000ffff <<  0)
-
-#define GREG_MSI_BAR_PMCSR		0x004
-#define GREG_PMCSR_SCALE_7		(0x00000003 << 30)
-#define GREG_PMCSR_SCALE_6		(0x00000003 << 28)
-#define GREG_PMCSR_SCALE_5		(0x00000003 << 26)
-#define GREG_PMCSR_SCALE_4		(0x00000003 << 24)
-#define GREG_PMCSR_SCALE_3		(0x00000003 << 22)
-#define GREG_PMCSR_SCALE_2		(0x00000003 << 20)
-#define GREG_PMCSR_SCALE_1		(0x00000003 << 18)
-#define GREG_PMCSR_SCALE_0		(0x00000003 << 16)
-
-#define GREG_BAR_WIDTH_17		(0x0000001e <<  8)
-#define GREG_BAR_WIDTH_18		(0x0000001c <<  8)
-#define GREG_BAR_WIDTH_19		(0x00000018 <<  8)
-#define GREG_BAR_WIDTH_20		(0x00000010 <<  8)
-
-#define GREG_BAR_PREFETCH		(0x00000001 <<  3)
-#define GREG_MSI_MM_CAP1		(0x00000000 <<  0) // FIXME !
-#define GREG_MSI_MM_CAP2		(0x00000001 <<  0)
-#define GREG_MSI_MM_CAP4		(0x00000002 <<  0)
-#define GREG_MSI_MM_CAP8		(0x00000003 <<  0)
-#define GREG_MSI_MM_CAP16		(0x00000004 <<  0)
-#define GREG_MSI_MM_CAP32		(0x00000005 <<  0)
-
-#define GREG_PMCSR_DATA_1		0x008
-#define GREG_PMCSR_DATA_2		0x00c
-#define GREG_VI_CTRL			0x010
-#define GREG_FGPI_CTRL			0x014
-
-#define GREG_RSTU_CTRL			0x018
-#define GREG_BOOT_READY			(0x00000001 << 13)
-#define GREG_RESET_REQ			(0x00000001 << 12)
-#define GREG_IP_RST_RELEASE		(0x00000001 << 11)
-#define GREG_ADAPTER_RST_RELEASE	(0x00000001 << 10)
-#define GREG_PCIE_CORE_RST_RELEASE	(0x00000001 <<  9)
-#define GREG_BOOT_IP_RST_RELEASE	(0x00000001 <<  8)
-#define GREG_BOOT_RST_RELEASE		(0x00000001 <<  7)
-#define GREG_CGU_RST_RELEASE		(0x00000001 <<  6)
-#define GREG_IP_RST_ASSERT		(0x00000001 <<  5)
-#define GREG_ADAPTER_RST_ASSERT		(0x00000001 <<  4)
-#define GREG_RST_ASSERT			(0x00000001 <<  3)
-#define GREG_BOOT_IP_RST_ASSERT		(0x00000001 <<  2)
-#define GREG_BOOT_RST_ASSERT		(0x00000001 <<  1)
-#define GREG_CGU_RST_ASSERT		(0x00000001 <<  0)
-
-#define GREG_I2C_CTRL			0x01c
-#define GREG_I2C_SLAVE_ADDR		(0x0000007f <<  0)
-
-#define GREG_OVFLW_CTRL			0x020
-#define GREG_OVERFLOW_ENABLE		(0x00001fff <<  0)
-
-#define GREG_TAG_ACK_FLEN		0x024
-#define GREG_TAG_ACK_FLEN_1B		(0x00000000 <<  0)
-#define GREG_TAG_ACK_FLEN_2B		(0x00000001 <<  0)
-#define GREG_TAG_ACK_FLEN_4B		(0x00000002 <<  0)
-#define GREG_TAG_ACK_FLEN_8B		(0x00000003 <<  0)
-
-#define GREG_VIDEO_IN_CTRL		0x028
-
-#define GREG_SPARE_1			0x02c
-#define GREG_SPARE_2			0x030
-#define GREG_SPARE_3			0x034
-#define GREG_SPARE_4			0x038
-#define GREG_SPARE_5			0x03c
-#define GREG_SPARE_6			0x040
-#define GREG_SPARE_7			0x044
-#define GREG_SPARE_8			0x048
-#define GREG_SPARE_9			0x04c
-#define GREG_SPARE_10			0x050
-#define GREG_SPARE_11			0x054
-#define GREG_SPARE_12			0x058
-#define GREG_SPARE_13			0x05c
-#define GREG_SPARE_14			0x060
-#define GREG_SPARE_15			0x064
-
-#define GREG_FAIL_DISABLE		0x068
-#define GREG_BOOT_FAIL_DISABLE		(0x00000001 <<  0)
-
-#define GREG_SW_RST			0xff0
-#define GREG_SW_RESET			(0x00000001 <<  0)
-
-
-
-
-/* BAR = 20 bits */
-
-/* -------------- PHI1 Registers -------------- */
-
-#define PHI_1				0x00020000
-
-
-
-#endif /* __SAA716x_REG_H */

From 8a67890ecd90f32925a45f71f839568d8fec1780 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 20 Dec 2012 14:49:55 +0100
Subject: [PATCH 229/364] saa716x: Remove duplicate definition.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  | 2 ++
 drivers/media/pci/saa716x/saa716x_mod.h     | 2 +-
 drivers/media/pci/saa716x/saa716x_phi_reg.h | 6 ------
 3 files changed, 3 insertions(+), 7 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 81c1078146d68..ac15a4439a0ac 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -3,6 +3,8 @@
 #include <linux/dvb/video.h>
 #include <linux/dvb/osd.h>
 
+#include "saa716x_mod.h"
+
 #include "saa716x_phi_reg.h"
 
 #include "saa716x_phi.h"
diff --git a/drivers/media/pci/saa716x/saa716x_mod.h b/drivers/media/pci/saa716x/saa716x_mod.h
index 273efdd99cd4e..a059ca4b321eb 100644
--- a/drivers/media/pci/saa716x/saa716x_mod.h
+++ b/drivers/media/pci/saa716x/saa716x_mod.h
@@ -41,7 +41,7 @@
 #define I2C_A				0x0000c000
 #define SPI				0x0000d000
 #define GPIO				0x0000e000
-#define	PHI_0				0x0000f000
+#define PHI_0				0x0000f000
 #define GREG				0x00012000
 #define CGU				0x00013000
 #define DCS				0x00014000
diff --git a/drivers/media/pci/saa716x/saa716x_phi_reg.h b/drivers/media/pci/saa716x/saa716x_phi_reg.h
index 08f0aa7b7b23c..cb9e148e09d83 100644
--- a/drivers/media/pci/saa716x/saa716x_phi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_phi_reg.h
@@ -56,8 +56,6 @@
 
 /* -------------- PHI_1 Registers -------------- */
 
-#define	PHI_1				0x00020000
-
 #define PHI_1_MODE			0x00004
 #define PHI_1_0_CONFIG			0x00018
 #define PHI_1_1_CONFIG			0x0001c
@@ -93,8 +91,4 @@
 #define PHI_1_7_RW_16383		0x7ffc
 
 
-/* BAR = 20 bits */
-/* -------------- PHI1 Registers -------------- */
-
-
 #endif /* __SAA716x_PHI_REG_H */

From f182e96a063b95f6c9627dd3db20983b92506eee Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 20 Dec 2012 15:13:49 +0100
Subject: [PATCH 230/364] saa716x: Make BAM register macros more generic.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.h  | 23 ++++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_fgpi.c | 25 ++++++++++++------------
 drivers/media/pci/saa716x/saa716x_fgpi.h | 22 ---------------------
 3 files changed, 36 insertions(+), 34 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.h b/drivers/media/pci/saa716x/saa716x_dma.h
index f92d667b5870e..a56b35134a729 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.h
+++ b/drivers/media/pci/saa716x/saa716x_dma.h
@@ -3,6 +3,29 @@
 
 #define SAA716x_PAGE_SIZE	4096
 
+#define PTA_LSB(__mem)		((u32 ) (__mem))
+#define PTA_MSB(__mem)		((u32 ) ((u64)(__mem) >> 32))
+
+#define BAM_DMA_BUF_MODE_BASE		0x00
+#define BAM_DMA_BUF_MODE_OFFSET		0x24
+
+#define BAM_DMA_BUF_MODE(__ch)		(BAM_DMA_BUF_MODE_BASE + (BAM_DMA_BUF_MODE_OFFSET * __ch))
+
+#define BAM_ADDR_OFFSET_BASE		0x04
+#define BAM_ADDR_OFFSET_OFFSET		0x24
+
+#define BAM_ADDR_OFFSET(__ch)		(BAM_ADDR_OFFSET_BASE + (BAM_ADDR_OFFSET_OFFSET * __ch))
+
+#define BAM_ADDR_OFFSET_0(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x00)
+#define BAM_ADDR_OFFSET_1(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x04)
+#define BAM_ADDR_OFFSET_2(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x08)
+#define BAM_ADDR_OFFSET_3(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x0c)
+#define BAM_ADDR_OFFSET_4(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x10)
+#define BAM_ADDR_OFFSET_5(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x14)
+#define BAM_ADDR_OFFSET_6(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x18)
+#define BAM_ADDR_OFFSET_7(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x1c)
+
+
 enum saa716x_dma_type {
 	SAA716x_DMABUF_EXT_LIN, /* Linear external */
 	SAA716x_DMABUF_EXT_SG, /* SG external */
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 0a8caf2de22f4..844aa38a0ebf9 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -206,17 +206,18 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	u32 fgpi_port, buf_mode, val, mid;
 	u32 D1_XY_END, offst_1, offst_2;
 	int i = 0;
+	u8 dma_channel;
 
 	fgpi_port = fgpi_ch[port];
 	buf_mode = bamdma_bufmode[port];
+	dma_channel = saa716x->fgpi[port].dma_channel;
 
 	/* Reset FGPI block */
 	SAA716x_EPWR(fgpi_port, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
 
 	/* Reset DMA channel */
 	SAA716x_EPWR(BAM, buf_mode, 0x00000040);
-	saa716x_init_ptables(dmabuf, saa716x->fgpi[port].dma_channel,
-			     stream_params);
+	saa716x_init_ptables(dmabuf, dma_channel, stream_params);
 
 
 	/* monitor BAM reset */
@@ -236,14 +237,14 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	SAA716x_EPWR(BAM, buf_mode, FGPI_BUFFERS - 1);
 
 	/* initialize all available address offsets */
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_0(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_1(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_2(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_3(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_4(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_5(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_6(port), 0x0);
-	SAA716x_EPWR(BAM, BAM_FGPI_ADDR_OFFST_7(port), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_0(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_1(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_2(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_3(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_4(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_5(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_6(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_7(dma_channel), 0x0);
 
 	/* get module ID */
 	mid = SAA716x_EPRD(fgpi_port, FGPI_MODULE_ID);
@@ -302,8 +303,8 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		break;
 	}
 
-	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, ((saa716x->fgpi[port].dma_channel) << 21) + offst_1);
-	SAA716x_EPWR(fgpi_port, FGPI_BASE_2, ((saa716x->fgpi[port].dma_channel) << 21) + offst_2);
+	SAA716x_EPWR(fgpi_port, FGPI_BASE_1, (dma_channel << 21) + offst_1);
+	SAA716x_EPWR(fgpi_port, FGPI_BASE_2, (dma_channel << 21) + offst_2);
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index b81edb728ebc9..5bb3bd4ccbe39 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -4,29 +4,7 @@
 #include <linux/interrupt.h>
 
 #define FGPI_BUFFERS		8
-#define PTA_LSB(__mem)		((u32 ) (__mem))
-#define PTA_MSB(__mem)		((u32 ) ((u64)(__mem) >> 32))
 
-#define BAM_DMA_BUF_MODE_BASE		0x0d8
-#define BAM_DMA_BUF_MODE_OFFSET		0x24
-
-#define BAM_DMA_BUF_MODE(__ch)		(BAM_DMA_BUF_MODE_BASE + (BAM_DMA_BUF_MODE_OFFSET * __ch))
-
-#define BAM_FGPI_ADDR_OFFST_BASE	0x0dc
-#define BAM_FGPI_ADDR_OFFST_OFFSET	0x24
-
-#define BAM_FGPI_ADDR_OFFSET(__ch)	(BAM_FGPI_ADDR_OFFST_BASE + (BAM_FGPI_ADDR_OFFST_OFFSET * __ch))
-
-#define BAM_FGPI_ADDR_OFFST_0(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x00
-#define BAM_FGPI_ADDR_OFFST_1(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x04
-#define BAM_FGPI_ADDR_OFFST_2(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x08
-#define BAM_FGPI_ADDR_OFFST_3(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x0c
-#define BAM_FGPI_ADDR_OFFST_4(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x10
-#define BAM_FGPI_ADDR_OFFST_5(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x14
-#define BAM_FGPI_ADDR_OFFST_6(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x18
-#define BAM_FGPI_ADDR_OFFST_7(__ch)	BAM_FGPI_ADDR_OFFSET(__ch) + 0x1c
-
-struct saa716x_dmabuf;
 
 /*
  * Port supported streams

From df10b5946000847bfcb7b03cd382e779dba0a747 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 21 Dec 2012 16:56:13 +0100
Subject: [PATCH 231/364] saa716x: Use global macros for MMU register access.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma_reg.h | 39 +++++++++----------
 drivers/media/pci/saa716x/saa716x_fgpi.c    | 42 +--------------------
 2 files changed, 22 insertions(+), 59 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma_reg.h b/drivers/media/pci/saa716x/saa716x_dma_reg.h
index 6037ca987fddc..58678541119b1 100644
--- a/drivers/media/pci/saa716x/saa716x_dma_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_dma_reg.h
@@ -155,6 +155,8 @@
 #define MMU_DMA_CONFIG14		0x03c
 #define MMU_DMA_CONFIG15		0x040
 
+#define MMU_DMA_CONFIG(__ch)		(MMU_DMA_CONFIG0 + (4 * __ch))
+
 #define MMU_SW_RST			0xff0
 #define MMU_SW_RESET			(0x0001 <<  0)
 
@@ -175,26 +177,25 @@
 #define MMU_PTA_BASE14			0x3c4 /* DMA 14 */
 #define MMU_PTA_BASE15			0x404 /* DMA 15 */
 
-#define MMU_PTA_BASE			0x044 /* DMA 0 */
 #define MMU_PTA_OFFSET			0x40
 
-#define PTA_BASE(__ch)			(MMU_PTA_BASE + (MMU_PTA_OFFSET * __ch))
-
-#define MMU_PTA0_LSB(__ch)		PTA_BASE(__ch) + 0x00
-#define MMU_PTA0_MSB(__ch)		PTA_BASE(__ch) + 0x04
-#define MMU_PTA1_LSB(__ch)		PTA_BASE(__ch) + 0x08
-#define MMU_PTA1_MSB(__ch)		PTA_BASE(__ch) + 0x0c
-#define MMU_PTA2_LSB(__ch)		PTA_BASE(__ch) + 0x10
-#define MMU_PTA2_MSB(__ch)		PTA_BASE(__ch) + 0x14
-#define MMU_PTA3_LSB(__ch)		PTA_BASE(__ch) + 0x18
-#define MMU_PTA3_MSB(__ch)		PTA_BASE(__ch) + 0x1c
-#define MMU_PTA4_LSB(__ch)		PTA_BASE(__ch) + 0x20
-#define MMU_PTA4_MSB(__ch)		PTA_BASE(__ch) + 0x24
-#define MMU_PTA5_LSB(__ch)		PTA_BASE(__ch) + 0x28
-#define MMU_PTA5_MSB(__ch)		PTA_BASE(__ch) + 0x2c
-#define MMU_PTA6_LSB(__ch)		PTA_BASE(__ch) + 0x30
-#define MMU_PTA6_MSB(__ch)		PTA_BASE(__ch) + 0x34
-#define MMU_PTA7_LSB(__ch)		PTA_BASE(__ch) + 0x38
-#define MMU_PTA7_MSB(__ch)		PTA_BASE(__ch) + 0x3c
+#define MMU_PTA_BASE(__ch)		(MMU_PTA_BASE0 + (MMU_PTA_OFFSET * __ch))
+
+#define MMU_PTA0_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x00
+#define MMU_PTA0_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x04
+#define MMU_PTA1_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x08
+#define MMU_PTA1_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x0c
+#define MMU_PTA2_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x10
+#define MMU_PTA2_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x14
+#define MMU_PTA3_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x18
+#define MMU_PTA3_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x1c
+#define MMU_PTA4_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x20
+#define MMU_PTA4_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x24
+#define MMU_PTA5_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x28
+#define MMU_PTA5_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x2c
+#define MMU_PTA6_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x30
+#define MMU_PTA6_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x34
+#define MMU_PTA7_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x38
+#define MMU_PTA7_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x3c
 
 #endif /* __SAA716x_DMA_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 844aa38a0ebf9..69f8d72c51cdc 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -11,44 +11,6 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
-static const u32 mmu_pta_base[] = {
-	MMU_PTA_BASE0,
-	MMU_PTA_BASE1,
-	MMU_PTA_BASE2,
-	MMU_PTA_BASE3,
-	MMU_PTA_BASE4,
-	MMU_PTA_BASE5,
-	MMU_PTA_BASE6,
-	MMU_PTA_BASE7,
-	MMU_PTA_BASE8,
-	MMU_PTA_BASE9,
-	MMU_PTA_BASE10,
-	MMU_PTA_BASE11,
-	MMU_PTA_BASE12,
-	MMU_PTA_BASE13,
-	MMU_PTA_BASE14,
-	MMU_PTA_BASE15,
-};
-
-static const u32 mmu_dma_cfg[] = {
-	MMU_DMA_CONFIG0,
-	MMU_DMA_CONFIG1,
-	MMU_DMA_CONFIG2,
-	MMU_DMA_CONFIG3,
-	MMU_DMA_CONFIG4,
-	MMU_DMA_CONFIG5,
-	MMU_DMA_CONFIG6,
-	MMU_DMA_CONFIG7,
-	MMU_DMA_CONFIG8,
-	MMU_DMA_CONFIG9,
-	MMU_DMA_CONFIG10,
-	MMU_DMA_CONFIG11,
-	MMU_DMA_CONFIG12,
-	MMU_DMA_CONFIG13,
-	MMU_DMA_CONFIG14,
-	MMU_DMA_CONFIG15,
-};
-
 static const u32 fgpi_ch[] = {
 	FGPI0,
 	FGPI1,
@@ -150,7 +112,7 @@ static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel,
 	for (i = 0; i < FGPI_BUFFERS; i++)
 		BUG_ON((dmabuf[i].mem_ptab_phys == 0));
 
-	config = mmu_dma_cfg[channel]; /* DMACONFIGx */
+	config = MMU_DMA_CONFIG(channel); /* DMACONFIGx */
 
 	SAA716x_EPWR(MMU, config, (FGPI_BUFFERS - 1));
 
@@ -326,7 +288,7 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 		return -EIO;
 	}
 
-	config = mmu_dma_cfg[saa716x->fgpi[port].dma_channel]; /* DMACONFIGx */
+	config = MMU_DMA_CONFIG(saa716x->fgpi[port].dma_channel); /* DMACONFIGx */
 
 	val = SAA716x_EPRD(MMU, config);
 	SAA716x_EPWR(MMU, config, val & ~0x40);

From f894ed573d86fd02535c5b52470b8646137125bf Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Thu, 27 Dec 2012 14:21:34 +0100
Subject: [PATCH 232/364] saa716x: Add VI module implementation.

VI module can be used for SD/HD video capturing.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h    |   3 +
 drivers/media/pci/saa716x/saa716x_vip.c     | 368 +++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_vip.h     |  47 ++-
 drivers/media/pci/saa716x/saa716x_vip_reg.h |  53 +--
 4 files changed, 448 insertions(+), 23 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 1ad1d9c37a34a..307a07db1bec0 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -15,6 +15,8 @@
 #include "saa716x_cgu.h"
 #include "saa716x_dma.h"
 #include "saa716x_fgpi.h"
+#include "saa716x_spi.h"
+#include "saa716x_vip.h"
 
 #include "dvbdev.h"
 #include "dvb_demux.h"
@@ -156,6 +158,7 @@ struct saa716x_dev {
 	/* DMA */
 
 	struct saa716x_fgpi_stream_port	fgpi[4];
+	struct saa716x_vip_stream_port	vip[2];
 
 	u32				id_offst;
 	u32				id_len;
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 4cd4c810db504..6a01e7c03925c 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -3,9 +3,31 @@
 #include "saa716x_mod.h"
 
 #include "saa716x_vip_reg.h"
-#include "saa716x_spi.h"
+#include "saa716x_dma_reg.h"
+#include "saa716x_msi_reg.h"
+
 #include "saa716x_priv.h"
 
+
+static const u32 vi_ch[] = {
+	VI0,
+	VI1
+};
+
+static const u32 msi_int_tagack[] = {
+	MSI_INT_TAGACK_VI0_0,
+	MSI_INT_TAGACK_VI0_1,
+	MSI_INT_TAGACK_VI0_2,
+	MSI_INT_TAGACK_VI1_0,
+	MSI_INT_TAGACK_VI1_1,
+	MSI_INT_TAGACK_VI1_2
+};
+
+static const u32 msi_int_avint[] = {
+	MSI_INT_AVINT_VI0,
+	MSI_INT_AVINT_VI1
+};
+
 void saa716x_vipint_disable(struct saa716x_dev *saa716x)
 {
 	SAA716x_EPWR(VI0, INT_ENABLE, 0); /* disable VI 0 IRQ */
@@ -21,3 +43,347 @@ void saa716x_vip_disable(struct saa716x_dev *saa716x)
        SAA716x_EPWR(VI1, VIP_POWER_DOWN, VI_PWR_DWN);
 }
 EXPORT_SYMBOL_GPL(saa716x_vip_disable);
+
+int saa716x_vip_get_write_index(struct saa716x_dev *saa716x, int port)
+{
+	u32 buf_mode, val;
+
+	buf_mode = BAM_DMA_BUF_MODE(saa716x->vip[port].dma_channel[0]);
+
+	val = SAA716x_EPRD(BAM, buf_mode);
+	return (val >> 3) & 0x7;
+}
+EXPORT_SYMBOL_GPL(saa716x_vip_get_write_index);
+
+static int saa716x_vip_init_ptables(struct saa716x_dmabuf *dmabuf, int channel,
+				    struct vip_stream_params *stream_params)
+{
+	struct saa716x_dev *saa716x = dmabuf->saa716x;
+	u32 config, i;
+
+	for (i = 0; i < VIP_BUFFERS; i++)
+		BUG_ON((dmabuf[i].mem_ptab_phys == 0));
+
+	config = MMU_DMA_CONFIG(channel); /* DMACONFIGx */
+
+	SAA716x_EPWR(MMU, config, (VIP_BUFFERS - 1));
+
+	if ((stream_params->stream_flags & VIP_INTERLACED) &&
+	    (stream_params->stream_flags & VIP_ODD_FIELD) &&
+	    (stream_params->stream_flags & VIP_EVEN_FIELD)) {
+		/* In interlaced mode the same buffer is written twice, once
+		   the odd field and once the even field */
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+	} else {
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+	}
+	return 0;
+}
+
+static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
+				 struct vip_stream_params *stream_params)
+{
+	u32 vi_port, buf_mode, mid, val, i;
+	u8 dma_channel;
+	u32 num_pages;
+	u32 start_x, start_line, end_line, num_lines;
+	u32 base_address, base_offset, pitch;
+	u32 vin_format;
+
+	vi_port = vi_ch[port];
+	buf_mode = BAM_DMA_BUF_MODE(saa716x->vip[port].dma_channel[0]);
+	dma_channel = saa716x->vip[port].dma_channel[0];
+
+	/* number of pages needed for a buffer */
+	num_pages = (stream_params->bits / 8 * stream_params->samples
+		     * stream_params->lines) / SAA716x_PAGE_SIZE;
+	/* check if these will fit into one page table */
+	if (num_pages > (SAA716x_PAGE_SIZE / 8))
+		saa716x->vip[port].dual_channel = 1;
+	else
+		saa716x->vip[port].dual_channel = 0;
+
+	/* Reset DMA channel */
+	SAA716x_EPWR(BAM, buf_mode, 0x00000040);
+	saa716x_vip_init_ptables(saa716x->vip[port].dma_buf[0],
+				 saa716x->vip[port].dma_channel[0],
+				 stream_params);
+	if (saa716x->vip[port].dual_channel)
+		saa716x_vip_init_ptables(saa716x->vip[port].dma_buf[1],
+					 saa716x->vip[port].dma_channel[1],
+					 stream_params);
+
+	/* get module ID */
+	mid = SAA716x_EPRD(vi_port, VI_MODULE_ID);
+	if (mid != 0x11A5100) {
+		dprintk(SAA716x_ERROR, 1, "VIP Id<%04x> is not supported", mid);
+		return -1;
+	}
+
+	start_x = stream_params->offset_x;
+	start_line = stream_params->offset_y + 1;
+	end_line = 0;
+	num_lines = stream_params->lines;
+	pitch = stream_params->pitch;
+	base_address = saa716x->vip[port].dma_channel[0] << 21;
+	base_offset = 0;
+	vin_format = 0x00004000;
+
+	if ((stream_params->stream_flags & VIP_INTERLACED) &&
+	    (stream_params->stream_flags & VIP_ODD_FIELD) &&
+	    (stream_params->stream_flags & VIP_EVEN_FIELD)) {
+		num_lines /= 2;
+		pitch *= 2;
+		base_offset = stream_params->pitch;
+	}
+	if (stream_params->stream_flags & VIP_HD) {
+		if (stream_params->stream_flags & VIP_INTERLACED) {
+			vin_format |= 0x01000000;
+		} else {
+			/* suppress the windower break message */
+			vin_format |= 0x01000200;
+		}
+	}
+	if (stream_params->stream_flags & VIP_NO_SCALER) {
+		vin_format |= 0x00000400;
+	}
+
+	end_line = stream_params->offset_y + num_lines;
+
+	/* set device to normal operation */
+	SAA716x_EPWR(vi_port, VIP_POWER_DOWN, 0);
+	/* disable ANC bit detection */
+	SAA716x_EPWR(vi_port, ANC_DID_FIELD0, 0);
+	SAA716x_EPWR(vi_port, ANC_DID_FIELD1, 0);
+	/* set line threshold to 0 (interrupt is disabled anyway)*/
+	SAA716x_EPWR(vi_port, VI_LINE_THRESH, 0);
+
+	vin_format |= 2;
+	SAA716x_EPWR(vi_port, VIN_FORMAT, vin_format);
+
+	/* disable dithering */
+	SAA716x_EPWR(vi_port, PRE_DIT_CTRL, 0);
+	SAA716x_EPWR(vi_port, POST_DIT_CTRL, 0);
+	/* set alpha value */
+	SAA716x_EPWR(vi_port, CSM_CKEY, 0);
+
+	SAA716x_EPWR(vi_port, WIN_XYSTART, (start_x << 16) + start_line);
+	SAA716x_EPWR(vi_port, WIN_XYEND,
+		     ((start_x + stream_params->samples - 1) << 16) + end_line);
+
+	/* enable cropping to assure that VIP does not exceed buffer boundaries */
+	SAA716x_EPWR(vi_port, PSU_WINDOW,
+		     (stream_params->samples << 16) + num_lines);
+	/* set packet YUY2 output format */
+	SAA716x_EPWR(vi_port, PSU_FORMAT, 0x800000A0);
+
+	SAA716x_EPWR(vi_port, PSU_BASE1, base_address);
+	SAA716x_EPWR(vi_port, PSU_PITCH1, pitch);
+	SAA716x_EPWR(vi_port, PSU_PITCH2, 0);
+	SAA716x_EPWR(vi_port, PSU_BASE2, 0);
+	SAA716x_EPWR(vi_port, PSU_BASE3, 0);
+	SAA716x_EPWR(vi_port, PSU_BASE4, base_address + base_offset);
+	SAA716x_EPWR(vi_port, PSU_BASE5, 0);
+	SAA716x_EPWR(vi_port, PSU_BASE6, 0);
+
+	/* monitor BAM reset */
+	i = 0;
+	val = SAA716x_EPRD(BAM, buf_mode);
+	while (val && (i < 100)) {
+		msleep(30);
+		val = SAA716x_EPRD(BAM, buf_mode);
+		i++;
+	}
+	if (val) {
+		dprintk(SAA716x_ERROR, 1, "Error: BAM VIP Reset failed!");
+		return -EIO;
+	}
+
+	/* set buffer count */
+	SAA716x_EPWR(BAM, buf_mode, VIP_BUFFERS - 1);
+	/* initialize all available address offsets to 0 */
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_0(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_1(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_2(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_3(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_4(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_5(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_6(dma_channel), 0x0);
+	SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_7(dma_channel), 0x0);
+
+	if (saa716x->vip[port].dual_channel) {
+		buf_mode = BAM_DMA_BUF_MODE(saa716x->vip[port].dma_channel[1]);
+		dma_channel = saa716x->vip[port].dma_channel[1];
+
+		/* set buffer count */
+		SAA716x_EPWR(BAM, buf_mode, VIP_BUFFERS - 1);
+		/* initialize all available address offsets to 0 */
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_0(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_1(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_2(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_3(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_4(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_5(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_6(dma_channel), 0x0);
+		SAA716x_EPWR(BAM, BAM_ADDR_OFFSET_7(dma_channel), 0x0);
+	}
+
+	return 0;
+}
+
+int saa716x_vip_start(struct saa716x_dev *saa716x, int port,
+		      struct vip_stream_params *stream_params)
+{
+	u32 vi_port;
+	u32 config1;
+	u32 config2;
+	u32 val;
+	u32 i;
+
+	vi_port = vi_ch[port];
+	config1 = MMU_DMA_CONFIG(saa716x->vip[port].dma_channel[0]);
+	config2 = MMU_DMA_CONFIG(saa716x->vip[port].dma_channel[1]);
+
+	if (saa716x_vip_setparams(saa716x, port, stream_params) != 0) {
+		return -EIO;
+	}
+
+	val = SAA716x_EPRD(MMU, config1);
+	SAA716x_EPWR(MMU, config1, val & ~0x40);
+	SAA716x_EPWR(MMU, config1, val | 0x40);
+	if (saa716x->vip[port].dual_channel) {
+		val = SAA716x_EPRD(MMU, config2);
+		SAA716x_EPWR(MMU, config2, val & ~0x40);
+		SAA716x_EPWR(MMU, config2, val | 0x40);
+	}
+
+	SAA716x_EPWR(vi_port, INT_ENABLE, 0x33F);
+
+	i = 0;
+	while (i < 500) {
+		val = SAA716x_EPRD(MMU, config1);
+		if (saa716x->vip[port].dual_channel)
+			val &= SAA716x_EPRD(MMU, config2);
+		if (val & 0x80)
+			break;
+		msleep(10);
+		i++;
+	}
+
+	if (!(val & 0x80)) {
+		dprintk(SAA716x_ERROR, 1, "Error: PTE pre-fetch failed!");
+		return -EIO;
+	}
+
+	/* enable video capture path */
+	val = SAA716x_EPRD(vi_port, VI_MODE);
+	val |= VID_CFEN | VID_FSEQ;
+
+	saa716x_set_clk_external(saa716x, saa716x->vip[port].dma_channel[0]);
+
+	SAA716x_EPWR(vi_port, VI_MODE, val);
+
+	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, msi_int_tagack[port]);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_vip_start);
+
+int saa716x_vip_stop(struct saa716x_dev *saa716x, int port)
+{
+	u32 val;
+
+	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, msi_int_tagack[port]);
+
+	/* disable capture */
+	val = SAA716x_EPRD(vi_ch[port], VI_MODE);
+	val &= ~VID_CFEN;
+	SAA716x_EPWR(vi_ch[port], VI_MODE, val);
+
+	saa716x_set_clk_internal(saa716x, saa716x->vip[port].dma_channel[0]);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_vip_stop);
+
+int saa716x_vip_init(struct saa716x_dev *saa716x, int port,
+		     void (*worker)(unsigned long))
+{
+	int n;
+	int i;
+	int ret;
+
+	/* reset VI */
+	SAA716x_EPWR(vi_ch[port], VI_MODE, SOFT_RESET);
+
+	for (n = 0; n < 2; n++)
+	{
+		saa716x->vip[port].dma_channel[n] = port * 3 + n;
+		for (i = 0; i < VIP_BUFFERS; i++)
+		{
+			ret = saa716x_dmabuf_alloc(
+					saa716x,
+					&saa716x->vip[port].dma_buf[n][i],
+					512 * SAA716x_PAGE_SIZE);
+			if (ret < 0) {
+				return ret;
+			}
+		}
+	}
+	saa716x->vip[port].saa716x = saa716x;
+	tasklet_init(&saa716x->vip[port].tasklet, worker,
+		     (unsigned long)&saa716x->vip[port]);
+	saa716x->vip[port].read_index = 0;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_vip_init);
+
+int saa716x_vip_exit(struct saa716x_dev *saa716x, int port)
+{
+	int n;
+	int i;
+
+	tasklet_kill(&saa716x->vip[port].tasklet);
+	for (n = 0; n < 2; n++)
+	{
+		for (i = 0; i < VIP_BUFFERS; i++)
+		{
+			saa716x_dmabuf_free(
+				saa716x, &saa716x->vip[port].dma_buf[n][i]);
+		}
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(saa716x_vip_exit);
diff --git a/drivers/media/pci/saa716x/saa716x_vip.h b/drivers/media/pci/saa716x/saa716x_vip.h
index 55c6a1a84f379..afbb9cf2d06ab 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.h
+++ b/drivers/media/pci/saa716x/saa716x_vip.h
@@ -1,9 +1,54 @@
 #ifndef __SAA716x_VIP_H
 #define __SAA716x_VIP_H
 
-struct saa716x_dev;
+#define VIP_BUFFERS	8
+
+/*
+ * Stream port flags
+ */
+enum vip_stream_flags {
+	VIP_ODD_FIELD		= 0x0001,
+	VIP_EVEN_FIELD		= 0x0002,
+	VIP_INTERLACED		= 0x0004,
+	VIP_HD			= 0x0010,
+	VIP_NO_SCALER		= 0x0100
+};
+
+/*
+ * Stream port parameters
+ * bits: Bits per sample
+ * samples: samples perline
+ * lines: number of lines
+ * pitch: stream pitch in bytes
+ * offset: offset to first valid line
+ */
+struct vip_stream_params {
+	u32			bits;
+	u32			samples;
+	u32			lines;
+	s32			pitch;
+	u32			offset_x;
+	u32			offset_y;
+	enum vip_stream_flags	stream_flags;
+};
+
+struct saa716x_vip_stream_port {
+	u8			dual_channel;
+	u8			read_index;
+	u8			dma_channel[2];
+	struct saa716x_dmabuf	dma_buf[2][VIP_BUFFERS];
+	struct saa716x_dev	*saa716x;
+	struct tasklet_struct	tasklet;
+};
 
 extern void saa716x_vipint_disable(struct saa716x_dev *saa716x);
 extern void saa716x_vip_disable(struct saa716x_dev *saa716x);
+extern int saa716x_vip_get_write_index(struct saa716x_dev *saa716x, int port);
+extern int saa716x_vip_start(struct saa716x_dev *saa716x, int port,
+			     struct vip_stream_params *stream_params);
+extern int saa716x_vip_stop(struct saa716x_dev *saa716x, int port);
+extern int saa716x_vip_init(struct saa716x_dev *saa716x, int port,
+			    void (*worker)(unsigned long));
+extern int saa716x_vip_exit(struct saa716x_dev *saa716x, int port);
 
 #endif /* __SAA716x_VIP_H */
diff --git a/drivers/media/pci/saa716x/saa716x_vip_reg.h b/drivers/media/pci/saa716x/saa716x_vip_reg.h
index 2d773bd1d00d4..20a460caaf7f1 100644
--- a/drivers/media/pci/saa716x/saa716x_vip_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_vip_reg.h
@@ -22,27 +22,15 @@
 #define HSP_RGB				(0x00000001 <<  2)
 #define HSP_MODE			(0x00000003 <<  0)
 
-#define RCRB_CTRL			0x004
-#define RCRB_CFG_ADDR			0x008
-#define RCRB_CFG_EXT_ADDR		0x00c
-#define RCRB_IO_ADDR			0x010
-#define RCRB_MEM_LADDR			0x014
-#define RCRB_MEM_UADDR			0x018
-#define RCRB_DATA			0x01c
-#define RCRB_MASK			0x020
-#define RCRB_MSG_HDR			0x040
-#define RCRB_MSG_PL0			0x044
-#define RCRB_MSG_PL1			0x048
-
-#define ID_MASK0			0x020
+#define ANC_DID_FIELD0			0x020
 #define VI_ID_MASK_0			(0x000000ff <<  8)
 #define VI_DATA_ID_0			(0x000000ff <<  0)
 
-#define ID_MASK1			0x024
+#define ANC_DID_FIELD1			0x024
 #define VI_ID_MASK_1			(0x000000ff <<  8)
 #define VI_DATA_ID_1			(0x000000ff <<  0)
 
-#define VIP_LINE_THRESH			0x040
+#define VI_LINE_THRESH			0x040
 #define VI_LCTHR			(0x000007ff <<  0)
 
 #define VIN_FORMAT			0x100
@@ -61,13 +49,33 @@
 #define VI_REVS				(0x00000001 <<  1)
 #define VI_REHS				(0x00000001 <<  0)
 
-#define TC76543210			0x800
-#define TCFEDCBA98			0x804
-#define PHYCFG				0x900
-#define CONFIG				0xfd4
-#define INT_ENABLE_CLR			0xfd8
-#define INT_ENABLE_SET			0xfdc
+#define VIN_TESTPGEN			0x104
 
+#define WIN_XYSTART			0x140
+#define WIN_XYEND			0x144
+
+#define PRE_DIT_CTRL			0x160
+#define POST_DIT_CTRL			0x164
+
+#define AUX_XYSTART			0x180
+#define AUX_XYEND			0x184
+
+#define CSM_CKEY			0x284
+
+#define PSU_FORMAT			0x300
+#define PSU_WINDOW			0x304
+#define PSU_BASE1			0x340
+#define PSU_PITCH1			0x344
+#define PSU_BASE2			0x348
+#define PSU_PITCH2			0x34c
+#define PSU_BASE3			0x350
+#define PSU_BASE4			0x354
+#define PSU_BASE5			0x358
+#define PSU_BASE6			0x35c
+
+#define AUX_FORMAT			0x380
+#define AUX_BASE			0x390
+#define AUX_PITCH			0x394
 
 #define INT_STATUS			0xfe0
 #define VI_STAT_FID_AUX			(0x00000001 << 31)
@@ -124,4 +132,7 @@
 #define VIP_POWER_DOWN			0xff4
 #define VI_PWR_DWN			(0x00000001 << 31)
 
+#define VI_MODULE_ID			0xffc
+
+
 #endif /* __SAA716x_VIP_REG_H */

From 819682940ea6c395fdf9f89c3d8e3a143f300456 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 28 Dec 2012 10:58:29 +0100
Subject: [PATCH 233/364] saa716x: Support one-shot video capturing.

The capturing will automatically stop after receiving one frame.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_vip.c     | 16 ++++++++++++++--
 drivers/media/pci/saa716x/saa716x_vip.h     |  6 +++++-
 drivers/media/pci/saa716x/saa716x_vip_reg.h |  3 +++
 3 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 6a01e7c03925c..4c2f3378faa20 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -261,7 +261,7 @@ static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
 	return 0;
 }
 
-int saa716x_vip_start(struct saa716x_dev *saa716x, int port,
+int saa716x_vip_start(struct saa716x_dev *saa716x, int port, int one_shot,
 		      struct vip_stream_params *stream_params)
 {
 	u32 vi_port;
@@ -307,7 +307,19 @@ int saa716x_vip_start(struct saa716x_dev *saa716x, int port,
 
 	/* enable video capture path */
 	val = SAA716x_EPRD(vi_port, VI_MODE);
-	val |= VID_CFEN | VID_FSEQ;
+	val &= ~(VID_CFEN | VID_FSEQ | VID_OSM);
+
+	if ((stream_params->stream_flags & VIP_INTERLACED) &&
+	    (stream_params->stream_flags & VIP_ODD_FIELD) &&
+	    (stream_params->stream_flags & VIP_EVEN_FIELD)) {
+		val |= VID_CFEN_BOTH; /* capture both fields */
+		val |= VID_FSEQ; /* start capture with odd field */
+	} else {
+		val |= VID_CFEN_BOTH; /* capture both fields */
+	}
+
+	if (one_shot)
+		val |= VID_OSM; /* stop capture after receiving one frame */
 
 	saa716x_set_clk_external(saa716x, saa716x->vip[port].dma_channel[0]);
 
diff --git a/drivers/media/pci/saa716x/saa716x_vip.h b/drivers/media/pci/saa716x/saa716x_vip.h
index afbb9cf2d06ab..b81da96183c95 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.h
+++ b/drivers/media/pci/saa716x/saa716x_vip.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_VIP_H
 #define __SAA716x_VIP_H
 
+#include "saa716x_dma.h"
+
 #define VIP_BUFFERS	8
 
 /*
@@ -20,7 +22,8 @@ enum vip_stream_flags {
  * samples: samples perline
  * lines: number of lines
  * pitch: stream pitch in bytes
- * offset: offset to first valid line
+ * offset_x: offset to first valid pixel
+ * offset_y: offset to first valid line
  */
 struct vip_stream_params {
 	u32			bits;
@@ -45,6 +48,7 @@ extern void saa716x_vipint_disable(struct saa716x_dev *saa716x);
 extern void saa716x_vip_disable(struct saa716x_dev *saa716x);
 extern int saa716x_vip_get_write_index(struct saa716x_dev *saa716x, int port);
 extern int saa716x_vip_start(struct saa716x_dev *saa716x, int port,
+			     int one_shot,
 			     struct vip_stream_params *stream_params);
 extern int saa716x_vip_stop(struct saa716x_dev *saa716x, int port);
 extern int saa716x_vip_init(struct saa716x_dev *saa716x, int port,
diff --git a/drivers/media/pci/saa716x/saa716x_vip_reg.h b/drivers/media/pci/saa716x/saa716x_vip_reg.h
index 20a460caaf7f1..b064c3583f4e9 100644
--- a/drivers/media/pci/saa716x/saa716x_vip_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_vip_reg.h
@@ -5,6 +5,9 @@
 
 #define VI_MODE				0x000
 #define VID_CFEN			(0x00000003 << 30)
+#define VID_CFEN_ODD			(0x00000001 << 30)
+#define VID_CFEN_EVEN			(0x00000002 << 30)
+#define VID_CFEN_BOTH			(0x00000003 << 30)
 #define VID_OSM				(0x00000001 << 29)
 #define VID_FSEQ			(0x00000001 << 28)
 #define AUX_CFEN			(0x00000003 << 26)

From 5f632750111c7bdb45bf199713b2907aeed21a63 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 28 Dec 2012 11:08:29 +0100
Subject: [PATCH 234/364] saa716x_ff: Extend interrupt counters.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  3 ++-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 13 ++++++++++---
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index cb65929f66ca2..be24bb9bd6461 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -146,7 +146,8 @@ struct sti7109_dev {
 
 	u32			int_count_enable;
 	u32			total_int_count;
-	u32			fgpi_int_count[2];
+	u32			vi_int_count[2];
+	u32			fgpi_int_count[4];
 	u32			i2c_int_count[2];
 	u32			ext_int_total_count;
 	u32			ext_int_source_count[16];
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index d105f41a46fd1..3591271e1c269 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -785,6 +785,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 
 	sti7109->int_count_enable = int_count_enable;
 	sti7109->total_int_count = 0;
+	memset(sti7109->vi_int_count, 0, sizeof(sti7109->vi_int_count));
 	memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
 	memset(sti7109->i2c_int_count, 0, sizeof(sti7109->i2c_int_count));
 	sti7109->ext_int_total_count = 0;
@@ -1087,12 +1088,12 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	if (msiStatusL) {
 		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
 			if (sti7109->int_count_enable)
-				sti7109->fgpi_int_count[0]++;
+				sti7109->fgpi_int_count[2]++;
 			tasklet_schedule(&saa716x->fgpi[2].tasklet);
 		}
 		if (msiStatusL & MSI_INT_TAGACK_FGPI_3) {
 			if (sti7109->int_count_enable)
-				sti7109->fgpi_int_count[1]++;
+				sti7109->fgpi_int_count[3]++;
 			tasklet_schedule(&saa716x->fgpi[3].tasklet);
 		}
 	}
@@ -1337,11 +1338,16 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 	if (sti7109->int_count_enable) {
 		if (jiffies - sti7109->last_int_ticks >= HZ) {
-			dprintk(SAA716x_INFO, 1, "int count: t: %d, f:%d %d, i:%d %d,"
+			dprintk(SAA716x_INFO, 1,
+				"int count: t: %d, v: %d %d, f:%d %d %d %d, i:%d %d,"
 				"e: %d (%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)",
 				sti7109->total_int_count,
+				sti7109->vi_int_count[0],
+				sti7109->vi_int_count[1],
 				sti7109->fgpi_int_count[0],
 				sti7109->fgpi_int_count[1],
+				sti7109->fgpi_int_count[2],
+				sti7109->fgpi_int_count[3],
 				sti7109->i2c_int_count[0],
 				sti7109->i2c_int_count[1],
 				sti7109->ext_int_total_count,
@@ -1362,6 +1368,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				sti7109->ext_int_source_count[14],
 				sti7109->ext_int_source_count[15]);
 			sti7109->total_int_count = 0;
+			memset(sti7109->vi_int_count, 0, sizeof(sti7109->vi_int_count));
 			memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
 			memset(sti7109->i2c_int_count, 0, sizeof(sti7109->i2c_int_count));
 			sti7109->ext_int_total_count = 0;

From dcff3d67bc0f776874b0320bd4e729cdb822672e Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 28 Dec 2012 13:34:46 +0100
Subject: [PATCH 235/364] saa716x: Change video capture format from YUYV to
 UYUV.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_vip.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 4c2f3378faa20..641a10460924f 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -205,7 +205,7 @@ static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
 	SAA716x_EPWR(vi_port, PSU_WINDOW,
 		     (stream_params->samples << 16) + num_lines);
 	/* set packet YUY2 output format */
-	SAA716x_EPWR(vi_port, PSU_FORMAT, 0x800000A0);
+	SAA716x_EPWR(vi_port, PSU_FORMAT, 0x800000A1);
 
 	SAA716x_EPWR(vi_port, PSU_BASE1, base_address);
 	SAA716x_EPWR(vi_port, PSU_PITCH1, pitch);

From d92c1e189afe827d879eb5cb947b07b43a822bad Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 28 Dec 2012 14:16:40 +0100
Subject: [PATCH 236/364] saa716x_ff: Support capturing digital video coming
 from STi7109.

The decoder chipset (STi7109) outputs HD video through its DVO port. This
video contains the same picture that is visible on the HDMI output. With the
latest changes it is possible to capture that video using one of the VI units
of the SAA716x. There are some limitations though:

- The resolution is the same as the signal on the HDMI.
- Only formats 720p50/60, 1080i50/60 and 1080p24/25/30 are supported. 576p and
  576i formats lead to strange behaviour of the SAA716x. So if the HDMI uses
  that formats, it will not be possible to capture the video.
- To keep the required bandwidth low, only one-shot capturing is used.
- The current implementation does not use the V4L interface (/dev/videoX) to
  provide the captured pictures to user space. Instead it is available in
  proprietary form through the DVB video device: A v4l2_pix_format header
  followed by the picture data in UYVY format.

Some of them might be resolved later.

The support is activated through the "video_capture" module parameter.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |   7 +
 drivers/media/pci/saa716x/saa716x_ff_main.c | 198 +++++++++++++++++++-
 2 files changed, 202 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index be24bb9bd6461..b40dac4b846d2 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -91,6 +91,10 @@
 #define TSOUT_LEN		(1024 * TS_SIZE)
 #define TSBUF_LEN		(8 * 1024)
 
+#define VIDEO_CAPTURE_OFF	0
+#define VIDEO_CAPTURE_ONE_SHOT	1
+
+
 /* place to store all the necessary device information */
 struct sti7109_dev {
 	struct saa716x_dev	*dev;
@@ -144,6 +148,9 @@ struct sti7109_dev {
 	u64			video_pts;
 	u64			current_stc;
 
+	u32			video_capture;
+	u32			video_format;
+
 	u32			int_count_enable;
 	u32			total_int_count;
 	u32			vi_int_count[2];
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 3591271e1c269..ea95fa69e9160 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -20,6 +20,7 @@
 
 #include <linux/i2c.h>
 
+#include <linux/videodev2.h>
 #include <linux/dvb/video.h>
 #include <linux/dvb/audio.h>
 #include <linux/dvb/osd.h>
@@ -33,8 +34,6 @@
 #include "saa716x_spi_reg.h"
 #include "saa716x_msi_reg.h"
 
-#include "saa716x_vip.h"
-#include "saa716x_aip.h"
 #include "saa716x_msi.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
@@ -62,6 +61,10 @@ unsigned int int_count_enable;
 module_param(int_count_enable, int, 0644);
 MODULE_PARM_DESC(int_count_enable, "enable counting of interrupts");
 
+unsigned int video_capture;
+module_param(video_capture, int, 0644);
+MODULE_PARM_DESC(video_capture, "capture digital video coming from STi7109: 0=off, 1=one-shot. default off");
+
 #define DRIVER_NAME	"SAA716x FF"
 
 static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
@@ -527,6 +530,178 @@ static void fifo_worker(unsigned long data)
 	spin_unlock(&sti7109->tsout.lock);
 }
 
+static void video_worker(unsigned long data)
+{
+	struct saa716x_vip_stream_port *vip_entry = (struct saa716x_vip_stream_port *)data;
+	struct saa716x_dev *saa716x = vip_entry->saa716x;
+	u32 vip_index;
+	u32 write_index;
+
+	vip_index = vip_entry->dma_channel[0];
+	if (vip_index != 0) {
+		printk(KERN_ERR "%s: unexpected channel %u\n",
+		       __func__, vip_entry->dma_channel[0]);
+		return;
+	}
+
+	write_index = saa716x_vip_get_write_index(saa716x, vip_index);
+	if (write_index < 0)
+		return;
+
+	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
+
+	if (write_index == vip_entry->read_index) {
+		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
+		return;
+	}
+
+	do {
+		pci_dma_sync_sg_for_cpu(saa716x->pdev,
+			vip_entry->dma_buf[0][vip_entry->read_index].sg_list,
+			vip_entry->dma_buf[0][vip_entry->read_index].list_len,
+			PCI_DMA_FROMDEVICE);
+		if (vip_entry->dual_channel) {
+			pci_dma_sync_sg_for_cpu(saa716x->pdev,
+				vip_entry->dma_buf[1][vip_entry->read_index].sg_list,
+				vip_entry->dma_buf[1][vip_entry->read_index].list_len,
+				PCI_DMA_FROMDEVICE);
+		}
+
+		vip_entry->read_index = (vip_entry->read_index + 1) & 7;
+	} while (write_index != vip_entry->read_index);
+}
+
+static int video_get_stream_params(struct vip_stream_params * params, u32 mode)
+{
+	switch (mode)
+	{
+		case 4:  /* 1280x720p60 */
+		case 19: /* 1280x720p50 */
+			params->bits		= 16;
+			params->samples		= 1280;
+			params->lines		= 720;
+			params->pitch		= 1280 * 2;
+			params->offset_x	= 32;
+			params->offset_y	= 30;
+			params->stream_flags	= VIP_HD;
+			break;
+
+		case 5:  /* 1920x1080i60 */
+		case 20: /* 1920x1080i50 */
+			params->bits		= 16;
+			params->samples		= 1920;
+			params->lines		= 1080;
+			params->pitch		= 1920 * 2;
+			params->offset_x	= 0;
+			params->offset_y	= 20;
+			params->stream_flags	= VIP_ODD_FIELD
+						| VIP_EVEN_FIELD
+						| VIP_INTERLACED
+						| VIP_HD
+						| VIP_NO_SCALER;
+			break;
+
+		case 32: /* 1920x1080p24 */
+		case 33: /* 1920x1080p25 */
+		case 34: /* 1920x1080p30 */
+			params->bits		= 16;
+			params->samples		= 1920;
+			params->lines		= 1080;
+			params->pitch		= 1920 * 2;
+			params->offset_x	= 0;
+			params->offset_y	= 0;
+			params->stream_flags	= VIP_HD;
+			break;
+
+		default:
+			return -1;
+	}
+	return 0;
+}
+
+static ssize_t dvb_video_read(struct file *file, char __user *buf,
+			      size_t count, loff_t *ppos)
+{
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+	struct saa716x_dev *saa716x	= sti7109->dev;
+	struct vip_stream_params stream_params;
+	struct v4l2_pix_format pix_format;
+	int one_shot = 0;
+	size_t num_bytes;
+	size_t copy_bytes;
+	u32 read_index;
+	u8 *data;
+
+	if ((file->f_flags & O_ACCMODE) == O_WRONLY)
+		return -EPERM;
+
+	if (sti7109->video_capture == VIDEO_CAPTURE_OFF)
+		return -ENODATA;
+
+	if (video_get_stream_params(&stream_params, sti7109->video_format) != 0)
+		return -ENODATA;
+
+	if (sti7109->video_capture == VIDEO_CAPTURE_ONE_SHOT)
+		one_shot = 1;
+
+	/* put a v4l2_pix_format header at the beginning of the returned data */
+	memset(&pix_format, 0, sizeof(pix_format));
+	pix_format.width	= stream_params.samples;
+	pix_format.height	= stream_params.lines;
+	pix_format.pixelformat	= V4L2_PIX_FMT_UYVY;
+	pix_format.bytesperline	= stream_params.pitch;
+	pix_format.sizeimage	= stream_params.lines * stream_params.pitch;
+	pix_format.colorspace	= V4L2_COLORSPACE_REC709;
+
+	if (count > (sizeof(pix_format) + pix_format.sizeimage))
+		count = sizeof(pix_format) + pix_format.sizeimage;
+
+	if (count < sizeof(pix_format))
+		return -EFAULT;
+
+	saa716x_vip_start(saa716x, 0, one_shot, &stream_params);
+	/* Sleep long enough to be sure to capture at least one frame.
+	   TODO: Change this in a way that it just waits the required time. */
+	msleep(100);
+	saa716x_vip_stop(saa716x, 0);
+
+	read_index = saa716x->vip[0].read_index;
+	if ((stream_params.stream_flags & VIP_INTERLACED) &&
+	    (stream_params.stream_flags & VIP_ODD_FIELD) &&
+	    (stream_params.stream_flags & VIP_EVEN_FIELD)) {
+		read_index = read_index & ~1;
+		read_index = (read_index + 7) & 7;
+		read_index = read_index / 2;
+	} else {
+		read_index = (read_index + 7) & 7;
+	}
+
+	if (copy_to_user((void __user *)buf, &pix_format, sizeof(pix_format)))
+		return -EFAULT;
+	num_bytes = sizeof(pix_format);
+
+	copy_bytes = count - num_bytes;
+	if (copy_bytes > (SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE))
+		copy_bytes = SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE;
+	data = (u8 *)saa716x->vip[0].dma_buf[0][read_index].mem_virt;
+	if (copy_to_user((void __user *)(buf + num_bytes), data, copy_bytes))
+		return -EFAULT;
+	num_bytes += copy_bytes;
+	if (saa716x->vip[0].dual_channel &&
+	    count - num_bytes > 0) {
+		copy_bytes = count - num_bytes;
+		if (copy_bytes > (SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE))
+			copy_bytes = SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE;
+		data = (u8 *)saa716x->vip[0].dma_buf[1][read_index].mem_virt;
+		if (copy_to_user((void __user *)(buf + num_bytes), data, copy_bytes))
+			return -EFAULT;
+		num_bytes += copy_bytes;
+	}
+
+	return num_bytes;
+}
+
 #define FREE_COND_TS (dvb_ringbuffer_free(&sti7109->tsout) >= TS_SIZE)
 
 static ssize_t dvb_video_write(struct file *file, const char __user *buf,
@@ -654,6 +829,7 @@ static long dvb_video_ioctl(struct file *file,
 
 static struct file_operations dvb_video_fops = {
 	.owner		= THIS_MODULE,
+	.read		= dvb_video_read,
 	.write		= dvb_video_write,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
 	.ioctl		= dvb_video_ioctl,
@@ -667,7 +843,8 @@ static struct file_operations dvb_video_fops = {
 
 static struct dvb_device dvbdev_video = {
 	.priv		= NULL,
-	.users		= 1,
+	.users		= 5,
+	.readers	= 5,
 	.writers	= 1,
 	.fops		= &dvb_video_fops,
 	.kernel_ioctl	= NULL,
@@ -677,6 +854,9 @@ static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)
 {
 	struct sti7109_dev *sti7109 = saa716x->priv;
 
+	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
+		saa716x_vip_exit(saa716x, 0);
+
 	tasklet_kill(&sti7109->fifo_tasklet);
 	dvb_unregister_device(sti7109->video_dev);
 	return 0;
@@ -699,6 +879,9 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 	tasklet_init(&sti7109->fifo_tasklet, fifo_worker,
 		     (unsigned long)saa716x);
 
+	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
+		saa716x_vip_init(saa716x, 0, video_worker);
+
 	return 0;
 }
 
@@ -783,6 +966,8 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 
 	sti7109_cmd_init(sti7109);
 
+	sti7109->video_capture = video_capture;
+
 	sti7109->int_count_enable = int_count_enable;
 	sti7109->total_int_count = 0;
 	memset(sti7109->vi_int_count, 0, sizeof(sti7109->vi_int_count));
@@ -860,6 +1045,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	/* enable FGPI2 and FGPI3 for TS inputs */
 	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x0689F04);
 	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x280);
+	SAA716x_EPWR(GREG, GREG_VIDEO_IN_CTRL, 0xC0);
 
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
@@ -1086,6 +1272,11 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
 	if (msiStatusL) {
+		if (msiStatusL & MSI_INT_TAGACK_VI0_0) {
+			if (sti7109->int_count_enable)
+				sti7109->vi_int_count[0]++;
+			tasklet_schedule(&saa716x->vip[0].tasklet);
+		}
 		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
 			if (sti7109->int_count_enable)
 				sti7109->fgpi_int_count[2]++;
@@ -1304,6 +1495,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DVO_FORMAT_MASK);
 
 			dprintk(SAA716x_INFO, 1, "DVO FORMAT CHANGE: %u", format);
+			sti7109->video_format = format;
 		}
 
 		if (phiISR & ISR_LOG_MESSAGE_MASK) {

From e186a2cc7e3a331ad86c8b880c63c580b428c55a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 28 Dec 2012 14:19:52 +0100
Subject: [PATCH 237/364] saa716x_ff: Protect reading of the captured video
 with a mutex.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  1 +
 drivers/media/pci/saa716x/saa716x_ff_main.c | 47 +++++++++++++++------
 2 files changed, 36 insertions(+), 12 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index b40dac4b846d2..ae7a911b0674c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -143,6 +143,7 @@ struct sti7109_dev {
 	struct mutex		cmd_lock;
 	struct mutex		osd_cmd_lock;
 	struct mutex		data_lock;
+	struct mutex		video_lock;
 
 	u64			audio_pts;
 	u64			video_pts;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index ea95fa69e9160..00e7b780c363c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -632,15 +632,23 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 	size_t copy_bytes;
 	u32 read_index;
 	u8 *data;
+	int err = 0;
 
 	if ((file->f_flags & O_ACCMODE) == O_WRONLY)
 		return -EPERM;
 
-	if (sti7109->video_capture == VIDEO_CAPTURE_OFF)
-		return -ENODATA;
+	mutex_lock(&sti7109->video_lock);
+
+	if (sti7109->video_capture == VIDEO_CAPTURE_OFF) {
+		err = -ENODATA;
+		goto out;
+	}
 
-	if (video_get_stream_params(&stream_params, sti7109->video_format) != 0)
-		return -ENODATA;
+	if (video_get_stream_params(&stream_params,
+				    sti7109->video_format) != 0) {
+		err = -ENODATA;
+		goto out;
+	}
 
 	if (sti7109->video_capture == VIDEO_CAPTURE_ONE_SHOT)
 		one_shot = 1;
@@ -657,8 +665,10 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 	if (count > (sizeof(pix_format) + pix_format.sizeimage))
 		count = sizeof(pix_format) + pix_format.sizeimage;
 
-	if (count < sizeof(pix_format))
-		return -EFAULT;
+	if (count < sizeof(pix_format)) {
+		err = -EFAULT;
+		goto out;
+	}
 
 	saa716x_vip_start(saa716x, 0, one_shot, &stream_params);
 	/* Sleep long enough to be sure to capture at least one frame.
@@ -677,16 +687,20 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 		read_index = (read_index + 7) & 7;
 	}
 
-	if (copy_to_user((void __user *)buf, &pix_format, sizeof(pix_format)))
-		return -EFAULT;
+	if (copy_to_user((void __user *)buf, &pix_format, sizeof(pix_format))) {
+		err = -EFAULT;
+		goto out;
+	}
 	num_bytes = sizeof(pix_format);
 
 	copy_bytes = count - num_bytes;
 	if (copy_bytes > (SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE))
 		copy_bytes = SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE;
 	data = (u8 *)saa716x->vip[0].dma_buf[0][read_index].mem_virt;
-	if (copy_to_user((void __user *)(buf + num_bytes), data, copy_bytes))
-		return -EFAULT;
+	if (copy_to_user((void __user *)(buf + num_bytes), data, copy_bytes)) {
+		err = -EFAULT;
+		goto out;
+	}
 	num_bytes += copy_bytes;
 	if (saa716x->vip[0].dual_channel &&
 	    count - num_bytes > 0) {
@@ -694,12 +708,20 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 		if (copy_bytes > (SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE))
 			copy_bytes = SAA716x_PAGE_SIZE / 8 * SAA716x_PAGE_SIZE;
 		data = (u8 *)saa716x->vip[0].dma_buf[1][read_index].mem_virt;
-		if (copy_to_user((void __user *)(buf + num_bytes), data, copy_bytes))
-			return -EFAULT;
+		if (copy_to_user((void __user *)(buf + num_bytes), data,
+				 copy_bytes)) {
+			err = -EFAULT;
+			goto out;
+		}
 		num_bytes += copy_bytes;
 	}
 
+	mutex_unlock(&sti7109->video_lock);
 	return num_bytes;
+
+out:
+	mutex_unlock(&sti7109->video_lock);
+	return err;
 }
 
 #define FREE_COND_TS (dvb_ringbuffer_free(&sti7109->tsout) >= TS_SIZE)
@@ -967,6 +989,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	sti7109_cmd_init(sti7109);
 
 	sti7109->video_capture = video_capture;
+	mutex_init(&sti7109->video_lock);
 
 	sti7109->int_count_enable = int_count_enable;
 	sti7109->total_int_count = 0;

From 654aa7b6de2e0a14b79998477a3e0cce62ba512a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 4 Jan 2013 11:33:32 +0100
Subject: [PATCH 238/364] saa716x_ff: Rename functions.

video_get_stream_params -> video_vip_get_stream_params
video_worker            -> video_vip_worker

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 00e7b780c363c..68b31eda86251 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -530,7 +530,7 @@ static void fifo_worker(unsigned long data)
 	spin_unlock(&sti7109->tsout.lock);
 }
 
-static void video_worker(unsigned long data)
+static void video_vip_worker(unsigned long data)
 {
 	struct saa716x_vip_stream_port *vip_entry = (struct saa716x_vip_stream_port *)data;
 	struct saa716x_dev *saa716x = vip_entry->saa716x;
@@ -571,7 +571,8 @@ static void video_worker(unsigned long data)
 	} while (write_index != vip_entry->read_index);
 }
 
-static int video_get_stream_params(struct vip_stream_params * params, u32 mode)
+static int video_vip_get_stream_params(struct vip_stream_params * params,
+				       u32 mode)
 {
 	switch (mode)
 	{
@@ -644,8 +645,8 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 		goto out;
 	}
 
-	if (video_get_stream_params(&stream_params,
-				    sti7109->video_format) != 0) {
+	if (video_vip_get_stream_params(&stream_params,
+					sti7109->video_format) != 0) {
 		err = -ENODATA;
 		goto out;
 	}
@@ -902,7 +903,7 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 		     (unsigned long)saa716x);
 
 	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
-		saa716x_vip_init(saa716x, 0, video_worker);
+		saa716x_vip_init(saa716x, 0, video_vip_worker);
 
 	return 0;
 }

From 6a75b8788fd0886b25a2a10b64697dea1b4b4700 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 4 Jan 2013 12:28:12 +0100
Subject: [PATCH 239/364] saa716x_ff: video capture refactoring.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 70 +++++++++++----------
 1 file changed, 37 insertions(+), 33 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 68b31eda86251..9d2c9da5864da 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -620,13 +620,11 @@ static int video_vip_get_stream_params(struct vip_stream_params * params,
 	return 0;
 }
 
-static ssize_t dvb_video_read(struct file *file, char __user *buf,
-			      size_t count, loff_t *ppos)
+static ssize_t video_vip_read(struct sti7109_dev *sti7109,
+			      struct vip_stream_params * stream_params,
+			      char __user *buf, size_t count)
 {
-	struct dvb_device *dvbdev	= file->private_data;
-	struct sti7109_dev *sti7109	= dvbdev->priv;
-	struct saa716x_dev *saa716x	= sti7109->dev;
-	struct vip_stream_params stream_params;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	struct v4l2_pix_format pix_format;
 	int one_shot = 0;
 	size_t num_bytes;
@@ -635,33 +633,16 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 	u8 *data;
 	int err = 0;
 
-	if ((file->f_flags & O_ACCMODE) == O_WRONLY)
-		return -EPERM;
-
-	mutex_lock(&sti7109->video_lock);
-
-	if (sti7109->video_capture == VIDEO_CAPTURE_OFF) {
-		err = -ENODATA;
-		goto out;
-	}
-
-	if (video_vip_get_stream_params(&stream_params,
-					sti7109->video_format) != 0) {
-		err = -ENODATA;
-		goto out;
-	}
-
 	if (sti7109->video_capture == VIDEO_CAPTURE_ONE_SHOT)
 		one_shot = 1;
 
 	/* put a v4l2_pix_format header at the beginning of the returned data */
 	memset(&pix_format, 0, sizeof(pix_format));
-	pix_format.width	= stream_params.samples;
-	pix_format.height	= stream_params.lines;
+	pix_format.width	= stream_params->samples;
+	pix_format.height	= stream_params->lines;
 	pix_format.pixelformat	= V4L2_PIX_FMT_UYVY;
-	pix_format.bytesperline	= stream_params.pitch;
-	pix_format.sizeimage	= stream_params.lines * stream_params.pitch;
-	pix_format.colorspace	= V4L2_COLORSPACE_REC709;
+	pix_format.bytesperline	= stream_params->pitch;
+	pix_format.sizeimage	= stream_params->lines * stream_params->pitch;
 
 	if (count > (sizeof(pix_format) + pix_format.sizeimage))
 		count = sizeof(pix_format) + pix_format.sizeimage;
@@ -671,16 +652,16 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 		goto out;
 	}
 
-	saa716x_vip_start(saa716x, 0, one_shot, &stream_params);
+	saa716x_vip_start(saa716x, 0, one_shot, stream_params);
 	/* Sleep long enough to be sure to capture at least one frame.
 	   TODO: Change this in a way that it just waits the required time. */
 	msleep(100);
 	saa716x_vip_stop(saa716x, 0);
 
 	read_index = saa716x->vip[0].read_index;
-	if ((stream_params.stream_flags & VIP_INTERLACED) &&
-	    (stream_params.stream_flags & VIP_ODD_FIELD) &&
-	    (stream_params.stream_flags & VIP_EVEN_FIELD)) {
+	if ((stream_params->stream_flags & VIP_INTERLACED) &&
+	    (stream_params->stream_flags & VIP_ODD_FIELD) &&
+	    (stream_params->stream_flags & VIP_EVEN_FIELD)) {
 		read_index = read_index & ~1;
 		read_index = (read_index + 7) & 7;
 		read_index = read_index / 2;
@@ -717,14 +698,37 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 		num_bytes += copy_bytes;
 	}
 
-	mutex_unlock(&sti7109->video_lock);
 	return num_bytes;
 
 out:
-	mutex_unlock(&sti7109->video_lock);
 	return err;
 }
 
+static ssize_t dvb_video_read(struct file *file, char __user *buf,
+			      size_t count, loff_t *ppos)
+{
+	struct dvb_device *dvbdev	= file->private_data;
+	struct sti7109_dev *sti7109	= dvbdev->priv;
+	struct vip_stream_params stream_params;
+	ssize_t ret = -ENODATA;
+
+	if ((file->f_flags & O_ACCMODE) == O_WRONLY)
+		return -EPERM;
+
+	mutex_lock(&sti7109->video_lock);
+
+	if (sti7109->video_capture != VIDEO_CAPTURE_OFF) {
+		if (video_vip_get_stream_params(&stream_params,
+						sti7109->video_format) == 0) {
+			ret = video_vip_read(sti7109, &stream_params,
+					     buf, count);
+		}
+	}
+
+	mutex_unlock(&sti7109->video_lock);
+	return ret;
+}
+
 #define FREE_COND_TS (dvb_ringbuffer_free(&sti7109->tsout) >= TS_SIZE)
 
 static ssize_t dvb_video_write(struct file *file, const char __user *buf,

From b5d76be0e8cb91ebd633bbca4a90d12d48602103 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 4 Jan 2013 17:21:33 +0100
Subject: [PATCH 240/364] saa716x: Use pitch value from stream params when
 setting FGPI_STRIDE.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 69f8d72c51cdc..7a122e5e7c795 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -239,19 +239,19 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		    (stream_params->stream_flags & FGPI_EVEN_FIELD)) {
 
 			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines / 2);
-			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->samples * 4); /* interlaced stride of 2 lines */
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch * 2); /* interlaced stride of 2 lines */
 
 			D1_XY_END  = (stream_params->samples << 16);
 			D1_XY_END |= (stream_params->lines / 2) + 2;
 
 			if (stream_params->stream_flags & FGPI_PAL)
-				offst_1 = stream_params->samples * 2;
+				offst_2 = stream_params->pitch;
 			else
-				offst_2 = stream_params->samples * 2;
+				offst_1 = stream_params->pitch;
 
 		} else {
 			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
-			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->samples * 2); /* stride of 1 line */
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch); /* stride of 1 line */
 
 			D1_XY_END  = stream_params->samples << 16;
 			D1_XY_END |= stream_params->lines + 2;

From 1a7e26984a94874522f1845166c0684b88501a5c Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 4 Jan 2013 17:24:00 +0100
Subject: [PATCH 241/364] saa716x: use offset from stream params instead of
 fixed value.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 7a122e5e7c795..cc5228686b72b 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -232,7 +232,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 
 	case FGPI_VIDEO_STREAM:
 		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000040);
-		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_START, 0x00000002);
+		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_START, stream_params->offset);
 
 		if ((stream_params->stream_flags & FGPI_INTERLACED) &&
 		    (stream_params->stream_flags & FGPI_ODD_FIELD) &&
@@ -242,7 +242,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch * 2); /* interlaced stride of 2 lines */
 
 			D1_XY_END  = (stream_params->samples << 16);
-			D1_XY_END |= (stream_params->lines / 2) + 2;
+			D1_XY_END |= (stream_params->lines / 2) + stream_params->offset;
 
 			if (stream_params->stream_flags & FGPI_PAL)
 				offst_2 = stream_params->pitch;
@@ -254,7 +254,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch); /* stride of 1 line */
 
 			D1_XY_END  = stream_params->samples << 16;
-			D1_XY_END |= stream_params->lines + 2;
+			D1_XY_END |= stream_params->lines + stream_params->offset;
 		}
 
 		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_END, D1_XY_END);

From 121de84270a1d962e0df4510ee6a8aa7c872ecc1 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 4 Jan 2013 17:25:08 +0100
Subject: [PATCH 242/364] saa716x: Clear DMA buffer after allocatiion

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 21d1dd8c34d1e..0adcab9a76d5f 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -125,6 +125,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 			dprintk(SAA716x_ERROR, 1, "Failed to allocate memory for buffer");
 			return -ENOMEM;
 		}
+		memset(dmabuf->mem_virt_noalign, 0, (pages + 1) * SAA716x_PAGE_SIZE);
 
 		/* align memory to page */
 		dmabuf->mem_virt = (void *) PAGE_ALIGN (((unsigned long) dmabuf->mem_virt_noalign));

From f42c503eeeb36a540b375bab41b47086725a05d9 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 5 Jan 2013 11:53:19 +0100
Subject: [PATCH 243/364] saa716x: Support capturing raw data via FGPI unit

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 1 +
 drivers/media/pci/saa716x/saa716x_fgpi.h | 1 +
 2 files changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index cc5228686b72b..41500ce15a5ac 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -225,6 +225,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
 		break;
 
+	case FGPI_RAW_STREAM:
 	case FGPI_PROGRAM_STREAM:
 		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000088);
 		SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index 5bb3bd4ccbe39..47f9a9ce774a9 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -16,6 +16,7 @@
  * FGPI_PROGRAM_STREAM
  */
 enum fgpi_stream_type {
+	FGPI_RAW_STREAM		= 0x00,
 	FGPI_AUDIO_STREAM	= 0x01,
 	FGPI_VIDEO_STREAM	= 0x02,
 	FGPI_VBI_STREAM		= 0x04,

From 2a09fc0492d0d4ff5296c3741ec55fbae1269972 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 5 Jan 2013 11:53:54 +0100
Subject: [PATCH 244/364] saa716x: Reset FGPI read index in saa716x_fgpi_start

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 41500ce15a5ac..ec21dd53612b3 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -289,6 +289,8 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 		return -EIO;
 	}
 
+	saa716x->fgpi[port].read_index = 0;
+
 	config = MMU_DMA_CONFIG(saa716x->fgpi[port].dma_channel); /* DMACONFIGx */
 
 	val = SAA716x_EPRD(MMU, config);

From c0ee89995476ed21ed88f9da64e34d7b50b3c377 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 4 Feb 2013 19:48:29 +0100
Subject: [PATCH 245/364] saa716x_ff: Cancel data transfer in case of a block
 timeout

In case a block timeout occured during a data transfer, e. g. because
of high system load, no further data transfers could be done until the
driver was reloaded. Now an explicit data interrupt is sent to the
STi7109 which triggers a cancellation of the ongoing transfer, so
further transfers will be possible.

This feature requires firmware 0.3.10 or later. Firmware versions up to
and including 0.3.9 will just ignore the interrupt.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index ac15a4439a0ac..eda30fc6d2969 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -305,6 +305,10 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 			if (sti7109->block_done == 0) {
 				dprintk(SAA716x_ERROR, 1,
 					"timed out waiting for block done");
+				/* send a data interrupt to cancel the transfer
+				   and reset the data handling */
+				SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET,
+						ISR_DATA_MASK);
 				return -EIO;
 			}
 		}
@@ -319,6 +323,9 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 
 	if (sti7109->block_done == 0) {
 		dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+		/* send a data interrupt to cancel the transfer and reset the
+		   data handling */
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_DATA_MASK);
 		return -EIO;
 	}
 	sti7109->block_done = 0;

From 30dd6d5e38801c19e80f1836b1e291a6679680bb Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Mon, 4 Feb 2013 19:48:48 +0100
Subject: [PATCH 246/364] saa716x_ff: print decimal digits for firmware
 version.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 9d2c9da5864da..5413820bb6474 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1118,7 +1118,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 
 	err = sti7109_cmd_get_fw_version(sti7109, &fw_version);
 	if (!err) {
-		printk(KERN_INFO "SAA716x FF firmware version %X.%X.%X\n",
+		printk(KERN_INFO "SAA716x FF firmware version %d.%d.%d\n",
 			(fw_version >> 16) & 0xFF, (fw_version >> 8) & 0xFF,
 			fw_version & 0xFF);
 	}

From 2b2cd677b86c07cecfa59c746db141c043da0cd3 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 24 Feb 2013 12:56:24 +0100
Subject: [PATCH 247/364] saa716x: include fix for in-kernel build

support build directly in kernel source tree (not only in media-build)

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile      | 2 +-
 drivers/media/pci/saa716x/saa716x_dma.c | 1 +
 drivers/media/pci/saa716x/saa716x_ff.h  | 1 +
 3 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 484033047eafe..d4bdd72f2ec27 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -23,4 +23,4 @@ obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
 obj-$(CONFIG_DVB_SAA716X_FF)	  += saa716x_ff.o
 
-EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/
+EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/ -Idrivers/media/dvb/frontends/
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 0adcab9a76d5f..328aca5bc8dd1 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -1,6 +1,7 @@
 #include <linux/kernel.h>
 #include <linux/pci.h>
 #include <linux/scatterlist.h>
+#include <linux/vmalloc.h>
 #include <asm/page.h>
 #include <asm/pgtable.h>
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index ae7a911b0674c..82a3abeb5999d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -3,6 +3,7 @@
 
 #include "dvb_filter.h"
 #include "dvb_ringbuffer.h"
+#include <linux/version.h>
 
 #define TECHNOTREND			0x13c2
 #define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009

From 657fb0cf561cf2b5cabde8d8693cb1317ba2617a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 24 Feb 2013 13:07:44 +0100
Subject: [PATCH 248/364] saa716x: support directory structure of linux-3.7+

fix makefile include path for compatibility to linux-3.7

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index d4bdd72f2ec27..24e2d9a2c0240 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -23,4 +23,4 @@ obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
 obj-$(CONFIG_DVB_SAA716X_FF)	  += saa716x_ff.o
 
-EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/ -Idrivers/media/dvb/frontends/
+EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/ -Idrivers/media/dvb/frontends/ -Idrivers/media/dvb-core/ -Idrivers/media/dvb-frontends/

From ca2fbba0fa6b28393511736abce614080bc4196d Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 24 Feb 2013 13:36:59 +0100
Subject: [PATCH 249/364] saa716x: section mismatch fixes

fix attributes of init/exit functions to avoid section mismatches

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    | 2 +-
 drivers/media/pci/saa716x/saa716x_budget.c  | 6 +++---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 6 +++---
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 6 +++---
 drivers/media/pci/saa716x/saa716x_i2c.c     | 2 +-
 drivers/media/pci/saa716x/saa716x_pci.c     | 2 +-
 6 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index b120c81dc7654..0f1e97b23df9b 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -219,7 +219,7 @@ int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL(saa716x_dvb_init);
 
-void __devexit saa716x_dvb_exit(struct saa716x_dev *saa716x)
+void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	int i;
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 62c15b3f2e6c3..de23468c85a11 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -643,15 +643,15 @@ static struct pci_driver saa716x_budget_pci_driver = {
 	.name			= DRIVER_NAME,
 	.id_table		= saa716x_budget_pci_table,
 	.probe			= saa716x_budget_pci_probe,
-	.remove			= saa716x_budget_pci_remove,
+	.remove			= __devexit_p(saa716x_budget_pci_remove),
 };
 
-static int __devinit saa716x_budget_init(void)
+static int __init saa716x_budget_init(void)
 {
 	return pci_register_driver(&saa716x_budget_pci_driver);
 }
 
-static void __devexit saa716x_budget_exit(void)
+static void __exit saa716x_budget_exit(void)
 {
 	return pci_unregister_driver(&saa716x_budget_pci_driver);
 }
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 5413820bb6474..9ecb88d9ece8c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1741,15 +1741,15 @@ static struct pci_driver saa716x_ff_pci_driver = {
 	.name			= DRIVER_NAME,
 	.id_table		= saa716x_ff_pci_table,
 	.probe			= saa716x_ff_pci_probe,
-	.remove			= saa716x_ff_pci_remove,
+	.remove			= __devexit_p(saa716x_ff_pci_remove),
 };
 
-static int __devinit saa716x_ff_init(void)
+static int __init saa716x_ff_init(void)
 {
 	return pci_register_driver(&saa716x_ff_pci_driver);
 }
 
-static void __devexit saa716x_ff_exit(void)
+static void __exit saa716x_ff_exit(void)
 {
 	return pci_unregister_driver(&saa716x_ff_pci_driver);
 }
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 693141997c9b9..34dcf83ed1521 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -705,15 +705,15 @@ static struct pci_driver saa716x_hybrid_pci_driver = {
 	.name			= DRIVER_NAME,
 	.id_table		= saa716x_hybrid_pci_table,
 	.probe			= saa716x_hybrid_pci_probe,
-	.remove			= saa716x_hybrid_pci_remove,
+	.remove			= __devexit_p(saa716x_hybrid_pci_remove),
 };
 
-static int __devinit saa716x_hybrid_init(void)
+static int __init saa716x_hybrid_init(void)
 {
 	return pci_register_driver(&saa716x_hybrid_pci_driver);
 }
 
-static void __devexit saa716x_hybrid_exit(void)
+static void __exit saa716x_hybrid_exit(void)
 {
 	return pci_unregister_driver(&saa716x_hybrid_pci_driver);
 }
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 274a28b9ea342..5de93bdcfb231 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -704,7 +704,7 @@ int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL_GPL(saa716x_i2c_init);
 
-int __devexit saa716x_i2c_exit(struct saa716x_dev *saa716x)
+int saa716x_i2c_exit(struct saa716x_dev *saa716x)
 {
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *adapter	= NULL;
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index de7ad9a88c876..01729aed6a45f 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -249,7 +249,7 @@ int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL_GPL(saa716x_pci_init);
 
-void __devexit saa716x_pci_exit(struct saa716x_dev *saa716x)
+void saa716x_pci_exit(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 

From c6363ab53e741c9ac6102405135218c1c712a9eb Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 24 Feb 2013 14:01:09 +0100
Subject: [PATCH 250/364] saa716x: remove __devinit and friends

Remove __devinit/__devexit attributes for compatibility to linux-3.8. On
older kernels built without hotplug support this will slightly increase
kernel memory footprint.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    | 2 +-
 drivers/media/pci/saa716x/saa716x_budget.c  | 6 +++---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 6 +++---
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 6 +++---
 drivers/media/pci/saa716x/saa716x_i2c.c     | 2 +-
 drivers/media/pci/saa716x/saa716x_pci.c     | 2 +-
 drivers/media/pci/saa716x/saa716x_spi.c     | 4 ++--
 7 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 0f1e97b23df9b..6a9f4b4fdcc35 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -86,7 +86,7 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	return 0;
 }
 
-int __devinit saa716x_dvb_init(struct saa716x_dev *saa716x)
+int saa716x_dvb_init(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
 	struct saa716x_config *config = saa716x->config;
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index de23468c85a11..9b50d42d09486 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -47,7 +47,7 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x Budget"
 
-static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
 	int err = 0;
@@ -138,7 +138,7 @@ static int __devinit saa716x_budget_pci_probe(struct pci_dev *pdev, const struct
 	return err;
 }
 
-static void __devexit saa716x_budget_pci_remove(struct pci_dev *pdev)
+static void saa716x_budget_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 
@@ -643,7 +643,7 @@ static struct pci_driver saa716x_budget_pci_driver = {
 	.name			= DRIVER_NAME,
 	.id_table		= saa716x_budget_pci_table,
 	.probe			= saa716x_budget_pci_probe,
-	.remove			= __devexit_p(saa716x_budget_pci_remove),
+	.remove			= saa716x_budget_pci_remove,
 };
 
 static int __init saa716x_budget_init(void)
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 9ecb88d9ece8c..fb574235325cf 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -912,7 +912,7 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
 	struct sti7109_dev *sti7109;
@@ -1156,7 +1156,7 @@ static int __devinit saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci
 	return err;
 }
 
-static void __devexit saa716x_ff_pci_remove(struct pci_dev *pdev)
+static void saa716x_ff_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 	struct sti7109_dev *sti7109 = saa716x->priv;
@@ -1741,7 +1741,7 @@ static struct pci_driver saa716x_ff_pci_driver = {
 	.name			= DRIVER_NAME,
 	.id_table		= saa716x_ff_pci_table,
 	.probe			= saa716x_ff_pci_probe,
-	.remove			= __devexit_p(saa716x_ff_pci_remove),
+	.remove			= saa716x_ff_pci_remove,
 };
 
 static int __init saa716x_ff_init(void)
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 34dcf83ed1521..02294191fb96d 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -48,7 +48,7 @@ MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-
 
 #define DRIVER_NAME	"SAA716x Hybrid"
 
-static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
 	int err = 0;
@@ -153,7 +153,7 @@ static int __devinit saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct
 	return err;
 }
 
-static void __devexit saa716x_hybrid_pci_remove(struct pci_dev *pdev)
+static void saa716x_hybrid_pci_remove(struct pci_dev *pdev)
 {
 	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
 
@@ -705,7 +705,7 @@ static struct pci_driver saa716x_hybrid_pci_driver = {
 	.name			= DRIVER_NAME,
 	.id_table		= saa716x_hybrid_pci_table,
 	.probe			= saa716x_hybrid_pci_probe,
-	.remove			= __devexit_p(saa716x_hybrid_pci_remove),
+	.remove			= saa716x_hybrid_pci_remove,
 };
 
 static int __init saa716x_hybrid_init(void)
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 5de93bdcfb231..61ca4b2350611 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -633,7 +633,7 @@ static const struct saa716x_i2cvec i2c_vec[] = {
 	}
 };
 
-int __devinit saa716x_i2c_init(struct saa716x_dev *saa716x)
+int saa716x_i2c_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev		= saa716x->pdev;
 	struct saa716x_i2c *i2c		= saa716x->i2c;
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 01729aed6a45f..7fa6bad45736a 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -138,7 +138,7 @@ static void saa716x_free_irq(struct saa716x_dev *saa716x)
 	}
 }
 
-int __devinit saa716x_pci_init(struct saa716x_dev *saa716x)
+int saa716x_pci_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	int err = 0, ret = -ENODEV, i, use_dac, pm_cap;
diff --git a/drivers/media/pci/saa716x/saa716x_spi.c b/drivers/media/pci/saa716x/saa716x_spi.c
index 7bf928eaaa2d3..885945438e7f1 100644
--- a/drivers/media/pci/saa716x/saa716x_spi.c
+++ b/drivers/media/pci/saa716x/saa716x_spi.c
@@ -263,7 +263,7 @@ static int saa716x_spi_transfer(struct spi_device *spi, struct spi_message *msg)
 	return 0;
 }
 
-int __devinit saa716x_spi_init(struct saa716x_dev *saa716x)
+int saa716x_spi_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	struct spi_master *master;
@@ -301,7 +301,7 @@ int __devinit saa716x_spi_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL(saa716x_spi_init);
 
-void __devexit saa716x_spi_exit(struct saa716x_dev *saa716x)
+void saa716x_spi_exit(struct saa716x_dev *saa716x)
 {
 	struct saa716x_spi_state *saa716x_spi = saa716x->saa716x_spi;
 

From 82d04431162771a9b81b0d49491cae9a8b27a88a Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 24 Feb 2013 14:06:38 +0100
Subject: [PATCH 251/364] saa716x: convert fifo_worker tasklet to workqueue

Run fifo_worker in work_queue, not as tasklet, to avoid heavy (soft-)interrupt
load on slow CPUs.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  4 +++-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 19 ++++++++++++-------
 2 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 82a3abeb5999d..63020fabfef5a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -4,6 +4,7 @@
 #include "dvb_filter.h"
 #include "dvb_ringbuffer.h"
 #include <linux/version.h>
+#include <linux/workqueue.h>
 
 #define TECHNOTREND			0x13c2
 #define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009
@@ -107,7 +108,8 @@ struct sti7109_dev {
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
 	u8			*tsbuf;  /* temp ts buffer */
 
-	struct tasklet_struct	fifo_tasklet;
+	struct workqueue_struct *fifo_workq;
+	struct work_struct	fifo_work;
 
 	wait_queue_head_t	boot_finish_wq;
 	int			boot_finished;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index fb574235325cf..7189cc20d9d28 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -495,10 +495,10 @@ static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static void fifo_worker(unsigned long data)
+static void fifo_worker(struct work_struct *work)
 {
-	struct saa716x_dev *saa716x = (struct saa716x_dev *) data;
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct sti7109_dev *sti7109 = container_of(work, struct sti7109_dev, fifo_work);
+	struct saa716x_dev *saa716x = sti7109->dev;
 	u32 fifoCtrl;
 	u32 fifoStat;
 	u16 fifoSize;
@@ -884,7 +884,8 @@ static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)
 	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
 		saa716x_vip_exit(saa716x, 0);
 
-	tasklet_kill(&sti7109->fifo_tasklet);
+	cancel_work_sync(&sti7109->fifo_work);
+	destroy_workqueue(sti7109->fifo_workq);
 	dvb_unregister_device(sti7109->video_dev);
 	return 0;
 }
@@ -903,8 +904,12 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 			    sti7109,
 			    DVB_DEVICE_VIDEO);
 
-	tasklet_init(&sti7109->fifo_tasklet, fifo_worker,
-		     (unsigned long)saa716x);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 3, 0)
+	sti7109->fifo_workq = create_singlethread_workqueue("saa716x_fifo_wq");
+#else
+	sti7109->fifo_workq = alloc_workqueue("saa716x_fifo_wq%d", WQ_UNBOUND, 1, SAA716x_DEV);
+#endif
+	INIT_WORK(&sti7109->fifo_work, fifo_worker);
 
 	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
 		saa716x_vip_init(saa716x, 0, video_vip_worker);
@@ -1546,7 +1551,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
 			fifoCtrl &= ~0x4;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
-			tasklet_schedule(&sti7109->fifo_tasklet);
+			queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
 			phiISR &= ~ISR_FIFO1_EMPTY_MASK;
 		}
 

From dae4afcc5018210dcbd469574b3f2ac91a888f1b Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 24 Feb 2013 14:20:48 +0100
Subject: [PATCH 252/364] saa716x: TS output buffer cleanup

- Use copy_from_user for tsout ringbuffer writes.
- Remove temporal TS buffer, directly copy from ringbuffer to device.
- Start fifo_worker when ringbuffer is refilled after reset/clear.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |   7 +-
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  |   2 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 116 ++++++++++++++------
 3 files changed, 89 insertions(+), 36 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 63020fabfef5a..ed06380b5776f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -91,7 +91,10 @@
 #define MAX_DATA_LEN		(1024 * 1024)
 
 #define TSOUT_LEN		(1024 * TS_SIZE)
-#define TSBUF_LEN		(8 * 1024)
+
+#define TSOUT_STAT_RESET	0
+#define TSOUT_STAT_FILL 	1
+#define TSOUT_STAT_RUN  	2
 
 #define VIDEO_CAPTURE_OFF	0
 #define VIDEO_CAPTURE_ONE_SHOT	1
@@ -106,7 +109,7 @@ struct sti7109_dev {
 
 	void			*iobuf;	 /* memory for all buffers */
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
-	u8			*tsbuf;  /* temp ts buffer */
+	u32			tsout_stat;
 
 	struct workqueue_struct *fifo_workq;
 	struct work_struct	fifo_work;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index eda30fc6d2969..430dd475d4aeb 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -35,7 +35,7 @@ int sti7109_cmd_init(struct sti7109_dev *sti7109)
 	sti7109->osd_result_avail = 0;
 
 	sti7109->data_handle = 0;
-	sti7109->data_buffer = (u8 *) (sti7109->iobuf + TSOUT_LEN + TSBUF_LEN);
+	sti7109->data_buffer = (u8 *) (sti7109->iobuf + TSOUT_LEN);
 	init_waitqueue_head(&sti7109->data_ready_wq);
 	sti7109->data_ready = 0;
 	init_waitqueue_head(&sti7109->block_done_wq);
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 7189cc20d9d28..5916c80b23404 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -495,6 +495,46 @@ static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
+static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf, const u8 __user *buf, size_t len)
+{
+	size_t todo = len;
+	size_t split;
+
+	split = (rbuf->pwrite + len > rbuf->size) ? rbuf->size - rbuf->pwrite : 0;
+
+	if (split > 0) {
+        	if (copy_from_user(rbuf->data+rbuf->pwrite, buf, split)) {
+			return -EFAULT;
+		}
+		buf += split;
+		todo -= split;
+		rbuf->pwrite = 0;
+	}
+	if (copy_from_user(rbuf->data+rbuf->pwrite, buf, todo)) {
+		return -EFAULT;
+	}
+	rbuf->pwrite = (rbuf->pwrite + todo) % rbuf->size;
+
+	return len;
+}
+
+static void ringbuffer_read_io32(struct dvb_ringbuffer *rbuf, u32 __iomem *buf, size_t len)
+{
+	size_t todo = len;
+	size_t split;
+
+	split = (rbuf->pread + len > rbuf->size) ? rbuf->size - rbuf->pread : 0;
+	if (split > 0) {
+		iowrite32_rep(buf, rbuf->data+rbuf->pread, split/4);
+		buf += split;
+		todo -= split;
+		rbuf->pread = 0;
+	}
+	iowrite32_rep(buf, rbuf->data+rbuf->pread, todo/4);
+
+	rbuf->pread = (rbuf->pread + todo) % rbuf->size;
+}
+
 static void fifo_worker(struct work_struct *work)
 {
 	struct sti7109_dev *sti7109 = container_of(work, struct sti7109_dev, fifo_work);
@@ -506,24 +546,31 @@ static void fifo_worker(struct work_struct *work)
 	u16 fifoFree;
 	int len;
 
-	fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
+	if (sti7109->tsout_stat == TSOUT_STAT_RESET)
+		return;
+
 	fifoStat = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_STAT);
 	fifoSize = (u16) (fifoStat >> 16);
 	fifoUsage = (u16) fifoStat;
-	fifoFree = fifoSize - fifoUsage;
-	spin_lock(&sti7109->tsout.lock);
+	fifoFree = fifoSize - fifoUsage - 1;
 	len = dvb_ringbuffer_avail(&sti7109->tsout);
 	if (len > fifoFree)
 		len = fifoFree;
-	if (len >= TS_SIZE)
+	if (len < TS_SIZE)
+		return;
+
+	while (len >= TS_SIZE)
 	{
-		while (len >= TS_SIZE)
-		{
-			dvb_ringbuffer_read(&sti7109->tsout, sti7109->tsbuf, (size_t) TS_SIZE);
-			saa716x_phi_write_fifo(saa716x, sti7109->tsbuf, TS_SIZE);
-			len -= TS_SIZE;
-		}
-		wake_up(&sti7109->tsout.queue);
+		ringbuffer_read_io32(&sti7109->tsout, saa716x->mmio + PHI_0 + PHI_0_0_RW_0, (size_t) TS_SIZE);
+		len -= TS_SIZE;
+	}
+	wake_up(&sti7109->tsout.queue);
+
+	spin_lock(&sti7109->tsout.lock);
+	if (sti7109->tsout_stat != TSOUT_STAT_RESET) {
+		sti7109->tsout_stat = TSOUT_STAT_RUN;
+
+		fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
 		fifoCtrl |= 0x4;
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
 	}
@@ -745,6 +792,9 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 	if (av7110->videostate.stream_source != VIDEO_SOURCE_MEMORY)
 		return -EPERM;
 */
+	if (sti7109->tsout_stat == TSOUT_STAT_RESET)
+		return count;
+
 	if ((file->f_flags & O_NONBLOCK) && !FREE_COND_TS)
 		return -EWOULDBLOCK;
 
@@ -755,15 +805,14 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 			if (wait_event_interruptible(sti7109->tsout.queue, FREE_COND_TS))
 				break;
 		}
-		dvb_ringbuffer_write(&sti7109->tsout, buf, TS_SIZE);
+		ringbuffer_write_user(&sti7109->tsout, buf, TS_SIZE);
 		todo -= TS_SIZE;
 		buf += TS_SIZE;
 	}
 
-	if (count > todo) {
-		u32 fifoCtrl;
-
-		fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
+	if ((sti7109->tsout_stat == TSOUT_STAT_RUN) ||
+	    (dvb_ringbuffer_avail(&sti7109->tsout) > TSOUT_LEN/3)) {
+		u32 fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
 		fifoCtrl |= 0x4;
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
 	}
@@ -777,14 +826,10 @@ static unsigned int dvb_video_poll(struct file *file, poll_table *wait)
 	struct sti7109_dev *sti7109	= dvbdev->priv;
 	unsigned int mask = 0;
 
-	if ((file->f_flags & O_ACCMODE) != O_RDONLY)
+	if ((file->f_flags & O_ACCMODE) != O_RDONLY) {
 		poll_wait(file, &sti7109->tsout.queue, wait);
 
-	if ((file->f_flags & O_ACCMODE) != O_RDONLY) {
-		if (1/*sti7109->playing*/) {
-			if (FREE_COND_TS)
-				mask |= (POLLOUT | POLLWRNORM);
-		} else /* if not playing: may play if asked for */
+		if (FREE_COND_TS)
 			mask |= (POLLOUT | POLLWRNORM);
 	}
 
@@ -807,19 +852,25 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 		if (stream_source == VIDEO_SOURCE_DEMUX) {
 			/* stop and reset FIFO 1 */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
+			sti7109->tsout_stat = TSOUT_STAT_RESET;
+			break;
 		}
-		else {
-			dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
-			/* reset FIFO 1 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
-			/* start FIFO 1 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 2);
-		}
-		break;
+		/* fall through */
 	}
 	case VIDEO_CLEAR_BUFFER:
 	{
-		dvb_ringbuffer_flush_spinlock_wakeup(&sti7109->tsout);
+		/* reset FIFO 1 */
+		spin_lock(&sti7109->tsout.lock);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
+		sti7109->tsout_stat = TSOUT_STAT_RESET;
+		spin_unlock(&sti7109->tsout.lock);
+		msleep(50);
+		cancel_work_sync(&sti7109->fifo_work);
+		/* start FIFO 1 */
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 2);
+		dvb_ringbuffer_flush(&sti7109->tsout);
+        	sti7109->tsout_stat = TSOUT_STAT_FILL;
+		wake_up(&sti7109->tsout.queue);
 		break;
 	}
 	case VIDEO_GET_PTS:
@@ -896,7 +947,6 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 	struct sti7109_dev *sti7109		= saa716x->priv;
 
 	dvb_ringbuffer_init(&sti7109->tsout, sti7109->iobuf, TSOUT_LEN);
-	sti7109->tsbuf = (u8 *) (sti7109->iobuf + TSOUT_LEN);
 
 	dvb_register_device(&saa716x_adap->dvb_adapter,
 			    &sti7109->video_dev,
@@ -992,7 +1042,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	sti7109->dev = saa716x;
 
-	sti7109->iobuf = vmalloc(TSOUT_LEN + TSBUF_LEN + MAX_DATA_LEN);
+	sti7109->iobuf = vmalloc(TSOUT_LEN + MAX_DATA_LEN);
 	if (!sti7109->iobuf)
 		goto fail4;
 

From 51d6596e2647b69ae9765cfa8f11ad32f25e4504 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 2 Aug 2013 12:50:38 +0200
Subject: [PATCH 253/364] saa716x: i2c_del_adapter() fix

In linux-3.10 the return type of i2c_del_adapter() has changed to void. So remove
the error checking code.

Also in older kernels we should try to remove all i2c adapters, even if one
i2c_del_adapter() call fails.

Signed-off-by: Soeren Moch <smoch@web.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 16 +++-------------
 drivers/media/pci/saa716x/saa716x_i2c.h |  2 +-
 2 files changed, 4 insertions(+), 14 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 61ca4b2350611..27a1c37f8784e 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -704,11 +704,11 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL_GPL(saa716x_i2c_init);
 
-int saa716x_i2c_exit(struct saa716x_dev *saa716x)
+void saa716x_i2c_exit(struct saa716x_dev *saa716x)
 {
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *adapter	= NULL;
-	int i, err = 0;
+	int i;
 
 	dprintk(SAA716x_DEBUG, 1, "Removing SAA%02x I2C Core", saa716x->pdev->device);
 
@@ -721,18 +721,8 @@ int saa716x_i2c_exit(struct saa716x_dev *saa716x)
 		saa716x_i2c_hwdeinit(i2c, SAA716x_I2C_BUS(i));
 		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
 
-		err = i2c_del_adapter(adapter);
-		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s remove failed", i, adapter->name);
-			goto exit;
-		}
+		i2c_del_adapter(adapter);
 		i2c++;
 	}
-	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully removed", saa716x->pdev->device);
-
-	return 0;
-
-exit:
-	return err;
 }
 EXPORT_SYMBOL_GPL(saa716x_i2c_exit);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index da767ac634f17..27d9c99463f2d 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -45,7 +45,7 @@ struct saa716x_i2c {
 };
 
 extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
-extern int saa716x_i2c_exit(struct saa716x_dev *saa716x);
+extern void saa716x_i2c_exit(struct saa716x_dev *saa716x);
 extern void saa716x_i2cint_disable(struct saa716x_dev *saa716x);
 extern int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus);
 

From c59f54bb9099db6eda7f91b6c420fade43107c06 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Mar 2014 17:02:42 +0100
Subject: [PATCH 254/364] saa716x: Fix PHI address space offsets, cleanup
 register definitions.

From: Soeren Moch <smoch@web.de>
Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_phi.c     | 53 ---------------------
 drivers/media/pci/saa716x/saa716x_phi.h     | 27 -----------
 drivers/media/pci/saa716x/saa716x_phi_reg.h | 28 +++++------
 drivers/media/pci/saa716x/saa716x_priv.h    |  4 --
 4 files changed, 14 insertions(+), 98 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 7df9a989e08be..d79b8c8493b19 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -1,63 +1,10 @@
 #include <linux/kernel.h>
 
 #include "saa716x_mod.h"
-
 #include "saa716x_phi_reg.h"
-
-#include "saa716x_spi.h"
 #include "saa716x_phi.h"
 #include "saa716x_priv.h"
 
-u32 PHI_0_REGS[] = {
-	PHI_0_MODE,
-	PHI_0_0_CONFIG,
-	PHI_0_1_CONFIG,
-	PHI_0_2_CONFIG,
-	PHI_0_3_CONFIG
-};
-
-u32 PHI_1_REGS[] = {
-	PHI_1_MODE,
-	PHI_1_0_CONFIG,
-	PHI_1_1_CONFIG,
-	PHI_1_2_CONFIG,
-	PHI_1_3_CONFIG,
-	PHI_1_4_CONFIG,
-	PHI_1_5_CONFIG,
-	PHI_1_6_CONFIG,
-	PHI_1_7_CONFIG
-};
-
-#define PHI_BASE(__port)	((				\
-	(__port == PHI_1) ?					\
-		PHI_1_BASE :					\
-		PHI_0_BASE					\
-))
-
-#define PHI_APERTURE(_port)	((				\
-	(__port == PHI_1) ?					\
-		PHI_1_APERTURE:					\
-		PHI_0_APERTURE					\
-))
-
-#define PHI_REG(__port, __reg)	((				\
-	(__port == PHI_1) ?					\
-		PHI_1_REGS[__reg] :				\
-		PHI_0_REGS[__reg]				\
-))
-
-#define PHI_SLAVE(__port, __slave)	((			\
-	PHI_BASE(__port) + (__slave * (PHI_APERTURE(__port)))	\
-))
-
-/* // Read SAA716x registers
- * SAA716x_EPRD(PHI_0, PHI_REG(__port, __reg))
- * SAA716x_EPWR(PHI_1, PHI_REG(__port, __reg), __data)
- *
- * // Read slave registers
- * SAA716x_EPRD(PHI_0, PHI_SLAVE(__port, __slave, __offset))
- * SAA716x_EPWR(PHI_1, PHI_SLAVE(__port, __slave, _offset), __data)
- */
 
 int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index ff5cda2314257..0d25536852f98 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -1,33 +1,6 @@
 #ifndef __SAA716x_PHI_H
 #define __SAA716x_PHI_H
 
-/* PHI SLAVE */
-#define PHI_SLAVE_0		0
-#define PHI_SLAVE_1		1
-#define PHI_SLAVE_2		2
-#define PHI_SLAVE_3		3
-#define PHI_SLAVE_4		4
-#define PHI_SLAVE_5		5
-#define PHI_SLAVE_6		6
-#define PHI_SLAVE_7		7
-
-/* PHI_REG */
-#define PHI_MODE		0
-#define PHI_CONFIG_0		1
-#define PHI_CONFIG_1		2
-#define PHI_CONFIG_2		3
-#define PHI_CONFIG_3		4
-#define PHI_CONFIG_4		5
-#define PHI_CONFIG_5		6
-#define PHI_CONFIG_6		7
-#define PHI_CONFIG_7		8
-
-#define PHI_0_BASE		0x1000
-#define PHI_0_APERTURE		0x0800
-
-#define PHI_1_BASE		0x0000
-#define PHI_1_APERTURE		0xfffc
-
 struct saa716x_dev;
 
 extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
diff --git a/drivers/media/pci/saa716x/saa716x_phi_reg.h b/drivers/media/pci/saa716x/saa716x_phi_reg.h
index cb9e148e09d83..5ebaf5ec0385a 100644
--- a/drivers/media/pci/saa716x/saa716x_phi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_phi_reg.h
@@ -69,26 +69,26 @@
 #define PHI_1_0_RW_0			0x00000
 #define PHI_1_0_RW_16383		0x0fffc
 
-#define PHI_1_1_RW_0			0x1000
-#define PHI_1_1_RW_16383		0x1ffc
+#define PHI_1_1_RW_0			0x10000
+#define PHI_1_1_RW_16383		0x1fffc
 
-#define PHI_1_2_RW_0			0x2000
-#define PHI_1_2_RW_16383		0x2ffc
+#define PHI_1_2_RW_0			0x20000
+#define PHI_1_2_RW_16383		0x2fffc
 
-#define PHI_1_3_RW_0			0x3000
-#define PHI_1_3_RW_16383		0x3ffc
+#define PHI_1_3_RW_0			0x30000
+#define PHI_1_3_RW_16383		0x3fffc
 
-#define PHI_1_4_RW_0			0x4000
-#define PHI_1_4_RW_16383		0x4ffc
+#define PHI_1_4_RW_0			0x40000
+#define PHI_1_4_RW_16383		0x4fffc
 
-#define PHI_1_5_RW_0			0x5000
-#define PHI_1_5_RW_16383		0x5ffc
+#define PHI_1_5_RW_0			0x50000
+#define PHI_1_5_RW_16383		0x5fffc
 
-#define PHI_1_6_RW_0			0x6000
-#define PHI_1_6_RW_16383		0x6ffc
+#define PHI_1_6_RW_0			0x60000
+#define PHI_1_6_RW_16383		0x6fffc
 
-#define PHI_1_7_RW_0			0x7000
-#define PHI_1_7_RW_16383		0x7ffc
+#define PHI_1_7_RW_0			0x70000
+#define PHI_1_7_RW_16383		0x7fffc
 
 
 #endif /* __SAA716x_PHI_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 307a07db1bec0..8c13a87259d14 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -68,10 +68,6 @@
 #define SAA716x_EPWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
 #define SAA716x_EPRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
 
-#define SAA716x_RCWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
-#define SAA716x_RCRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
-
-
 #define SAA716x_MSI_MAX_VECTORS			16
 
 struct saa716x_msix_entry {

From ee8c5717853af241bb478cd76e0e61490d63ea42 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Mar 2014 17:03:34 +0100
Subject: [PATCH 255/364] saa716x: Clean up PHI configuration.

Based on patch by Soeren Moch <smoch@web.de>

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_phi.c | 36 ++++++++-----------------
 1 file changed, 11 insertions(+), 25 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index d79b8c8493b19..7a112c841e793 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -6,6 +6,11 @@
 #include "saa716x_priv.h"
 
 
+
+/* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
+#define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
+	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
+
 int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave)
 {
 	int i;
@@ -24,36 +29,17 @@ int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave)
 
 int saa716x_phi_init(struct saa716x_dev *saa716x)
 {
-	uint32_t value;
 
 	/* init PHI 0 to FIFO mode */
-	value = 0;
-	value |= PHI_FIFO_MODE;
-	SAA716x_EPWR(PHI_0, PHI_0_MODE, value);
-
-	value = 0;
-	value |= 0x02; /* chip select 1 */
-	value |= 0x00 << 8; /* ready mask */
-	value |= 0x03 << 12; /* strobe time */
-	value |= 0x06 << 20; /* cycle time */
-	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, value);
+	SAA716x_EPWR(PHI_0, PHI_0_MODE, PHI_FIFO_MODE);
+	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
 
 	/* init PHI 1 to SRAM mode, auto increment on */
-	value = 0;
-	value |= PHI_AUTO_INCREMENT;
-	SAA716x_EPWR(PHI_0, PHI_1_MODE, value);
-
-	value = 0;
-	value |= 0x01; /* chip select 0 */
-	value |= 0x00 << 8; /* ready mask */
-	value |= 0x03 << 12; /* strobe time */
-	value |= 0x05 << 20; /* cycle time */
-	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, value);
-
-	value = 0;
-	value |= PHI_ALE_POL; /* ALE is active high */
-	SAA716x_EPWR(PHI_0, PHI_POLARITY, value);
+	SAA716x_EPWR(PHI_0, PHI_1_MODE, PHI_AUTO_INCREMENT);
+	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
 
+	/* ALE is active high */
+	SAA716x_EPWR(PHI_0, PHI_POLARITY, PHI_ALE_POL);
 	SAA716x_EPWR(PHI_0, PHI_TIMEOUT, 0x2a);
 
 	return 0;

From 4dc9fc37bea0aa47d04333681bff4e239232bf2f Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Mar 2014 17:04:11 +0100
Subject: [PATCH 256/364] saa716x: Reset PHI on init.

Based on patch by Soeren Moch <smoch@web.de>

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_phi.c | 10 ++--------
 drivers/media/pci/saa716x/saa716x_phi.h |  1 -
 2 files changed, 2 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index 7a112c841e793..f6420650e2454 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -11,24 +11,18 @@
 #define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
 	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
 
-int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave)
+int saa716x_phi_init(struct saa716x_dev *saa716x)
 {
 	int i;
 
-	/* Reset */
+	/* Reset PHI */
 	SAA716x_EPWR(PHI_0, PHI_SW_RST, 0x1);
-
 	for (i = 0; i < 20; i++) {
 		msleep(1);
 		if (!(SAA716x_EPRD(PHI_0, PHI_SW_RST)))
 			break;
 	}
 
-	return 0;
-}
-
-int saa716x_phi_init(struct saa716x_dev *saa716x)
-{
 
 	/* init PHI 0 to FIFO mode */
 	SAA716x_EPWR(PHI_0, PHI_0_MODE, PHI_FIFO_MODE);
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index 0d25536852f98..c30eab9601cd6 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -3,7 +3,6 @@
 
 struct saa716x_dev;
 
-extern int saa716x_init_phi(struct saa716x_dev *saa716x, u32 port, u8 slave);
 extern int saa716x_phi_init(struct saa716x_dev *saa716x);
 extern int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 *data, int length);
 extern int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, u8 *data, int length);

From d645f0a3d7c67830c284a08ad3c6fbce86e23899 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Mar 2014 17:06:05 +0100
Subject: [PATCH 257/364] saa716x: Print EEPROM content on DEBUG verbosity
 only.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_rom.c | 210 ++++++++++++------------
 1 file changed, 105 insertions(+), 105 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 629fb26572396..1ae782187e4fe 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -99,7 +99,7 @@ static int saa716x_get_offset(struct saa716x_dev *saa716x, u8 *buf, u32 *offset)
 		if (!(strncmp("START", buf + i, 5)))
 			break;
 	}
-	dprintk(SAA716x_INFO, 1, "Offset @ %d", i);
+	dprintk(SAA716x_DEBUG, 1, "Offset @ %d", i);
 	*offset = i;
 
 	return 0;
@@ -121,19 +121,19 @@ static int saa716x_eeprom_header(struct saa716x_dev *saa716x,
 	}
 	*offset += sizeof (struct saa716x_romhdr);
 
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Data=%d bytes\n",
+	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Data=%d bytes\n",
 		saa716x->pdev->device,
 		rom_header->data_size);
 
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Version=%d\n",
+	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Version=%d\n",
 		saa716x->pdev->device,
 		rom_header->version);
 
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Devices=%d\n",
+	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Devices=%d\n",
 		saa716x->pdev->device,
 		rom_header->devices);
 
-	dprintk(SAA716x_NOTICE, 0, "SAA%02x ROM: Compressed=%d\n\n",
+	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Compressed=%d\n\n",
 		saa716x->pdev->device,
 		rom_header->compression);
 
@@ -153,28 +153,28 @@ int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
 		return err;
 	}
 
-	dprintk(SAA716x_NOTICE, 0, "    Card: %s\n",
+	dprintk(SAA716x_DEBUG, 0, "    Card: %s\n",
 		saa716x->config->model_name);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"    ---------------- SAA%02x ROM @ Offset 0x%02x ----------------",
 		saa716x->pdev->device,
 		DUMP_OFFST);
 
 	for (i = 0; i < DUMP_BYTES; i++) {
 		if ((i % 16) == 0) {
-			dprintk(SAA716x_NOTICE, 0, "\n    ");
-			dprintk(SAA716x_NOTICE, 0, "%04x: ", i);
+			dprintk(SAA716x_DEBUG, 0, "\n    ");
+			dprintk(SAA716x_DEBUG, 0, "%04x: ", i);
 		}
 
 		if ((i %  8) == 0)
-			dprintk(SAA716x_NOTICE, 0, " ");
+			dprintk(SAA716x_DEBUG, 0, " ");
 		if ((i %  4) == 0)
-			dprintk(SAA716x_NOTICE, 0, " ");
-		dprintk(SAA716x_NOTICE, 0, "%02x ", buf[i]);
+			dprintk(SAA716x_DEBUG, 0, " ");
+		dprintk(SAA716x_DEBUG, 0, "%02x ", buf[i]);
 	}
-	dprintk(SAA716x_NOTICE, 0, "\n");
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0, "\n");
+	dprintk(SAA716x_DEBUG, 0,
 		"    ---------------- SAA%02x ROM Dump end ---------------------\n\n",
 		saa716x->pdev->device);
 
@@ -205,25 +205,25 @@ static void saa716x_descriptor_dbg(struct saa716x_dev *saa716x,
 {
 	int i;
 
-	dprintk(SAA716x_INFO, 0, "       ");
+	dprintk(SAA716x_DEBUG, 0, "       ");
 	for (i = 0; i < 49; i++)
-		dprintk(SAA716x_INFO, 0, "-");
+		dprintk(SAA716x_DEBUG, 0, "-");
 
 	for (i = 0; i < size + ext_size; i++) {
 		if ((i % 16) == 0)
-			dprintk(SAA716x_INFO, 0, "\n      ");
+			dprintk(SAA716x_DEBUG, 0, "\n      ");
 		if ((i %  8) == 0)
-			dprintk(SAA716x_INFO, 0, " ");
+			dprintk(SAA716x_DEBUG, 0, " ");
 		if ((i %  4) == 0)
-			dprintk(SAA716x_INFO, 0, " ");
+			dprintk(SAA716x_DEBUG, 0, " ");
 
-		dprintk(SAA716x_INFO, 0, "%02x ", buf[*offset + i]);
+		dprintk(SAA716x_DEBUG, 0, "%02x ", buf[*offset + i]);
 	}
 
-	dprintk(SAA716x_INFO, 0, "\n       ");
+	dprintk(SAA716x_DEBUG, 0, "\n       ");
 	for (i = 0; i < 49; i++)
-		dprintk(SAA716x_INFO, 0, "-");
-	dprintk(SAA716x_INFO, 0, "\n");
+		dprintk(SAA716x_DEBUG, 0, "-");
+	dprintk(SAA716x_DEBUG, 0, "\n");
 
 }
 
@@ -244,12 +244,12 @@ static int saa716x_decoder_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext Data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -275,17 +275,17 @@ static int saa716x_gpio_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Pins=%d\n",
 		saa716x->pdev->device,
 		header.pins);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -312,62 +312,62 @@ static int saa716x_video_decoder_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: PORT 0=0x%02x\n",
 		saa716x->pdev->device,
 		header.video_port0);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: PORT 1=0x%02x\n",
 		saa716x->pdev->device,
 		header.video_port1);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: PORT 2=0x%02x\n",
 		saa716x->pdev->device,
 		header.video_port2);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: VBI PORT ID=0x%02x\n",
 		saa716x->pdev->device,
 		header.vbi_port_id);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Video PORT Type=0x%02x\n",
 		saa716x->pdev->device,
 		header.video_port_type);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: VBI PORT Type=0x%02x\n",
 		saa716x->pdev->device,
 		header.vbi_port_type);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Encoder PORT Type=0x%02x\n",
 		saa716x->pdev->device,
 		header.encoder_port_type);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Video Output=0x%02x\n",
 		saa716x->pdev->device,
 		header.video_output);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: VBI Output=0x%02x\n",
 		saa716x->pdev->device,
 		header.vbi_output);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Encoder Output=0x%02x\n",
 		saa716x->pdev->device,
 		header.encoder_output);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -393,12 +393,12 @@ static int saa716x_audio_decoder_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -423,12 +423,12 @@ static int saa716x_event_source_info(struct saa716x_dev *saa716x,
 
 		return -1;
 	}
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -457,17 +457,17 @@ static int saa716x_crossbar_info(struct saa716x_dev *saa716x,
 
 	memcpy(&pair_info, &buf[*offset], sizeof (struct saa716x_xbar_pair_info));
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Pairs=%d\n",
 		saa716x->pdev->device,
 		header.pair_inputs);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -492,12 +492,12 @@ static int saa716x_tuner_info(struct saa716x_dev *saa716x,
 
 		return -1;
 	}
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -522,12 +522,12 @@ static int saa716x_pll_info(struct saa716x_dev *saa716x,
 
 		return -1;
 	}
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -552,12 +552,12 @@ static int saa716x_channel_decoder_info(struct saa716x_dev *saa716x,
 
 		return -1;
 	}
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -582,12 +582,12 @@ static int saa716x_encoder_info(struct saa716x_dev *saa716x,
 
 		return -1;
 	}
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -613,12 +613,12 @@ static int saa716x_ir_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -644,12 +644,12 @@ static int saa716x_eeprom_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -675,12 +675,12 @@ static int saa716x_filter_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -706,12 +706,12 @@ static int saa716x_streamdev_info(struct saa716x_dev *saa716x,
 		return -1;
 	}
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		header.size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n",
 		saa716x->pdev->device,
 		header.ext_data);
@@ -733,12 +733,12 @@ static int saa716x_unknown_device_info(struct saa716x_dev *saa716x,
 
 	saa716x_descriptor_dbg(saa716x, buf, offset, size, ext_size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		size);
 
-	dprintk(SAA716x_NOTICE, 0,
+	dprintk(SAA716x_DEBUG, 0,
 		"        SAA%02x ROM: Ext data=%d bytes\n\n",
 		saa716x->pdev->device,
 		ext_size);
@@ -757,25 +757,25 @@ static void saa716x_device_dbg(struct saa716x_dev *saa716x,
 {
 	int i;
 
-	dprintk(SAA716x_INFO, 0, "   ");
+	dprintk(SAA716x_DEBUG, 0, "   ");
 	for (i = 0; i < 53; i++)
-		dprintk(SAA716x_INFO, 0, "-");
+		dprintk(SAA716x_DEBUG, 0, "-");
 
 	for (i = 0; i < size + ext_size + addr_size; i++) {
 		if ((i % 16) == 0)
-			dprintk(SAA716x_INFO, 0, "\n  ");
+			dprintk(SAA716x_DEBUG, 0, "\n  ");
 		if ((i %  8) == 0)
-			dprintk(SAA716x_INFO, 0, " ");
+			dprintk(SAA716x_DEBUG, 0, " ");
 		if ((i %  4) == 0)
-			dprintk(SAA716x_INFO, 0, " ");
+			dprintk(SAA716x_DEBUG, 0, " ");
 
-		dprintk(SAA716x_INFO, 0, "%02x ", buf[*offset + i]);
+		dprintk(SAA716x_DEBUG, 0, "%02x ", buf[*offset + i]);
 	}
 
-	dprintk(SAA716x_INFO, 0, "\n   ");
+	dprintk(SAA716x_DEBUG, 0, "\n   ");
 	for (i = 0; i < 53; i++)
-		dprintk(SAA716x_INFO, 0, "-");
-	dprintk(SAA716x_INFO, 0, "\n");
+		dprintk(SAA716x_DEBUG, 0, "-");
+	dprintk(SAA716x_DEBUG, 0, "\n");
 
 }
 
@@ -811,47 +811,47 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 		*offset += device->addr_size;
 	}
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device @ 0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Device @ 0x%02x\n",
 		saa716x->pdev->device,
 		address);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Size=%d bytes\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Size=%d bytes\n",
 		saa716x->pdev->device,
 		device->struct_size);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device ID=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Device ID=0x%02x\n",
 		saa716x->pdev->device,
 		device->device_id);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Master ID=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Master ID=0x%02x\n",
 		saa716x->pdev->device,
 		device->master_devid);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Bus ID=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Bus ID=0x%02x\n",
 		saa716x->pdev->device,
 		device->master_busid);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Device type=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Device type=0x%02x\n",
 		saa716x->pdev->device,
 		device->device_type);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Implementation ID=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Implementation ID=0x%02x\n",
 		saa716x->pdev->device,
 		device->implem_id);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Path ID=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Path ID=0x%02x\n",
 		saa716x->pdev->device,
 		device->path_id);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: GPIO ID=0x%02x\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: GPIO ID=0x%02x\n",
 		saa716x->pdev->device,
 		device->gpio_id);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Address=%d bytes\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Address=%d bytes\n",
 		saa716x->pdev->device,
 		device->addr_size);
 
-	dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: Extended data=%d bytes\n\n",
+	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Extended data=%d bytes\n\n",
 		saa716x->pdev->device,
 		device->extd_data_size);
 
@@ -863,7 +863,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 			if (device->device_type & mask) {
 				switch (mask) {
 				case DECODER_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found decoder device\n",
 						saa716x->pdev->device);
 
@@ -871,7 +871,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case GPIO_SOURCE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found GPIO device\n",
 						saa716x->pdev->device);
 
@@ -879,7 +879,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case VIDEO_DECODER:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Video Decoder device\n",
 						saa716x->pdev->device);
 
@@ -887,7 +887,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case AUDIO_DECODER:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Audio Decoder device\n",
 						saa716x->pdev->device);
 
@@ -895,7 +895,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case EVENT_SOURCE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Event source\n",
 						saa716x->pdev->device);
 
@@ -903,7 +903,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case CROSSBAR:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Crossbar device\n",
 						saa716x->pdev->device);
 
@@ -911,7 +911,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case TUNER_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Tuner device\n",
 						saa716x->pdev->device);
 
@@ -919,7 +919,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case PLL_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found PLL device\n",
 						saa716x->pdev->device);
 
@@ -927,7 +927,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case CHANNEL_DECODER:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Channel Demodulator device\n",
 						saa716x->pdev->device);
 
@@ -935,7 +935,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case RDS_DECODER:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found RDS Decoder device\n",
 						saa716x->pdev->device);
 
@@ -943,7 +943,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case ENCODER_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Encoder device\n",
 						saa716x->pdev->device);
 
@@ -951,7 +951,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case IR_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found IR device\n",
 						saa716x->pdev->device);
 
@@ -959,7 +959,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case EEPROM_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found EEPROM device\n",
 						saa716x->pdev->device);
 
@@ -967,7 +967,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case NOISE_FILTER:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Noise filter device\n",
 						saa716x->pdev->device);
 
@@ -975,7 +975,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case LNx_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found LNx device\n",
 						saa716x->pdev->device);
 
@@ -983,7 +983,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case STREAM_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found streaming device\n",
 						saa716x->pdev->device);
 
@@ -991,7 +991,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				case CONFIGSPACE_DEVICE:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found Configspace device\n",
 						saa716x->pdev->device);
 
@@ -999,7 +999,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 					break;
 
 				default:
-					dprintk(SAA716x_NOTICE, 0,
+					dprintk(SAA716x_DEBUG, 0,
 						"        SAA%02x ROM: Found unknown device\n",
 						saa716x->pdev->device);
 
@@ -1011,7 +1011,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 		}
 	}
 
-	dprintk(SAA716x_NOTICE, 0, "\n");
+	dprintk(SAA716x_DEBUG, 0, "\n");
 
 	return 0;
 }
@@ -1047,7 +1047,7 @@ int saa716x_eeprom_data(struct saa716x_dev *saa716x)
 	}
 
 	for (i = 0; i < rom_header.devices; i++) {
-		dprintk(SAA716x_NOTICE, 0, "    SAA%02x ROM: ===== Device %d =====\n",
+		dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: ===== Device %d =====\n",
 			saa716x->pdev->device,
 			i);
 

From 2b20ed6604dcd6065dedd1604e1c6c4f19b004ff Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Mar 2014 17:08:36 +0100
Subject: [PATCH 258/364] saa716x: Fix errors and improve saa716x_set_clk.

- Use stretched clock also for 125 MHz as its active for default 125 MHz
clocks.
- Fix not setting MSUB in clock divider.
- Sleep for 10 us instead of 10 ms.
- Fix typo in condition.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index a0ffb042acdf6..f3af28fa3f298 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -483,15 +483,15 @@ int saa716x_set_clk(struct saa716x_dev *saa716x,
 	add = M_tmp - N_tmp;
 	lsb = 4; /* run */
 
-	if (((10 * N) / M) < 5)
+	if (((10 * N) / M) <= 5)
 		lsb |= 1; /* stretch */
 
 	/* store new divider */
 	cgu->clk_curr_div[domain] = sub & 0xff;
 	cgu->clk_curr_div[domain] <<= 8;
-	cgu->clk_curr_div[domain] = add & 0xff;
+	cgu->clk_curr_div[domain] |= add & 0xff;
 	cgu->clk_curr_div[domain] <<= 3;
-	cgu->clk_curr_div[domain]  |= lsb;
+	cgu->clk_curr_div[domain] |= lsb;
 
 	dprintk(SAA716x_DEBUG, 1, "Domain <0x%02x> Frequency <%d> Set Freq <%d> N=%d M=%d Divider <0x%02x>",
 		domain,
@@ -508,10 +508,10 @@ int saa716x_set_clk(struct saa716x_dev *saa716x,
 
 	/* Reset disable */
 	for (i = 0; i < 1000; i++) {
-		msleep(10);
+		udelay(10);
 		reset = SAA716x_EPRD(CGU, cgu_clk[domain]);
 
-		if (cgu->clk_curr_div[domain == reset])
+		if (cgu->clk_curr_div[domain] == reset)
 			break;
 	}
 

From d70bc660188589ae818a3c777f76447f9e96ad33 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Mar 2014 17:10:34 +0100
Subject: [PATCH 259/364] saa716x_ff: Fix not setting command result length to
 0 per default.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 430dd475d4aeb..866255665ed9c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -65,6 +65,7 @@ static int sti7109_do_raw_cmd(struct sti7109_dev * sti7109)
 	}
 
 	sti7109->cmd_ready = 0;
+	sti7109->result_len = 0;
 	sti7109->result_avail = 0;
 	saa716x_phi_write(saa716x, ADDR_CMD_DATA, sti7109->cmd_data,
 			  sti7109->cmd_len);
@@ -158,6 +159,7 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev * sti7109)
 	}
 
 	sti7109->osd_cmd_ready = 0;
+	sti7109->osd_result_len = 0;
 	sti7109->osd_result_avail = 0;
 	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
 			  sti7109->osd_cmd_len);

From f7a24cf52e6a7f48606f86aede77d0905e9c1788 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 2 Feb 2014 13:14:44 +0100
Subject: [PATCH 260/364] saa716x_ff: init frontends to low-power mode

Set tuner and demod to sleep mode after initialization. So it is no longer required
to call open/close on frontend device to set low-power mode.

Signed-off-by: Soeren Moch <smoch@web.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 5916c80b23404..0740f28001e12 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1755,6 +1755,8 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 				   i2c_adapter,
 				   &tt6400_isl6423_config[count]);
 
+			if (adapter->fe->ops.sleep)
+				adapter->fe->ops.sleep(adapter->fe);
 		}
 	}
 	return 0;

From 1f6abfe04e4c3820595f7ad0b506d17efbcc7e4f Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 22 Mar 2014 15:22:23 +0100
Subject: [PATCH 261/364] saa716x: move card specific PHI code to saa716x_ff
 driver

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile          |  5 +-
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  | 21 +++---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 46 +++++++------
 drivers/media/pci/saa716x/saa716x_ff_phi.c  | 75 +++++++++++++++++++++
 drivers/media/pci/saa716x/saa716x_ff_phi.h  | 13 ++++
 drivers/media/pci/saa716x/saa716x_phi.c     | 56 ---------------
 drivers/media/pci/saa716x/saa716x_phi.h     |  3 -
 7 files changed, 125 insertions(+), 94 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff_phi.c
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff_phi.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 24e2d9a2c0240..43771a8886df6 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -15,8 +15,9 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_spi.o
 
 saa716x_ff-objs		:= saa716x_ff_main.o	\
-                           saa716x_ff_cmd.o	\
-			   saa716x_ff_ir.o
+			   saa716x_ff_cmd.o	\
+			   saa716x_ff_ir.o	\
+			   saa716x_ff_phi.o
 
 obj-$(CONFIG_SAA716X_CORE)	  += saa716x_core.o
 obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 866255665ed9c..cd97cded0c71c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -5,13 +5,10 @@
 
 #include "saa716x_mod.h"
 
-#include "saa716x_phi_reg.h"
-
-#include "saa716x_phi.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 #include "saa716x_ff.h"
 #include "saa716x_ff_cmd.h"
+#include "saa716x_ff_phi.h"
 
 
 int sti7109_cmd_init(struct sti7109_dev *sti7109)
@@ -67,8 +64,8 @@ static int sti7109_do_raw_cmd(struct sti7109_dev * sti7109)
 	sti7109->cmd_ready = 0;
 	sti7109->result_len = 0;
 	sti7109->result_avail = 0;
-	saa716x_phi_write(saa716x, ADDR_CMD_DATA, sti7109->cmd_data,
-			  sti7109->cmd_len);
+	saa716x_ff_phi_write(saa716x, ADDR_CMD_DATA, sti7109->cmd_data,
+			     sti7109->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
 	if (sti7109->result_max_len > 0) {
@@ -161,8 +158,8 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev * sti7109)
 	sti7109->osd_cmd_ready = 0;
 	sti7109->osd_result_len = 0;
 	sti7109->osd_result_avail = 0;
-	saa716x_phi_write(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
-			  sti7109->osd_cmd_len);
+	saa716x_ff_phi_write(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
+			     sti7109->osd_cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
 
 	if (sti7109->osd_result_max_len > 0) {
@@ -293,10 +290,10 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 		blockHeader[5] = (uint8_t) blockSize;
 
 		addr = ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2);
-		saa716x_phi_write(saa716x, addr, blockHeader,
-				  SIZE_BLOCK_HEADER);
-		saa716x_phi_write(saa716x, addr + SIZE_BLOCK_HEADER, blockPtr,
-				  blockSize);
+		saa716x_ff_phi_write(saa716x, addr, blockHeader,
+				     SIZE_BLOCK_HEADER);
+		saa716x_ff_phi_write(saa716x, addr + SIZE_BLOCK_HEADER,
+				     blockPtr, blockSize);
 		activeBlock = (activeBlock + 1) & 1;
 		if (blockIndex > 0) {
 			timeout = 1 * HZ;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 0740f28001e12..a7cb777e3f04d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -44,6 +44,7 @@
 
 #include "saa716x_ff.h"
 #include "saa716x_ff_cmd.h"
+#include "saa716x_ff_phi.h"
 
 #include "stv6110x.h"
 #include "stv090x.h"
@@ -174,7 +175,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	printk(KERN_INFO "SAA716x FF loader version %X.%02X\n",
 		loaderVersion >> 8, loaderVersion & 0xFF);
 
-	saa716x_phi_write(saa716x, 0, fw->data, fw->size);
+	saa716x_ff_phi_write(saa716x, 0, fw->data, fw->size);
 	msleep(10);
 
 	release_firmware(fw);
@@ -223,9 +224,11 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 		writtenBlock++;
 		/* write one block (last may differ from blockSize) */
 		if (lastBlockSize && writtenBlock == (numBlocks + 1))
-			saa716x_phi_write(saa716x, 0, &fw->data[i], lastBlockSize);
+			saa716x_ff_phi_write(saa716x, 0, &fw->data[i],
+					     lastBlockSize);
 		else
-			saa716x_phi_write(saa716x, 0, &fw->data[i], blockSize);
+			saa716x_ff_phi_write(saa716x, 0, &fw->data[i],
+					     blockSize);
 
 		SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
 		startTime = jiffies;
@@ -1016,7 +1019,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
-		goto fail1;
+		goto fail2;
 	}
 
 	err = saa716x_i2c_init(saa716x);
@@ -1025,12 +1028,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail3;
 	}
 
-	err = saa716x_phi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
-		goto fail3;
-	}
-
 	saa716x_gpio_init(saa716x);
 
 	/* prepare the sti7109 device struct */
@@ -1041,11 +1038,16 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	}
 
 	sti7109->dev = saa716x;
+	saa716x->priv = sti7109;
 
 	sti7109->iobuf = vmalloc(TSOUT_LEN + MAX_DATA_LEN);
 	if (!sti7109->iobuf)
 		goto fail4;
 
+	err = saa716x_ff_phi_init(saa716x);
+	if (err)
+		goto fail4;
+
 	sti7109_cmd_init(sti7109);
 
 	sti7109->video_capture = video_capture;
@@ -1060,8 +1062,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
 	sti7109->last_int_ticks = jiffies;
 
-	saa716x->priv = sti7109;
-
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
@@ -1200,6 +1200,8 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	vfree(sti7109->iobuf);
 fail4:
+	saa716x_ff_phi_exit(saa716x);
+
 	kfree(sti7109);
 fail3:
 	saa716x_i2c_exit(saa716x);
@@ -1233,6 +1235,8 @@ static void saa716x_ff_pci_remove(struct pci_dev *pdev)
 
 	vfree(sti7109->iobuf);
 
+	saa716x_ff_phi_exit(saa716x);
+
 	saa716x->priv = NULL;
 	kfree(sti7109);
 
@@ -1418,7 +1422,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_phi_read(saa716x, ADDR_CMD_DATA, sti7109->result_data, length);
+			saa716x_ff_phi_read(saa716x, ADDR_CMD_DATA, sti7109->result_data, length);
 			sti7109->result_len = length;
 			sti7109->result_avail = 1;
 			wake_up(&sti7109->result_avail_wq);
@@ -1452,7 +1456,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_phi_read(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_result_data, length);
+			saa716x_ff_phi_read(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_result_data, length);
 			sti7109->osd_result_len = length;
 			sti7109->osd_result_avail = 1;
 			wake_up(&sti7109->osd_result_avail_wq);
@@ -1496,7 +1500,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_AUDIO_PTS_MASK) {
 			u8 data[8];
 
-			saa716x_phi_read(saa716x, ADDR_AUDIO_PTS, data, 8);
+			saa716x_ff_phi_read(saa716x, ADDR_AUDIO_PTS, data, 8);
 			sti7109->audio_pts = (((u64) data[3] & 0x01) << 32)
 					    | ((u64) data[4] << 24)
 					    | ((u64) data[5] << 16)
@@ -1512,7 +1516,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_VIDEO_PTS_MASK) {
 			u8 data[8];
 
-			saa716x_phi_read(saa716x, ADDR_VIDEO_PTS, data, 8);
+			saa716x_ff_phi_read(saa716x, ADDR_VIDEO_PTS, data, 8);
 			sti7109->video_pts = (((u64) data[3] & 0x01) << 32)
 					    | ((u64) data[4] << 24)
 					    | ((u64) data[5] << 16)
@@ -1528,7 +1532,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_CURRENT_STC_MASK) {
 			u8 data[8];
 
-			saa716x_phi_read(saa716x, ADDR_CURRENT_STC, data, 8);
+			saa716x_ff_phi_read(saa716x, ADDR_CURRENT_STC, data, 8);
 			sti7109->current_stc = (((u64) data[3] & 0x01) << 32)
 					      | ((u64) data[4] << 24)
 					      | ((u64) data[5] << 16)
@@ -1545,13 +1549,13 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[4];
 			u32 remote_event;
 
-			saa716x_phi_read(saa716x, ADDR_REMOTE_EVENT, data, 4);
+			saa716x_ff_phi_read(saa716x, ADDR_REMOTE_EVENT, data, 4);
 			remote_event = (data[3] << 24)
 				     | (data[2] << 16)
 				     | (data[1] << 8)
 				     | (data[0]);
 			memset(data, 0, sizeof(data));
-			saa716x_phi_write(saa716x, ADDR_REMOTE_EVENT, data, 4);
+			saa716x_ff_phi_write(saa716x, ADDR_REMOTE_EVENT, data, 4);
 
 			phiISR &= ~ISR_REMOTE_EVENT_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
@@ -1568,7 +1572,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[4];
 			u32 format;
 
-			saa716x_phi_read(saa716x, ADDR_DVO_FORMAT, data, 4);
+			saa716x_ff_phi_read(saa716x, ADDR_DVO_FORMAT, data, 4);
 			format = (data[0] << 24)
 			       | (data[1] << 16)
 			       | (data[2] << 8)
@@ -1584,7 +1588,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_LOG_MESSAGE_MASK) {
 			char message[SIZE_LOG_MESSAGE_DATA];
 
-			saa716x_phi_read(saa716x, ADDR_LOG_MESSAGE, message,
+			saa716x_ff_phi_read(saa716x, ADDR_LOG_MESSAGE, message,
 					 SIZE_LOG_MESSAGE_DATA);
 
 			phiISR &= ~ISR_LOG_MESSAGE_MASK;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
new file mode 100644
index 0000000000000..0f5f15f0589fb
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -0,0 +1,75 @@
+#include <linux/types.h>
+
+#include "saa716x_mod.h"
+#include "saa716x_phi.h"
+#include "saa716x_phi_reg.h"
+#include "saa716x_priv.h"
+
+
+/* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
+#define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
+	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
+
+int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
+{
+	int err;
+
+	err = saa716x_phi_init(saa716x);
+	if (err) {
+		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
+		goto fail0;
+	}
+
+	/* init PHI 0 to FIFO mode */
+	SAA716x_EPWR(PHI_0, PHI_0_MODE, PHI_FIFO_MODE);
+	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
+
+	/* init PHI 1 to SRAM mode, auto increment on */
+	SAA716x_EPWR(PHI_0, PHI_1_MODE, PHI_AUTO_INCREMENT);
+	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
+
+	/* ALE is active high */
+	SAA716x_EPWR(PHI_0, PHI_POLARITY, PHI_ALE_POL);
+	SAA716x_EPWR(PHI_0, PHI_TIMEOUT, 0x2a);
+
+	return 0;
+
+fail0:
+	return err;
+}
+
+void saa716x_ff_phi_exit(struct saa716x_dev *saa716x)
+{
+}
+
+void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
+			  u32 address, const u8 * data, int length)
+{
+	int i;
+
+	for (i = 0; i < length; i += 4) {
+		SAA716x_EPWR(PHI_1, address, *((u32 *) &data[i]));
+		address += 4;
+	}
+}
+
+void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
+			 u32 address, u8 * data, int length)
+{
+	int i;
+
+	for (i = 0; i < length; i += 4) {
+		*((u32 *) &data[i]) = SAA716x_EPRD(PHI_1, address);
+		address += 4;
+	}
+}
+
+void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
+			       const u8 * data, int length)
+{
+	int i;
+
+	for (i = 0; i < length; i += 4) {
+		SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
+	}
+}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.h b/drivers/media/pci/saa716x/saa716x_ff_phi.h
new file mode 100644
index 0000000000000..d2d80d770390b
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.h
@@ -0,0 +1,13 @@
+#ifndef __SAA716x_FF_PHI_H
+#define __SAA716x_FF_PHI_H
+
+extern int saa716x_ff_phi_init(struct saa716x_dev *saa716x);
+extern void saa716x_ff_phi_exit(struct saa716x_dev *saa716x);
+extern void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
+				 u32 address, const u8 * data, int length);
+extern void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
+				u32 address, u8 * data, int length);
+extern void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
+				      const u8 * data, int length);
+
+#endif /* __SAA716x_FF_PHI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
index f6420650e2454..7d2c041633014 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_phi.c
@@ -6,11 +6,6 @@
 #include "saa716x_priv.h"
 
 
-
-/* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
-#define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
-	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
-
 int saa716x_phi_init(struct saa716x_dev *saa716x)
 {
 	int i;
@@ -23,57 +18,6 @@ int saa716x_phi_init(struct saa716x_dev *saa716x)
 			break;
 	}
 
-
-	/* init PHI 0 to FIFO mode */
-	SAA716x_EPWR(PHI_0, PHI_0_MODE, PHI_FIFO_MODE);
-	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
-
-	/* init PHI 1 to SRAM mode, auto increment on */
-	SAA716x_EPWR(PHI_0, PHI_1_MODE, PHI_AUTO_INCREMENT);
-	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
-
-	/* ALE is active high */
-	SAA716x_EPWR(PHI_0, PHI_POLARITY, PHI_ALE_POL);
-	SAA716x_EPWR(PHI_0, PHI_TIMEOUT, 0x2a);
-
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_phi_init);
-
-int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 * data, int length)
-{
-	int i;
-
-	for (i = 0; i < length; i += 4) {
-		SAA716x_EPWR(PHI_1, address, *((u32 *) &data[i]));
-		address += 4;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_phi_write);
-
-int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, u8 * data, int length)
-{
-	int i;
-
-	for (i = 0; i < length; i += 4) {
-		*((u32 *) &data[i]) = SAA716x_EPRD(PHI_1, address);
-		address += 4;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_phi_read);
-
-int saa716x_phi_write_fifo(struct saa716x_dev *saa716x, const u8 * data, int length)
-{
-	int i;
-
-	for (i = 0; i < length; i += 4) {
-		SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_phi_write_fifo);
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
index c30eab9601cd6..0bb2027a8946b 100644
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_phi.h
@@ -4,8 +4,5 @@
 struct saa716x_dev;
 
 extern int saa716x_phi_init(struct saa716x_dev *saa716x);
-extern int saa716x_phi_write(struct saa716x_dev *saa716x, u32 address, const u8 *data, int length);
-extern int saa716x_phi_read(struct saa716x_dev *saa716x, u32 address, u8 *data, int length);
-extern int saa716x_phi_write_fifo(struct saa716x_dev *saa716x, const u8 * data, int length);
 
 #endif /* __SAA716x_PHI_H */

From ecef0880e02cbb573677c44474a83c90edfd2639 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 22 Mar 2014 15:23:14 +0100
Subject: [PATCH 262/364] saa716x_ff: use special phi_fifo_write function

From: Soeren Moch <smoch@web.de>
Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index a7cb777e3f04d..6da915f59d149 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -521,19 +521,20 @@ static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf, const u8 __use
 	return len;
 }
 
-static void ringbuffer_read_io32(struct dvb_ringbuffer *rbuf, u32 __iomem *buf, size_t len)
+static void ringbuffer_read_tofifo(struct dvb_ringbuffer *rbuf,
+				   struct saa716x_dev *saa716x, int len)
 {
 	size_t todo = len;
 	size_t split;
 
 	split = (rbuf->pread + len > rbuf->size) ? rbuf->size - rbuf->pread : 0;
 	if (split > 0) {
-		iowrite32_rep(buf, rbuf->data+rbuf->pread, split/4);
-		buf += split;
+		saa716x_ff_phi_write_fifo(saa716x, rbuf->data + rbuf->pread,
+					  split);
 		todo -= split;
 		rbuf->pread = 0;
 	}
-	iowrite32_rep(buf, rbuf->data+rbuf->pread, todo/4);
+	saa716x_ff_phi_write_fifo(saa716x, rbuf->data + rbuf->pread, todo);
 
 	rbuf->pread = (rbuf->pread + todo) % rbuf->size;
 }
@@ -564,7 +565,7 @@ static void fifo_worker(struct work_struct *work)
 
 	while (len >= TS_SIZE)
 	{
-		ringbuffer_read_io32(&sti7109->tsout, saa716x->mmio + PHI_0 + PHI_0_0_RW_0, (size_t) TS_SIZE);
+		ringbuffer_read_tofifo(&sti7109->tsout, saa716x, TS_SIZE);
 		len -= TS_SIZE;
 	}
 	wake_up(&sti7109->tsout.queue);

From 1ac0df989450df1f24f8fdbdf2db7b2324654640 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 22 Mar 2014 15:24:11 +0100
Subject: [PATCH 263/364] saa716x_ff: Add write-combining PCI iomem window for
 PHI1 access.

From: Soeren Moch <smoch@web.de>
Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h     |  4 +++-
 drivers/media/pci/saa716x/saa716x_ff_phi.c | 27 +++++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_pci.c    |  4 ++--
 3 files changed, 31 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index ed06380b5776f..0ef9292eed30b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -107,7 +107,9 @@ struct sti7109_dev {
 	struct dvb_device	*video_dev;
 	struct dvb_device	*audio_dev;
 
-	void			*iobuf;	 /* memory for all buffers */
+	void __iomem		*mmio_wc; /* write-combining PHI1 regions */
+
+	void			*iobuf;  /* memory for all buffers */
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
 	u32			tsout_stat;
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 0f5f15f0589fb..ad0fc8606a715 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -5,6 +5,8 @@
 #include "saa716x_phi_reg.h"
 #include "saa716x_priv.h"
 
+#include "saa716x_ff.h"
+
 
 /* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
 #define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
@@ -12,12 +14,28 @@
 
 int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 {
+	struct pci_dev *pdev = saa716x->pdev;
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	int err;
 
+	if (pci_resource_len(pdev, 0) < 0x80000) {
+		dprintk(SAA716x_ERROR, 1, "wrong BAR0 length");
+		err = -ENODEV;
+		goto fail0;
+	}
+
+	sti7109->mmio_wc = ioremap_wc(pci_resource_start(pdev, 0) + 0x60000,
+				      0x20000);
+	if (!sti7109->mmio_wc) {
+		dprintk(SAA716x_ERROR, 1, "Mem remap failed");
+		err = -ENODEV;
+		goto fail0;
+	}
+
 	err = saa716x_phi_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
-		goto fail0;
+		goto fail1;
 	}
 
 	/* init PHI 0 to FIFO mode */
@@ -34,12 +52,19 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 
 	return 0;
 
+fail1:
+	if (sti7109->mmio_wc)
+		iounmap(sti7109->mmio_wc);
 fail0:
 	return err;
 }
 
 void saa716x_ff_phi_exit(struct saa716x_dev *saa716x)
 {
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	if (sti7109->mmio_wc)
+		iounmap(sti7109->mmio_wc);
 }
 
 void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 7fa6bad45736a..842f311c335f8 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -183,8 +183,8 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail1;
 	}
-	saa716x->mmio = ioremap(pci_resource_start(pdev, 0),
-				pci_resource_len(pdev, 0));
+	saa716x->mmio = ioremap_nocache(pci_resource_start(pdev, 0),
+					pci_resource_len(pdev, 0));
 
 	if (!saa716x->mmio) {
 		dprintk(SAA716x_ERROR, 1, "Mem 0 remap failed");

From 143eb63e8e6f55bc71c28dd888eae7ec9eefcf16 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sat, 22 Mar 2014 15:26:14 +0100
Subject: [PATCH 264/364] saa716x_ff: implement PHI speedup

There is a new module parameter 'phi_mode' to select different phi bus
access modes to speedup data transfer to FPGA (OSD and TS stream in
transfer/playback mode) and to reduce the CPU load accordingly.

FPGA firmware 1.10 or newer required for non-default mode. On older
versions only the PHI clock will be increased when a mode other than 0
is selected.

Based on patch by Soeren Moch <smoch@web.de>
Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_cgu.c     |   1 +
 drivers/media/pci/saa716x/saa716x_cgu.h     |   2 +
 drivers/media/pci/saa716x/saa716x_ff.h      |   2 +
 drivers/media/pci/saa716x/saa716x_ff_main.c |   5 +
 drivers/media/pci/saa716x/saa716x_ff_phi.c  | 137 ++++++++++++++++++--
 drivers/media/pci/saa716x/saa716x_ff_phi.h  |   1 +
 6 files changed, 138 insertions(+), 10 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index f3af28fa3f298..53d11a4eb29ba 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -520,6 +520,7 @@ int saa716x_set_clk(struct saa716x_dev *saa716x,
 
 	return 0;
 }
+EXPORT_SYMBOL(saa716x_set_clk);
 
 int saa716x_cgu_init(struct saa716x_dev *saa716x)
 {
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.h b/drivers/media/pci/saa716x/saa716x_cgu.h
index 5353cf239db8d..523acba847664 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.h
+++ b/drivers/media/pci/saa716x/saa716x_cgu.h
@@ -57,5 +57,7 @@ struct saa716x_cgu {
 extern int saa716x_cgu_init(struct saa716x_dev *saa716x);
 extern int saa716x_set_clk_internal(struct saa716x_dev *saa716x, u32 port);
 extern int saa716x_set_clk_external(struct saa716x_dev *saa716x, u32 port);
+extern int saa716x_set_clk(struct saa716x_dev *saa716x,
+			   enum saa716x_clk_domain domain, u32 frequency);
 
 #endif /* __SAA716x_CGU_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 0ef9292eed30b..9d925e26a4235 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -12,6 +12,7 @@
 
 #define TT_PREMIUM_GPIO_POWER_ENABLE	27
 #define TT_PREMIUM_GPIO_RESET_BACKEND	26
+#define TT_PREMIUM_GPIO_FPGA_CS2	18
 #define TT_PREMIUM_GPIO_FPGA_CS1	17
 #define TT_PREMIUM_GPIO_FPGA_CS0	16
 #define TT_PREMIUM_GPIO_FPGA_PROGRAMN	15
@@ -108,6 +109,7 @@ struct sti7109_dev {
 	struct dvb_device	*audio_dev;
 
 	void __iomem		*mmio_wc; /* write-combining PHI1 regions */
+	int			phi_mode;
 
 	void			*iobuf;  /* memory for all buffers */
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 6da915f59d149..2bef367eb4f93 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1069,6 +1069,8 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	saa716x_gpio_set_mode(saa716x, TT_PREMIUM_GPIO_FPGA_CS0, 1);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS1);
 	saa716x_gpio_set_mode(saa716x, TT_PREMIUM_GPIO_FPGA_CS1, 1);
+	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS2);
+	saa716x_gpio_set_mode(saa716x, TT_PREMIUM_GPIO_FPGA_CS2, 1);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_PROGRAMN);
 	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
 	saa716x_gpio_set_input(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
@@ -1086,6 +1088,9 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail5;
 	}
 
+	/* reconfigure PHI based on FPGA version and phi_mode */
+	saa716x_ff_phi_config(saa716x);
+
 	/* configure TS muxer */
 	if (sti7109->fpga_version < 0x110) {
 		/* select FIFO 1 for TS mux 3 */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index ad0fc8606a715..f2ca828d9ff1f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -8,10 +8,25 @@
 #include "saa716x_ff.h"
 
 
+unsigned int phi_mode;
+module_param(phi_mode, int, 0644);
+MODULE_PARM_DESC(phi_mode, "phi access mode: 0 - default, slow single word accesses;"
+                                           " 1 - faster phi clock;"
+                                           " 2 - fastest mode, use write-combining");
+
+
 /* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
 #define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
 	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
 
+#define PHI_0_0 (saa716x->mmio + PHI_0 + PHI_0_0_RW_0)
+#define PHI_1_0 (saa716x->mmio + PHI_1 + PHI_1_0_RW_0)
+#define PHI_1_1 (saa716x->mmio + PHI_1 + PHI_1_1_RW_0)
+#define PHI_1_2 (saa716x->mmio + PHI_1 + PHI_1_2_RW_0)
+#define PHI_1_3 (saa716x->mmio + PHI_1 + PHI_1_3_RW_0)
+#define PHI_1_4 (sti7109->mmio_wc)
+#define PHI_1_5 (sti7109->mmio_wc + 0x10000)
+
 int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
@@ -40,16 +55,34 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 
 	/* init PHI 0 to FIFO mode */
 	SAA716x_EPWR(PHI_0, PHI_0_MODE, PHI_FIFO_MODE);
-	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
 
 	/* init PHI 1 to SRAM mode, auto increment on */
 	SAA716x_EPWR(PHI_0, PHI_1_MODE, PHI_AUTO_INCREMENT);
-	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
 
 	/* ALE is active high */
 	SAA716x_EPWR(PHI_0, PHI_POLARITY, PHI_ALE_POL);
 	SAA716x_EPWR(PHI_0, PHI_TIMEOUT, 0x2a);
 
+	/* start with PHI settings that should work on all versions of the FPGA
+	   firmware */
+	if (phi_mode) {
+		/* fast PHI clock */
+		saa716x_set_clk(saa716x, CLK_DOMAIN_PHI, PLL_FREQ);
+
+		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 6, 12));
+		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 6, 10));
+	} else {
+		/* slow PHI clock */
+		saa716x_set_clk(saa716x, CLK_DOMAIN_PHI, PLL_FREQ / 2);
+
+		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
+		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
+	}
+
+	/* for the actual access use PHI mode 0 until saa716x_ff_phi_config
+	   gets called */
+	sti7109->phi_mode = 0;
+
 	return 0;
 
 fail1:
@@ -67,34 +100,118 @@ void saa716x_ff_phi_exit(struct saa716x_dev *saa716x)
 		iounmap(sti7109->mmio_wc);
 }
 
+void saa716x_ff_phi_config(struct saa716x_dev *saa716x)
+{
+	struct sti7109_dev *sti7109 = saa716x->priv;
+
+	if (sti7109->fpga_version < 0x110)
+		return;
+
+	if (phi_mode) {
+		/* 8k fifo window */
+		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
+		SAA716x_EPWR(PHI_0, PHI_0_1_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
+		SAA716x_EPWR(PHI_0, PHI_0_2_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
+		SAA716x_EPWR(PHI_0, PHI_0_3_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
+
+		/* noncached slow read/write window, for single-word accesses */
+		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 6, 10));
+		/* slower noncached read window */
+		SAA716x_EPWR(PHI_0, PHI_1_1_CONFIG, PHI_CONFIG(0x05, 0, 3, 8));
+		/* fast noncached read window */
+		SAA716x_EPWR(PHI_0, PHI_1_2_CONFIG, PHI_CONFIG(0x05, 0, 4, 6));
+		/* noncached write window */
+		SAA716x_EPWR(PHI_0, PHI_1_3_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
+		/* write-combining dpram window */
+		SAA716x_EPWR(PHI_0, PHI_1_4_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
+		/* write-combining fifo window */
+		SAA716x_EPWR(PHI_0, PHI_1_5_CONFIG, PHI_CONFIG(0x06, 0, 3, 5));
+	} else {
+		/* 8k fifo window */
+		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
+		SAA716x_EPWR(PHI_0, PHI_0_1_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
+		SAA716x_EPWR(PHI_0, PHI_0_2_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
+		SAA716x_EPWR(PHI_0, PHI_0_3_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
+
+		/* noncached read/write windows */
+		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
+		SAA716x_EPWR(PHI_0, PHI_1_1_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
+		SAA716x_EPWR(PHI_0, PHI_1_2_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
+		SAA716x_EPWR(PHI_0, PHI_1_3_CONFIG, PHI_CONFIG(0x05, 0, 3, 4));
+		/* write-combining dpram window */
+		SAA716x_EPWR(PHI_0, PHI_1_4_CONFIG, PHI_CONFIG(0x05, 0, 3, 4));
+		/* write-combining fifo window */
+		SAA716x_EPWR(PHI_0, PHI_1_5_CONFIG, PHI_CONFIG(0x06, 0, 3, 4));
+	}
+
+	sti7109->phi_mode = phi_mode;
+}
+
 void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
 			  u32 address, const u8 * data, int length)
 {
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
 
-	for (i = 0; i < length; i += 4) {
-		SAA716x_EPWR(PHI_1, address, *((u32 *) &data[i]));
-		address += 4;
+	switch (sti7109->phi_mode) {
+	case 2:
+		memcpy(PHI_1_4 + address, data, (length+3) & ~3);
+		break;
+	case 1:
+		memcpy_toio(PHI_1_3 + address, data, (length+3) & ~3);
+		break;
+	default:
+		for (i = 0; i < length; i += 4) {
+			SAA716x_EPWR(PHI_1, address, *((u32 *) &data[i]));
+			address += 4;
+		}
+		break;
 	}
 }
 
 void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
 			 u32 address, u8 * data, int length)
 {
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
 
-	for (i = 0; i < length; i += 4) {
-		*((u32 *) &data[i]) = SAA716x_EPRD(PHI_1, address);
-		address += 4;
+	switch (sti7109->phi_mode) {
+	case 2:
+		memcpy(data, PHI_1_2 + address, (length+3) & ~3);
+		break;
+	case 1:
+		memcpy_fromio(data, PHI_1_1 + address, (length+3) & ~3);
+		break;
+	default:
+		for (i = 0; i < length; i += 4) {
+			*((u32 *) &data[i]) = SAA716x_EPRD(PHI_1, address);
+			address += 4;
+		}
+		break;
 	}
 }
 
 void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
 			       const u8 * data, int length)
 {
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
 
-	for (i = 0; i < length; i += 4) {
-		SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
+	switch (sti7109->phi_mode) {
+	case 2:
+		/* special fifo access                                        */
+		/* first write data in arbitrary order, then commit fifo data */
+		memcpy(PHI_1_5, data, length);
+		wmb();
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_STAT, 0);
+		break;
+	case 1:
+		iowrite32_rep(PHI_0_0, data, length/4);
+		break;
+	default:
+		for (i = 0; i < length; i += 4) {
+			SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
+		}
+		break;
 	}
 }
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.h b/drivers/media/pci/saa716x/saa716x_ff_phi.h
index d2d80d770390b..9305efae48567 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.h
@@ -3,6 +3,7 @@
 
 extern int saa716x_ff_phi_init(struct saa716x_dev *saa716x);
 extern void saa716x_ff_phi_exit(struct saa716x_dev *saa716x);
+extern void saa716x_ff_phi_config(struct saa716x_dev *saa716x);
 extern void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
 				 u32 address, const u8 * data, int length);
 extern void saa716x_ff_phi_read(struct saa716x_dev *saa716x,

From 835c981c8a96648ddfd314e4d85f9ebcd404cc81 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Fri, 30 May 2014 20:06:03 +0200
Subject: [PATCH 265/364] saa716x: IO memory of upper PHI1 regions is mapped in
 saa716x_ff driver.

Most saa716x cards apart from the S2-6400 only use the lower IO memory
region for accessing registers and such. So now only the first 192K are
mapped, that includes all registers and the first PHI1 region. The other 5
PHI1 regions are mapped in the saa716x_ff driver only. that saves some
memory on budget cards.

Also fixes double mapped regions which is not supported on every platform.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h     |  1 +
 drivers/media/pci/saa716x/saa716x_ff_phi.c | 24 ++++++++++++++++------
 drivers/media/pci/saa716x/saa716x_pci.c    |  9 ++++++--
 3 files changed, 26 insertions(+), 8 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 9d925e26a4235..0e011912aa600 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -108,6 +108,7 @@ struct sti7109_dev {
 	struct dvb_device	*video_dev;
 	struct dvb_device	*audio_dev;
 
+	void __iomem		*mmio_uc; /* uncached PHI1 regions */
 	void __iomem		*mmio_wc; /* write-combining PHI1 regions */
 	int			phi_mode;
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index f2ca828d9ff1f..b376d1628d494 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -21,9 +21,9 @@ MODULE_PARM_DESC(phi_mode, "phi access mode: 0 - default, slow single word acces
 
 #define PHI_0_0 (saa716x->mmio + PHI_0 + PHI_0_0_RW_0)
 #define PHI_1_0 (saa716x->mmio + PHI_1 + PHI_1_0_RW_0)
-#define PHI_1_1 (saa716x->mmio + PHI_1 + PHI_1_1_RW_0)
-#define PHI_1_2 (saa716x->mmio + PHI_1 + PHI_1_2_RW_0)
-#define PHI_1_3 (saa716x->mmio + PHI_1 + PHI_1_3_RW_0)
+#define PHI_1_1 (sti7109->mmio_uc)
+#define PHI_1_2 (sti7109->mmio_uc + 0x10000)
+#define PHI_1_3 (sti7109->mmio_uc + 0x20000)
 #define PHI_1_4 (sti7109->mmio_wc)
 #define PHI_1_5 (sti7109->mmio_wc + 0x10000)
 
@@ -31,6 +31,7 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	struct sti7109_dev *sti7109 = saa716x->priv;
+	resource_size_t phi1_start = pci_resource_start(pdev, 0) + PHI_1;
 	int err;
 
 	if (pci_resource_len(pdev, 0) < 0x80000) {
@@ -39,10 +40,17 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 		goto fail0;
 	}
 
-	sti7109->mmio_wc = ioremap_wc(pci_resource_start(pdev, 0) + 0x60000,
-				      0x20000);
+	/* skip first PHI window as it is already mapped */
+	sti7109->mmio_uc = ioremap_nocache(phi1_start + 0x10000, 0x30000);
+	if (!sti7109->mmio_uc) {
+		dprintk(SAA716x_ERROR, 1, "Mem PHI1 remap failed");
+		err = -ENODEV;
+		goto fail0;
+	}
+
+	sti7109->mmio_wc = ioremap_wc(phi1_start + 0x40000, 0x20000);
 	if (!sti7109->mmio_wc) {
-		dprintk(SAA716x_ERROR, 1, "Mem remap failed");
+		dprintk(SAA716x_ERROR, 1, "Mem PHI1 WC remap failed");
 		err = -ENODEV;
 		goto fail0;
 	}
@@ -88,6 +96,8 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 fail1:
 	if (sti7109->mmio_wc)
 		iounmap(sti7109->mmio_wc);
+	if (sti7109->mmio_uc)
+		iounmap(sti7109->mmio_uc);
 fail0:
 	return err;
 }
@@ -98,6 +108,8 @@ void saa716x_ff_phi_exit(struct saa716x_dev *saa716x)
 
 	if (sti7109->mmio_wc)
 		iounmap(sti7109->mmio_wc);
+	if (sti7109->mmio_uc)
+		iounmap(sti7109->mmio_uc);
 }
 
 void saa716x_ff_phi_config(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 842f311c335f8..9bf07b3865230 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -183,9 +183,14 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 		ret = -ENODEV;
 		goto fail1;
 	}
-	saa716x->mmio = ioremap_nocache(pci_resource_start(pdev, 0),
-					pci_resource_len(pdev, 0));
 
+	if (pci_resource_len(pdev, 0) < 0x30000) {
+		dprintk(SAA716x_ERROR, 1, "wrong BAR0 length");
+		ret = -ENODEV;
+		goto fail2;
+	}
+
+	saa716x->mmio = ioremap_nocache(pci_resource_start(pdev, 0), 0x30000);
 	if (!saa716x->mmio) {
 		dprintk(SAA716x_ERROR, 1, "Mem 0 remap failed");
 		ret = -ENODEV;

From 42fa4d5bc48295df5ab359287d5fd1b7df85b3b5 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 29 Jun 2014 20:17:14 +0200
Subject: [PATCH 266/364] saa716x_ff: Optimize access to FIFO.

- Remove unnecessary accesses to FIFO control register.
- Transfer bigger aligned blocks to the FIFO instead of single TS packets.
- Replace dvb_ringbuffer_flush with dvb_ringbuffer_reset to fix possible
  stability problems.
- Name FIFO control register bits to improve code readability.

From: Soeren Moch <smoch@web.de>
Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  4 ++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 49 ++++++++++-----------
 2 files changed, 27 insertions(+), 26 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 0e011912aa600..78b4665badc6b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -52,6 +52,10 @@
 
 #define FPGA_ADDR_PIO_CTRL	0x8500 /* FPGA GPIO control register */
 
+#define FPGA_FIFO_CTRL_RESET	0x0001 /* FIFO control register, reset bit */
+#define FPGA_FIFO_CTRL_RUN	0x0002 /* FIFO control register, run bit */
+#define FPGA_FIFO_CTRL_IE	0x0004 /* FIFO control register, interrupt enable bit */
+
 #define ISR_CMD_MASK		0x0001 /* interrupt source for normal cmds (osd, fre, av, ...) */
 #define ISR_READY_MASK		0x0002 /* interrupt source for command acknowledge */
 #define ISR_BLOCK_MASK		0x0004 /* interrupt source for single block transfers and acknowledge */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 2bef367eb4f93..3115a6466dbdc 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -543,7 +543,6 @@ static void fifo_worker(struct work_struct *work)
 {
 	struct sti7109_dev *sti7109 = container_of(work, struct sti7109_dev, fifo_work);
 	struct saa716x_dev *saa716x = sti7109->dev;
-	u32 fifoCtrl;
 	u32 fifoStat;
 	u16 fifoSize;
 	u16 fifoUsage;
@@ -556,27 +555,24 @@ static void fifo_worker(struct work_struct *work)
 	fifoStat = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_STAT);
 	fifoSize = (u16) (fifoStat >> 16);
 	fifoUsage = (u16) fifoStat;
-	fifoFree = fifoSize - fifoUsage - 1;
+	fifoFree = fifoSize - fifoUsage;
 	len = dvb_ringbuffer_avail(&sti7109->tsout);
 	if (len > fifoFree)
 		len = fifoFree;
-	if (len < TS_SIZE)
-		return;
 
-	while (len >= TS_SIZE)
-	{
-		ringbuffer_read_tofifo(&sti7109->tsout, saa716x, TS_SIZE);
-		len -= TS_SIZE;
+	if (len < fifoSize/4) {
+		msleep(10);
+	} else {
+        	len = (len / 32) * 32;
+		ringbuffer_read_tofifo(&sti7109->tsout, saa716x, len);
+		wake_up(&sti7109->tsout.queue);
 	}
-	wake_up(&sti7109->tsout.queue);
 
 	spin_lock(&sti7109->tsout.lock);
 	if (sti7109->tsout_stat != TSOUT_STAT_RESET) {
+		/* reenable fifo interrupt */
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
-
-		fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
-		fifoCtrl |= 0x4;
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
 	}
 	spin_unlock(&sti7109->tsout.lock);
 }
@@ -814,12 +810,12 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 		buf += TS_SIZE;
 	}
 
-	if ((sti7109->tsout_stat == TSOUT_STAT_RUN) ||
+	spin_lock(&sti7109->tsout.lock);
+	if ((sti7109->tsout_stat == TSOUT_STAT_FILL) &&
 	    (dvb_ringbuffer_avail(&sti7109->tsout) > TSOUT_LEN/3)) {
-		u32 fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
-		fifoCtrl |= 0x4;
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
 	}
+	spin_unlock(&sti7109->tsout.lock);
 
 	return count - todo;
 }
@@ -855,8 +851,10 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 		stream_source = (video_stream_source_t) parg;
 		if (stream_source == VIDEO_SOURCE_DEMUX) {
 			/* stop and reset FIFO 1 */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
+			spin_lock(&sti7109->tsout.lock);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_RESET);
 			sti7109->tsout_stat = TSOUT_STAT_RESET;
+			spin_unlock(&sti7109->tsout.lock);
 			break;
 		}
 		/* fall through */
@@ -865,15 +863,17 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 	{
 		/* reset FIFO 1 */
 		spin_lock(&sti7109->tsout.lock);
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 1);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_RESET);
 		sti7109->tsout_stat = TSOUT_STAT_RESET;
 		spin_unlock(&sti7109->tsout.lock);
 		msleep(50);
 		cancel_work_sync(&sti7109->fifo_work);
 		/* start FIFO 1 */
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 2);
-		dvb_ringbuffer_flush(&sti7109->tsout);
+		spin_lock(&sti7109->tsout.lock);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 0);
+		sti7109->tsout.pread = sti7109->tsout.pwrite = 0;//dvb_ringbuffer_reset(&sti7109->tsout);
         	sti7109->tsout_stat = TSOUT_STAT_FILL;
+		spin_unlock(&sti7109->tsout.lock);
 		wake_up(&sti7109->tsout.queue);
 		break;
 	}
@@ -1605,12 +1605,9 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR & ISR_FIFO1_EMPTY_MASK) {
-			u32 fifoCtrl;
-
 			/*dprintk(SAA716x_INFO, 1, "FIFO EMPTY interrupt source");*/
-			fifoCtrl = SAA716x_EPRD(PHI_1, FPGA_ADDR_FIFO_CTRL);
-			fifoCtrl &= ~0x4;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, fifoCtrl);
+			/* clear FPGA_FIFO_CTRL_IE */
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_RUN);
 			queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
 			phiISR &= ~ISR_FIFO1_EMPTY_MASK;
 		}

From 5f9a2d3b15be885798ae1d7a39efa9db9b0391ca Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 9 Sep 2014 21:00:35 +0200
Subject: [PATCH 267/364] saa716x_ff: Align block data on 32 bytes for firmware
 0.5.0 and up

Firmware 0.5.0 and up support a special DMA transfer for copying block data
that is much faster than the usual one but requires 32 byte aligned data. So
when this version is available the data is moved to the required offset and
the firmware is signalled to use these transfers.

This change together with a compatible firmware improves the performance of
data transfers depending on PHI mode up to 200 percent.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  1 +
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  | 19 +++++++++++++++++--
 drivers/media/pci/saa716x/saa716x_ff_main.c |  8 ++++----
 3 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 78b4665badc6b..0cea4e0a71e1c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -177,6 +177,7 @@ struct sti7109_dev {
 	u32			last_int_ticks;
 
 	u16			fpga_version;
+	u32			fw_version;
 };
 
 #endif /* __SAA716x_FF_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index cd97cded0c71c..c74fed54e0888 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -240,6 +240,7 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 	u8 blockHeader[SIZE_BLOCK_HEADER];
 	u8 * blockPtr;
 	int activeBlock;
+	u16 blockOffset;
 
 	timeout = 1 * HZ;
 	timeout = wait_event_interruptible_timeout(sti7109->data_ready_wq,
@@ -258,6 +259,15 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 
 	sti7109->data_ready = 0;
 
+	/* For firmware 0.5.0 and up the block data should be 32 byte aligned
+	 * to be able to use special DMA transfers which are a lot faster than
+	 * the usual ones.
+	 */
+	if (sti7109->fw_version >= 0x00000500)
+		blockOffset = 32;
+	else
+		blockOffset = 8;
+
 	/*
 	 * 8 bytes is the size of the block header. Block header structure is:
 	 * 16 bit - block index
@@ -266,7 +276,7 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 	 * 16 bit - block handle. This is used to reference the data in the
 	 *          command that uses it.
 	 */
-	blockSize = (SIZE_BLOCK_DATA / 2) - SIZE_BLOCK_HEADER;
+	blockSize = (SIZE_BLOCK_DATA / 2) - blockOffset;
 	numBlocks = data->data_length / blockSize;
 	lastBlockSize = data->data_length % blockSize;
 	if (lastBlockSize > 0)
@@ -288,11 +298,16 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 		blockHeader[1] = (uint8_t) blockIndex;
 		blockHeader[4] = (uint8_t) (blockSize >> 8);
 		blockHeader[5] = (uint8_t) blockSize;
+		/* For firmware 0.5.0 and up set the highest bit of the block
+		 * size to signal that the block data is 32 byte aligned.
+		 */
+		if (sti7109->fw_version >= 0x00000500)
+			blockHeader[4] |= 0x80;
 
 		addr = ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2);
 		saa716x_ff_phi_write(saa716x, addr, blockHeader,
 				     SIZE_BLOCK_HEADER);
-		saa716x_ff_phi_write(saa716x, addr + SIZE_BLOCK_HEADER,
+		saa716x_ff_phi_write(saa716x, addr + blockOffset,
 				     blockPtr, blockSize);
 		activeBlock = (activeBlock + 1) & 1;
 		if (blockIndex > 0) {
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 3115a6466dbdc..8d2fb4eebb706 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -978,7 +978,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	int err = 0;
 	u32 value;
 	unsigned long timeout;
-	u32 fw_version;
 
 	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
@@ -1177,11 +1176,12 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail9;
 	}
 
-	err = sti7109_cmd_get_fw_version(sti7109, &fw_version);
+	err = sti7109_cmd_get_fw_version(sti7109, &sti7109->fw_version);
 	if (!err) {
 		printk(KERN_INFO "SAA716x FF firmware version %d.%d.%d\n",
-			(fw_version >> 16) & 0xFF, (fw_version >> 8) & 0xFF,
-			fw_version & 0xFF);
+			(sti7109->fw_version >> 16) & 0xFF,
+			(sti7109->fw_version >> 8) & 0xFF,
+			sti7109->fw_version & 0xFF);
 	}
 
 	err = saa716x_ir_init(saa716x);

From 71f39d0af9513b5318b706f567297820b2a16f06 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Sun, 9 Nov 2014 15:44:55 +0100
Subject: [PATCH 268/364] saa716x_ff: Do not return on command ready timeout

Most probably the ready indication got lost, which happens sometimes.
Until this is resolved just send the next command.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index c74fed54e0888..d64e7a141361b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -58,7 +58,6 @@ static int sti7109_do_raw_cmd(struct sti7109_dev * sti7109)
 		}
 		dprintk(SAA716x_ERROR, 1,
 			"timed out waiting for command ready");
-		return -EIO;
 	}
 
 	sti7109->cmd_ready = 0;
@@ -152,7 +151,6 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev * sti7109)
 		}
 		dprintk(SAA716x_ERROR, 1,
 			"timed out waiting for osd command ready");
-		return -EIO;
 	}
 
 	sti7109->osd_cmd_ready = 0;

From c84c0b4b2d7d71b7d91f7b4b148f268fb14f4887 Mon Sep 17 00:00:00 2001
From: Andreas Regel <andreas.regel@gmx.de>
Date: Tue, 22 Mar 2016 20:23:42 +0100
Subject: [PATCH 269/364] saa716x_ff: Usa faster EMI timings only for FPGA
 version 1.10 and later

ST firmware 0.5.1 introduced faster timings when reading from the FPGA. These
are not compatible with FPGA firmware versions older than 1.10. ST Firmware
0.5.2 and up will only activate these timings when told so by the driver.

Signed-off-by: Andreas Regel <andreas.regel@gmx.de>

[moved from media/common/saa716x/ to media/pci/saa716x/]
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 8d2fb4eebb706..2264cfce182c9 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -144,6 +144,7 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 
 static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 {
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
 	int length;
 	u32 requestedBlock;
@@ -157,6 +158,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	int ret;
 	const struct firmware *fw;
 	u32 loaderVersion;
+	u32 options;
 
 	/* request the st7109 loader, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
@@ -250,7 +252,11 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	}
 
 	/* disable frontend support through ST firmware */
-	SAA716x_EPWR(PHI_1, 0x3ff4, 1);
+	options = 0x00000001;
+	/* enable faster EMI timings in ST firmware for FPGA 1.10 and later */
+	if (sti7109->fpga_version >= 0x110)
+		options |= 0x00000002;
+	SAA716x_EPWR(PHI_1, 0x3ff4, options);
 
 	/* indicate end of transfer */
 	writtenBlock++;

From c1bd3007310e747adc37332a4627cc0dc590b4ab Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 17 Mar 2016 21:38:54 +0100
Subject: [PATCH 270/364] saa716x_ff: Add linux-4.5 support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 2264cfce182c9..71beee35cfeaa 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -423,7 +423,11 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 			    &sti7109->osd_dev,
 			    &dvbdev_osd,
 			    sti7109,
-			    DVB_DEVICE_OSD);
+			    DVB_DEVICE_OSD
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			    , 0
+#endif
+			    );
 
 	return 0;
 }
@@ -499,7 +503,11 @@ static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
 			    &sti7109->audio_dev,
 			    &dvbdev_audio,
 			    sti7109,
-			    DVB_DEVICE_AUDIO);
+			    DVB_DEVICE_AUDIO
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			    , 0
+#endif
+			    );
 
 	return 0;
 }
@@ -962,7 +970,11 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 			    &sti7109->video_dev,
 			    &dvbdev_video,
 			    sti7109,
-			    DVB_DEVICE_VIDEO);
+			    DVB_DEVICE_VIDEO
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
+			    , 0
+#endif
+			    );
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3, 3, 0)
 	sti7109->fifo_workq = create_singlethread_workqueue("saa716x_fifo_wq");

From da185a30cb50dd2a62ec465941c84d843abea239 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Tue, 29 Dec 2015 19:40:55 +0100
Subject: [PATCH 271/364] saa716x_ff: Avoid sleeping in fifo_worker

Since tasklet contexts are shared among different drivers, we should not
sleep in the fifo_worker. Instead introduce a new state TSOUT_STAT_WAIT,
which is entered when the tsout buffer is (almost) empty, e.g. because
all available ts packets are already buffered in the decoder. This is the
normal state when watching live TV.
To improve code readability use tsout buffer level constants.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  4 +++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 31 +++++++++++++++------
 2 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 0cea4e0a71e1c..77abf65adf1ff 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -96,10 +96,14 @@
 #define MAX_DATA_LEN		(1024 * 1024)
 
 #define TSOUT_LEN		(1024 * TS_SIZE)
+#define TSOUT_LEVEL_FILL	(350 * TS_SIZE)
+#define TSOUT_LEVEL_HIGH	(30 * TS_SIZE)
+#define TSOUT_LEVEL_LOW 	(20 * TS_SIZE)
 
 #define TSOUT_STAT_RESET	0
 #define TSOUT_STAT_FILL 	1
 #define TSOUT_STAT_RUN  	2
+#define TSOUT_STAT_WAIT  	3
 
 #define VIDEO_CAPTURE_OFF	0
 #define VIDEO_CAPTURE_ONE_SHOT	1
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 71beee35cfeaa..9101dd6778eda 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -561,6 +561,7 @@ static void fifo_worker(struct work_struct *work)
 	u16 fifoSize;
 	u16 fifoUsage;
 	u16 fifoFree;
+	int ringbuffer_avail;
 	int len;
 
 	if (sti7109->tsout_stat == TSOUT_STAT_RESET)
@@ -570,18 +571,24 @@ static void fifo_worker(struct work_struct *work)
 	fifoSize = (u16) (fifoStat >> 16);
 	fifoUsage = (u16) fifoStat;
 	fifoFree = fifoSize - fifoUsage;
-	len = dvb_ringbuffer_avail(&sti7109->tsout);
-	if (len > fifoFree)
-		len = fifoFree;
+	ringbuffer_avail = dvb_ringbuffer_avail(&sti7109->tsout);
 
-	if (len < fifoSize/4) {
-		msleep(10);
-	} else {
-        	len = (len / 32) * 32;
+	len = (ringbuffer_avail < fifoFree) ? ringbuffer_avail : fifoFree;
+	len = (len / 32) * 32;
+	if (len) {
 		ringbuffer_read_tofifo(&sti7109->tsout, saa716x, len);
 		wake_up(&sti7109->tsout.queue);
 	}
 
+	ringbuffer_avail = dvb_ringbuffer_avail(&sti7109->tsout);
+	if (ringbuffer_avail < TSOUT_LEVEL_LOW) {
+		spin_lock(&sti7109->tsout.lock);
+		if (sti7109->tsout_stat != TSOUT_STAT_RESET)
+			sti7109->tsout_stat = TSOUT_STAT_WAIT;
+		spin_unlock(&sti7109->tsout.lock);
+		return;
+	}
+
 	spin_lock(&sti7109->tsout.lock);
 	if (sti7109->tsout_stat != TSOUT_STAT_RESET) {
 		/* reenable fifo interrupt */
@@ -799,6 +806,7 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 	struct sti7109_dev *sti7109	= dvbdev->priv;
 	struct saa716x_dev *saa716x	= sti7109->dev;
 	unsigned long todo = count;
+	int ringbuffer_avail;
 
 	if ((file->f_flags & O_ACCMODE) == O_RDONLY)
 		return -EPERM;
@@ -824,11 +832,18 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 		buf += TS_SIZE;
 	}
 
+	ringbuffer_avail = dvb_ringbuffer_avail(&sti7109->tsout);
 	spin_lock(&sti7109->tsout.lock);
 	if ((sti7109->tsout_stat == TSOUT_STAT_FILL) &&
-	    (dvb_ringbuffer_avail(&sti7109->tsout) > TSOUT_LEN/3)) {
+	    (ringbuffer_avail > TSOUT_LEVEL_FILL)) {
+		sti7109->tsout_stat = TSOUT_STAT_RUN;
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
 	}
+	else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) &&
+	         (ringbuffer_avail > TSOUT_LEVEL_HIGH)) {
+		sti7109->tsout_stat = TSOUT_STAT_RUN;
+		queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
+	}
 	spin_unlock(&sti7109->tsout.lock);
 
 	return count - todo;

From a96038a38328dc6b0595dbca31312a8798d19769 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Wed, 13 Jul 2016 17:49:38 +0200
Subject: [PATCH 272/364] saa716x: remove unused saa716x_msi_handler

The function saa716x_msi_handler is unused. Remove it to avoid compiler
warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 9bf07b3865230..4a0fd483848f7 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -17,11 +17,6 @@
 
 #define DRIVER_NAME				"SAA716x Core"
 
-static irqreturn_t saa716x_msi_handler(int irq, void *dev_id)
-{
-	return IRQ_HANDLED;
-}
-
 static int saa716x_enable_msi(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;

From d3f3df8952a8bfbadd3aa5fc915741ed4f9c9a53 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Wed, 13 Jul 2016 17:57:09 +0200
Subject: [PATCH 273/364] saa716x: pci: Remove asm includes for compatibility
 with linux-4.6

Remove asm include files to avoid compile errors with linux-4.6 on
x86_64. These includes are not necessary on ARM and x86 (32bit), too.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 4a0fd483848f7..af8a5caf2c81c 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -1,6 +1,3 @@
-#include <asm/io.h>
-#include <asm/pgtable.h>
-#include <asm/page.h>
 #include <linux/kmod.h>
 #include <linux/vmalloc.h>
 #include <linux/init.h>

From 70da8b6b8d45981a8c7cc5cfac52559eb111766e Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Tue, 14 Feb 2017 20:59:20 +0100
Subject: [PATCH 274/364] saa716x: add linux-4.10 support

The dvb_filter.h include file is no longer available in linux-4.10 .
So define TS_SIZE directly.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 77abf65adf1ff..1282763420580 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -1,7 +1,6 @@
 #ifndef __SAA716x_FF_H
 #define __SAA716x_FF_H
 
-#include "dvb_filter.h"
 #include "dvb_ringbuffer.h"
 #include <linux/version.h>
 #include <linux/workqueue.h>
@@ -95,6 +94,7 @@
 #define MAX_RESULT_LEN		256
 #define MAX_DATA_LEN		(1024 * 1024)
 
+#define TS_SIZE			188
 #define TSOUT_LEN		(1024 * TS_SIZE)
 #define TSOUT_LEVEL_FILL	(350 * TS_SIZE)
 #define TSOUT_LEVEL_HIGH	(30 * TS_SIZE)

From 1464f68fcd93dc2f23c125b6b54f1e94d34a69b1 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Tue, 27 Jun 2017 23:20:14 +0200
Subject: [PATCH 275/364] saa716x: Remove broken MSI-X support

There is no MSI-X support in saa716x hardware. Remove the unused MSI-X code
from the driver to make it compatible to linux-4.12 .

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_pci.c | 70 ++++---------------------
 1 file changed, 10 insertions(+), 60 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index af8a5caf2c81c..c69fb7b87d1eb 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -28,35 +28,16 @@ static int saa716x_enable_msi(struct saa716x_dev *saa716x)
 	return err;
 }
 
-static int saa716x_enable_msix(struct saa716x_dev *saa716x)
-{
-	struct pci_dev *pdev = saa716x->pdev;
-	int i, ret = 0;
-
-	for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++)
-		saa716x->msix_entries[i].entry = i;
-
-	ret = pci_enable_msix(pdev, saa716x->msix_entries, SAA716x_MSI_MAX_VECTORS);
-	if (ret < 0)
-		dprintk(SAA716x_ERROR, 1, "MSI-X request failed <%d>", ret);
-	if (ret > 0)
-		dprintk(SAA716x_ERROR, 1, "Request exceeds available IRQ's <%d>", ret);
-
-	return ret;
-}
-
 static int saa716x_request_irq(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	struct saa716x_config *config = saa716x->config;
-	int i, ret = 0;
+	int ret = 0;
 
-	if (saa716x->int_type == MODE_MSI) {
+	if (saa716x->int_type == MODE_MSI || saa716x->int_type == MODE_MSI_X) {
 		dprintk(SAA716x_DEBUG, 1, "Using MSI mode");
+		saa716x->int_type = MODE_MSI;
 		ret = saa716x_enable_msi(saa716x);
-	} else if (saa716x->int_type == MODE_MSI_X) {
-		dprintk(SAA716x_DEBUG, 1, "Using MSI-X mode");
-		ret = saa716x_enable_msix(saa716x);
 	}
 
 	if (ret) {
@@ -78,22 +59,6 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 		}
 	}
 
-	if (saa716x->int_type == MODE_MSI_X) {
-		for (i = 0; SAA716x_MSI_MAX_VECTORS; i++) {
-			ret = request_irq(saa716x->msix_entries[i].vector,
-					  saa716x->saa716x_msix_handler[i].handler,
-					  IRQF_SHARED,
-					  saa716x->saa716x_msix_handler[i].desc,
-					  saa716x);
-
-			dprintk(SAA716x_ERROR, 1, "%s @ 0x%p", saa716x->saa716x_msix_handler[i].desc, saa716x->saa716x_msix_handler[i].handler);
-			if (ret) {
-				dprintk(SAA716x_ERROR, 1, "%s MSI-X-%d registration failed <%d>", saa716x->saa716x_msix_handler[i].desc, i, ret);
-				return -1;
-			}
-		}
-	}
-
 	if (saa716x->int_type == MODE_INTA) {
 		ret = request_irq(pdev->irq,
 				  config->irq_handler,
@@ -112,22 +77,11 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 static void saa716x_free_irq(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
-	int i, vector;
-
-	if (saa716x->int_type == MODE_MSI_X) {
-
-		for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++) {
-			vector = saa716x->msix_entries[i].vector;
-			free_irq(vector, saa716x);
-		}
 
-		pci_disable_msix(pdev);
+	free_irq(pdev->irq, saa716x);
+	if (saa716x->int_type == MODE_MSI)
+		pci_disable_msi(pdev);
 
-	} else {
-		free_irq(pdev->irq, saa716x);
-		if (saa716x->int_type == MODE_MSI)
-			pci_disable_msi(pdev);
-	}
 }
 
 int saa716x_pci_init(struct saa716x_dev *saa716x)
@@ -204,25 +158,21 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 
 	saa716x->revision	= revision;
 
-	dprintk(SAA716x_ERROR, 0, "    SAA%02x Rev %d [%04x:%04x], ",
+	dprintk(SAA716x_ERROR, 0, "    SAA%02x Rev %d [%04x:%04x], irq: %d, mmio: 0x%p",
 		saa716x->pdev->device,
 		revision,
 		saa716x->pdev->subsystem_vendor,
-		saa716x->pdev->subsystem_device);
-
-	dprintk(SAA716x_ERROR, 0,
-		"irq: %d,\n    mmio: 0x%p\n",
+		saa716x->pdev->subsystem_device,
 		saa716x->pdev->irq,
 		saa716x->mmio);
 
-	dprintk(SAA716x_ERROR, 0, "    SAA%02x %sBit, MSI %s, MSI-X=%d msgs",
+	dprintk(SAA716x_ERROR, 0, "    SAA%02x %sBit, MSI %s, %d/%d MSI vectors",
 		saa716x->pdev->device,
 		(((msi_cap >> 23) & 0x01) == 1 ? "64":"32"),
 		(((msi_cap >> 16) & 0x01) == 1 ? "Enabled" : "Disabled"),
+		(1 << ((msi_cap >> 20) & 0x07)),
 		(1 << ((msi_cap >> 17) & 0x07)));
 
-	dprintk(SAA716x_ERROR, 0, "\n");
-
 	pci_set_drvdata(pdev, saa716x);
 
 	return 0;

From 3b75bf6d5db75994b6dd3e38772481bbf9aa7560 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Mon, 10 Jul 2017 14:21:56 +0200
Subject: [PATCH 276/364] saa716x: Use %zu printk format for sizeof return
 values

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_rom.c | 32 ++++++++++++-------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
index 1ae782187e4fe..8b572cffc5fb3 100644
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ b/drivers/media/pci/saa716x/saa716x_rom.c
@@ -113,7 +113,7 @@ static int saa716x_eeprom_header(struct saa716x_dev *saa716x,
 	memcpy(rom_header, &buf[*offset], sizeof (struct saa716x_romhdr));
 	if (rom_header->header_size != sizeof (struct saa716x_romhdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%zu bytes, Expected=%d",
 			sizeof (struct saa716x_romhdr),
 			rom_header->header_size);
 
@@ -237,7 +237,7 @@ static int saa716x_decoder_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_decoder_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_decoder_hdr));
 
@@ -268,7 +268,7 @@ static int saa716x_gpio_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_gpio_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_gpio_hdr));
 
@@ -305,7 +305,7 @@ static int saa716x_video_decoder_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_video_decoder_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_video_decoder_hdr));
 
@@ -386,7 +386,7 @@ static int saa716x_audio_decoder_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_audio_decoder_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_audio_decoder_hdr));
 
@@ -417,7 +417,7 @@ static int saa716x_event_source_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_evsrc_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_evsrc_hdr));
 
@@ -448,7 +448,7 @@ static int saa716x_crossbar_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_xbar_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_xbar_hdr));
 
@@ -486,7 +486,7 @@ static int saa716x_tuner_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_tuner_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_tuner_hdr));
 
@@ -516,7 +516,7 @@ static int saa716x_pll_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_pll_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_pll_hdr));
 
@@ -546,7 +546,7 @@ static int saa716x_channel_decoder_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_channel_decoder_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_channel_decoder_hdr));
 
@@ -576,7 +576,7 @@ static int saa716x_encoder_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_encoder_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_encoder_hdr));
 
@@ -606,7 +606,7 @@ static int saa716x_ir_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_ir_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_ir_hdr));
 
@@ -637,7 +637,7 @@ static int saa716x_eeprom_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_eeprom_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_eeprom_hdr));
 
@@ -668,7 +668,7 @@ static int saa716x_filter_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_filter_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_filter_hdr));
 
@@ -699,7 +699,7 @@ static int saa716x_streamdev_info(struct saa716x_dev *saa716x,
 	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
 	if (header.size != sizeof (struct saa716x_streamdev_hdr)) {
 		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%d",
+			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
 			header.size,
 			sizeof (struct saa716x_streamdev_hdr));
 
@@ -789,7 +789,7 @@ static int saa716x_device_info(struct saa716x_dev *saa716x,
 
 	memcpy(device, &buf[*offset], sizeof (struct saa716x_devinfo));
 	if (device->struct_size != sizeof (struct saa716x_devinfo)) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Device size mismatch! Read=%d bytes, expected=%d bytes",
+		dprintk(SAA716x_ERROR, 1, "ERROR: Device size mismatch! Read=%d bytes, expected=%zu bytes",
 		device->struct_size,
 		sizeof (struct saa716x_devinfo));
 

From 811c4e64e727fb151bb8923952eb1fe1c3c466df Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 16 Jul 2017 15:32:59 +0200
Subject: [PATCH 277/364] saa716x_budget: Fix build in linux-4.13

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9b50d42d09486..0a8239c0c30b8 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -306,7 +306,7 @@ static struct saa716x_config saa716x_vp3071_config = {
 #define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
 #define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
 
-static int vp1028_dvbs_set_voltage(struct dvb_frontend *fe, fe_sec_voltage_t voltage)
+static int vp1028_dvbs_set_voltage(struct dvb_frontend *fe, enum fe_sec_voltage voltage)
 {
 	struct saa716x_dev *saa716x = fe->dvb->priv;
 
@@ -497,10 +497,10 @@ static int skystar2_set_voltage(struct dvb_frontend *fe,
 		break;
 	}
 
-	err = stv090x_set_gpio(fe, 2, 0, en, 0);
+	err = skystar2_stv090x_config.set_gpio(fe, 2, 0, en, 0);
 	if (err < 0)
 		goto exit;
-	err = stv090x_set_gpio(fe, 3, 0, sel, 0);
+	err = skystar2_stv090x_config.set_gpio(fe, 3, 0, sel, 0);
 	if (err < 0)
 		goto exit;
 
@@ -519,7 +519,7 @@ static int skystar2_voltage_boost(struct dvb_frontend *fe, long arg)
 	else
 		value = 0;
 
-	err = stv090x_set_gpio(fe, 4, 0, value, 0);
+	err = skystar2_stv090x_config.set_gpio(fe, 4, 0, value, 0);
 	if (err < 0)
 		goto exit;
 

From b8096b31d415e229cf3949366355ab6863097db8 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 16 Jul 2017 15:32:07 +0200
Subject: [PATCH 278/364] saa716x_hybrid: Fix build in linux-4.13

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile         | 2 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 43771a8886df6..2a27dbf8c7b2b 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -24,4 +24,4 @@ obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
 obj-$(CONFIG_DVB_SAA716X_FF)	  += saa716x_ff.o
 
-EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/ -Idrivers/media/dvb/frontends/ -Idrivers/media/dvb-core/ -Idrivers/media/dvb-frontends/
+EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/ -Idrivers/media/dvb/frontends/ -Idrivers/media/dvb-core/ -Idrivers/media/dvb-frontends/ -Idrivers/media/tuners
\ No newline at end of file
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 02294191fb96d..8e3390806220a 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -321,7 +321,7 @@ static struct tda1004x_config tda1004x_vp6090_config = {
 	.request_firmware	= tda1004x_vp6090_request_firmware,
 };
 
-static int vp6090_dvbs_set_voltage(struct dvb_frontend *fe, fe_sec_voltage_t voltage)
+static int vp6090_dvbs_set_voltage(struct dvb_frontend *fe, enum fe_sec_voltage voltage)
 {
 	struct saa716x_dev *saa716x = fe->dvb->priv;
 

From b1659e74077da5886ba1a471866d2ad76dc013b4 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 2 Dec 2017 20:51:10 +0100
Subject: [PATCH 279/364] saa716x_ff: Remove autorepeat handling

Let the input layer handle autorepeat for the IR remote.
So no repeat_key timer is required anymore.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_ir.c | 45 ++++++-----------------
 1 file changed, 12 insertions(+), 33 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 35624789aa862..ad6f38611026c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -40,7 +40,7 @@ struct infrared {
 	u8			protocol;
 	u16			last_key;
 	u16			last_toggle;
-	bool			delay_timer_finished;
+	bool			key_pressed;
 };
 
 #define IR_RC5		0
@@ -52,11 +52,12 @@ static void ir_emit_keyup(unsigned long parm)
 {
 	struct infrared *ir = (struct infrared *) parm;
 
-	if (!ir || !test_bit(ir->last_key, ir->input_dev->key))
+	if (!ir || !ir->key_pressed)
 		return;
 
 	input_report_key(ir->input_dev, ir->last_key, 0);
 	input_sync(ir->input_dev);
+	ir->key_pressed = false;
 }
 
 
@@ -114,28 +115,18 @@ static void ir_emit_key(unsigned long parm)
 		return;
 	}
 
-	if (timer_pending(&ir->keyup_timer)) {
-		del_timer(&ir->keyup_timer);
-		if (ir->last_key != keycode || toggle != ir->last_toggle) {
-			ir->delay_timer_finished = false;
-			input_event(ir->input_dev, EV_KEY, ir->last_key, 0);
-			input_event(ir->input_dev, EV_KEY, keycode, 1);
-			input_sync(ir->input_dev);
-		} else if (ir->delay_timer_finished) {
-			input_event(ir->input_dev, EV_KEY, keycode, 2);
-			input_sync(ir->input_dev);
-		}
-	} else {
-		ir->delay_timer_finished = false;
-		input_event(ir->input_dev, EV_KEY, keycode, 1);
-		input_sync(ir->input_dev);
-	}
+	if (ir->key_pressed &&
+	    (ir->last_key != keycode || toggle != ir->last_toggle))
+		input_event(ir->input_dev, EV_KEY, ir->last_key, 0);
 
+	input_event(ir->input_dev, EV_KEY, keycode, 1);
+	input_sync(ir->input_dev);
+
+	ir->key_pressed = true;
 	ir->last_key = keycode;
 	ir->last_toggle = toggle;
 
-	ir->keyup_timer.expires = jiffies + UP_TIMEOUT;
-	add_timer(&ir->keyup_timer);
+	mod_timer(&ir->keyup_timer, jiffies + UP_TIMEOUT);
 
 }
 
@@ -166,16 +157,6 @@ static void ir_register_keys(struct infrared *ir)
 	ir->input_dev->keycodemax = ARRAY_SIZE(ir->key_map);
 }
 
-
-/* called by the input driver after rep[REP_DELAY] ms */
-static void ir_repeat_key(unsigned long parm)
-{
-	struct infrared *ir = (struct infrared *) parm;
-
-	ir->delay_timer_finished = true;
-}
-
-
 /* interrupt handler */
 void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd)
 {
@@ -236,9 +217,7 @@ int saa716x_ir_init(struct saa716x_dev *saa716x)
 		ir->key_map[i] = i+1;
 	ir_register_keys(ir);
 
-	/* override repeat timer */
-	input_dev->timer.function = ir_repeat_key;
-	input_dev->timer.data = (unsigned long) ir;
+	input_enable_softrepeat(input_dev, 800, 200);
 
 	tasklet_init(&ir->tasklet, ir_emit_key, (unsigned long) saa716x);
 	saa716x->ir_priv = ir;

From ef44dc119a56f192b372735feeb5d62d18f58804 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 2 Dec 2017 21:23:34 +0100
Subject: [PATCH 280/364] saa716x_ff: Convert to new timer API

Convert to new timer API in linux-4.15.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_ir.c | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index ad6f38611026c..7894adff4d4f6 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -48,9 +48,9 @@ struct infrared {
 
 
 /* key-up timer */
-static void ir_emit_keyup(unsigned long parm)
+static void ir_emit_keyup(struct timer_list *t)
 {
-	struct infrared *ir = (struct infrared *) parm;
+	struct infrared *ir = from_timer(ir, t, keyup_timer);
 
 	if (!ir || !ir->key_pressed)
 		return;
@@ -184,9 +184,7 @@ int saa716x_ir_init(struct saa716x_dev *saa716x)
 	if (!ir)
 		return -ENOMEM;
 
-	init_timer(&ir->keyup_timer);
-	ir->keyup_timer.function = ir_emit_keyup;
-	ir->keyup_timer.data = (unsigned long) ir;
+	timer_setup(&ir->keyup_timer, ir_emit_keyup, 0);
 
 	input_dev = input_allocate_device();
 	if (!input_dev)

From 8625708b78089d22334c0190be9dbca9432fc18f Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 17 Mar 2018 15:11:54 +0100
Subject: [PATCH 281/364] saa716x: adapt for moved header files

In linux-4.16 the dvb header files were moved to include/linux/media.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c |  8 ++++----
 drivers/media/pci/saa716x/saa716x_ff.h   |  2 +-
 drivers/media/pci/saa716x/saa716x_priv.h | 12 +++++-------
 3 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 6a9f4b4fdcc35..214b92c806c3a 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -1,9 +1,9 @@
 #include <linux/bitops.h>
 
-#include "dmxdev.h"
-#include "dvbdev.h"
-#include "dvb_demux.h"
-#include "dvb_frontend.h"
+#include <media/dmxdev.h>
+#include <media/dvbdev.h>
+#include <media/dvb_demux.h>
+#include <media/dvb_frontend.h>
 
 #include "saa716x_mod.h"
 #include "saa716x_spi.h"
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 1282763420580..bb834d960eed0 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -1,9 +1,9 @@
 #ifndef __SAA716x_FF_H
 #define __SAA716x_FF_H
 
-#include "dvb_ringbuffer.h"
 #include <linux/version.h>
 #include <linux/workqueue.h>
+#include <media/dvb_ringbuffer.h>
 
 #define TECHNOTREND			0x13c2
 #define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 8c13a87259d14..2b363c3464217 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -6,8 +6,6 @@
 #include <linux/kernel.h>
 #include <linux/pci.h>
 #include <linux/mutex.h>
-
-#include <linux/pci.h>
 #include <linux/ioport.h>
 #include <linux/i2c.h>
 #include "saa716x_i2c.h"
@@ -18,11 +16,11 @@
 #include "saa716x_spi.h"
 #include "saa716x_vip.h"
 
-#include "dvbdev.h"
-#include "dvb_demux.h"
-#include "dmxdev.h"
-#include "dvb_frontend.h"
-#include "dvb_net.h"
+#include <media/dvbdev.h>
+#include <media/dvb_demux.h>
+#include <media/dmxdev.h>
+#include <media/dvb_frontend.h>
+#include <media/dvb_net.h>
 
 #define SAA716x_ERROR		0
 #define SAA716x_NOTICE		1

From d0bbb983b8c4e6ab4c8859ee79b0e93a8948246b Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 21 Oct 2018 11:46:34 +0200
Subject: [PATCH 282/364] media: dvb/audio.h: re-add AUDIO_GET_PTS

... since this ioctl is required for the saa716x driver.
This partially reverts commit d21c249b26311dd193b100e65fc9e7ae96233d40
("media: dvb/audio.h: get rid of unused APIs").

Signed-off-by: Soeren Moch <smoch@web.de>
---
 .../media/uapi/dvb/audio-get-pts.rst          | 65 +++++++++++++++++++
 .../media/uapi/dvb/audio_function_calls.rst   |  1 +
 include/uapi/linux/dvb/audio.h                | 13 ++++
 3 files changed, 79 insertions(+)
 create mode 100644 Documentation/media/uapi/dvb/audio-get-pts.rst

diff --git a/Documentation/media/uapi/dvb/audio-get-pts.rst b/Documentation/media/uapi/dvb/audio-get-pts.rst
new file mode 100644
index 0000000000000..2d1396b003deb
--- /dev/null
+++ b/Documentation/media/uapi/dvb/audio-get-pts.rst
@@ -0,0 +1,65 @@
+.. -*- coding: utf-8; mode: rst -*-
+
+.. _AUDIO_GET_PTS:
+
+=============
+AUDIO_GET_PTS
+=============
+
+Name
+----
+
+AUDIO_GET_PTS
+
+.. attention:: This ioctl is deprecated
+
+Synopsis
+--------
+
+.. c:function:: int ioctl(int fd, AUDIO_GET_PTS, __u64 *pts)
+    :name: AUDIO_GET_PTS
+
+
+Arguments
+---------
+
+.. flat-table::
+    :header-rows:  0
+    :stub-columns: 0
+
+
+    -
+
+       -  int fd
+
+       -  File descriptor returned by a previous call to open().
+
+    -
+
+       -  __u64 \*pts
+
+       -  Returns the 33-bit timestamp as defined in ITU T-REC-H.222.0 /
+	  ISO/IEC 13818-1.
+
+	  The PTS should belong to the currently played frame if possible,
+	  but may also be a value close to it like the PTS of the last
+	  decoded frame or the last PTS extracted by the PES parser.
+
+
+Description
+-----------
+
+This ioctl is obsolete. Do not use in new drivers. If you need this
+functionality, then please contact the linux-media mailing list
+(`https://linuxtv.org/lists.php <https://linuxtv.org/lists.php>`__).
+
+This ioctl call asks the Audio Device to return the current PTS
+timestamp.
+
+
+Return Value
+------------
+
+On success 0 is returned, on error -1 and the ``errno`` variable is set
+appropriately. The generic error codes are described at the
+:ref:`Generic Error Codes <gen-errors>` chapter.
diff --git a/Documentation/media/uapi/dvb/audio_function_calls.rst b/Documentation/media/uapi/dvb/audio_function_calls.rst
index 7dba16285dabf..bb442a5c064f8 100644
--- a/Documentation/media/uapi/dvb/audio_function_calls.rst
+++ b/Documentation/media/uapi/dvb/audio_function_calls.rst
@@ -22,6 +22,7 @@ Audio Function Calls
     audio-set-bypass-mode
     audio-channel-select
     audio-bilingual-channel-select
+    audio-get-pts
     audio-get-status
     audio-get-capabilities
     audio-clear-buffer
diff --git a/include/uapi/linux/dvb/audio.h b/include/uapi/linux/dvb/audio.h
index afeae063e6402..da7f370397d07 100644
--- a/include/uapi/linux/dvb/audio.h
+++ b/include/uapi/linux/dvb/audio.h
@@ -94,6 +94,19 @@ typedef struct audio_status {
 #define AUDIO_SET_ID               _IO('o', 13)
 #define AUDIO_SET_MIXER            _IOW('o', 14, audio_mixer_t)
 #define AUDIO_SET_STREAMTYPE       _IO('o', 15)
+
+/**
+ * AUDIO_GET_PTS
+ *
+ * Read the 33 bit presentation time stamp as defined
+ * in ITU T-REC-H.222.0 / ISO/IEC 13818-1.
+ *
+ * The PTS should belong to the currently played
+ * frame if possible, but may also be a value close to it
+ * like the PTS of the last decoded frame or the last PTS
+ * extracted by the PES parser.
+ */
+#define AUDIO_GET_PTS              _IOR('o', 19, __u64)
 #define AUDIO_BILINGUAL_CHANNEL_SELECT _IO('o', 20)
 
 #endif /* _DVBAUDIO_H_ */

From d160f0f95d34de824931667d6a13e4c15bf4955d Mon Sep 17 00:00:00 2001
From: Tobias Klausmann <tobias.johannes.klausmann@mni.thm.de>
Date: Tue, 22 May 2018 16:47:06 +0200
Subject: [PATCH 283/364] saa716x: add frontend selects to kconfig

Be verbose about the frontends we may use in the driver, making sure they get
build for later use!

Signed-off-by: Tobias Klausmann <tobias.johannes.klausmann@mni.thm.de>
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index d678dc2232d29..9de307cd543a4 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -17,6 +17,10 @@ config SAA716X_CORE
 config DVB_SAA716X_BUDGET
 	tristate "SAA7160/1/2 based Budget PCIe cards (DVB only)"
 	depends on SAA716X_CORE && DVB_CORE
+	select DVB_MB86A16 if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
+
 
 	help
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
@@ -32,6 +36,10 @@ config DVB_SAA716X_BUDGET
 config DVB_SAA716X_HYBRID
 	tristate "SAA7160/1/2 based Hybrid PCIe cards (DVB + Analog)"
 	depends on SAA716X_CORE && DVB_CORE
+	select DVB_ZL10353 if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_MB86A16 if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_TDA1004X if MEDIA_SUBDRV_AUTOSELECT
+	select MEDIA_TUNER_TDA827X if MEDIA_SUBDRV_AUTOSELECT
 
 	help
 	  Support for the SAA7160/1/2 based Hybrid PCIe DVB cards
@@ -49,6 +57,9 @@ config DVB_SAA716X_FF
 	tristate "SAA7160/1/2 based Full Fledged PCIe cards"
 	depends on SAA716X_CORE && DVB_CORE
 	depends on INPUT # IR
+	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_ISL6423 if MEDIA_SUBDRV_AUTOSELECT
 
 	help
 	  Support for the SAA7160/1/2 based  Full fledged PCIe DVB cards

From f81d7f37298546052a6b5da80be3b29d16eea6d0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tycho=20L=C3=BCrsen?= <tycholursen@gmail.com>
Date: Fri, 4 Aug 2017 14:34:00 +0200
Subject: [PATCH 284/364] saa716x: constify pci_device_id.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

pci_device_id are not supposed to change at runtime. All functions
working with pci_device_id provided by <linux/pci.h> work with
const pci_device_id. So mark the non-const structs as const.

From: Arvind Yadav <arvind.yadav.cs@gmail.com>
Signed-off-by: Tycho Lürsen <tycholursen@gmail.com>
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  | 2 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 0a8239c0c30b8..82eb9909c940c 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -628,7 +628,7 @@ static struct saa716x_config skystar2_express_hd_config = {
 };
 
 
-static struct pci_device_id saa716x_budget_pci_table[] = {
+static const struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 9101dd6778eda..514fbae6c070f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1826,7 +1826,7 @@ static struct saa716x_config saa716x_s26400_config = {
 };
 
 
-static struct pci_device_id saa716x_ff_pci_table[] = {
+static const struct pci_device_id saa716x_ff_pci_table[] = {
 
 	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_DEVEL, SAA7160, &saa716x_s26400_config),  /* S2 6400 Dual development version */
 	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_PROD, SAA7160, &saa716x_s26400_config), /* S2 6400 Dual production version */
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 8e3390806220a..5a2367fa4d8ea 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -689,7 +689,7 @@ static struct saa716x_config saa716x_averh788_config = {
 	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
-static struct pci_device_id saa716x_hybrid_pci_table[] = {
+static const struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),

From 68457a073c07d6e081afd6d350880d23acc418e0 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 14:39:46 +0100
Subject: [PATCH 285/364] saa716x: remove kernel version conditionals

This driver version is not supposed to run with older kernel versions anymore.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_ir.c   |  4 --
 drivers/media/pci/saa716x/saa716x_ff_main.c | 60 ++++-----------------
 2 files changed, 9 insertions(+), 55 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 7894adff4d4f6..9a20feab4043b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -199,11 +199,7 @@ int saa716x_ir_init(struct saa716x_dev *saa716x)
 	input_dev->id.version = 1;
 	input_dev->id.vendor = saa716x->pdev->subsystem_vendor;
 	input_dev->id.product = saa716x->pdev->subsystem_device;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 22)
 	input_dev->dev.parent = &saa716x->pdev->dev;
-#else
-	input_dev->cdev.dev = &saa716x->pdev->dev;
-#endif
 	rc = input_register_device(input_dev);
 	if (rc)
 		goto err;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 514fbae6c070f..8778b5b0b076a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -330,12 +330,7 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 	return err;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-static int dvb_osd_ioctl(struct inode *inode, struct file *file,
-#else
-static long dvb_osd_ioctl(struct file *file,
-#endif
-			 unsigned int cmd, unsigned long arg)
+static long dvb_osd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
 	struct sti7109_dev *sti7109 = dvbdev->priv;
@@ -389,11 +384,7 @@ static long dvb_osd_ioctl(struct file *file,
 
 static struct file_operations dvb_osd_fops = {
 	.owner		= THIS_MODULE,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-	.ioctl		= dvb_osd_ioctl,
-#else
 	.unlocked_ioctl	= dvb_osd_ioctl,
-#endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 };
@@ -423,12 +414,8 @@ static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
 			    &sti7109->osd_dev,
 			    &dvbdev_osd,
 			    sti7109,
-			    DVB_DEVICE_OSD
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
-			    , 0
-#endif
-			    );
-
+			    DVB_DEVICE_OSD,
+			    0);
 	return 0;
 }
 
@@ -452,12 +439,7 @@ static int do_dvb_audio_ioctl(struct dvb_device *dvbdev,
 	return ret;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-static int dvb_audio_ioctl(struct inode *inode, struct file *file,
-#else
-static long dvb_audio_ioctl(struct file *file,
-#endif
-			   unsigned int cmd, unsigned long arg)
+static long dvb_audio_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
 
@@ -469,11 +451,7 @@ static long dvb_audio_ioctl(struct file *file,
 
 static struct file_operations dvb_audio_fops = {
 	.owner		= THIS_MODULE,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-	.ioctl		= dvb_audio_ioctl,
-#else
 	.unlocked_ioctl	= dvb_audio_ioctl,
-#endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 };
@@ -503,12 +481,8 @@ static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
 			    &sti7109->audio_dev,
 			    &dvbdev_audio,
 			    sti7109,
-			    DVB_DEVICE_AUDIO
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
-			    , 0
-#endif
-			    );
-
+			    DVB_DEVICE_AUDIO,
+			    0);
 	return 0;
 }
 
@@ -923,12 +897,7 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 	return ret;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-static int dvb_video_ioctl(struct inode *inode, struct file *file,
-#else
-static long dvb_video_ioctl(struct file *file,
-#endif
-			   unsigned int cmd, unsigned long arg)
+static long dvb_video_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
 
@@ -942,11 +911,7 @@ static struct file_operations dvb_video_fops = {
 	.owner		= THIS_MODULE,
 	.read		= dvb_video_read,
 	.write		= dvb_video_write,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36) && !defined(EXPERIMENTAL_TREE)
-	.ioctl		= dvb_video_ioctl,
-#else
 	.unlocked_ioctl	= dvb_video_ioctl,
-#endif
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 	.poll		= dvb_video_poll,
@@ -985,17 +950,10 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 			    &sti7109->video_dev,
 			    &dvbdev_video,
 			    sti7109,
-			    DVB_DEVICE_VIDEO
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 0)
-			    , 0
-#endif
-			    );
+			    DVB_DEVICE_VIDEO,
+			    0);
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 3, 0)
-	sti7109->fifo_workq = create_singlethread_workqueue("saa716x_fifo_wq");
-#else
 	sti7109->fifo_workq = alloc_workqueue("saa716x_fifo_wq%d", WQ_UNBOUND, 1, SAA716x_DEV);
-#endif
 	INIT_WORK(&sti7109->fifo_work, fifo_worker);
 
 	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)

From 92e5bbcfce9d839b67fb437776d306c85641ca38 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 23:53:47 +0100
Subject: [PATCH 286/364] saa716x: fix include directories

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 2a27dbf8c7b2b..e7556dd951959 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -24,4 +24,5 @@ obj-$(CONFIG_DVB_SAA716X_BUDGET)  += saa716x_budget.o
 obj-$(CONFIG_DVB_SAA716X_HYBRID)  += saa716x_hybrid.o
 obj-$(CONFIG_DVB_SAA716X_FF)	  += saa716x_ff.o
 
-EXTRA_CFLAGS = -Idrivers/media/dvb/dvb-core/ -Idrivers/media/dvb/frontends/ -Idrivers/media/dvb-core/ -Idrivers/media/dvb-frontends/ -Idrivers/media/tuners
\ No newline at end of file
+ccflags-y += -Idrivers/media/dvb-frontends/
+ccflags-y += -Idrivers/media/tuners

From 1776b33feab13f259ac81b2fc345dc30b6368437 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 15:33:25 +0100
Subject: [PATCH 287/364] saa716x: fix module dependencies

Set saa716x_ff/budget/hibrid modules as adapter owner, not saa716x_core.
So the main modules cannot be removed while dvb files are open.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    | 2 +-
 drivers/media/pci/saa716x/saa716x_budget.c  | 1 +
 drivers/media/pci/saa716x/saa716x_ff_main.c | 4 +---
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 1 +
 drivers/media/pci/saa716x/saa716x_i2c.c     | 2 +-
 drivers/media/pci/saa716x/saa716x_priv.h    | 1 +
 6 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 214b92c806c3a..5ea5cb9411d03 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -99,7 +99,7 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
 		if (dvb_register_adapter(&saa716x_adap->dvb_adapter,
 					 "SAA716x dvb adapter",
-					 THIS_MODULE,
+					 saa716x->module,
 					 &saa716x->pdev->dev,
 					 adapter_nr) < 0) {
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 82eb9909c940c..b89edb5f2ff0a 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -62,6 +62,7 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 	saa716x->verbose	= verbose;
 	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
+	saa716x->module		= THIS_MODULE;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
 
 	err = saa716x_pci_init(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 8778b5b0b076a..28b444eb6a044 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -383,7 +383,6 @@ static long dvb_osd_ioctl(struct file *file, unsigned int cmd, unsigned long arg
 }
 
 static struct file_operations dvb_osd_fops = {
-	.owner		= THIS_MODULE,
 	.unlocked_ioctl	= dvb_osd_ioctl,
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
@@ -450,7 +449,6 @@ static long dvb_audio_ioctl(struct file *file, unsigned int cmd, unsigned long a
 }
 
 static struct file_operations dvb_audio_fops = {
-	.owner		= THIS_MODULE,
 	.unlocked_ioctl	= dvb_audio_ioctl,
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
@@ -908,7 +906,6 @@ static long dvb_video_ioctl(struct file *file, unsigned int cmd, unsigned long a
 }
 
 static struct file_operations dvb_video_fops = {
-	.owner		= THIS_MODULE,
 	.read		= dvb_video_read,
 	.write		= dvb_video_write,
 	.unlocked_ioctl	= dvb_video_ioctl,
@@ -980,6 +977,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	saa716x->verbose	= verbose;
 	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
+	saa716x->module		= THIS_MODULE;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
 
 	err = saa716x_pci_init(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 5a2367fa4d8ea..a3ece95682763 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -63,6 +63,7 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 	saa716x->verbose	= verbose;
 	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
+	saa716x->module		= THIS_MODULE;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
 
 	err = saa716x_pci_init(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 27a1c37f8784e..84fd7050b17ad 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -667,7 +667,7 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 			strcpy(adapter->name, SAA716x_I2C_ADAPTER(i));
 
-			adapter->owner		= THIS_MODULE;
+			adapter->owner		= saa716x->module;
 			adapter->algo		= &saa716x_algo;
 			adapter->algo_data 	= NULL;
 			adapter->timeout	= 500; /* FIXME ! */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 2b363c3464217..43a980393ee7a 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -118,6 +118,7 @@ struct saa716x_adapter {
 struct saa716x_dev {
 	struct saa716x_config		*config;
 	struct pci_dev			*pdev;
+	struct module			*module;
 
 	int				num; /* device count */
 	int				verbose;

From fd8b3fe86a0c707695ec482b43506ef4aed6859c Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 17:27:58 +0100
Subject: [PATCH 288/364] saa716x: simplify irq registration

Simplify irq registration and vector allocation. Remove MSI-X option,
since saa716x hardware does not support MSI-X. Make MSI the default
irq option, because this uses INT-A mode as fallback.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  |  4 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c |  4 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c  |  4 +-
 drivers/media/pci/saa716x/saa716x_pci.c     | 79 +++++----------------
 drivers/media/pci/saa716x/saa716x_priv.h    |  1 -
 5 files changed, 24 insertions(+), 68 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index b89edb5f2ff0a..060b28cef62d5 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -41,9 +41,9 @@ unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
 
-unsigned int int_type;
+unsigned int int_type = 1;
 module_param(int_type, int, 0644);
-MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
+MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
 
 #define DRIVER_NAME	"SAA716x Budget"
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 28b444eb6a044..6fca2bf8c4823 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -54,9 +54,9 @@ unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
 
-unsigned int int_type;
+unsigned int int_type = 1;
 module_param(int_type, int, 0644);
-MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
+MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
 
 unsigned int int_count_enable;
 module_param(int_count_enable, int, 0644);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index a3ece95682763..0aa5b8571391d 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -42,9 +42,9 @@ unsigned int verbose;
 module_param(verbose, int, 0644);
 MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
 
-unsigned int int_type;
+unsigned int int_type = 1;
 module_param(int_type, int, 0644);
-MODULE_PARM_DESC(int_type, "force Interrupt Handler type: 0=INT-A, 1=MSI, 2=MSI-X. default INT-A mode");
+MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
 
 #define DRIVER_NAME	"SAA716x Hybrid"
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index c69fb7b87d1eb..0e79e024e82cd 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -14,63 +14,28 @@
 
 #define DRIVER_NAME				"SAA716x Core"
 
-static int saa716x_enable_msi(struct saa716x_dev *saa716x)
-{
-	struct pci_dev *pdev = saa716x->pdev;
-	int err;
-
-	err = pci_enable_msi(pdev);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "MSI enable failed <%d>", err);
-		return err;
-	}
-
-	return err;
-}
-
 static int saa716x_request_irq(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	struct saa716x_config *config = saa716x->config;
-	int ret = 0;
+	int mode, ret;
 
-	if (saa716x->int_type == MODE_MSI || saa716x->int_type == MODE_MSI_X) {
-		dprintk(SAA716x_DEBUG, 1, "Using MSI mode");
-		saa716x->int_type = MODE_MSI;
-		ret = saa716x_enable_msi(saa716x);
+	mode = PCI_IRQ_LEGACY; /* legacy fallback mode */
+	if (saa716x->int_type != MODE_INTA) {
+		dprintk(SAA716x_DEBUG, 1, "Enabling MSI mode");
+		mode |= PCI_IRQ_MSI;
 	}
 
-	if (ret) {
-		dprintk(SAA716x_ERROR, 1, "INT-A Mode");
-		saa716x->int_type = MODE_INTA;
+	ret = pci_alloc_irq_vectors(pdev, 1, 1, mode);
+	if (ret < 0) {
+		dprintk(SAA716x_ERROR, 1, "IRQ vector registration failed");
+		return ret;
 	}
-
-	if (saa716x->int_type == MODE_MSI) {
-		ret = request_irq(pdev->irq,
-				  config->irq_handler,
-				  0,
-				  DRIVER_NAME,
-				  saa716x);
-
-		if (ret) {
-			pci_disable_msi(pdev);
-			dprintk(SAA716x_ERROR, 1, "MSI registration failed");
-			ret = -EIO;
-		}
-	}
-
-	if (saa716x->int_type == MODE_INTA) {
-		ret = request_irq(pdev->irq,
-				  config->irq_handler,
-				  IRQF_SHARED,
-				  DRIVER_NAME,
-				  saa716x);
-		if (ret < 0) {
-			dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed <%d>", ret);
-			ret = -ENODEV;
-		}
-	}
-
+	ret = request_irq(pci_irq_vector(pdev, 0),
+			  config->irq_handler,
+			  IRQF_SHARED,
+			  DRIVER_NAME,
+			  saa716x);
 	return ret;
 }
 
@@ -78,10 +43,8 @@ static void saa716x_free_irq(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 
-	free_irq(pdev->irq, saa716x);
-	if (saa716x->int_type == MODE_MSI)
-		pci_disable_msi(pdev);
-
+	free_irq(pci_irq_vector(pdev, 0), saa716x);
+	pci_free_irq_vectors(pdev);
 }
 
 int saa716x_pci_init(struct saa716x_dev *saa716x)
@@ -158,21 +121,15 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 
 	saa716x->revision	= revision;
 
-	dprintk(SAA716x_ERROR, 0, "    SAA%02x Rev %d [%04x:%04x], irq: %d, mmio: 0x%p",
+	dprintk(SAA716x_ERROR, 0, " SAA%x Rev %d [%04x:%04x], irq: %d%s, mmio: 0x%p",
 		saa716x->pdev->device,
 		revision,
 		saa716x->pdev->subsystem_vendor,
 		saa716x->pdev->subsystem_device,
 		saa716x->pdev->irq,
+		(((msi_cap >> 16) & 0x01) == 1 ? " (MSI)" : ""),
 		saa716x->mmio);
 
-	dprintk(SAA716x_ERROR, 0, "    SAA%02x %sBit, MSI %s, %d/%d MSI vectors",
-		saa716x->pdev->device,
-		(((msi_cap >> 23) & 0x01) == 1 ? "64":"32"),
-		(((msi_cap >> 16) & 0x01) == 1 ? "Enabled" : "Disabled"),
-		(1 << ((msi_cap >> 20) & 0x07)),
-		(1 << ((msi_cap >> 17) & 0x07)));
-
 	pci_set_drvdata(pdev, saa716x);
 
 	return 0;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 43a980393ee7a..c5448b272fa8b 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -130,7 +130,6 @@ struct saa716x_dev {
 
 #define MODE_INTA	0
 #define MODE_MSI	1
-#define MODE_MSI_X	2
 	u8				int_type;
 
 	struct msix_entry		msix_entries[SAA716x_MSI_MAX_VECTORS];

From 2df5e562b00a5b9d99443a595d4b28852ecc7d6a Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 20:33:12 +0100
Subject: [PATCH 289/364] saa716x: remove unused multi-vector MSI support

We never use more than one irq handler for each device.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c  |  10 --
 drivers/media/pci/saa716x/saa716x_msi.c  | 122 -----------------------
 drivers/media/pci/saa716x/saa716x_msi.h  |  10 --
 drivers/media/pci/saa716x/saa716x_pci.c  |   5 +-
 drivers/media/pci/saa716x/saa716x_priv.h |  18 ----
 5 files changed, 1 insertion(+), 164 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 84fd7050b17ad..3c980d7fe996a 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -273,13 +273,6 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		err = -EIO;
 		goto exit;
 	}
-#if 0
-	saa716x_add_irqvector(saa716x,
-				i2c_vec[i].vector,
-				i2c_vec[i].edge,
-				i2c_vec[i].handler,
-				SAA716x_I2C_ADAPTER(i));
-#endif
 	reg = SAA716x_EPRD(CGU, CGU_SCR_3);
 	dprintk(SAA716x_DEBUG, 1, "Adapter (%02x) Autowake <%d> Active <%d>",
 		I2C_DEV,
@@ -715,9 +708,6 @@ void saa716x_i2c_exit(struct saa716x_dev *saa716x)
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
 		adapter = &i2c->i2c_adapter;
-#if 0
-		saa716x_remove_irqvector(saa716x, i2c_vec[i].vector);
-#endif
 		saa716x_i2c_hwdeinit(i2c, SAA716x_I2C_BUS(i));
 		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
 
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index b0f05a25271be..c8a8c9e5c7ac0 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -295,7 +295,6 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	int i;
 
 	dprintk(SAA716x_DEBUG, 1, "Initializing MSI ..");
-	saa716x->handlers = 0;
 
 	/* get module id & version */
 	mid = SAA716x_EPRD(MSI, MSI_MODULE_ID);
@@ -356,124 +355,3 @@ int saa716x_msi_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 EXPORT_SYMBOL_GPL(saa716x_msi_init);
-
-void saa716x_msiint_disable(struct saa716x_dev *saa716x)
-{
-	dprintk(SAA716x_DEBUG, 1, "Disabling Interrupts ...");
-
-	SAA716x_EPWR(MSI, MSI_INT_ENA_L, 0x0);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_H, 0x0);
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, 0xffffffff);
-	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, 0x0000ffff);
-}
-EXPORT_SYMBOL_GPL(saa716x_msiint_disable);
-
-
-/* Map the given vector Id to the hardware bitmask. */
-static void saa716x_map_vector(struct saa716x_dev *saa716x, int vector, u32 *mask_l, u32 *mask_h)
-{
-	u32 tmp = 1;
-
-	if (vector < 32) {
-		/* Bits 0 - 31 */
-		tmp   <<= vector;
-		*mask_l = tmp;
-		*mask_h	= 0;
-	} else {
-		/* Bits 32 - 48 */
-		tmp <<= vector - 32;
-		*mask_l = 0;
-		*mask_h = tmp;
-	}
-}
-
-int saa716x_add_irqvector(struct saa716x_dev *saa716x,
-			  int vector,
-			  enum saa716x_edge edge,
-			  irqreturn_t (*handler)(int irq, void *dev_id),
-			  char *desc)
-{
-	struct saa716x_msix_entry *msix_handler = NULL;
-
-	u32 config, mask_l, mask_h, ena_l, ena_h;
-
-	BUG_ON(saa716x == NULL);
-	BUG_ON(vector > SAA716x_MSI_VECTORS);
-	dprintk(SAA716x_DEBUG, 1, "Adding Vector %d <%s>", vector, vector_name[vector]);
-
-	if ((vector > 32) && (vector < 49)) {
-		config = SAA716x_EPRD(MSI, MSI_CONFIG_REG[vector]);
-		config &= 0xfcffffff; /* clear polarity */
-
-		switch (edge) {
-		default:
-		case SAA716x_EDGE_RISING:
-			SAA716x_EPWR(MSI, MSI_CONFIG_REG[vector], config | 0x01000000);
-			break;
-
-		case SAA716x_EDGE_FALLING:
-			SAA716x_EPWR(MSI, MSI_CONFIG_REG[vector], config | 0x02000000);
-			break;
-
-		case SAA716x_EDGE_ANY:
-			SAA716x_EPWR(MSI, MSI_CONFIG_REG[vector], config | 0x03000000);
-			break;
-		}
-	}
-
-	saa716x_map_vector(saa716x, vector, &mask_l, &mask_h);
-
-	/* add callback */
-	msix_handler = &saa716x->saa716x_msix_handler[saa716x->handlers];
-	strcpy(msix_handler->desc, desc);
-	msix_handler->vector = vector;
-	msix_handler->handler = handler;
-	saa716x->handlers++;
-
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_L, mask_l);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, mask_h);
-
-	ena_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
-	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
-	dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x>", ena_l, ena_h);
-
-	return 0;
-}
-
-int saa716x_remove_irqvector(struct saa716x_dev *saa716x, int vector)
-{
-	struct saa716x_msix_entry *msix_handler;
-	int i;
-	u32 mask_l, mask_h;
-
-	msix_handler = &saa716x->saa716x_msix_handler[saa716x->handlers];
-	BUG_ON(msix_handler == NULL);
-	dprintk(SAA716x_DEBUG, 1, "Removing Vector %d <%s>", vector, vector_name[vector]);
-
-	/* loop through the registered handlers */
-	for (i = 0; i < saa716x->handlers; i++) {
-
-		/* we found our vector */
-		if (msix_handler->vector == vector) {
-			BUG_ON(msix_handler->handler == NULL); /* no handler yet */
-			dprintk(SAA716x_DEBUG, 1, "Vector %d <%s> removed",
-				msix_handler->vector,
-				msix_handler->desc);
-
-			/* check whether it is already released */
-			if (msix_handler->handler) {
-				msix_handler->vector = 0;
-				msix_handler->handler = NULL;
-				saa716x->handlers--;
-			}
-		}
-	}
-
-	saa716x_map_vector(saa716x, vector, &mask_l, &mask_h);
-
-	/* disable vector */
-	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, mask_l);
-	SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, mask_h);
-
-	return 0;
-}
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
index 8eb72d76775cb..b6cac2003c3db 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.h
+++ b/drivers/media/pci/saa716x/saa716x_msi.h
@@ -72,16 +72,6 @@ enum saa716x_edge {
 struct saa716x_dev;
 
 extern int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h);
-
 extern int saa716x_msi_init(struct saa716x_dev *saa716x);
-extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
-
-extern int saa716x_add_irqvector(struct saa716x_dev *saa716x,
-				 int vector,
-				 enum saa716x_edge edge,
-				 irqreturn_t (*handler)(int irq, void *dev_id),
-				 char *desc);
-
-extern int saa716x_remove_irqvector(struct saa716x_dev *saa716x, int vector);
 
 #endif /* __SAA716x_MSI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 0e79e024e82cd..7f7734459a4db 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -50,7 +50,7 @@ static void saa716x_free_irq(struct saa716x_dev *saa716x)
 int saa716x_pci_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
-	int err = 0, ret = -ENODEV, i, use_dac, pm_cap;
+	int err = 0, ret = -ENODEV, use_dac, pm_cap;
 	u32 msi_cap;
 	u8 revision;
 
@@ -106,9 +106,6 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 		goto fail2;
 	}
 
-	for (i = 0; i < SAA716x_MSI_MAX_VECTORS; i++)
-		saa716x->msix_entries[i].entry = i;
-
 	err = saa716x_request_irq(saa716x);
 	if (err < 0) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed, err=%d", err);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index c5448b272fa8b..038543acd4476 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -66,14 +66,6 @@
 #define SAA716x_EPWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
 #define SAA716x_EPRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
 
-#define SAA716x_MSI_MAX_VECTORS			16
-
-struct saa716x_msix_entry {
-	int vector;
-	u8 desc[32];
-	irqreturn_t (*handler)(int irq, void *dev_id);
-};
-
 struct saa716x_dev;
 struct saa716x_adapter;
 struct saa716x_spi_config;
@@ -132,10 +124,6 @@ struct saa716x_dev {
 #define MODE_MSI	1
 	u8				int_type;
 
-	struct msix_entry		msix_entries[SAA716x_MSI_MAX_VECTORS];
-	struct saa716x_msix_entry	saa716x_msix_handler[56];
-	u8				handlers; /* no. of active handlers */
-
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
 	u32				i2c_rate; /* init time */
@@ -168,12 +156,6 @@ extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
 
 /* MSI */
 extern int saa716x_msi_init(struct saa716x_dev *saa716x);
-extern void saa716x_msi_exit(struct saa716x_dev *saa716x);
-extern void saa716x_msiint_disable(struct saa716x_dev *saa716x);
-
-/* DMA */
-extern int saa716x_dma_init(struct saa716x_dev *saa716x);
-extern void saa716x_dma_exit(struct saa716x_dev *saa716x);
 
 /* AUDIO */
 extern int saa716x_audio_init(struct saa716x_dev *saa716x);

From 7d63a10d6014638c299b99286c30427bf946d3a2 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 21:48:09 +0100
Subject: [PATCH 290/364] saa716x: remove unused i2c irq code

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c |  37 ----
 drivers/media/pci/saa716x/saa716x_hybrid.c |  37 ----
 drivers/media/pci/saa716x/saa716x_i2c.c    | 125 ------------
 drivers/media/pci/saa716x/saa716x_i2c.h    |   6 -
 drivers/media/pci/saa716x/saa716x_msi.c    | 221 ---------------------
 drivers/media/pci/saa716x/saa716x_msi.h    |   1 -
 6 files changed, 427 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 060b28cef62d5..f915997ed4023 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -177,43 +177,6 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 	if (stat_h)
 		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
 
-	saa716x_msi_event(saa716x, stat_l, stat_h);
-#if 0
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(VI0, INT_STATUS),
-		SAA716x_EPRD(VI1, INT_STATUS),
-		SAA716x_EPRD(VI0, INT_ENABLE),
-		SAA716x_EPRD(VI1, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(FGPI0, INT_STATUS),
-		SAA716x_EPRD(FGPI1, INT_STATUS),
-		SAA716x_EPRD(FGPI0, INT_ENABLE),
-		SAA716x_EPRD(FGPI0, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
-		SAA716x_EPRD(FGPI2, INT_STATUS),
-		SAA716x_EPRD(FGPI3, INT_STATUS),
-		SAA716x_EPRD(FGPI2, INT_ENABLE),
-		SAA716x_EPRD(FGPI3, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(AI0, AI_STATUS),
-		SAA716x_EPRD(AI1, AI_STATUS),
-		SAA716x_EPRD(AI0, AI_CTL),
-		SAA716x_EPRD(AI1, AI_CTL));
-
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(I2C_A, INT_STATUS),
-		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_ENABLE),
-		SAA716x_EPRD(I2C_B, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
-		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
-		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
-#endif
-
 	if (stat_l) {
 		if (stat_l & MSI_INT_TAGACK_FGPI_0) {
 			tasklet_schedule(&saa716x->fgpi[0].tasklet);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 0aa5b8571391d..15153390cdcf1 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -192,43 +192,6 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 	if (stat_h)
 		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
 
-	saa716x_msi_event(saa716x, stat_l, stat_h);
-#if 0
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(VI0, INT_STATUS),
-		SAA716x_EPRD(VI1, INT_STATUS),
-		SAA716x_EPRD(VI0, INT_ENABLE),
-		SAA716x_EPRD(VI1, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(FGPI0, INT_STATUS),
-		SAA716x_EPRD(FGPI1, INT_STATUS),
-		SAA716x_EPRD(FGPI0, INT_ENABLE),
-		SAA716x_EPRD(FGPI0, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
-		SAA716x_EPRD(FGPI2, INT_STATUS),
-		SAA716x_EPRD(FGPI3, INT_STATUS),
-		SAA716x_EPRD(FGPI2, INT_ENABLE),
-		SAA716x_EPRD(FGPI3, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(AI0, AI_STATUS),
-		SAA716x_EPRD(AI1, AI_STATUS),
-		SAA716x_EPRD(AI0, AI_CTL),
-		SAA716x_EPRD(AI1, AI_CTL));
-
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(I2C_A, INT_STATUS),
-		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_ENABLE),
-		SAA716x_EPRD(I2C_B, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
-		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
-		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
-#endif
-
 	if (stat_l) {
 		if (stat_l & MSI_INT_TAGACK_FGPI_0) {
 			tasklet_schedule(&saa716x->fgpi[0].tasklet);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 3c980d7fe996a..506089fc9c613 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -13,7 +13,6 @@
 #include "saa716x_cgu_reg.h"
 
 #include "saa716x_i2c.h"
-#include "saa716x_msi.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
@@ -27,110 +26,6 @@
 #define SAA716x_I2C_RXBUSY	(I2C_RECEIVE		| \
 				 I2C_RECEIVE_CLEAR)
 
-static const char* state[] = {
-	"Idle",
-	"DoneStop",
-	"Busy",
-	"TOscl",
-	"TOarb",
-	"DoneWrite",
-	"DoneRead",
-	"DoneWriteTO",
-	"DoneReadTO",
-	"NoDevice",
-	"NoACK",
-	"BUSErr",
-	"ArbLost",
-	"SEQErr",
-	"STErr"
-};
-
-int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus)
-{
-	u32 stat, mask;
-	u32 *I2C_DEV;
-
-	BUG_ON(saa716x == NULL);
-	I2C_DEV = saa716x->I2C_DEV;
-
-	stat = SAA716x_EPRD(I2C_DEV[bus], INT_STATUS);
-	mask = SAA716x_EPRD(I2C_DEV[bus], INT_ENABLE);
-	saa716x->i2c[bus].i2c_stat = stat;
-	dprintk(SAA716x_DEBUG, 0, "Bus(%d) I2C event: Status=<%s> --> Stat=<%02x> Mask=<%02x>",
-		bus, state[stat], stat, mask);
-
-	if (!(stat & mask))
-		return -1;
-
-	SAA716x_EPWR(I2C_DEV[bus], INT_CLR_STATUS, stat);
-
-	if (stat & I2C_INTERRUPT_STFNF)
-		dprintk(SAA716x_DEBUG, 0, "<STFNF> ");
-
-	if (stat & I2C_INTERRUPT_MTFNF) {
-		dprintk(SAA716x_DEBUG, 0, "<MTFNF> ");
-	}
-
-	if (stat & I2C_INTERRUPT_RFDA)
-		dprintk(SAA716x_DEBUG, 0, "<RFDA> ");
-
-	if (stat & I2C_INTERRUPTE_RFF)
-		dprintk(SAA716x_DEBUG, 0, "<RFF> ");
-
-	if (stat & I2C_SLAVE_INTERRUPT_STDR)
-		dprintk(SAA716x_DEBUG, 0, "<STDR> ");
-
-	if (stat & I2C_MASTER_INTERRUPT_MTDR) {
-		dprintk(SAA716x_DEBUG, 0, "<MTDR> ");
-	}
-
-	if (stat & I2C_ERROR_IBE)
-		dprintk(SAA716x_DEBUG, 0, "<IBE> ");
-
-	if (stat & I2C_MODE_CHANGE_INTER_MSMC)
-		dprintk(SAA716x_DEBUG, 0, "<MSMC> ");
-
-	if (stat & I2C_SLAVE_RECEIVE_INTER_SRSD)
-		dprintk(SAA716x_DEBUG, 0, "<SRSD> ");
-
-	if (stat & I2C_SLAVE_TRANSMIT_INTER_STSD)
-		dprintk(SAA716x_DEBUG, 0, "<STSD> ");
-
-	if (stat & I2C_ACK_INTER_MTNA)
-		dprintk(SAA716x_DEBUG, 0, "<MTNA> ");
-
-	if (stat & I2C_FAILURE_INTER_MAF)
-		dprintk(SAA716x_DEBUG, 0, "<MAF> ");
-
-	if (stat & I2C_INTERRUPT_MTD)
-		dprintk(SAA716x_DEBUG, 0, "<MTD> ");
-
-	return 0;
-}
-
-static irqreturn_t saa716x_i2c_irq(int irq, void *dev_id)
-{
-	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-
-	if (unlikely(saa716x == NULL)) {
-		printk("%s: saa716x=NULL", __func__);
-		return IRQ_NONE;
-	}
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
-
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(I2C_A, INT_STATUS),
-		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_CLR_STATUS),
-		SAA716x_EPRD(I2C_B, INT_CLR_STATUS));
-
-	return IRQ_HANDLED;
-}
-
 static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 {
 	struct saa716x_dev *saa716x = i2c->saa716x;
@@ -298,7 +193,6 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 
 	/* Check FIFO status before TX */
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-	i2c->stat_tx_prior = reg;
 	if (reg & SAA716x_I2C_TXBUSY) {
 		for (i = 0; i < 100; i++) {
 			/* TODO! check for hotplug devices */
@@ -331,7 +225,6 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 			break;
 		}
 	}
-	i2c->stat_tx_done = reg;
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
 		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout, tried %d loops!", i);
@@ -608,24 +501,6 @@ static const struct i2c_algorithm saa716x_algo = {
 	.functionality	= saa716x_i2c_func,
 };
 
-struct saa716x_i2cvec {
-	u32			vector;
-	enum saa716x_edge	edge;
-	irqreturn_t (*handler)(int irq, void *dev_id);
-};
-
-static const struct saa716x_i2cvec i2c_vec[] = {
-	{
-		.vector		= I2CINT_0,
-		.edge		= SAA716x_EDGE_RISING,
-		.handler	= saa716x_i2c_irq
-	}, {
-		.vector 	= I2CINT_1,
-		.edge		= SAA716x_EDGE_RISING,
-		.handler	= saa716x_i2c_irq
-	}
-};
-
 int saa716x_i2c_init(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev		= saa716x->pdev;
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 27d9c99463f2d..067bda549804c 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -36,17 +36,11 @@ struct saa716x_i2c {
 	enum saa716x_i2c_mode		i2c_mode;
 	u32				block_size; /* block size for buffered
 						       mode, 1 otherwise */
-	u32				i2c_stat;
-
-	u32				stat_tx_prior;
-	u32				stat_tx_done;
 	wait_queue_head_t		i2c_wq;
 	int				i2c_op;
 };
 
 extern int saa716x_i2c_init(struct saa716x_dev *saa716x);
 extern void saa716x_i2c_exit(struct saa716x_dev *saa716x);
-extern void saa716x_i2cint_disable(struct saa716x_dev *saa716x);
-extern int saa716x_i2c_irqevent(struct saa716x_dev *saa716x, u8 bus);
 
 #endif /* __SAA716x_I2C_H */
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index c8a8c9e5c7ac0..5c25d80fd7758 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -14,60 +14,6 @@
 
 #define SAA716x_MSI_VECTORS		50
 
-static const char *vector_name[] = {
-	"TAGACK_VI0_0",
-	"TAGACK_VI0_1",
-	"TAGACK_VI0_2",
-	"TAGACK_VI1_0",
-	"TAGACK_VI1_1",
-	"TAGACK_VI1_2",
-	"TAGACK_FGPI_0",
-	"TAGACK_FGPI_1",
-	"TAGACK_FGPI_2",
-	"TAGACK_FGPI_3",
-	"TAGACK_AI_0",
-	"TAGACK_AI_1",
-	"OVRFLW_VI0_0",
-	"OVRFLW_VI0_1",
-	"OVRFLW_VI0_2",
-	"OVRFLW_VI1_0",
-	"OVRFLW_VI1_1",
-	"OVRFLW_VI1_2",
-	"OVRFLW_FGPI_O",
-	"OVRFLW_FGPI_1",
-	"OVRFLW_FGPI_2",
-	"OVRFLW_FGPI_3",
-	"OVRFLW_AI_0",
-	"OVRFLW_AI_1",
-	"AVINT_VI0",
-	"AVINT_VI1",
-	"AVINT_FGPI_0",
-	"AVINT_FGPI_1",
-	"AVINT_FGPI_2",
-	"AVINT_FGPI_3",
-	"AVINT_AI_0",
-	"AVINT_AI_1",
-	"UNMAPD_TC_INT",
-	"EXTINT_0",
-	"EXTINT_1",
-	"EXTINT_2",
-	"EXTINT_3",
-	"EXTINT_4",
-	"EXTINT_5",
-	"EXTINT_6",
-	"EXTINT_7",
-	"EXTINT_8",
-	"EXTINT_9",
-	"EXTINT_10",
-	"EXTINT_11",
-	"EXTINT_12",
-	"EXTINT_13",
-	"EXTINT_14",
-	"EXTINT_15",
-	"I2CINT_0",
-	"I2CINT_1"
-};
-
 static u32 MSI_CONFIG_REG[51] = {
 	MSI_CONFIG0,
 	MSI_CONFIG1,
@@ -122,173 +68,6 @@ static u32 MSI_CONFIG_REG[51] = {
 	MSI_CONFIG50
 };
 
-int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h)
-{
-	dprintk(SAA716x_DEBUG, 0, "%s: MSI event ", __func__);
-
-	if (stat_l & MSI_INT_TAGACK_VI0_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[0]);
-
-	if (stat_l & MSI_INT_TAGACK_VI0_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[1]);
-
-	if (stat_l & MSI_INT_TAGACK_VI0_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[2]);
-
-	if (stat_l & MSI_INT_TAGACK_VI1_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[3]);
-
-	if (stat_l & MSI_INT_TAGACK_VI1_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[4]);
-
-	if (stat_l & MSI_INT_TAGACK_VI1_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[5]);
-
-	if (stat_l & MSI_INT_TAGACK_FGPI_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[6]);
-
-	if (stat_l & MSI_INT_TAGACK_FGPI_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[7]);
-
-	if (stat_l & MSI_INT_TAGACK_FGPI_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[8]);
-
-	if (stat_l & MSI_INT_TAGACK_FGPI_3)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[9]);
-
-	if (stat_l & MSI_INT_TAGACK_AI_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[10]);
-
-	if (stat_l & MSI_INT_TAGACK_AI_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[11]);
-
-	if (stat_l & MSI_INT_OVRFLW_VI0_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[12]);
-
-	if (stat_l & MSI_INT_OVRFLW_VI0_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[13]);
-
-	if (stat_l & MSI_INT_OVRFLW_VI0_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[14]);
-
-	if (stat_l & MSI_INT_OVRFLW_VI1_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[15]);
-
-	if (stat_l & MSI_INT_OVRFLW_VI1_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[16]);
-
-	if (stat_l & MSI_INT_OVRFLW_VI1_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[17]);
-
-	if (stat_l & MSI_INT_OVRFLW_FGPI_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[18]);
-
-	if (stat_l & MSI_INT_OVRFLW_FGPI_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[19]);
-
-	if (stat_l & MSI_INT_OVRFLW_FGPI_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[20]);
-
-	if (stat_l & MSI_INT_OVRFLW_FGPI_3)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[21]);
-
-	if (stat_l & MSI_INT_OVRFLW_AI_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[22]);
-
-	if (stat_l & MSI_INT_OVRFLW_AI_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[23]);
-
-	if (stat_l & MSI_INT_AVINT_VI0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[24]);
-
-	if (stat_l & MSI_INT_AVINT_VI1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[25]);
-
-	if (stat_l & MSI_INT_AVINT_FGPI_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[26]);
-
-	if (stat_l & MSI_INT_AVINT_FGPI_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[27]);
-
-	if (stat_l & MSI_INT_AVINT_FGPI_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[28]);
-
-	if (stat_l & MSI_INT_AVINT_FGPI_3)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[29]);
-
-	if (stat_l & MSI_INT_AVINT_AI_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[30]);
-
-	if (stat_l & MSI_INT_AVINT_AI_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[31]);
-
-	if (stat_h & MSI_INT_UNMAPD_TC_INT)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[32]);
-
-	if (stat_h & MSI_INT_EXTINT_0)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[33]);
-
-	if (stat_h & MSI_INT_EXTINT_1)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[34]);
-
-	if (stat_h & MSI_INT_EXTINT_2)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[35]);
-
-	if (stat_h & MSI_INT_EXTINT_3)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[36]);
-
-	if (stat_h & MSI_INT_EXTINT_4)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[37]);
-
-	if (stat_h & MSI_INT_EXTINT_5)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[38]);
-
-	if (stat_h & MSI_INT_EXTINT_6)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[39]);
-
-	if (stat_h & MSI_INT_EXTINT_7)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[40]);
-
-	if (stat_h & MSI_INT_EXTINT_8)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[41]);
-
-	if (stat_h & MSI_INT_EXTINT_9)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[42]);
-
-	if (stat_h & MSI_INT_EXTINT_10)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[43]);
-
-	if (stat_h & MSI_INT_EXTINT_11)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[44]);
-
-	if (stat_h & MSI_INT_EXTINT_12)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[45]);
-
-	if (stat_h & MSI_INT_EXTINT_13)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[46]);
-
-	if (stat_h & MSI_INT_EXTINT_14)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[47]);
-
-	if (stat_h & MSI_INT_EXTINT_15)
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[48]);
-
-	if (stat_h & MSI_INT_I2CINT_0) {
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[49]);
-		saa716x_i2c_irqevent(saa716x, 0);
-	}
-
-	if (stat_h & MSI_INT_I2CINT_1) {
-		dprintk(SAA716x_DEBUG, 0, "<%s> ", vector_name[50]);
-		saa716x_i2c_irqevent(saa716x, 1);
-	}
-
-	dprintk(SAA716x_DEBUG, 0, "\n");
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_msi_event);
-
 int saa716x_msi_init(struct saa716x_dev *saa716x)
 {
 	u32 ena_l, ena_h, sta_l, sta_h, mid;
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
index b6cac2003c3db..01a2479110560 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.h
+++ b/drivers/media/pci/saa716x/saa716x_msi.h
@@ -71,7 +71,6 @@ enum saa716x_edge {
 
 struct saa716x_dev;
 
-extern int saa716x_msi_event(struct saa716x_dev *saa716x, u32 stat_l, u32 stat_h);
 extern int saa716x_msi_init(struct saa716x_dev *saa716x);
 
 #endif /* __SAA716x_MSI_H */

From 26cc65cfa35e135c42975a24f8871e350b3807e7 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 22:34:39 +0100
Subject: [PATCH 291/364] saa716x: simplify MSI init

Disable and clear all pending interrupts, reset configs to rising edge
triggering of first (and only used) interrupt handler.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_msi.c | 126 ++----------------------
 1 file changed, 6 insertions(+), 120 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
index 5c25d80fd7758..472257f40a1d7 100644
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ b/drivers/media/pci/saa716x/saa716x_msi.c
@@ -1,134 +1,20 @@
 #include <linux/delay.h>
 
-#include <linux/signal.h>
-#include <linux/sched.h>
-#include <linux/interrupt.h>
-
 #include "saa716x_mod.h"
-
 #include "saa716x_msi_reg.h"
 #include "saa716x_msi.h"
-#include "saa716x_spi.h"
-
 #include "saa716x_priv.h"
 
-#define SAA716x_MSI_VECTORS		50
-
-static u32 MSI_CONFIG_REG[51] = {
-	MSI_CONFIG0,
-	MSI_CONFIG1,
-	MSI_CONFIG2,
-	MSI_CONFIG3,
-	MSI_CONFIG4,
-	MSI_CONFIG5,
-	MSI_CONFIG6,
-	MSI_CONFIG7,
-	MSI_CONFIG8,
-	MSI_CONFIG9,
-	MSI_CONFIG10,
-	MSI_CONFIG11,
-	MSI_CONFIG12,
-	MSI_CONFIG13,
-	MSI_CONFIG14,
-	MSI_CONFIG15,
-	MSI_CONFIG16,
-	MSI_CONFIG17,
-	MSI_CONFIG18,
-	MSI_CONFIG19,
-	MSI_CONFIG20,
-	MSI_CONFIG21,
-	MSI_CONFIG22,
-	MSI_CONFIG23,
-	MSI_CONFIG24,
-	MSI_CONFIG25,
-	MSI_CONFIG26,
-	MSI_CONFIG27,
-	MSI_CONFIG28,
-	MSI_CONFIG29,
-	MSI_CONFIG30,
-	MSI_CONFIG31,
-	MSI_CONFIG32,
-	MSI_CONFIG33,
-	MSI_CONFIG34,
-	MSI_CONFIG35,
-	MSI_CONFIG36,
-	MSI_CONFIG37,
-	MSI_CONFIG38,
-	MSI_CONFIG39,
-	MSI_CONFIG40,
-	MSI_CONFIG41,
-	MSI_CONFIG42,
-	MSI_CONFIG43,
-	MSI_CONFIG44,
-	MSI_CONFIG45,
-	MSI_CONFIG46,
-	MSI_CONFIG47,
-	MSI_CONFIG48,
-	MSI_CONFIG49,
-	MSI_CONFIG50
-};
-
 int saa716x_msi_init(struct saa716x_dev *saa716x)
 {
-	u32 ena_l, ena_h, sta_l, sta_h, mid;
 	int i;
 
-	dprintk(SAA716x_DEBUG, 1, "Initializing MSI ..");
-
-	/* get module id & version */
-	mid = SAA716x_EPRD(MSI, MSI_MODULE_ID);
-	if (mid != 0x30100)
-		dprintk(SAA716x_ERROR, 1, "MSI Id<%04x> is not supported", mid);
-
-	/* let HW take care of MSI race */
-	SAA716x_EPWR(MSI, MSI_DELAY_TIMER, 0x0);
-
-	/* INTA Polarity: Active High */
-	SAA716x_EPWR(MSI, MSI_INTA_POLARITY, MSI_INTA_POLARITY_HIGH);
-
-	/*
-	 * IRQ Edge Rising: 25:24 = 0x01
-	 * Traffic Class: 18:16 = 0x00
-	 * MSI ID: 4:0 = 0x00
-	 */
-	for (i = 0; i < SAA716x_MSI_VECTORS; i++)
-		SAA716x_EPWR(MSI, MSI_CONFIG_REG[i], MSI_INT_POL_EDGE_RISE);
-
-	/* get Status */
-	ena_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
-	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
-	sta_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
-	sta_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
-
-	/* disable and clear enabled and asserted IRQ's */
-	if (sta_l)
-		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, sta_l);
-
-	if (sta_h)
-		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, sta_h);
-
-	if (ena_l)
-		SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_L, ena_l);
-
-	if (ena_h)
-		SAA716x_EPWR(MSI, MSI_INT_ENA_CLR_H, ena_h);
-
-	msleep(5);
-
-	/* Check IRQ's really disabled */
-	ena_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
-	ena_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
-	sta_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
-	sta_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
-
-	if ((ena_l == 0) && (ena_h == 0) && (sta_l == 0) && (sta_h == 0)) {
-		dprintk(SAA716x_DEBUG, 1, "Interrupts ena_l <%02x> ena_h <%02x> sta_l <%02x> sta_h <%02x>",
-			ena_l, ena_h, sta_l, sta_h);
-
-		return 0;
-	} else {
-		dprintk(SAA716x_DEBUG, 1, "I/O error");
-		return -EIO;
+	/* Reset MSI */
+	SAA716x_EPWR(MSI, MSI_SW_RST, 0x1);
+	for (i = 0; i < 20; i++) {
+		msleep(1);
+		if (!(SAA716x_EPRD(MSI, MSI_SW_RST)))
+			break;
 	}
 
 	return 0;

From 3b338f2606f537a606784bec366650bdd2c0087c Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 25 Nov 2018 14:46:30 +0100
Subject: [PATCH 292/364] saa716x: perform soft reset on device probe

Boot scripts are executed from ROM/EEPROM after power-on reset and
PCIe reset to finish hardware initialization. Do not execute these
boot scripts again (partially) from the driver at device probe time.
Perform a full soft reset of core modules instead to start from a
clean state, e.g. after driver reload.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c    | 206 --------------------
 drivers/media/pci/saa716x/saa716x_boot.h    |   6 -
 drivers/media/pci/saa716x/saa716x_budget.c  |  12 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c |   8 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c  |  12 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |   2 -
 6 files changed, 3 insertions(+), 243 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 21e59d04249b4..50e5523c63f3d 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -16,212 +16,6 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
-static int saa716x_ext_boot(struct saa716x_dev *saa716x)
-{
-	/* Write GREG boot_ready to 0
-	 * DW_0 = 0x0001_2018
-	 * DW_1 = 0x0000_0000
-	 */
-	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00000000);
-
-	/* Clear VI0 interrupt
-	 * DW_2 = 0x0000_0fe8
-	 * DW_3 = 0x0000_03ff
-	 */
-	SAA716x_EPWR(VI0, INT_CLR_STATUS, 0x000003ff);
-
-	/* Clear VI1 interrupt
-	 * DW_4 = 0x0000_1fe8
-	 * DW_5 = 0x0000_03ff
-	 */
-	SAA716x_EPWR(VI1, INT_CLR_STATUS, 0x000003ff);
-
-	/* CLear FGPI0 interrupt
-	 * DW_6 = 0x0000_2fe8
-	 * DW_7 = 0x0000_007f
-	 */
-	SAA716x_EPWR(FGPI0, INT_CLR_STATUS, 0x0000007f);
-
-	/* Clear FGPI1 interrupt
-	 * DW_8 = 0x0000_3fe8
-	 * DW_9 = 0x0000_007f
-	 */
-	SAA716x_EPWR(FGPI1, INT_CLR_STATUS, 0x0000007f);
-
-	/* Clear FGPI2 interrupt
-	 * DW_10 = 0x0000_4fe8
-	 * DW_11 = 0x0000_007f
-	 */
-	SAA716x_EPWR(FGPI2, INT_CLR_STATUS, 0x0000007f);
-
-	/* Clear FGPI3 interrupt
-	 * DW_12 = 0x0000_5fe8
-	 * DW_13 = 0x0000_007f
-	 */
-	SAA716x_EPWR(FGPI3, INT_CLR_STATUS, 0x0000007f);
-
-	/* Clear AI0 interrupt
-	 * DW_14 = 0x0000_6020
-	 * DW_15 = 0x0000_000f
-	 */
-	SAA716x_EPWR(AI0, AI_INT_ACK, 0x0000000f);
-
-	/* Clear AI1 interrupt
-	 * DW_16 = 0x0000_7020
-	 * DW_17 = 0x0000_200f
-	 */
-	SAA716x_EPWR(AI1, AI_INT_ACK, 0x0000000f);
-
-	/* Set GREG boot_ready bit to 1
-	 * DW_18 = 0x0001_2018
-	 * DW_19 = 0x0000_2000
-	 */
-	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00002000);
-#if 0
-	/* End of Boot script command
-	 * DW_20 = 0x0000_0006
-	 * Where to write this value ??
-	 * This seems very odd an address to trigger the
-	 * Boot Control State Machine !
-	 */
-	SAA716x_EPWR(VI0, 0x00000006, 0xffffffff);
-#endif
-	return 0;
-}
-
-/* Internal Bootscript configuration */
-static void saa716x_int_boot(struct saa716x_dev *saa716x)
-{
-	/* #1 Configure PCI COnfig space
-	 * GREG_JETSTR_CONFIG_0
-	 */
-	SAA716x_EPWR(GREG, GREG_SUBSYS_CONFIG, saa716x->pdev->subsystem_vendor);
-
-	/* GREG_JETSTR_CONFIG_1
-	 * pmcsr_scale:7 = 0x00
-	 * pmcsr_scale:6 = 0x00
-	 * pmcsr_scale:5 = 0x00
-	 * pmcsr_scale:4 = 0x00
-	 * pmcsr_scale:3 = 0x00
-	 * pmcsr_scale:2 = 0x00
-	 * pmcsr_scale:1 = 0x00
-	 * pmcsr_scale:0 = 0x00
-	 * BAR mask = 20 bit
-	 * BAR prefetch = no
-	 * MSI capable = 32 messages
-	 */
-	SAA716x_EPWR(GREG, GREG_MSI_BAR_PMCSR, 0x00001005);
-
-	/* GREG_JETSTR_CONFIG_2
-	 * pmcsr_data:3 = 0x0
-	 * pmcsr_data:2 = 0x0
-	 * pmcsr_data:1 = 0x0
-	 * pmcsr_data:0 = 0x0
-	 */
-	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_1, 0x00000000);
-
-	/* GREG_JETSTR_CONFIG_3
-	 * pmcsr_data:7 = 0x0
-	 * pmcsr_data:6 = 0x0
-	 * pmcsr_data:5 = 0x0
-	 * pmcsr_data:4 = 0x0
-	 */
-	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_2, 0x00000000);
-
-	/* #2 Release GREG resets
-	 * ip_rst_an
-	 * dpa1_rst_an
-	 * jetsream_reset_an
-	 */
-	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00000e00);
-
-	/* #3 GPIO Setup
-	 * GPIO 25:24 = Output
-	 * GPIO Output "0" after Reset
-	 */
-	SAA716x_EPWR(GPIO, GPIO_OEN, 0xfcffffff);
-
-	/* #4 Custom stuff goes in here */
-
-	/* #5 Disable CGU Clocks
-	 * except for PHY, Jetstream, DPA1, DCS, Boot, GREG
-	 * CGU_PCR_0_3: pss_mmu_clk:0 = 0x0
-	 */
-	SAA716x_EPWR(CGU, CGU_PCR_0_3, 0x00000006);
-
-	/* CGU_PCR_0_4: pss_dtl2mtl_mmu_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_0_4, 0x00000006);
-
-	/* CGU_PCR_0_5: pss_msi_ck:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_0_5, 0x00000006);
-
-	/* CGU_PCR_0_7: pss_gpio_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_0_7, 0x00000006);
-
-	/* CGU_PCR_2_1: spi_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_2_1, 0x00000006);
-
-	/* CGU_PCR_3_2: i2c_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_3_2, 0x00000006);
-
-	/* CGU_PCR_4_1: phi_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_4_1, 0x00000006);
-
-	/* CGU_PCR_5: vip0_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_5, 0x00000006);
-
-	/* CGU_PCR_6: vip1_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_6, 0x00000006);
-
-	/* CGU_PCR_7: fgpi0_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_7, 0x00000006);
-
-	/* CGU_PCR_8: fgpi1_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_8, 0x00000006);
-
-	/* CGU_PCR_9: fgpi2_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_9, 0x00000006);
-
-	/* CGU_PCR_10: fgpi3_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_10, 0x00000006);
-
-	/* CGU_PCR_11: ai0_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_11, 0x00000006);
-
-	/* CGU_PCR_12: ai1_clk:0 = 0x0 */
-	SAA716x_EPWR(CGU, CGU_PCR_12, 0x00000006);
-
-	/* #6 Set GREG boot_ready = 0x1 */
-	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, 0x00002000);
-
-	/* #7 Disable GREG CGU Clock */
-	SAA716x_EPWR(CGU, CGU_PCR_0_6, 0x00000006);
-
-	/* End of Bootscript command ?? */
-}
-
-int saa716x_core_boot(struct saa716x_dev *saa716x)
-{
-	struct saa716x_config *config = saa716x->config;
-
-	switch (config->boot_mode) {
-	case SAA716x_EXT_BOOT:
-		dprintk(SAA716x_DEBUG, 1, "Using External Boot from config");
-		saa716x_ext_boot(saa716x);
-		break;
-	case SAA716x_INT_BOOT:
-		dprintk(SAA716x_DEBUG, 1, "Using Internal Boot from config");
-		saa716x_int_boot(saa716x);
-		break;
-	default:
-		dprintk(SAA716x_ERROR, 1, "Unknown configuration %d", config->boot_mode);
-		break;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_core_boot);
-
 static void saa716x_bus_report(struct pci_dev *pdev, int enable)
 {
 	u32 reg;
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index 8102853bc2b0b..f842c1d34abdf 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -4,14 +4,8 @@
 #define DISABLE_TIMEOUT		0x17
 #define ENABLE_TIMEOUT		0x16
 
-enum saa716x_boot_mode {
-	SAA716x_EXT_BOOT = 1,
-	SAA716x_INT_BOOT, /* GPIO[31:30] = 0x01 */
-};
-
 struct saa716x_dev;
 
-extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
 extern void saa716x_core_reset(struct saa716x_dev *saa716x);
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index f915997ed4023..e5a9e181f957e 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -77,12 +77,7 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 		goto fail1;
 	}
 
-	err = saa716x_core_boot(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
-		goto fail2;
-	}
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
+	saa716x_core_reset(saa716x);
 
 	err = saa716x_msi_init(saa716x);
 	if (err) {
@@ -259,7 +254,6 @@ static int saa716x_vp3071_frontend_attach(struct saa716x_adapter *adapter, int c
 static struct saa716x_config saa716x_vp3071_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP3071,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP3071,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_vp3071_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
@@ -350,7 +344,6 @@ static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int c
 static struct saa716x_config saa716x_vp1028_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp1028_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
@@ -374,7 +367,6 @@ static int saa716x_vp6002_frontend_attach(struct saa716x_adapter *adapter, int c
 static struct saa716x_config saa716x_vp6002_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6002,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6002,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6002_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
@@ -398,7 +390,6 @@ static int saa716x_knc1_duals2_frontend_attach(struct saa716x_adapter *adapter,
 static struct saa716x_config saa716x_knc1_duals2_config = {
 	.model_name		= SAA716x_MODEL_KNC1_DUALS2,
 	.dev_type		= SAA716x_DEV_KNC1_DUALS2,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_knc1_duals2_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
@@ -577,7 +568,6 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 static struct saa716x_config skystar2_express_hd_config = {
 	.model_name		= SAA716x_MODEL_SKYSTAR2_EXPRESS_HD,
 	.dev_type		= SAA716x_DEV_SKYSTAR2_EXPRESS_HD,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= skystar2_express_hd_frontend_attach,
 	.irq_handler		= saa716x_budget_pci_irq,
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 6fca2bf8c4823..4814247fa163e 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -992,12 +992,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail1;
 	}
 
-	err = saa716x_core_boot(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
-		goto fail2;
-	}
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
+	saa716x_core_reset(saa716x);
 
 	err = saa716x_msi_init(saa716x);
 	if (err) {
@@ -1761,7 +1756,6 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 static struct saa716x_config saa716x_s26400_config = {
 	.model_name		= SAA716x_MODEL_S2_6400_DUAL,
 	.dev_type		= SAA716x_DEV_S2_6400_DUAL,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_s26400_frontend_attach,
 	.irq_handler		= saa716x_ff_pci_irq,
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 15153390cdcf1..a3bd06c18dd93 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -78,12 +78,7 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 		goto fail1;
 	}
 
-	err = saa716x_core_boot(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Core Boot failed");
-		goto fail2;
-	}
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Core Boot Success");
+	saa716x_core_reset(saa716x);
 
 	err = saa716x_msi_init(saa716x);
 	if (err) {
@@ -353,7 +348,6 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 static struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_vp6090_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -468,7 +462,6 @@ static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter,
 static struct saa716x_config saa716x_atlantis_config = {
 	.model_name		= SAA716x_MODEL_NXP_ATLANTIS,
 	.dev_type		= SAA716x_DEV_NXP_ATLANTIS,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 2,
 	.frontend_attach	= saa716x_atlantis_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -578,7 +571,6 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 static struct saa716x_config saa716x_nemo_config = {
 	.model_name		= SAA716x_MODEL_NXP_NEMO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_nemo_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -623,7 +615,6 @@ static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int
 static struct saa716x_config saa716x_averhc82_config = {
 	.model_name		= SAA716x_MODEL_AVERMEDIA_HC82,
 	.dev_type		= SAA716x_DEV_AVERMEDIA_HC82,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_averhc82_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
@@ -646,7 +637,6 @@ static int saa716x_averh88_frontend_attach(struct saa716x_adapter *adapter, int
 static struct saa716x_config saa716x_averh788_config = {
 	.model_name		= SAA716x_MODEL_AVERMEDIA_H788,
 	.dev_type		= SAA716x_DEV_AVERMEDIA_H788,
-	.boot_mode		= SAA716x_EXT_BOOT,
 	.adapters		= 1,
 	.frontend_attach	= saa716x_averh88_frontend_attach,
 	.irq_handler		= saa716x_hybrid_pci_irq,
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 038543acd4476..18e650b87321d 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -79,8 +79,6 @@ struct saa716x_config {
 	char				*model_name;
 	char				*dev_type;
 
-	enum saa716x_boot_mode		boot_mode;
-
 	int				adapters;
 	int				frontends;
 

From 62d4969d71ba9f303afc1859fc8b63b50e6ef834 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 25 Nov 2018 16:22:19 +0100
Subject: [PATCH 293/364] saa716x: remove separate msi reset

Since we reset all core modules now, we do not need another msi reset
afterwards.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile          |  1 -
 drivers/media/pci/saa716x/saa716x_budget.c  |  9 +--
 drivers/media/pci/saa716x/saa716x_ff_main.c |  7 --
 drivers/media/pci/saa716x/saa716x_hybrid.c  |  9 +--
 drivers/media/pci/saa716x/saa716x_msi.c     | 22 ------
 drivers/media/pci/saa716x/saa716x_msi.h     | 76 ---------------------
 drivers/media/pci/saa716x/saa716x_pci.c     |  1 -
 drivers/media/pci/saa716x/saa716x_priv.h    |  3 -
 8 files changed, 2 insertions(+), 126 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_msi.c
 delete mode 100644 drivers/media/pci/saa716x/saa716x_msi.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index e7556dd951959..08a4543670152 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -1,7 +1,6 @@
 saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_i2c.o	\
 			   saa716x_cgu.o	\
-			   saa716x_msi.o	\
 			   saa716x_dma.o	\
 			   saa716x_vip.o	\
 			   saa716x_aip.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index e5a9e181f957e..54bc1c66d0786 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -26,7 +26,6 @@
 
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
-#include "saa716x_msi.h"
 #include "saa716x_budget.h"
 #include "saa716x_gpio.h"
 #include "saa716x_rom.h"
@@ -79,16 +78,10 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x_core_reset(saa716x);
 
-	err = saa716x_msi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
-		goto fail2;
-	}
-
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
-		goto fail1;
+		goto fail2;
 	}
 
 	err = saa716x_i2c_init(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 4814247fa163e..b42c4856546dd 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -34,7 +34,6 @@
 #include "saa716x_spi_reg.h"
 #include "saa716x_msi_reg.h"
 
-#include "saa716x_msi.h"
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
 #include "saa716x_phi.h"
@@ -994,12 +993,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	saa716x_core_reset(saa716x);
 
-	err = saa716x_msi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
-		goto fail2;
-	}
-
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index a3bd06c18dd93..cd1c601f52738 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -26,7 +26,6 @@
 
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
-#include "saa716x_msi.h"
 #include "saa716x_hybrid.h"
 #include "saa716x_gpio.h"
 #include "saa716x_rom.h"
@@ -80,16 +79,10 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x_core_reset(saa716x);
 
-	err = saa716x_msi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x MSI Init failed");
-		goto fail2;
-	}
-
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
-		goto fail1;
+		goto fail2;
 	}
 
 	err = saa716x_i2c_init(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_msi.c b/drivers/media/pci/saa716x/saa716x_msi.c
deleted file mode 100644
index 472257f40a1d7..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_msi.c
+++ /dev/null
@@ -1,22 +0,0 @@
-#include <linux/delay.h>
-
-#include "saa716x_mod.h"
-#include "saa716x_msi_reg.h"
-#include "saa716x_msi.h"
-#include "saa716x_priv.h"
-
-int saa716x_msi_init(struct saa716x_dev *saa716x)
-{
-	int i;
-
-	/* Reset MSI */
-	SAA716x_EPWR(MSI, MSI_SW_RST, 0x1);
-	for (i = 0; i < 20; i++) {
-		msleep(1);
-		if (!(SAA716x_EPRD(MSI, MSI_SW_RST)))
-			break;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_msi_init);
diff --git a/drivers/media/pci/saa716x/saa716x_msi.h b/drivers/media/pci/saa716x/saa716x_msi.h
deleted file mode 100644
index 01a2479110560..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_msi.h
+++ /dev/null
@@ -1,76 +0,0 @@
-#ifndef __SAA716x_MSI_H
-#define __SAA716x_MSI_H
-
-#define	TAGACK_VI0_0		0x000
-#define	TAGACK_VI0_1		0x001
-#define	TAGACK_VI0_2		0x002
-#define	TAGACK_VI1_0		0x003
-#define	TAGACK_VI1_1		0x004
-#define	TAGACK_VI1_2		0x005
-#define	TAGACK_FGPI_0		0x006
-#define	TAGACK_FGPI_1		0x007
-#define	TAGACK_FGPI_2		0x008
-#define	TAGACK_FGPI_3		0x009
-#define	TAGACK_AI_0		0x00a
-#define	TAGACK_AI_1		0x00b
-#define	OVRFLW_VI0_0		0x00c
-#define	OVRFLW_VI0_1		0x00d
-#define	OVRFLW_VI0_2		0x00e
-#define	OVRFLW_VI1_0		0x00f
-#define	OVRFLW_VI1_1		0x010
-#define	OVRFLW_VI1_2		0x011
-#define	OVRFLW_FGPI_O		0x012
-#define	OVRFLW_FGPI_1		0x013
-#define	OVRFLW_FGPI_2		0x014
-#define	OVRFLW_FGPI_3		0x015
-#define	OVRFLW_AI_0		0x016
-#define	OVRFLW_AI_1		0x017
-#define	AVINT_VI0		0x018
-#define	AVINT_VI1		0x019
-#define	AVINT_FGPI_0		0x01a
-#define	AVINT_FGPI_1		0x01b
-#define	AVINT_FGPI_2		0x01c
-#define	AVINT_FGPI_3		0x01d
-#define	AVINT_AI_0		0x01e
-#define	AVINT_AI_1		0x01f
-#define	UNMAPD_TC_INT		0x020
-#define	EXTINT_0		0x021
-#define	EXTINT_1		0x022
-#define	EXTINT_2		0x023
-#define	EXTINT_3		0x024
-#define	EXTINT_4		0x025
-#define	EXTINT_5		0x026
-#define EXTINT_6		0x027
-#define	EXTINT_7		0x028
-#define	EXTINT_8		0x029
-#define	EXTINT_9		0x02a
-#define	EXTINT_10		0x02b
-#define	EXTINT_11		0x02c
-#define	EXTINT_12		0x02d
-#define	EXTINT_13		0x02e
-#define	EXTINT_14		0x02f
-#define	EXTINT_15		0x030
-#define	I2CINT_0		0x031
-#define	I2CINT_1		0x032
-
-#define SAA716x_TC0		0x000
-#define SAA716x_TC1		0x001
-#define SAA716x_TC2		0x002
-#define SAA716x_TC3		0x003
-#define SAA716x_TC4		0x004
-#define SAA716x_TC5		0x005
-#define SAA716x_TC6		0x006
-#define SAA716x_TC7		0x007
-
-
-enum saa716x_edge {
-	SAA716x_EDGE_RISING	= 1,
-	SAA716x_EDGE_FALLING	= 2,
-	SAA716x_EDGE_ANY	= 3
-};
-
-struct saa716x_dev;
-
-extern int saa716x_msi_init(struct saa716x_dev *saa716x);
-
-#endif /* __SAA716x_MSI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 7f7734459a4db..07466c19a990a 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -9,7 +9,6 @@
 #include <linux/interrupt.h>
 
 #include "saa716x_spi.h"
-#include "saa716x_msi.h"
 #include "saa716x_priv.h"
 
 #define DRIVER_NAME				"SAA716x Core"
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 18e650b87321d..a3ff8c3bee9a5 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -152,9 +152,6 @@ struct saa716x_dev {
 extern int saa716x_pci_init(struct saa716x_dev *saa716x);
 extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
 
-/* MSI */
-extern int saa716x_msi_init(struct saa716x_dev *saa716x);
-
 /* AUDIO */
 extern int saa716x_audio_init(struct saa716x_dev *saa716x);
 extern void saa716x_audio_exit(struct saa716x_dev *saa716x);

From 3b5135d8efc39d2c81df64409b9af789f75409a5 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 7 Dec 2018 21:34:06 +0100
Subject: [PATCH 294/364] saa716x_ff: move phi reset to probe function

So we can get rid of the separate phi core files.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile          |  1 -
 drivers/media/pci/saa716x/saa716x_ff_main.c |  2 +-
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  7 -------
 drivers/media/pci/saa716x/saa716x_phi.c     | 23 ---------------------
 drivers/media/pci/saa716x/saa716x_phi.h     |  8 -------
 5 files changed, 1 insertion(+), 40 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_phi.c
 delete mode 100644 drivers/media/pci/saa716x/saa716x_phi.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 08a4543670152..7d80757080849 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -4,7 +4,6 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_dma.o	\
 			   saa716x_vip.o	\
 			   saa716x_aip.o	\
-			   saa716x_phi.o	\
 			   saa716x_boot.o	\
 			   saa716x_fgpi.o	\
 			   saa716x_adap.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index b42c4856546dd..6403129588fc7 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -36,7 +36,6 @@
 
 #include "saa716x_adap.h"
 #include "saa716x_gpio.h"
-#include "saa716x_phi.h"
 #include "saa716x_rom.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
@@ -992,6 +991,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	}
 
 	saa716x_core_reset(saa716x);
+	SAA716x_EPWR(PHI_0, PHI_SW_RST, 1);
 
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index b376d1628d494..81eb0371d68b3 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -1,7 +1,6 @@
 #include <linux/types.h>
 
 #include "saa716x_mod.h"
-#include "saa716x_phi.h"
 #include "saa716x_phi_reg.h"
 #include "saa716x_priv.h"
 
@@ -52,12 +51,6 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 	if (!sti7109->mmio_wc) {
 		dprintk(SAA716x_ERROR, 1, "Mem PHI1 WC remap failed");
 		err = -ENODEV;
-		goto fail0;
-	}
-
-	err = saa716x_phi_init(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PHI Initialization failed");
 		goto fail1;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_phi.c b/drivers/media/pci/saa716x/saa716x_phi.c
deleted file mode 100644
index 7d2c041633014..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_phi.c
+++ /dev/null
@@ -1,23 +0,0 @@
-#include <linux/kernel.h>
-
-#include "saa716x_mod.h"
-#include "saa716x_phi_reg.h"
-#include "saa716x_phi.h"
-#include "saa716x_priv.h"
-
-
-int saa716x_phi_init(struct saa716x_dev *saa716x)
-{
-	int i;
-
-	/* Reset PHI */
-	SAA716x_EPWR(PHI_0, PHI_SW_RST, 0x1);
-	for (i = 0; i < 20; i++) {
-		msleep(1);
-		if (!(SAA716x_EPRD(PHI_0, PHI_SW_RST)))
-			break;
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_phi_init);
diff --git a/drivers/media/pci/saa716x/saa716x_phi.h b/drivers/media/pci/saa716x/saa716x_phi.h
deleted file mode 100644
index 0bb2027a8946b..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_phi.h
+++ /dev/null
@@ -1,8 +0,0 @@
-#ifndef __SAA716x_PHI_H
-#define __SAA716x_PHI_H
-
-struct saa716x_dev;
-
-extern int saa716x_phi_init(struct saa716x_dev *saa716x);
-
-#endif /* __SAA716x_PHI_H */

From 4f4c48eac23bb334969abb66f68da480d8980b04 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 9 Dec 2018 20:10:33 +0100
Subject: [PATCH 295/364] saa716x: also soft-reset greg and gpio blocks on
 device probe

And integrate the core_reset function into jetpack_init to avoid
duplicated resets.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c    | 72 +++++++++++----------
 drivers/media/pci/saa716x/saa716x_boot.h    |  1 -
 drivers/media/pci/saa716x/saa716x_budget.c  |  3 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c |  2 +-
 drivers/media/pci/saa716x/saa716x_hybrid.c  |  3 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |  1 -
 6 files changed, 40 insertions(+), 42 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 50e5523c63f3d..31eb844712e7f 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -3,7 +3,6 @@
 #include "saa716x_mod.h"
 
 #include "saa716x_greg_reg.h"
-#include "saa716x_cgu_reg.h"
 #include "saa716x_vip_reg.h"
 #include "saa716x_aip_reg.h"
 #include "saa716x_msi_reg.h"
@@ -16,6 +15,40 @@
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
+static void saa716x_core_reset(struct saa716x_dev *saa716x)
+{
+	dprintk(SAA716x_DEBUG, 1, "RESET Modules");
+
+	/* GREG */
+	SAA716x_EPWR(GREG, GREG_SW_RST, GREG_SW_RESET);
+
+	/* VIP */
+	SAA716x_EPWR(VI0, VI_MODE, SOFT_RESET);
+	SAA716x_EPWR(VI1, VI_MODE, SOFT_RESET);
+
+	/* FGPI */
+	SAA716x_EPWR(FGPI0, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI1, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI2, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+	SAA716x_EPWR(FGPI3, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
+
+	/* AIP */
+	SAA716x_EPWR(AI0, AI_CTL, AI_RESET);
+	SAA716x_EPWR(AI1, AI_CTL, AI_RESET);
+
+	/* GPIO */
+	SAA716x_EPWR(GPIO, GPIO_SW_RST, GPIO_SW_RESET);
+
+	/* BAM */
+	SAA716x_EPWR(BAM, BAM_SW_RST, BAM_SW_RESET);
+
+	/* MMU */
+	SAA716x_EPWR(MMU, MMU_SW_RST, MMU_SW_RESET);
+
+	/* MSI */
+	SAA716x_EPWR(MSI, MSI_SW_RST, MSI_SW_RESET);
+}
+
 static void saa716x_bus_report(struct pci_dev *pdev, int enable)
 {
 	u32 reg;
@@ -34,6 +67,9 @@ static void saa716x_bus_report(struct pci_dev *pdev, int enable)
 
 int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 {
+	saa716x_core_reset(saa716x);
+	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, GREG_BOOT_READY);
+
 	/*
 	 * configure PHY through config space not to report
 	 * non-fatal error messages to avoid problems with
@@ -47,11 +83,6 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 	 */
 	SAA716x_EPWR(DCS, DCSC_CTRL, ENABLE_TIMEOUT);
 
-	/* Reset all blocks */
-	SAA716x_EPWR(MSI, MSI_SW_RST, MSI_SW_RESET);
-	SAA716x_EPWR(MMU, MMU_SW_RST, MMU_SW_RESET);
-	SAA716x_EPWR(BAM, BAM_SW_RST, BAM_SW_RESET);
-
 	switch (saa716x->pdev->device) {
 	case SAA7162:
 		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
@@ -82,32 +113,3 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 EXPORT_SYMBOL(saa716x_jetpack_init);
-
-void saa716x_core_reset(struct saa716x_dev *saa716x)
-{
-	dprintk(SAA716x_DEBUG, 1, "RESET Modules");
-
-	/* VIP */
-	SAA716x_EPWR(VI0, VI_MODE, SOFT_RESET);
-	SAA716x_EPWR(VI1, VI_MODE, SOFT_RESET);
-
-	/* FGPI */
-	SAA716x_EPWR(FGPI0, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-	SAA716x_EPWR(FGPI1, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-	SAA716x_EPWR(FGPI2, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-	SAA716x_EPWR(FGPI3, FGPI_SOFT_RESET, FGPI_SOFTWARE_RESET);
-
-	/* AIP */
-	SAA716x_EPWR(AI0, AI_CTL, AI_RESET);
-	SAA716x_EPWR(AI1, AI_CTL, AI_RESET);
-
-	/* BAM */
-	SAA716x_EPWR(BAM, BAM_SW_RST, BAM_SW_RESET);
-
-	/* MMU */
-	SAA716x_EPWR(MMU, MMU_SW_RST, MMU_SW_RESET);
-
-	/* MSI */
-	SAA716x_EPWR(MSI, MSI_SW_RST, MSI_SW_RESET);
-}
-EXPORT_SYMBOL_GPL(saa716x_core_reset);
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index f842c1d34abdf..e5ae0a53740d5 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -7,6 +7,5 @@
 struct saa716x_dev;
 
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
-extern void saa716x_core_reset(struct saa716x_dev *saa716x);
 
 #endif /* __SAA716x_BOOT_H */
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 54bc1c66d0786..6e7a969bcc5b7 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -25,6 +25,7 @@
 #include "saa716x_msi_reg.h"
 
 #include "saa716x_adap.h"
+#include "saa716x_boot.h"
 #include "saa716x_i2c.h"
 #include "saa716x_budget.h"
 #include "saa716x_gpio.h"
@@ -76,8 +77,6 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 		goto fail1;
 	}
 
-	saa716x_core_reset(saa716x);
-
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 6403129588fc7..04659a8102d29 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -35,6 +35,7 @@
 #include "saa716x_msi_reg.h"
 
 #include "saa716x_adap.h"
+#include "saa716x_boot.h"
 #include "saa716x_gpio.h"
 #include "saa716x_rom.h"
 #include "saa716x_spi.h"
@@ -990,7 +991,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail1;
 	}
 
-	saa716x_core_reset(saa716x);
 	SAA716x_EPWR(PHI_0, PHI_SW_RST, 1);
 
 	err = saa716x_jetpack_init(saa716x);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index cd1c601f52738..f84e13f403e47 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -25,6 +25,7 @@
 #include "saa716x_msi_reg.h"
 
 #include "saa716x_adap.h"
+#include "saa716x_boot.h"
 #include "saa716x_i2c.h"
 #include "saa716x_hybrid.h"
 #include "saa716x_gpio.h"
@@ -77,8 +78,6 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 		goto fail1;
 	}
 
-	saa716x_core_reset(saa716x);
-
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index a3ff8c3bee9a5..7a915ff63c18b 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -9,7 +9,6 @@
 #include <linux/ioport.h>
 #include <linux/i2c.h>
 #include "saa716x_i2c.h"
-#include "saa716x_boot.h"
 #include "saa716x_cgu.h"
 #include "saa716x_dma.h"
 #include "saa716x_fgpi.h"

From f7e62980376624841dde4e92f560ec4167190235 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 20:04:52 +0100
Subject: [PATCH 296/364] saa716x: move demux_worker to saa716x_adap

There is no need to implement the identical demux_worker in budget, hybrid,
and ff modules.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    | 50 +++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_budget.c  | 50 --------------------
 drivers/media/pci/saa716x/saa716x_ff_main.c | 50 --------------------
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 51 ---------------------
 drivers/media/pci/saa716x/saa716x_priv.h    |  1 -
 5 files changed, 49 insertions(+), 153 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 5ea5cb9411d03..7069c6079e6db 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -86,6 +86,54 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	return 0;
 }
 
+static void saa716x_demux_worker(unsigned long data)
+{
+	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
+	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
+	struct dvb_demux *demux;
+	u32 fgpi_index;
+	u32 i;
+	u32 write_index;
+
+	fgpi_index = fgpi_entry->dma_channel - 6;
+	demux = NULL;
+	for (i = 0; i < saa716x->config->adapters; i++) {
+		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
+			demux = &saa716x->saa716x_adap[i].demux;
+			break;
+		}
+	}
+	if (demux == NULL) {
+		printk(KERN_ERR "%s: unexpected channel %u\n",
+		       __func__, fgpi_entry->dma_channel);
+		return;
+	}
+
+	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
+	if (write_index < 0)
+		return;
+
+	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
+
+	if (write_index == fgpi_entry->read_index) {
+		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
+		return;
+	}
+
+	do {
+		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
+
+		pci_dma_sync_sg_for_cpu(saa716x->pdev,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
+			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
+			PCI_DMA_FROMDEVICE);
+
+		dvb_dmx_swfilter(demux, data, 348 * 188);
+
+		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
+	} while (write_index != fgpi_entry->read_index);
+}
+
 int saa716x_dvb_init(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
@@ -193,7 +241,7 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 
 		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port,
 				  SAA716X_TS_DMA_BUF_SIZE,
-				  config->adap_config[i].worker);
+				  saa716x_demux_worker);
 
 		saa716x_adap++;
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 6e7a969bcc5b7..08fbf0b04bfb8 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -182,54 +182,6 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static void demux_worker(unsigned long data)
-{
-	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
-	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
-	struct dvb_demux *demux;
-	u32 fgpi_index;
-	u32 i;
-	u32 write_index;
-
-	fgpi_index = fgpi_entry->dma_channel - 6;
-	demux = NULL;
-	for (i = 0; i < saa716x->config->adapters; i++) {
-		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
-			demux = &saa716x->saa716x_adap[i].demux;
-			break;
-		}
-	}
-	if (demux == NULL) {
-		printk(KERN_ERR "%s: unexpected channel %u\n",
-		       __func__, fgpi_entry->dma_channel);
-		return;
-	}
-
-	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
-	if (write_index < 0)
-		return;
-
-	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
-
-	if (write_index == fgpi_entry->read_index) {
-		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
-		return;
-	}
-
-	do {
-		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
-
-		pci_dma_sync_sg_for_cpu(saa716x->pdev,
-			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
-			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
-			PCI_DMA_FROMDEVICE);
-
-		dvb_dmx_swfilter(demux, data, 348 * 188);
-
-		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
-	} while (write_index != fgpi_entry->read_index);
-}
-
 
 #define SAA716x_MODEL_TWINHAN_VP3071	"Twinhan/Azurewave VP-3071"
 #define SAA716x_DEV_TWINHAN_VP3071	"2x DVB-T"
@@ -568,12 +520,10 @@ static struct saa716x_config skystar2_express_hd_config = {
 		{
 			/* Adapter 0 */
 			.ts_port = 1, /* using FGPI 1 */
-			.worker = demux_worker
 		}
 	}
 };
 
-
 static const struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 04659a8102d29..4dc8d04992d2f 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1228,54 +1228,6 @@ static void saa716x_ff_pci_remove(struct pci_dev *pdev)
 	kfree(saa716x);
 }
 
-static void demux_worker(unsigned long data)
-{
-	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
-	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
-	struct dvb_demux *demux;
-	u32 fgpi_index;
-	u32 i;
-	u32 write_index;
-
-	fgpi_index = fgpi_entry->dma_channel - 6;
-	demux = NULL;
-	for (i = 0; i < saa716x->config->adapters; i++) {
-		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
-			demux = &saa716x->saa716x_adap[i].demux;
-			break;
-		}
-	}
-	if (demux == NULL) {
-		printk(KERN_ERR "%s: unexpected channel %u\n",
-		       __func__, fgpi_entry->dma_channel);
-		return;
-	}
-
-	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
-	if (write_index < 0)
-		return;
-
-	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
-
-	if (write_index == fgpi_entry->read_index) {
-		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
-		return;
-	}
-
-	do {
-		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
-
-		pci_dma_sync_sg_for_cpu(saa716x->pdev,
-			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
-			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
-			PCI_DMA_FROMDEVICE);
-
-		dvb_dmx_swfilter(demux, data, 348 * 188);
-
-		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
-	} while (write_index != fgpi_entry->read_index);
-}
-
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
@@ -1759,11 +1711,9 @@ static struct saa716x_config saa716x_s26400_config = {
 		{
 			/* Adapter 0 */
 			.ts_port = 2,
-			.worker = demux_worker
 		},{
 			/* Adapter 1 */
 			.ts_port = 3,
-			.worker = demux_worker
 		}
 	}
 };
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index f84e13f403e47..fa60df9c34521 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -197,54 +197,6 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static void demux_worker(unsigned long data)
-{
-	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
-	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
-	struct dvb_demux *demux;
-	u32 fgpi_index;
-	u32 i;
-	u32 write_index;
-
-	fgpi_index = fgpi_entry->dma_channel - 6;
-	demux = NULL;
-	for (i = 0; i < saa716x->config->adapters; i++) {
-		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
-			demux = &saa716x->saa716x_adap[i].demux;
-			break;
-		}
-	}
-	if (demux == NULL) {
-		printk(KERN_ERR "%s: unexpected channel %u\n",
-		       __func__, fgpi_entry->dma_channel);
-		return;
-	}
-
-	write_index = saa716x_fgpi_get_write_index(saa716x, fgpi_index);
-	if (write_index < 0)
-		return;
-
-	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
-
-	if (write_index == fgpi_entry->read_index) {
-		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
-		return;
-	}
-
-	do {
-		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
-
-		pci_dma_sync_sg_for_cpu(saa716x->pdev,
-			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
-			fgpi_entry->dma_buf[fgpi_entry->read_index].list_len,
-			PCI_DMA_FROMDEVICE);
-
-		dvb_dmx_swfilter(demux, data, 348 * 188);
-
-		fgpi_entry->read_index = (fgpi_entry->read_index + 1) & 7;
-	} while (write_index != fgpi_entry->read_index);
-}
-
 /*
  * Twinhan/Azurewave VP-6090
  * DVB-S Frontend: 2x MB86A16
@@ -462,12 +414,10 @@ static struct saa716x_config saa716x_atlantis_config = {
 		{
 			/* Adapter 0 */
 			.ts_port = 3, /* using FGPI 3 */
-			.worker = demux_worker
 		},
 		{
 			/* Adapter 1 */
 			.ts_port = 0, /* using FGPI 0 */
-			.worker = demux_worker
 		}
 	}
 };
@@ -572,7 +522,6 @@ static struct saa716x_config saa716x_nemo_config = {
 		{
 			/* Adapter 0 */
 			.ts_port = 3, /* using FGPI 3 */
-			.worker = demux_worker
 		}
 	}
 };
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 7a915ff63c18b..2d1769f70a9cb 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -71,7 +71,6 @@ struct saa716x_spi_config;
 
 struct saa716x_adap_config {
 	u32				ts_port;
-	void				(*worker)(unsigned long);
 };
 
 struct saa716x_config {

From fcaabb59374eda07da2aaf73c96d9e2e2b1115ac Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 24 Nov 2018 23:36:00 +0100
Subject: [PATCH 297/364] saa716x: remove rom debug code

In principle it is an interesting idea to write a formal board description
into the PCIe bridge boot eeprom. But in this driver the eeprom descriptors
are only used to eventually write debug messages.
So for us it is waste of time to read eeprom data over i2c.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile          |    1 -
 drivers/media/pci/saa716x/saa716x_budget.c  |   11 -
 drivers/media/pci/saa716x/saa716x_ff_main.c |   11 -
 drivers/media/pci/saa716x/saa716x_hybrid.c  |   11 -
 drivers/media/pci/saa716x/saa716x_rom.c     | 1071 -------------------
 drivers/media/pci/saa716x/saa716x_rom.h     |  253 -----
 6 files changed, 1358 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_rom.c
 delete mode 100644 drivers/media/pci/saa716x/saa716x_rom.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 7d80757080849..e789c39323652 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -9,7 +9,6 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_adap.o	\
 			   saa716x_gpio.o	\
 			   saa716x_greg.o	\
-			   saa716x_rom.o	\
 			   saa716x_spi.o
 
 saa716x_ff-objs		:= saa716x_ff_main.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 08fbf0b04bfb8..b5f115f8e6cca 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -29,7 +29,6 @@
 #include "saa716x_i2c.h"
 #include "saa716x_budget.h"
 #include "saa716x_gpio.h"
-#include "saa716x_rom.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
@@ -91,16 +90,6 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x_gpio_init(saa716x);
 
-	err = saa716x_dump_eeprom(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
-	}
-
-	err = saa716x_eeprom_data(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM read failed");
-	}
-
 	/* set default port mapping */
 	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x04080FA9);
 	/* enable FGPI3 and FGPI1 for TS input from Port 2 and 6 */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 4dc8d04992d2f..82023a275d3f7 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -37,7 +37,6 @@
 #include "saa716x_adap.h"
 #include "saa716x_boot.h"
 #include "saa716x_gpio.h"
-#include "saa716x_rom.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
@@ -1097,16 +1096,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail5;
 	}
 
-	err = saa716x_dump_eeprom(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
-	}
-
-	err = saa716x_eeprom_data(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
-	}
-
 	/* enable FGPI2 and FGPI3 for TS inputs */
 	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x0689F04);
 	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x280);
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index fa60df9c34521..63ea82b6a43c5 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -29,7 +29,6 @@
 #include "saa716x_i2c.h"
 #include "saa716x_hybrid.h"
 #include "saa716x_gpio.h"
-#include "saa716x_rom.h"
 #include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
@@ -92,16 +91,6 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x_gpio_init(saa716x);
 
-	err = saa716x_dump_eeprom(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
-	}
-
-	err = saa716x_eeprom_data(saa716x);
-	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x EEPROM dump failed");
-	}
-
 	/* enable decoders on 7162 */
 	if (pdev->device == SAA7162) {
 		saa716x_gpio_set_output(saa716x, 24);
diff --git a/drivers/media/pci/saa716x/saa716x_rom.c b/drivers/media/pci/saa716x/saa716x_rom.c
deleted file mode 100644
index 8b572cffc5fb3..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_rom.c
+++ /dev/null
@@ -1,1071 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/string.h>
-
-#include "saa716x_rom.h"
-#include "saa716x_adap.h"
-#include "saa716x_spi.h"
-#include "saa716x_priv.h"
-
-int i;
-
-static int eeprom_read_bytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
-{
-	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_B].i2c_adapter;
-
-	u8 b0[] = { MSB(reg), LSB(reg) };
-	int ret;
-
-	struct i2c_msg msg[] = {
-		{ .addr = 0x50, .flags = 0,	   .buf = b0,  .len = sizeof (b0) },
-		{ .addr = 0x50,	.flags = I2C_M_RD, .buf = val, .len = len }
-	};
-
-	ret = i2c_transfer(adapter, msg, 2);
-	if (ret != 2) {
-		dprintk(SAA716x_ERROR, 1, "read error <reg=0x%02x, ret=%i>", reg, ret);
-		return -EREMOTEIO;
-	}
-
-	return ret;
-}
-
-static int saa716x_read_rombytes(struct saa716x_dev *saa716x, u16 reg, u16 len, u8 *val)
-{
-	struct saa716x_i2c *i2c		= saa716x->i2c;
-	struct i2c_adapter *adapter	= &i2c[SAA716x_I2C_BUS_B].i2c_adapter;
-	struct i2c_msg msg[2];
-
-	u8 b0[2];
-	int ret, count;
-
-	count = len / DUMP_BYTES;
-	if (len % DUMP_BYTES)
-		count++;
-
-	count *= 2;
-
-	for (i = 0; i < count; i += 2) {
-		dprintk(SAA716x_DEBUG, 1, "Length=%d, Count=%d, Reg=0x%02x",
-			len,
-			count,
-			reg);
-
-		b0[0] = MSB(reg);
-		b0[1] = LSB(reg);
-
-		/* Write */
-		msg[0].addr  = 0x50;
-		msg[0].flags = 0;
-		msg[0].buf   = b0;
-		msg[0].len   = 2;
-
-		/* Read */
-		msg[1].addr  = 0x50;
-		msg[1].flags = I2C_M_RD;
-		msg[1].buf   = val;
-
-		if (i == (count - 2)) {
-			/* last message */
-			if (len % DUMP_BYTES) {
-				msg[1].len = len % DUMP_BYTES;
-				dprintk(SAA716x_DEBUG, 1, "Last Message length=%d", len % DUMP_BYTES);
-			} else {
-				msg[1].len = DUMP_BYTES;
-			}
-		} else {
-			msg[1].len = DUMP_BYTES;
-		}
-
-		ret = i2c_transfer(adapter, msg, 2);
-		if (ret != 2) {
-			dprintk(SAA716x_ERROR, 1, "read error <reg=0x%02x, ret=%i>", reg, ret);
-			return -EREMOTEIO;
-		}
-
-		reg += DUMP_BYTES;
-		val += DUMP_BYTES;
-	}
-
-	return 0;
-}
-
-static int saa716x_get_offset(struct saa716x_dev *saa716x, u8 *buf, u32 *offset)
-{
-	int i;
-
-	*offset = 0;
-	for (i = 0; i < 256; i++) {
-		if (!(strncmp("START", buf + i, 5)))
-			break;
-	}
-	dprintk(SAA716x_DEBUG, 1, "Offset @ %d", i);
-	*offset = i;
-
-	return 0;
-}
-
-static int saa716x_eeprom_header(struct saa716x_dev *saa716x,
-				 struct saa716x_romhdr *rom_header,
-				 u8 *buf,
-				 u32 *offset)
-{
-	memcpy(rom_header, &buf[*offset], sizeof (struct saa716x_romhdr));
-	if (rom_header->header_size != sizeof (struct saa716x_romhdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%zu bytes, Expected=%d",
-			sizeof (struct saa716x_romhdr),
-			rom_header->header_size);
-
-		return -1;
-	}
-	*offset += sizeof (struct saa716x_romhdr);
-
-	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Data=%d bytes\n",
-		saa716x->pdev->device,
-		rom_header->data_size);
-
-	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Version=%d\n",
-		saa716x->pdev->device,
-		rom_header->version);
-
-	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Devices=%d\n",
-		saa716x->pdev->device,
-		rom_header->devices);
-
-	dprintk(SAA716x_DEBUG, 0, "SAA%02x ROM: Compressed=%d\n\n",
-		saa716x->pdev->device,
-		rom_header->compression);
-
-	return 0;
-}
-
-int saa716x_dump_eeprom(struct saa716x_dev *saa716x)
-{
-	struct saa716x_romhdr rom_header;
-	u8 buf[DUMP_BYTES];
-	int i, err = 0;
-	u32 offset = 0;
-
-	err = eeprom_read_bytes(saa716x, DUMP_OFFST, DUMP_BYTES, buf);
-	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "EEPROM Read error");
-		return err;
-	}
-
-	dprintk(SAA716x_DEBUG, 0, "    Card: %s\n",
-		saa716x->config->model_name);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"    ---------------- SAA%02x ROM @ Offset 0x%02x ----------------",
-		saa716x->pdev->device,
-		DUMP_OFFST);
-
-	for (i = 0; i < DUMP_BYTES; i++) {
-		if ((i % 16) == 0) {
-			dprintk(SAA716x_DEBUG, 0, "\n    ");
-			dprintk(SAA716x_DEBUG, 0, "%04x: ", i);
-		}
-
-		if ((i %  8) == 0)
-			dprintk(SAA716x_DEBUG, 0, " ");
-		if ((i %  4) == 0)
-			dprintk(SAA716x_DEBUG, 0, " ");
-		dprintk(SAA716x_DEBUG, 0, "%02x ", buf[i]);
-	}
-	dprintk(SAA716x_DEBUG, 0, "\n");
-	dprintk(SAA716x_DEBUG, 0,
-		"    ---------------- SAA%02x ROM Dump end ---------------------\n\n",
-		saa716x->pdev->device);
-
-	err = saa716x_get_offset(saa716x, buf, &offset);
-	if (err != 0) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Descriptor not found <%d>", err);
-		return err;
-	}
-	offset += 5;
-	saa716x->id_offst = offset;
-	/* Get header */
-	err = saa716x_eeprom_header(saa716x, &rom_header, buf, &offset);
-	if (err != 0) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Header Read failed <%d>", err);
-		return -1;
-	}
-	saa716x->id_len = rom_header.data_size;
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(saa716x_dump_eeprom);
-
-static void saa716x_descriptor_dbg(struct saa716x_dev *saa716x,
-				   u8 *buf,
-				   u32 *offset,
-				   u8 size,
-				   u8 ext_size)
-{
-	int i;
-
-	dprintk(SAA716x_DEBUG, 0, "       ");
-	for (i = 0; i < 49; i++)
-		dprintk(SAA716x_DEBUG, 0, "-");
-
-	for (i = 0; i < size + ext_size; i++) {
-		if ((i % 16) == 0)
-			dprintk(SAA716x_DEBUG, 0, "\n      ");
-		if ((i %  8) == 0)
-			dprintk(SAA716x_DEBUG, 0, " ");
-		if ((i %  4) == 0)
-			dprintk(SAA716x_DEBUG, 0, " ");
-
-		dprintk(SAA716x_DEBUG, 0, "%02x ", buf[*offset + i]);
-	}
-
-	dprintk(SAA716x_DEBUG, 0, "\n       ");
-	for (i = 0; i < 49; i++)
-		dprintk(SAA716x_DEBUG, 0, "-");
-	dprintk(SAA716x_DEBUG, 0, "\n");
-
-}
-
-static int saa716x_decoder_info(struct saa716x_dev *saa716x,
-				u8 *buf,
-				u32 *offset)
-{
-	struct saa716x_decoder_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_decoder_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_decoder_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_decoder_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext Data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_gpio_info(struct saa716x_dev *saa716x,
-			     u8 *buf,
-			     u32 *offset)
-{
-	struct saa716x_gpio_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_gpio_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_gpio_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_gpio_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Pins=%d\n",
-		saa716x->pdev->device,
-		header.pins);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-
-	return 0;
-}
-
-static int saa716x_video_decoder_info(struct saa716x_dev *saa716x,
-				      u8 *buf,
-				      u32 *offset)
-{
-	struct saa716x_video_decoder_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_video_decoder_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_video_decoder_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_video_decoder_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: PORT 0=0x%02x\n",
-		saa716x->pdev->device,
-		header.video_port0);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: PORT 1=0x%02x\n",
-		saa716x->pdev->device,
-		header.video_port1);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: PORT 2=0x%02x\n",
-		saa716x->pdev->device,
-		header.video_port2);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: VBI PORT ID=0x%02x\n",
-		saa716x->pdev->device,
-		header.vbi_port_id);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Video PORT Type=0x%02x\n",
-		saa716x->pdev->device,
-		header.video_port_type);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: VBI PORT Type=0x%02x\n",
-		saa716x->pdev->device,
-		header.vbi_port_type);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Encoder PORT Type=0x%02x\n",
-		saa716x->pdev->device,
-		header.encoder_port_type);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Video Output=0x%02x\n",
-		saa716x->pdev->device,
-		header.video_output);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: VBI Output=0x%02x\n",
-		saa716x->pdev->device,
-		header.vbi_output);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Encoder Output=0x%02x\n",
-		saa716x->pdev->device,
-		header.encoder_output);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_audio_decoder_info(struct saa716x_dev *saa716x,
-				      u8 *buf,
-				      u32 *offset)
-{
-	struct saa716x_audio_decoder_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_audio_decoder_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_audio_decoder_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_audio_decoder_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_event_source_info(struct saa716x_dev *saa716x,
-				     u8 *buf,
-				     u32 *offset)
-{
-	struct saa716x_evsrc_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_evsrc_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_evsrc_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_evsrc_hdr));
-
-		return -1;
-	}
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_crossbar_info(struct saa716x_dev *saa716x,
-				 u8 *buf,
-				 u32 *offset)
-{
-	struct saa716x_xbar_hdr header;
-	struct saa716x_xbar_pair_info pair_info;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_xbar_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_xbar_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_xbar_hdr));
-
-		return -1;
-	}
-
-	memcpy(&pair_info, &buf[*offset], sizeof (struct saa716x_xbar_pair_info));
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Pairs=%d\n",
-		saa716x->pdev->device,
-		header.pair_inputs);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data + (sizeof (struct saa716x_xbar_pair_info) * header.pair_inputs);
-	return 0;
-}
-
-static int saa716x_tuner_info(struct saa716x_dev *saa716x,
-			      u8 *buf,
-			      u32 *offset)
-{
-	struct saa716x_tuner_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_tuner_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_tuner_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_tuner_hdr));
-
-		return -1;
-	}
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_pll_info(struct saa716x_dev *saa716x,
-			    u8 *buf,
-			    u32 *offset)
-{
-	struct saa716x_pll_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_pll_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_pll_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_pll_hdr));
-
-		return -1;
-	}
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_channel_decoder_info(struct saa716x_dev *saa716x,
-					u8 *buf,
-					u32 *offset)
-{
-	struct saa716x_channel_decoder_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_channel_decoder_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_channel_decoder_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_channel_decoder_hdr));
-
-		return -1;
-	}
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_encoder_info(struct saa716x_dev *saa716x,
-				u8 *buf,
-				u32 *offset)
-{
-	struct saa716x_encoder_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_encoder_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_encoder_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_encoder_hdr));
-
-		return -1;
-	}
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_ir_info(struct saa716x_dev *saa716x,
-			   u8 *buf,
-			   u32 *offset)
-{
-	struct saa716x_ir_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_ir_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_ir_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_ir_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_eeprom_info(struct saa716x_dev *saa716x,
-			       u8 *buf,
-			       u32 *offset)
-{
-	struct saa716x_eeprom_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_eeprom_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_eeprom_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_eeprom_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_filter_info(struct saa716x_dev *saa716x,
-			       u8 *buf,
-			       u32 *offset)
-{
-	struct saa716x_filter_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_filter_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_filter_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_filter_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_streamdev_info(struct saa716x_dev *saa716x,
-				  u8 *buf,
-				  u32 *offset)
-{
-	struct saa716x_streamdev_hdr header;
-
-	memcpy(&header, &buf[*offset], sizeof (struct saa716x_streamdev_hdr));
-	saa716x_descriptor_dbg(saa716x, buf, offset, header.size, header.ext_data);
-	if (header.size != sizeof (struct saa716x_streamdev_hdr)) {
-		dprintk(SAA716x_ERROR, 1,
-			"ERROR: Header size mismatch! Read size=%d bytes, Expected=%zu",
-			header.size,
-			sizeof (struct saa716x_streamdev_hdr));
-
-		return -1;
-	}
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		header.size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n",
-		saa716x->pdev->device,
-		header.ext_data);
-
-	*offset += header.size + header.ext_data;
-	return 0;
-}
-
-static int saa716x_unknown_device_info(struct saa716x_dev *saa716x,
-				       u8 *buf,
-				       u32 *offset)
-{
-	u8 size;
-	u8 ext_size = 0;
-
-	size = buf[*offset];
-	if (size > 1)
-		ext_size = buf[*offset + size -1];
-
-	saa716x_descriptor_dbg(saa716x, buf, offset, size, ext_size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		size);
-
-	dprintk(SAA716x_DEBUG, 0,
-		"        SAA%02x ROM: Ext data=%d bytes\n\n",
-		saa716x->pdev->device,
-		ext_size);
-
-	*offset += size + ext_size;
-	return 0;
-}
-
-
-static void saa716x_device_dbg(struct saa716x_dev *saa716x,
-			       u8 *buf,
-			       u32 *offset,
-			       u8 size,
-			       u8 ext_size,
-			       u8 addr_size)
-{
-	int i;
-
-	dprintk(SAA716x_DEBUG, 0, "   ");
-	for (i = 0; i < 53; i++)
-		dprintk(SAA716x_DEBUG, 0, "-");
-
-	for (i = 0; i < size + ext_size + addr_size; i++) {
-		if ((i % 16) == 0)
-			dprintk(SAA716x_DEBUG, 0, "\n  ");
-		if ((i %  8) == 0)
-			dprintk(SAA716x_DEBUG, 0, " ");
-		if ((i %  4) == 0)
-			dprintk(SAA716x_DEBUG, 0, " ");
-
-		dprintk(SAA716x_DEBUG, 0, "%02x ", buf[*offset + i]);
-	}
-
-	dprintk(SAA716x_DEBUG, 0, "\n   ");
-	for (i = 0; i < 53; i++)
-		dprintk(SAA716x_DEBUG, 0, "-");
-	dprintk(SAA716x_DEBUG, 0, "\n");
-
-}
-
-
-static int saa716x_device_info(struct saa716x_dev *saa716x,
-			       struct saa716x_devinfo *device,
-			       u8 *buf,
-			       u32 *offset)
-{
-	u8 address = 0;
-
-	memcpy(device, &buf[*offset], sizeof (struct saa716x_devinfo));
-	if (device->struct_size != sizeof (struct saa716x_devinfo)) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Device size mismatch! Read=%d bytes, expected=%zu bytes",
-		device->struct_size,
-		sizeof (struct saa716x_devinfo));
-
-		return -1;
-	}
-
-	saa716x_device_dbg(saa716x,
-			   buf,
-			   offset,
-			   device->struct_size,
-			   device->extd_data_size,
-			   device->addr_size);
-
-	*offset += device->struct_size;
-
-	if (device->addr_size) {
-		address = buf[*offset];
-		address >>= 1;
-		*offset += device->addr_size;
-	}
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Device @ 0x%02x\n",
-		saa716x->pdev->device,
-		address);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Size=%d bytes\n",
-		saa716x->pdev->device,
-		device->struct_size);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Device ID=0x%02x\n",
-		saa716x->pdev->device,
-		device->device_id);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Master ID=0x%02x\n",
-		saa716x->pdev->device,
-		device->master_devid);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Bus ID=0x%02x\n",
-		saa716x->pdev->device,
-		device->master_busid);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Device type=0x%02x\n",
-		saa716x->pdev->device,
-		device->device_type);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Implementation ID=0x%02x\n",
-		saa716x->pdev->device,
-		device->implem_id);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Path ID=0x%02x\n",
-		saa716x->pdev->device,
-		device->path_id);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: GPIO ID=0x%02x\n",
-		saa716x->pdev->device,
-		device->gpio_id);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Address=%d bytes\n",
-		saa716x->pdev->device,
-		device->addr_size);
-
-	dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: Extended data=%d bytes\n\n",
-		saa716x->pdev->device,
-		device->extd_data_size);
-
-	if (device->extd_data_size) {
-		u32 mask;
-
-		mask = 0x00000001;
-		while (mask) {
-			if (device->device_type & mask) {
-				switch (mask) {
-				case DECODER_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found decoder device\n",
-						saa716x->pdev->device);
-
-					saa716x_decoder_info(saa716x, buf, offset);
-					break;
-
-				case GPIO_SOURCE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found GPIO device\n",
-						saa716x->pdev->device);
-
-					saa716x_gpio_info(saa716x, buf, offset);
-					break;
-
-				case VIDEO_DECODER:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Video Decoder device\n",
-						saa716x->pdev->device);
-
-					saa716x_video_decoder_info(saa716x, buf, offset);
-					break;
-
-				case AUDIO_DECODER:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Audio Decoder device\n",
-						saa716x->pdev->device);
-
-					saa716x_audio_decoder_info(saa716x, buf, offset);
-					break;
-
-				case EVENT_SOURCE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Event source\n",
-						saa716x->pdev->device);
-
-					saa716x_event_source_info(saa716x, buf, offset);
-					break;
-
-				case CROSSBAR:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Crossbar device\n",
-						saa716x->pdev->device);
-
-					saa716x_crossbar_info(saa716x, buf, offset);
-					break;
-
-				case TUNER_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Tuner device\n",
-						saa716x->pdev->device);
-
-					saa716x_tuner_info(saa716x, buf, offset);
-					break;
-
-				case PLL_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found PLL device\n",
-						saa716x->pdev->device);
-
-					saa716x_pll_info(saa716x, buf, offset);
-					break;
-
-				case CHANNEL_DECODER:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Channel Demodulator device\n",
-						saa716x->pdev->device);
-
-					saa716x_channel_decoder_info(saa716x, buf, offset);
-					break;
-
-				case RDS_DECODER:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found RDS Decoder device\n",
-						saa716x->pdev->device);
-
-					saa716x_unknown_device_info(saa716x, buf, offset);
-					break;
-
-				case ENCODER_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Encoder device\n",
-						saa716x->pdev->device);
-
-					saa716x_encoder_info(saa716x, buf, offset);
-					break;
-
-				case IR_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found IR device\n",
-						saa716x->pdev->device);
-
-					saa716x_ir_info(saa716x, buf, offset);
-					break;
-
-				case EEPROM_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found EEPROM device\n",
-						saa716x->pdev->device);
-
-					saa716x_eeprom_info(saa716x, buf, offset);
-					break;
-
-				case NOISE_FILTER:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Noise filter device\n",
-						saa716x->pdev->device);
-
-					saa716x_filter_info(saa716x, buf, offset);
-					break;
-
-				case LNx_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found LNx device\n",
-						saa716x->pdev->device);
-
-					saa716x_unknown_device_info(saa716x, buf, offset);
-					break;
-
-				case STREAM_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found streaming device\n",
-						saa716x->pdev->device);
-
-					saa716x_streamdev_info(saa716x, buf, offset);
-					break;
-
-				case CONFIGSPACE_DEVICE:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found Configspace device\n",
-						saa716x->pdev->device);
-
-					saa716x_unknown_device_info(saa716x, buf, offset);
-					break;
-
-				default:
-					dprintk(SAA716x_DEBUG, 0,
-						"        SAA%02x ROM: Found unknown device\n",
-						saa716x->pdev->device);
-
-					saa716x_unknown_device_info(saa716x, buf, offset);
-					break;
-				}
-			}
-			mask <<= 1;
-		}
-	}
-
-	dprintk(SAA716x_DEBUG, 0, "\n");
-
-	return 0;
-}
-
-int saa716x_eeprom_data(struct saa716x_dev *saa716x)
-{
-	struct saa716x_romhdr rom_header;
-	struct saa716x_devinfo *device;
-
-	u8 buf[1024];
-	int i, ret = 0;
-	u32 offset = 0;
-
-	/* dump */
-	ret = saa716x_read_rombytes(saa716x, saa716x->id_offst, saa716x->id_len + 8, buf);
-	if (ret < 0) {
-		dprintk(SAA716x_ERROR, 1, "EEPROM Read error <%d>", ret);
-		goto err0;
-	}
-
-	/* Get header */
-	ret = saa716x_eeprom_header(saa716x, &rom_header, buf, &offset);
-	if (ret != 0) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Header Read failed <%d>", ret);
-		goto err0;
-	}
-
-	/* allocate for device info */
-	device = kzalloc(sizeof (struct saa716x_devinfo) * rom_header.devices, GFP_KERNEL);
-	if (device == NULL) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: out of memory");
-		goto err0;
-	}
-
-	for (i = 0; i < rom_header.devices; i++) {
-		dprintk(SAA716x_DEBUG, 0, "    SAA%02x ROM: ===== Device %d =====\n",
-			saa716x->pdev->device,
-			i);
-
-		ret = saa716x_device_info(saa716x, &device[i], buf, &offset);
-		if (ret != 0) {
-			dprintk(SAA716x_ERROR, 1, "ERROR: Device info read failed <%d>", ret);
-			goto err1;
-		}
-	}
-
-	kfree(device);
-
-	return 0;
-
-err1:
-	kfree(device);
-
-err0:
-	return ret;
-}
-EXPORT_SYMBOL_GPL(saa716x_eeprom_data);
diff --git a/drivers/media/pci/saa716x/saa716x_rom.h b/drivers/media/pci/saa716x/saa716x_rom.h
deleted file mode 100644
index 6bb317fcc2290..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_rom.h
+++ /dev/null
@@ -1,253 +0,0 @@
-#ifndef __SAA716x_ROM_H
-#define __SAA716x_ROM_H
-
-
-#define MSB(__x)	((__x >> 8) & 0xff)
-#define LSB(__x)	(__x & 0xff)
-
-#define DUMP_BYTES	0xf0
-#define DUMP_OFFST	0x000
-
-struct saa716x_dev;
-
-struct saa716x_romhdr {
-	u16	header_size;
-	u8	compression;
-	u8	version;
-	u16	data_size;
-	u8	devices;
-	u8	checksum;
-} __attribute__((packed));
-
-struct saa716x_devinfo {
-	u8	struct_size;
-	u8	device_id;
-	u8	master_devid;
-	u8	master_busid;
-	u32	device_type;
-	u16	implem_id;
-	u8	path_id;
-	u8	gpio_id;
-	u16	addr_size;
-	u16	extd_data_size;
-} __attribute__((packed));
-
-enum saa716x_device_types {
-	DECODER_DEVICE		= 0x00000001,
-	GPIO_SOURCE		= 0x00000002,
-	VIDEO_DECODER		= 0x00000004,
-	AUDIO_DECODER		= 0x00000008,
-	EVENT_SOURCE		= 0x00000010,
-	CROSSBAR		= 0x00000020,
-	TUNER_DEVICE		= 0x00000040,
-	PLL_DEVICE		= 0x00000080,
-	CHANNEL_DECODER		= 0x00000100,
-	RDS_DECODER		= 0x00000200,
-	ENCODER_DEVICE		= 0x00000400,
-	IR_DEVICE		= 0x00000800,
-	EEPROM_DEVICE		= 0x00001000,
-	NOISE_FILTER		= 0x00002000,
-	LNx_DEVICE		= 0x00004000,
-	STREAM_DEVICE		= 0x00010000,
-	CONFIGSPACE_DEVICE	= 0x80000000
-};
-
-struct saa716x_decoder_hdr {
-	u8 size;
-	u8 ext_data;
-};
-
-struct saa716x_decoder_info {
-	struct saa716x_decoder_hdr decoder_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_gpio_hdr {
-	u8 size;
-	u8 pins;
-	u8 rsvd;
-	u8 ext_data;
-};
-
-struct saa716x_gpio_info {
-	struct saa716x_gpio_hdr gpio_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_video_decoder_hdr {
-	u8 size;
-	u8 video_port0;
-	u8 video_port1;
-	u8 video_port2;
-	u8 vbi_port_id;
-	u8 video_port_type;
-	u8 vbi_port_type;
-	u8 encoder_port_type;
-	u8 video_output;
-	u8 vbi_output;
-	u8 encoder_output;
-	u8 ext_data;
-};
-
-struct saa716x_video_decoder_info {
-	struct saa716x_video_decoder_hdr decoder_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_audio_decoder_hdr {
-	u8 size;
-	u8 port;
-	u8 output;
-	u8 ext_data;
-};
-
-struct saa716x_audio_decoder_info {
-	struct saa716x_audio_decoder_hdr decoder_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_evsrc_hdr {
-	u8 size;
-	u8 master_devid;
-	u16 condition_id;
-	u8 rsvd;
-	u8 ext_data;
-};
-
-struct saa716x_evsrc_info {
-	struct saa716x_evsrc_hdr evsrc_hdr;
-	u8 *ext_data;
-};
-
-enum saa716x_input_pair_type {
-	TUNER_SIF	= 0x00,
-	TUNER_LINE	= 0x01,
-	TUNER_SPDIF	= 0x02,
-	TUNER_NONE	= 0x03,
-	CVBS_LINE	= 0x04,
-	CVBS_SPDIF	= 0x05,
-	CVBS_NONE	= 0x06,
-	YC_LINE		= 0x07,
-	YC_SPDIF	= 0x08,
-	YC_NONE		= 0x09,
-	YPbPr_LINE	= 0x0a,
-	YPbPr_SPDIF	= 0x0b,
-	YPbPr_NONE	= 0x0c,
-	NO_LINE		= 0x0d,
-	NO_SPDIF	= 0x0e,
-	RGB_LINE	= 0x0f,
-	RGB_SPDIF	= 0x10,
-	RGB_NONE	= 0x11
-};
-
-struct saa716x_xbar_pair_info {
-	u8 pair_input_type;
-	u8 video_input_id;
-	u8 audio_input_id;
-};
-
-struct saa716x_xbar_hdr {
-	u8 size;
-	u8 pair_inputs;
-	u8 pair_route_default;
-	u8 ext_data;
-};
-
-struct saa716x_xbar_info {
-	struct saa716x_xbar_hdr xbar_hdr;
-	struct saa716x_xbar_pair_info *pair_info;
-	u8 *ext_data;
-};
-
-struct saa716x_tuner_hdr {
-	u8 size;
-	u8 ext_data;
-};
-
-struct saa716x_tuner_info {
-	struct saa716x_tuner_hdr tuner_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_pll_hdr {
-	u8 size;
-	u8 ext_data;
-};
-
-struct saa716x_pll_info {
-	struct saa716x_pll_hdr pll_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_channel_decoder_hdr {
-	u8 size;
-	u8 port;
-	u8 ext_data;
-};
-
-struct saa716x_channel_decoder_info {
-	struct saa716x_channel_decoder_hdr channel_dec_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_encoder_hdr {
-	u8 size;
-	u8 stream_port0;
-	u8 stream_port1;
-	u8 ext_data;
-};
-
-struct saa716x_encoder_info {
-	struct saa716x_encoder_hdr encoder_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_ir_hdr {
-	u8 size;
-	u8 ir_caps;
-	u8 ext_data;
-};
-
-struct saa716x_ir_info {
-	struct saa716x_ir_hdr ir_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_eeprom_hdr {
-	u8 size;
-	u8 rel_device;
-	u8 ext_data;
-};
-
-struct saa716x_eeprom_info {
-	struct saa716x_eeprom_hdr eeprom_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_filter_hdr {
-	u8 size;
-	u8 video_decoder;
-	u8 audio_decoder;
-	u8 event_source;
-	u8 ext_data;
-};
-
-struct saa716x_filter_info {
-	struct saa716x_filter_hdr filter_hdr;
-	u8 *ext_data;
-};
-
-struct saa716x_streamdev_hdr {
-	u8 size;
-	u8 ext_data;
-};
-
-struct saa716x_streamdev_info {
-	struct saa716x_streamdev_hdr streamdev_hdr;
-	u8 *ext_data;
-};
-
-extern int saa716x_dump_eeprom(struct saa716x_dev *saa716x);
-extern int saa716x_eeprom_data(struct saa716x_dev *saa716x);
-
-#endif /* __SAA716x_ROM_H */

From 602e26e24b2aa1e91ed1fe26b474cd73fb373ab0 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 25 Nov 2018 20:43:30 +0100
Subject: [PATCH 298/364] saa716x: remove unused audio input port code

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile      |  1 -
 drivers/media/pci/saa716x/saa716x_aip.c | 20 --------------------
 drivers/media/pci/saa716x/saa716x_aip.h |  9 ---------
 3 files changed, 30 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_aip.c
 delete mode 100644 drivers/media/pci/saa716x/saa716x_aip.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index e789c39323652..953de41eacdc3 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -3,7 +3,6 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_cgu.o	\
 			   saa716x_dma.o	\
 			   saa716x_vip.o	\
-			   saa716x_aip.o	\
 			   saa716x_boot.o	\
 			   saa716x_fgpi.o	\
 			   saa716x_adap.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_aip.c b/drivers/media/pci/saa716x/saa716x_aip.c
deleted file mode 100644
index 3bdb265024a68..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_aip.c
+++ /dev/null
@@ -1,20 +0,0 @@
-#include <linux/kernel.h>
-
-#include "saa716x_mod.h"
-#include "saa716x_aip_reg.h"
-#include "saa716x_spi.h"
-#include "saa716x_aip.h"
-#include "saa716x_priv.h"
-
-int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev)
-{
-	return SAA716x_EPRD(dev, AI_CTL) == 0 ? 0 : -1;
-}
-EXPORT_SYMBOL_GPL(saa716x_aip_status);
-
-void saa716x_aip_disable(struct saa716x_dev *saa716x)
-{
-	SAA716x_EPWR(AI0, AI_CTL, 0x00);
-	SAA716x_EPWR(AI1, AI_CTL, 0x00);
-}
-EXPORT_SYMBOL_GPL(saa716x_aip_disable);
diff --git a/drivers/media/pci/saa716x/saa716x_aip.h b/drivers/media/pci/saa716x/saa716x_aip.h
deleted file mode 100644
index 36277b7f80176..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_aip.h
+++ /dev/null
@@ -1,9 +0,0 @@
-#ifndef __SAA716x_AIP_H
-#define __SAA716x_AIP_H
-
-struct saa716x_dev;
-
-extern int saa716x_aip_status(struct saa716x_dev *saa716x, u32 dev);
-extern void saa716x_aip_disable(struct saa716x_dev *saa716x);
-
-#endif /* __SAA716x_AIP_H */

From b173d5b1fdceee7dd5603d5077f74be958cf7870 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 01:41:42 +0100
Subject: [PATCH 299/364] saa716x: remove unused spi code

Move the simple spi polling write to saa716x_ff_main.c .

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile          |   3 +-
 drivers/media/pci/saa716x/saa716x_adap.c    |   1 -
 drivers/media/pci/saa716x/saa716x_boot.c    |   1 -
 drivers/media/pci/saa716x/saa716x_budget.c  |   1 -
 drivers/media/pci/saa716x/saa716x_cgu.c     |   1 -
 drivers/media/pci/saa716x/saa716x_dma.c     |   1 -
 drivers/media/pci/saa716x/saa716x_ff_ir.c   |   1 -
 drivers/media/pci/saa716x/saa716x_ff_main.c |  15 +-
 drivers/media/pci/saa716x/saa716x_fgpi.c    |   1 -
 drivers/media/pci/saa716x/saa716x_gpio.c    |   1 -
 drivers/media/pci/saa716x/saa716x_greg.c    |   1 -
 drivers/media/pci/saa716x/saa716x_hybrid.c  |   1 -
 drivers/media/pci/saa716x/saa716x_i2c.c     |   1 -
 drivers/media/pci/saa716x/saa716x_pci.c     |   1 -
 drivers/media/pci/saa716x/saa716x_priv.h    |   5 -
 drivers/media/pci/saa716x/saa716x_spi.c     | 313 --------------------
 drivers/media/pci/saa716x/saa716x_spi.h     |  23 --
 17 files changed, 14 insertions(+), 357 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_spi.c
 delete mode 100644 drivers/media/pci/saa716x/saa716x_spi.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 953de41eacdc3..096329eca1cca 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -7,8 +7,7 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_fgpi.o	\
 			   saa716x_adap.o	\
 			   saa716x_gpio.o	\
-			   saa716x_greg.o	\
-			   saa716x_spi.o
+			   saa716x_greg.o
 
 saa716x_ff-objs		:= saa716x_ff_main.o	\
 			   saa716x_ff_cmd.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 7069c6079e6db..e6031f6afbad1 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -6,7 +6,6 @@
 #include <media/dvb_frontend.h>
 
 #include "saa716x_mod.h"
-#include "saa716x_spi.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
 #include "saa716x_gpio.h"
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 31eb844712e7f..4877465adde2f 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -12,7 +12,6 @@
 #include "saa716x_dcs_reg.h"
 
 #include "saa716x_boot.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 static void saa716x_core_reset(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index b5f115f8e6cca..9fbdd1213d2f5 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -29,7 +29,6 @@
 #include "saa716x_i2c.h"
 #include "saa716x_budget.h"
 #include "saa716x_gpio.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 #include "mb86a16.h"
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 53d11a4eb29ba..4ec6aa7fd9bc7 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -3,7 +3,6 @@
 #include "saa716x_mod.h"
 
 #include "saa716x_cgu_reg.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 u32 cgu_clk[14] = {
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 328aca5bc8dd1..8a7e6addfe996 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -6,7 +6,6 @@
 #include <asm/pgtable.h>
 
 #include "saa716x_dma.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 /*  Allocates one page of memory, which is stores the data of one
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 9a20feab4043b..d4c2fd1c3cb23 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -23,7 +23,6 @@
 #include <linux/types.h>
 #include <linux/input.h>
 
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 #include "saa716x_ff.h"
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 82023a275d3f7..76977e76e8628 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -37,7 +37,6 @@
 #include "saa716x_adap.h"
 #include "saa716x_boot.h"
 #include "saa716x_gpio.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 #include "saa716x_ff.h"
@@ -66,6 +65,18 @@ MODULE_PARM_DESC(video_capture, "capture digital video coming from STi7109: 0=of
 
 #define DRIVER_NAME	"SAA716x FF"
 
+static void saa716x_ff_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
+{
+	int i, rounds;
+
+	for (i = 0; i < length; i++) {
+		SAA716x_EPWR(SPI, SPI_DATA, data[i]);
+		for (rounds = 0; rounds < 5000; rounds++)
+			if (SAA716x_EPRD(SPI, SPI_STATUS) & SPI_TRANSFER_FLAG)
+				break;
+	}
+}
+
 static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 {
 	struct sti7109_dev *sti7109 = saa716x->priv;
@@ -118,7 +129,7 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
 	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA DONE=%d", fpgaDone);
 	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA write bitstream");
-	saa716x_spi_write(saa716x, fw->data, fw->size);
+	saa716x_ff_spi_write(saa716x, fw->data, fw->size);
 	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA write bitstream done");
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
 	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA DONE=%d", fpgaDone);
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index ec21dd53612b3..0a56399111c5d 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -8,7 +8,6 @@
 
 #include "saa716x_dma.h"
 #include "saa716x_fgpi.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 static const u32 fgpi_ch[] = {
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index 62b6112d38af2..5cb50286f5c42 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -6,7 +6,6 @@
 #include "saa716x_gpio_reg.h"
 
 #include "saa716x_gpio.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 void saa716x_gpio_init(struct saa716x_dev *saa716x)
diff --git a/drivers/media/pci/saa716x/saa716x_greg.c b/drivers/media/pci/saa716x/saa716x_greg.c
index d93a3b8325881..b7cd170c15985 100644
--- a/drivers/media/pci/saa716x/saa716x_greg.c
+++ b/drivers/media/pci/saa716x/saa716x_greg.c
@@ -4,7 +4,6 @@
 
 #include "saa716x_greg_reg.h"
 #include "saa716x_greg.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 static u32 g_save[12];
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 63ea82b6a43c5..9abf02c31b682 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -29,7 +29,6 @@
 #include "saa716x_i2c.h"
 #include "saa716x_hybrid.h"
 #include "saa716x_gpio.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 #include "zl10353.h"
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 506089fc9c613..69ac5a7e28e45 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -13,7 +13,6 @@
 #include "saa716x_cgu_reg.h"
 
 #include "saa716x_i2c.h"
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 #define SAA716x_I2C_TXFAIL	(I2C_ERROR_IBE		| \
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 07466c19a990a..e9d88f914b1d7 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -8,7 +8,6 @@
 #include <linux/sched.h>
 #include <linux/interrupt.h>
 
-#include "saa716x_spi.h"
 #include "saa716x_priv.h"
 
 #define DRIVER_NAME				"SAA716x Core"
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 2d1769f70a9cb..99adb75b515d8 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -12,7 +12,6 @@
 #include "saa716x_cgu.h"
 #include "saa716x_dma.h"
 #include "saa716x_fgpi.h"
-#include "saa716x_spi.h"
 #include "saa716x_vip.h"
 
 #include <media/dvbdev.h>
@@ -67,7 +66,6 @@
 
 struct saa716x_dev;
 struct saa716x_adapter;
-struct saa716x_spi_config;
 
 struct saa716x_adap_config {
 	u32				ts_port;
@@ -125,9 +123,6 @@ struct saa716x_dev {
 	u32				i2c_rate; /* init time */
 	u32				I2C_DEV[2];
 
-	struct saa716x_spi_state	*saa716x_spi;
-	struct saa716x_spi_config	spi_config;
-
 	struct saa716x_adapter		saa716x_adap[SAA716x_MAX_ADAPTERS];
 	struct mutex			adap_lock;
 	struct saa716x_cgu		cgu;
diff --git a/drivers/media/pci/saa716x/saa716x_spi.c b/drivers/media/pci/saa716x/saa716x_spi.c
deleted file mode 100644
index 885945438e7f1..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_spi.c
+++ /dev/null
@@ -1,313 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/device.h>
-#include <linux/spinlock.h>
-#include <linux/io.h>
-
-#include <linux/spi/spi.h>
-
-#include "saa716x_mod.h"
-
-#include "saa716x_spi_reg.h"
-#include "saa716x_spi.h"
-#include "saa716x_priv.h"
-
-#if 0 // not needed atm
-int saa716x_spi_irqevent(struct saa716x_dev *saa716x)
-{
-	u32 stat, mask;
-
-	BUG_ON(saa716x == NULL);
-
-	stat = SAA716x_EPRD(SPI, SPI_STATUS);
-	mask = SAA716x_EPRD(SPI, SPI_CONTROL_REG) & SPI_SERIAL_INTER_ENABLE;
-	if ((!stat && !mask))
-		return -1;
-
-	dprintk(SAA716x_DEBUG, 0, "SPI event: Stat=<%02x>", stat);
-
-	if (stat & SPI_TRANSFER_FLAG)
-		dprintk(SAA716x_DEBUG, 0, "<TXFER> ");
-	if (stat & SPI_WRITE_COLLISSION)
-		dprintk(SAA716x_DEBUG, 0, "<WCOLL> ");
-	if (stat & SPI_READ_OVERRUN)
-		dprintk(SAA716x_DEBUG, 0, "<ROFLW> ");
-	if (stat & SPI_MODE_FAULT)
-		dprintk(SAA716x_DEBUG, 0, "<FAULT> ");
-	if (stat & SPI_SLAVE_ABORT)
-		dprintk(SAA716x_DEBUG, 0, "<ABORT> ");
-
-	return 0;
-}
-#endif
-
-void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
-{
-	int i;
-	u32 value;
-	int rounds;
-
-	for (i = 0; i < length; i++) {
-		SAA716x_EPWR(SPI, SPI_DATA, data[i]);
-		rounds = 0;
-		value = SAA716x_EPRD(SPI, SPI_STATUS);
-
-		while ((value & SPI_TRANSFER_FLAG) == 0 && rounds < 5000) {
-			value = SAA716x_EPRD(SPI, SPI_STATUS);
-			rounds++;
-		}
-	}
-}
-EXPORT_SYMBOL_GPL(saa716x_spi_write);
-
-#if 0 // not needed atm
-static int saa716x_spi_status(struct saa716x_dev *saa716x, u32 *status)
-{
-	u32 stat;
-
-	stat = SAA716x_EPRD(SPI, SPI_STATUS);
-
-	if (stat & SPI_TRANSFER_FLAG)
-		dprintk(SAA716x_DEBUG, 1, "Transfer complete <%02x>", stat);
-
-	if (stat & SPI_WRITE_COLLISSION)
-		dprintk(SAA716x_DEBUG, 1, "Write collission <%02x>", stat);
-
-	if (stat & SPI_READ_OVERRUN)
-		dprintk(SAA716x_DEBUG, 1, "Read Overrun <%02x>", stat);
-
-	if (stat & SPI_MODE_FAULT)
-		dprintk(SAA716x_DEBUG, 1, "MODE fault <%02x>", stat);
-
-	if (stat & SPI_SLAVE_ABORT)
-		dprintk(SAA716x_DEBUG, 1, "SLAVE abort <%02x>", stat);
-
-	*status = stat;
-
-	return 0;
-}
-
-#define SPI_CYCLE_TIMEOUT	100
-
-static int saa716x_spi_xfer(struct saa716x_dev *saa716x, u32 *data)
-{
-	u32 i, status = 0;
-
-	/* write data and wait for completion */
-	SAA716x_EPWR(SPI, SPI_DATA, data[i]);
-	for (i = 0; i < SPI_CYCLE_TIMEOUT; i++) {
-		msleep(10);
-		saa716x_spi_status(saa716x, &status);
-#if 0
-		if (status & SPI_TRANSFER_FLAG) {
-			data = SAA716x_EPRD(SPI, SPI_DATA);
-			return 0;
-		}
-#endif
-		if (status & (SPI_WRITE_COLLISSION	|
-			      SPI_READ_OVERRUN		|
-			      SPI_MODE_FAULT		|
-			      SPI_SLAVE_ABORT))
-
-			return -EIO;
-	}
-
-	return -EIO;
-}
-
-#if 0
-static int saa716x_spi_wr(struct saa716x_dev *saa716x, const u8 *data, int length)
-{
-	struct saa716x_spi_config *config = saa716x->spi_config;
-	u32 gpio_mask;
-	int ret = 0;
-
-	// protect against multiple access
-	spin_lock(&saa716x->gpio_lock);
-
-	// configure the module
-	saa716x_spi_config(saa716x);
-
-    // check input
-
-	// change polarity of GPIO if active high
-	if (config->active_hi) {
-		select  = 1;
-		release = 0;
-	}
-
-	// configure GPIO, first set output register to low selected level
-	saa716x_gpio_write(saa716x, gpio, select);
-
-	// set mode register to register controlled (0)
-	gpio_mask = (1 << gpio);
-	saa716x_set_gpio_mode(saa716x, gpio_mask, 0);
-
-	// configure bit as output (0)
-	saa716x_gpio_ctl(saa716x, gpio_mask, 0);
-
-	// wait at least 500ns before sending a byte
-	msleep(1);
-
-	// send command
-	for (i = 0; i < dwCommandSize; i++) {
-		ucData   = 0;
-//		dwStatus = TransferData(pucCommand[i], &ucData);
-		ret = saa716x_spi_xfer(saa716x);
-		//tmDBGPRINTEx(4,("Info: Command 0x%x ", pucCommand[i]  ));
-
-		/* If command length > 1, disable CS at the end of each command.
-		 * But after the last command byte CS must be left active!
-		 */
-		if ((dwCommandSize > 1) && (i < dwCommandSize - 1)) {
-
-			saa716x_gpio_write(saa716x, gpio, release);
-			msleep(1); /* 500 nS minimum */
-			saa716x_gpio_write(saa716x, gpio, select);
-		}
-
-		if (ret != 0) {
-			dprintk(SAA716x_ERROR, 1, "ERROR: Command transfer failed");
-			msleep(1); /* 500 nS minimum */
-			saa716x_gpio_write(saa716x, gpio, release); /* release GPIO */
-			spin_unlock(&saa716x->spi_lock);
-			return ret;
-		}
-
-		if (config->LSB_first)
-			dwTransferByte++;
-		else
-			dwTransferByte--;
-	}
-
-// assume that the byte order is the same as the bit order
-
-// send read address
-
-// send data
-
-// wait at least 500ns before releasing slave
-
-// release GPIO pin
-
-	// release spinlock
-	spin_unlock(&saa716x->gpio_lock);
-}
-#endif
-
-#define MODEBITS (SPI_CPOL | SPI_CPHA)
-
-static int saa716x_spi_setup(struct spi_device *spi)
-{
-	struct spi_master *master		= spi->master;
-	struct saa716x_spi_state *saa716x_spi	= spi_master_get_devdata(master);
-	struct saa716x_dev *saa716x		= saa716x_spi->saa716x;
-	struct saa716x_spi_config *config	= &saa716x->spi_config;
-
-	u8 control = 0;
-
-	if (spi->mode & ~MODEBITS) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Unsupported MODE bits <%x>",
-			spi->mode & ~MODEBITS);
-
-		return -EINVAL;
-	}
-
-	SAA716x_EPWR(SPI, SPI_CLOCK_COUNTER, config->clk_count);
-
-	control |= SPI_MODE_SELECT; /* SPI Master */
-
-	if (config->LSB_first)
-		control |= SPI_LSB_FIRST_ENABLE;
-
-	if (config->clk_pol)
-		control |= SPI_CLOCK_POLARITY;
-
-	if (config->clk_pha)
-		control |= SPI_CLOCK_PHASE;
-
-	SAA716x_EPWR(SPI, SPI_CONTROL_REG, control);
-
-	return 0;
-}
-
-static void saa716x_spi_cleanup(struct spi_device *spi)
-{
-
-}
-
-static int saa716x_spi_transfer(struct spi_device *spi, struct spi_message *msg)
-{
-	struct spi_master *master		= spi->master;
-	struct saa716x_spi_state *saa716x_spi	= spi_master_get_devdata(master);
-	struct saa716x_dev *saa716x		= saa716x_spi->saa716x;
-	unsigned long flags;
-
-	spin_lock_irqsave(&saa716x->gpio_lock, flags);
-#if 0
-	if (saa716x_spi->run == QUEUE_STOPPED) {
-		spin_unlock_irqrestore(&saa716x_spi->lock, flags);
-		return -ESHUTDOWN;
-	}
-
-	msg->actual_length = 0;
-	msg->status = -EINPROGRESS;
-	msg->state = START_STATE;
-
-	list_add_tail(&msg->queue, &saa716x_spi->queue);
-
-	if (saa716x_spi->run == QUEUE_RUNNING && !saa716x_spi->busy)
-		queue_work(saa716x_spi->workqueue, &saa716x_spi->pump_messages);
-#endif
-	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
-
-	return 0;
-}
-
-int saa716x_spi_init(struct saa716x_dev *saa716x)
-{
-	struct pci_dev *pdev = saa716x->pdev;
-	struct spi_master *master;
-	struct saa716x_spi_state *saa716x_spi;
-	int ret;
-
-	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core",
-		saa716x->pdev->device);
-
-	master = spi_alloc_master(&pdev->dev, sizeof (struct saa716x_spi_state));
-	if (master == NULL) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Cannot allocate SPI Master!");
-		return -ENOMEM;
-	}
-
-	saa716x_spi		= spi_master_get_devdata(master);
-	saa716x_spi->master	= master;
-	saa716x_spi->saa716x	= saa716x;
-	saa716x->saa716x_spi	= saa716x_spi;
-
-	master->bus_num		= pdev->bus->number;
-	master->num_chipselect	= 1; /* TODO! use config */
-	master->cleanup		= saa716x_spi_cleanup;
-	master->setup		= saa716x_spi_setup;
-	master->transfer	= saa716x_spi_transfer;
-
-	ret = spi_register_master(master);
-	if (ret != 0) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: registering SPI Master!");
-		goto err;
-	}
-err:
-	spi_master_put(master);
-	return ret;
-}
-EXPORT_SYMBOL(saa716x_spi_init);
-
-void saa716x_spi_exit(struct saa716x_dev *saa716x)
-{
-	struct saa716x_spi_state *saa716x_spi = saa716x->saa716x_spi;
-
-	spi_unregister_master(saa716x_spi->master);
-	dprintk(SAA716x_DEBUG, 1, "SAA%02x SPI succesfully removed", saa716x->pdev->device);
-}
-EXPORT_SYMBOL(saa716x_spi_exit);
-#endif
-
diff --git a/drivers/media/pci/saa716x/saa716x_spi.h b/drivers/media/pci/saa716x/saa716x_spi.h
deleted file mode 100644
index 0060c22b8e39c..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_spi.h
+++ /dev/null
@@ -1,23 +0,0 @@
-#ifndef __SAA716x_SPI_H
-#define __SAA716x_SPI_H
-
-struct saa716x_dev;
-
-struct saa716x_spi_config {
-	u8 clk_count;
-	u8 clk_pol:1;
-	u8 clk_pha:1;
-	u8 LSB_first:1;
-};
-
-struct saa716x_spi_state {
-	struct spi_master *master;
-	struct saa716x_dev *saa716x;
-};
-
-extern void saa716x_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length);
-
-extern int saa716x_spi_init(struct saa716x_dev *saa716x);
-extern void saa716x_spi_exit(struct saa716x_dev *saa716x);
-
-#endif /* __SAA716x_SPI_H */

From 4ff2a0c63a9dec1096c33d9dd49089332a836bc9 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 02:56:13 +0100
Subject: [PATCH 300/364] saa716x: remove unused audio function prototypes

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 99adb75b515d8..dcca33914c5f9 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -145,10 +145,6 @@ struct saa716x_dev {
 extern int saa716x_pci_init(struct saa716x_dev *saa716x);
 extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
 
-/* AUDIO */
-extern int saa716x_audio_init(struct saa716x_dev *saa716x);
-extern void saa716x_audio_exit(struct saa716x_dev *saa716x);
-
 /* Boot */
 extern int saa716x_core_boot(struct saa716x_dev *saa716x);
 extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);

From f245ccee50b3729f0d0e9bdc30ce67c5b8928d89 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 03:08:25 +0100
Subject: [PATCH 301/364] saa716x: remove boot function prototypes from
 saa716x_priv.h

All we need is available in saa716x_boot.h .

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index dcca33914c5f9..753306dc724ac 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -145,10 +145,6 @@ struct saa716x_dev {
 extern int saa716x_pci_init(struct saa716x_dev *saa716x);
 extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
 
-/* Boot */
-extern int saa716x_core_boot(struct saa716x_dev *saa716x);
-extern int saa716x_jetpack_init(struct saa716x_dev *saa716x);
-
 /* Remote control */
 extern int saa716x_ir_init(struct saa716x_dev *saa716x);
 extern void saa716x_ir_exit(struct saa716x_dev *saa716x);

From ec90386371a8d1458c936647e790c628a489b6cb Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 22:19:44 +0100
Subject: [PATCH 302/364] saa716x: remove unused greg code

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Makefile       |  3 +-
 drivers/media/pci/saa716x/saa716x_greg.c | 41 ------------------------
 drivers/media/pci/saa716x/saa716x_greg.h |  9 ------
 3 files changed, 1 insertion(+), 52 deletions(-)
 delete mode 100644 drivers/media/pci/saa716x/saa716x_greg.c
 delete mode 100644 drivers/media/pci/saa716x/saa716x_greg.h

diff --git a/drivers/media/pci/saa716x/Makefile b/drivers/media/pci/saa716x/Makefile
index 096329eca1cca..f072683c47d75 100644
--- a/drivers/media/pci/saa716x/Makefile
+++ b/drivers/media/pci/saa716x/Makefile
@@ -6,8 +6,7 @@ saa716x_core-objs	:= saa716x_pci.o	\
 			   saa716x_boot.o	\
 			   saa716x_fgpi.o	\
 			   saa716x_adap.o	\
-			   saa716x_gpio.o	\
-			   saa716x_greg.o
+			   saa716x_gpio.o
 
 saa716x_ff-objs		:= saa716x_ff_main.o	\
 			   saa716x_ff_cmd.o	\
diff --git a/drivers/media/pci/saa716x/saa716x_greg.c b/drivers/media/pci/saa716x/saa716x_greg.c
deleted file mode 100644
index b7cd170c15985..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_greg.c
+++ /dev/null
@@ -1,41 +0,0 @@
-#include <linux/kernel.h>
-
-#include "saa716x_mod.h"
-
-#include "saa716x_greg_reg.h"
-#include "saa716x_greg.h"
-#include "saa716x_priv.h"
-
-static u32 g_save[12];
-
-void saa716x_greg_save(struct saa716x_dev *saa716x)
-{
-	g_save[0] = SAA716x_EPRD(GREG, GREG_SUBSYS_CONFIG);
-	g_save[1] = SAA716x_EPRD(GREG, GREG_MSI_BAR_PMCSR);
-	g_save[2] = SAA716x_EPRD(GREG, GREG_PMCSR_DATA_1);
-	g_save[3] = SAA716x_EPRD(GREG, GREG_PMCSR_DATA_2);
-	g_save[4] = SAA716x_EPRD(GREG, GREG_VI_CTRL);
-	g_save[5] = SAA716x_EPRD(GREG, GREG_FGPI_CTRL);
-	g_save[6] = SAA716x_EPRD(GREG, GREG_RSTU_CTRL);
-	g_save[7] = SAA716x_EPRD(GREG, GREG_I2C_CTRL);
-	g_save[8] = SAA716x_EPRD(GREG, GREG_OVFLW_CTRL);
-	g_save[9] = SAA716x_EPRD(GREG, GREG_TAG_ACK_FLEN);
-
-	g_save[10] = SAA716x_EPRD(GREG, GREG_VIDEO_IN_CTRL);
-}
-
-void saa716x_greg_restore(struct saa716x_dev *saa716x)
-{
-	SAA716x_EPWR(GREG, GREG_SUBSYS_CONFIG, g_save[0]);
-	SAA716x_EPWR(GREG, GREG_MSI_BAR_PMCSR, g_save[1]);
-	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_1, g_save[2]);
-	SAA716x_EPWR(GREG, GREG_PMCSR_DATA_2, g_save[3]);
-	SAA716x_EPWR(GREG, GREG_VI_CTRL, g_save[4]);
-	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, g_save[5]);
-	SAA716x_EPWR(GREG, GREG_RSTU_CTRL, g_save[6]);
-	SAA716x_EPWR(GREG, GREG_I2C_CTRL, g_save[7]);
-	SAA716x_EPWR(GREG, GREG_OVFLW_CTRL, g_save[8]);
-	SAA716x_EPWR(GREG, GREG_TAG_ACK_FLEN, g_save[9]);
-
-	SAA716x_EPWR(GREG, GREG_VIDEO_IN_CTRL, g_save[10]);
-}
diff --git a/drivers/media/pci/saa716x/saa716x_greg.h b/drivers/media/pci/saa716x/saa716x_greg.h
deleted file mode 100644
index 487595e5cfcdd..0000000000000
--- a/drivers/media/pci/saa716x/saa716x_greg.h
+++ /dev/null
@@ -1,9 +0,0 @@
-#ifndef __SAA716x_GREG_H
-#define __SAA716x_GREG_H
-
-struct saa716x_dev;
-
-extern void saa716x_greg_save(struct saa716x_dev *saa716x);
-extern void saa716x_greg_restore(struct saa716x_dev *saa716x);
-
-#endif /* __SAA716x_GREG_H */

From 77c8e39cb82b2e8505579964d1b06c8b496aa2ab Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 9 Dec 2018 16:03:15 +0100
Subject: [PATCH 303/364] saa716x: remove unused gpio code

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c |  1 -
 drivers/media/pci/saa716x/saa716x_gpio.c | 64 ------------------------
 drivers/media/pci/saa716x/saa716x_gpio.h |  7 ---
 3 files changed, 72 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index e6031f6afbad1..8d9d53838da06 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -8,7 +8,6 @@
 #include "saa716x_mod.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
-#include "saa716x_gpio.h"
 #include "saa716x_priv.h"
 
 
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index 5cb50286f5c42..8e7c69c13766f 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -14,70 +14,6 @@ void saa716x_gpio_init(struct saa716x_dev *saa716x)
 }
 EXPORT_SYMBOL_GPL(saa716x_gpio_init);
 
-int saa716x_get_gpio_mode(struct saa716x_dev *saa716x, u32 *config)
-{
-	*config = SAA716x_EPRD(GPIO, GPIO_WR_MODE);
-
-	return 0;
-}
-
-int saa716x_set_gpio_mode(struct saa716x_dev *saa716x, u32 mask, u32 config)
-{
-	unsigned long flags;
-	u32 reg;
-
-	spin_lock_irqsave(&saa716x->gpio_lock, flags);
-	reg = SAA716x_EPRD(GPIO, GPIO_WR_MODE);
-	reg &= ~mask;
-	reg |= (config & mask);
-	SAA716x_EPWR(GPIO, GPIO_WR_MODE, reg);
-	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
-
-	return 0;
-}
-
-u32 saa716x_gpio_rd(struct saa716x_dev *saa716x)
-{
-	return SAA716x_EPRD(GPIO, GPIO_RD);
-}
-
-void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data)
-{
-	SAA716x_EPWR(GPIO, GPIO_WR, data);
-}
-
-void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 mask, u32 bits)
-{
-	unsigned long flags;
-	u32 reg;
-
-	spin_lock_irqsave(&saa716x->gpio_lock, flags);
-
-	reg  = SAA716x_EPRD(GPIO, GPIO_OEN);
-	reg &= mask;
-	reg |= bits;
-	SAA716x_EPWR(GPIO, GPIO_OEN, reg);
-
-	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
-}
-
-void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits)
-{
-	unsigned long flags;
-	u32 reg;
-
-	spin_lock_irqsave(&saa716x->gpio_lock, flags);
-
-	reg  = SAA716x_EPRD(GPIO, GPIO_WR);
-	reg &= ~bits;
-	/* TODO ! add maskable config bits in here */
-	/* reg |= (config->mask & bits) */
-	reg |= bits;
-	SAA716x_EPWR(GPIO, GPIO_WR, reg);
-
-	spin_unlock_irqrestore(&saa716x->gpio_lock, flags);
-}
-
 void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio)
 {
 	uint32_t value;
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index a82580b4b60f1..b33b1278a8c34 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -10,13 +10,6 @@
 struct saa716x_dev;
 
 extern void saa716x_gpio_init(struct saa716x_dev *saa716x);
-
-extern u32 saa716x_gpio_rd(struct saa716x_dev *saa716x);
-extern void saa716x_gpio_wr(struct saa716x_dev *saa716x, u32 data);
-extern void saa716x_gpio_ctl(struct saa716x_dev *saa716x, u32 mask, u32 bits);
-
-extern void saa716x_gpio_bits(struct saa716x_dev *saa716x, u32 bits);
-
 extern void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio);
 extern void saa716x_gpio_set_input(struct saa716x_dev *saa716x, int gpio);
 extern void saa716x_gpio_set_mode(struct saa716x_dev *saa716x, int gpio, int mode);

From 1ababf070254a2fa46ca6ef694712ce1243d5b1b Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 9 Dec 2018 17:11:07 +0100
Subject: [PATCH 304/364] saa716x: remove unused private config and adapter
 entries

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 1 -
 drivers/media/pci/saa716x/saa716x_i2c.h  | 2 +-
 drivers/media/pci/saa716x/saa716x_priv.h | 4 ----
 3 files changed, 1 insertion(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 4877465adde2f..371ed246ba4be 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -98,7 +98,6 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 		SAA716x_EPWR(GPIO, GPIO_WR,  0x01000000); /* Enable decoder */
 		break;
 	case SAA7160:
-		saa716x->i2c_rate = SAA716x_I2C_RATE_100;
 		break;
 	default:
 		dprintk(SAA716x_ERROR, 1, "Unknown device (0x%02x)", saa716x->pdev->device);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 067bda549804c..c76cc02019c50 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -32,7 +32,7 @@ struct saa716x_i2c {
 	struct saa716x_dev		*saa716x;
 	u8				i2c_dev;
 
-	enum saa716x_i2c_rate		i2c_rate; /* run time */
+	enum saa716x_i2c_rate		i2c_rate;
 	enum saa716x_i2c_mode		i2c_mode;
 	u32				block_size; /* block size for buffered
 						       mode, 1 otherwise */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 753306dc724ac..07cd989c96ecd 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -76,7 +76,6 @@ struct saa716x_config {
 	char				*dev_type;
 
 	int				adapters;
-	int				frontends;
 
 	int (*frontend_attach)(struct saa716x_adapter *adapter, int count);
 	irqreturn_t (*irq_handler)(int irq, void *dev_id);
@@ -120,7 +119,6 @@ struct saa716x_dev {
 
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
-	u32				i2c_rate; /* init time */
 	u32				I2C_DEV[2];
 
 	struct saa716x_adapter		saa716x_adap[SAA716x_MAX_ADAPTERS];
@@ -133,8 +131,6 @@ struct saa716x_dev {
 	struct saa716x_fgpi_stream_port	fgpi[4];
 	struct saa716x_vip_stream_port	vip[2];
 
-	u32				id_offst;
-	u32				id_len;
 	void				*priv;
 
 	/* remote control */

From 7139c31a361208fd8e1ba70caf6422c85698ef67 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 9 Dec 2018 20:16:11 +0100
Subject: [PATCH 305/364] saa716x: remove decoder resets from common code

These gpio controlled resets of external ICs are already handled
in saa716x_hybrid.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_boot.c | 22 ----------------------
 1 file changed, 22 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 371ed246ba4be..639cfb1fef233 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -82,28 +82,6 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 	 */
 	SAA716x_EPWR(DCS, DCSC_CTRL, ENABLE_TIMEOUT);
 
-	switch (saa716x->pdev->device) {
-	case SAA7162:
-		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
-		SAA716x_EPWR(GPIO, GPIO_OEN, 0xfcffffff);
-		SAA716x_EPWR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
-		msleep(10);
-		SAA716x_EPWR(GPIO, GPIO_WR,  0x03000000); /* Enable decoders */
-		break;
-	case SAA7161:
-		dprintk(SAA716x_DEBUG, 1, "SAA%02x Decoder disable", saa716x->pdev->device);
-		SAA716x_EPWR(GPIO, GPIO_OEN, 0xfeffffff);
-		SAA716x_EPWR(GPIO, GPIO_WR,  0x00000000); /* Disable decoders */
-		msleep(10);
-		SAA716x_EPWR(GPIO, GPIO_WR,  0x01000000); /* Enable decoder */
-		break;
-	case SAA7160:
-		break;
-	default:
-		dprintk(SAA716x_ERROR, 1, "Unknown device (0x%02x)", saa716x->pdev->device);
-		return -ENODEV;
-	}
-
 	/* General setup for MMU */
 	SAA716x_EPWR(MMU, MMU_MODE, 0x14);
 	dprintk(SAA716x_DEBUG, 1, "SAA%02x Jetpack Successfully initialized", saa716x->pdev->device);

From ae2577ce077cf51b43b74b2a3f975bfd27a19975 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 9 Dec 2018 20:45:45 +0100
Subject: [PATCH 306/364] saa716x: move function headers from priv.h to own
 header files

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  | 1 +
 drivers/media/pci/saa716x/saa716x_ff_ir.h   | 8 ++++++++
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 ++
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 1 +
 drivers/media/pci/saa716x/saa716x_pci.h     | 7 +++++++
 drivers/media/pci/saa716x/saa716x_priv.h    | 9 ---------
 6 files changed, 19 insertions(+), 9 deletions(-)
 create mode 100644 drivers/media/pci/saa716x/saa716x_ff_ir.h
 create mode 100644 drivers/media/pci/saa716x/saa716x_pci.h

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9fbdd1213d2f5..87bf654d7f400 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -27,6 +27,7 @@
 #include "saa716x_adap.h"
 #include "saa716x_boot.h"
 #include "saa716x_i2c.h"
+#include "saa716x_pci.h"
 #include "saa716x_budget.h"
 #include "saa716x_gpio.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.h b/drivers/media/pci/saa716x/saa716x_ff_ir.h
new file mode 100644
index 0000000000000..1da41302c3fd5
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.h
@@ -0,0 +1,8 @@
+#ifndef __SAA716x_FF_IR_H
+#define __SAA716x_FF_IR_H
+
+extern int saa716x_ir_init(struct saa716x_dev *saa716x);
+extern void saa716x_ir_exit(struct saa716x_dev *saa716x);
+extern void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd);
+
+#endif /* __SAA716x_FF_IR_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 76977e76e8628..18d850d06359b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -36,11 +36,13 @@
 
 #include "saa716x_adap.h"
 #include "saa716x_boot.h"
+#include "saa716x_pci.h"
 #include "saa716x_gpio.h"
 #include "saa716x_priv.h"
 
 #include "saa716x_ff.h"
 #include "saa716x_ff_cmd.h"
+#include "saa716x_ff_ir.h"
 #include "saa716x_ff_phi.h"
 
 #include "stv6110x.h"
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 9abf02c31b682..d08d14912e81e 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -27,6 +27,7 @@
 #include "saa716x_adap.h"
 #include "saa716x_boot.h"
 #include "saa716x_i2c.h"
+#include "saa716x_pci.h"
 #include "saa716x_hybrid.h"
 #include "saa716x_gpio.h"
 #include "saa716x_priv.h"
diff --git a/drivers/media/pci/saa716x/saa716x_pci.h b/drivers/media/pci/saa716x/saa716x_pci.h
new file mode 100644
index 0000000000000..7407fd12a606d
--- /dev/null
+++ b/drivers/media/pci/saa716x/saa716x_pci.h
@@ -0,0 +1,7 @@
+#ifndef __SAA716x_PCI_H
+#define __SAA716x_PCI_H
+
+extern int saa716x_pci_init(struct saa716x_dev *saa716x);
+extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
+
+#endif /* __SAA716x_PCI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 07cd989c96ecd..763e31e10bb59 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -137,13 +137,4 @@ struct saa716x_dev {
 	void				*ir_priv;
 };
 
-/* PCI */
-extern int saa716x_pci_init(struct saa716x_dev *saa716x);
-extern void saa716x_pci_exit(struct saa716x_dev *saa716x);
-
-/* Remote control */
-extern int saa716x_ir_init(struct saa716x_dev *saa716x);
-extern void saa716x_ir_exit(struct saa716x_dev *saa716x);
-extern void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd);
-
 #endif /* __SAA716x_PRIV_H */

From 71d5c9efa134c96e4bfbe1a9a1ed955f5c521496 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 7 Dec 2018 23:40:09 +0100
Subject: [PATCH 307/364] saa716x_hybrid: remove incomplete Avermedia H-788
 support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  1 -
 drivers/media/pci/saa716x/saa716x_hybrid.c | 23 ----------------------
 drivers/media/pci/saa716x/saa716x_hybrid.h |  1 -
 3 files changed, 25 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 9de307cd543a4..5194d54f3cf64 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -45,7 +45,6 @@ config DVB_SAA716X_HYBRID
 	  Support for the SAA7160/1/2 based Hybrid PCIe DVB cards
 	  Currently supported devices are:
 
-	  * Avermedia H-788 (DVB-T)
 	  * Avermedia HC-82 (DVB-T)
 	  * NXP Reference (Atlantis) (DVB-T x2)
 	  * NXP Reference (Nemo) (DVB-T)
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index d08d14912e81e..ac2a3d07602f6 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -551,33 +551,10 @@ static struct saa716x_config saa716x_averhc82_config = {
 	.i2c_rate		= SAA716x_I2C_RATE_100,
 };
 
-#define SAA716x_MODEL_AVERMEDIA_H788	"Avermedia H788"
-#define SAA716x_DEV_AVERMEDIA_H788	"DVB-T + Analaog"
-
-static int saa716x_averh88_frontend_attach(struct saa716x_adapter *adapter, int count)
-{
-	struct saa716x_dev *saa716x = adapter->saa716x;
-
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
-	return -ENODEV;
-}
-
-static struct saa716x_config saa716x_averh788_config = {
-	.model_name		= SAA716x_MODEL_AVERMEDIA_H788,
-	.dev_type		= SAA716x_DEV_AVERMEDIA_H788,
-	.adapters		= 1,
-	.frontend_attach	= saa716x_averh88_frontend_attach,
-	.irq_handler		= saa716x_hybrid_pci_irq,
-	.i2c_rate		= SAA716x_I2C_RATE_100,
-};
-
 static const struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
 	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
-	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_H788, SAA7160, &saa716x_averh788_config),
 	MAKE_ENTRY(KWORLD, KWORLD_DVB_T_PE310, SAA7162, &saa716x_atlantis_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7162, &saa716x_atlantis_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index df34a59b2aee7..ace24d4eb3e88 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -7,7 +7,6 @@
 
 #define TWINHAN_VP_6090		0x0027
 #define AVERMEDIA_HC82		0x2355
-#define AVERMEDIA_H788		0x1455
 #define KWORLD_DVB_T_PE310	0x7521
 
 #endif /* __SAA716x_HYBRID_H */

From e9d4087768344d36db35ea2df139b6b394f4e895 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 7 Dec 2018 23:43:07 +0100
Subject: [PATCH 308/364] saa716x_hybrid: remove incomplete Avermedia HC-82
 support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  2 --
 drivers/media/pci/saa716x/saa716x_hybrid.c | 38 ----------------------
 drivers/media/pci/saa716x/saa716x_hybrid.h |  2 --
 3 files changed, 42 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 5194d54f3cf64..d04aff3a5bd45 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -36,7 +36,6 @@ config DVB_SAA716X_BUDGET
 config DVB_SAA716X_HYBRID
 	tristate "SAA7160/1/2 based Hybrid PCIe cards (DVB + Analog)"
 	depends on SAA716X_CORE && DVB_CORE
-	select DVB_ZL10353 if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_MB86A16 if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_TDA1004X if MEDIA_SUBDRV_AUTOSELECT
 	select MEDIA_TUNER_TDA827X if MEDIA_SUBDRV_AUTOSELECT
@@ -45,7 +44,6 @@ config DVB_SAA716X_HYBRID
 	  Support for the SAA7160/1/2 based Hybrid PCIe DVB cards
 	  Currently supported devices are:
 
-	  * Avermedia HC-82 (DVB-T)
 	  * NXP Reference (Atlantis) (DVB-T x2)
 	  * NXP Reference (Nemo) (DVB-T)
 	  * Twinhan/Azurewave VP-6090 (DVB-S x2, DVB-T x2)
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index ac2a3d07602f6..b53f9f2131ac9 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -32,7 +32,6 @@
 #include "saa716x_gpio.h"
 #include "saa716x_priv.h"
 
-#include "zl10353.h"
 #include "mb86a16.h"
 #include "tda1004x.h"
 #include "tda827x.h"
@@ -515,46 +514,9 @@ static struct saa716x_config saa716x_nemo_config = {
 	}
 };
 
-
-#define SAA716x_MODEL_AVERMEDIA_HC82	"Avermedia HC82 Express-54"
-#define SAA716x_DEV_AVERMEDIA_HC82	"DVB-T + Analog"
-
-#if 0
-static struct zl10353_config saa716x_averhc82_zl10353_config = {
-	.demod_address		= 0x1f,
-	.adc_clock		= 450560,
-	.if2			= 361667,
-	.no_tuner		= 1,
-	.parallel_ts		= 1,
-};
-#endif
-
-static int saa716x_averhc82_frontend_attach(struct saa716x_adapter *adapter, int count)
-{
-	struct saa716x_dev *saa716x = adapter->saa716x;
-
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
-//	adapter->fe = zl10353_attach(&saa716x_averhc82_zl10353_config, &i2c->i2c_adapter);
-
-
-	return 0;
-}
-
-static struct saa716x_config saa716x_averhc82_config = {
-	.model_name		= SAA716x_MODEL_AVERMEDIA_HC82,
-	.dev_type		= SAA716x_DEV_AVERMEDIA_HC82,
-	.adapters		= 1,
-	.frontend_attach	= saa716x_averhc82_frontend_attach,
-	.irq_handler		= saa716x_hybrid_pci_irq,
-	.i2c_rate		= SAA716x_I2C_RATE_100,
-};
-
 static const struct pci_device_id saa716x_hybrid_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
-	MAKE_ENTRY(AVERMEDIA, AVERMEDIA_HC82, SAA7160, &saa716x_averhc82_config),
 	MAKE_ENTRY(KWORLD, KWORLD_DVB_T_PE310, SAA7162, &saa716x_atlantis_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7162, &saa716x_atlantis_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7160, &saa716x_nemo_config),
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index ace24d4eb3e88..fad41be4c0671 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -2,11 +2,9 @@
 #define __SAA716x_HYBRID_H
 
 #define TWINHAN_TECHNOLOGIES	0x1822
-#define AVERMEDIA		0x1461
 #define KWORLD			0x17DE
 
 #define TWINHAN_VP_6090		0x0027
-#define AVERMEDIA_HC82		0x2355
 #define KWORLD_DVB_T_PE310	0x7521
 
 #endif /* __SAA716x_HYBRID_H */

From 0f462a0b0bd85c896d8d22130e14e2e9d0707c03 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 00:00:25 +0100
Subject: [PATCH 309/364] saa716x_hybrid: remove incomplete Twinhan VP-6090
 DVB-S support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  1 -
 drivers/media/pci/saa716x/saa716x_hybrid.c | 40 +---------------------
 2 files changed, 1 insertion(+), 40 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index d04aff3a5bd45..1abf8327174c4 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -36,7 +36,6 @@ config DVB_SAA716X_BUDGET
 config DVB_SAA716X_HYBRID
 	tristate "SAA7160/1/2 based Hybrid PCIe cards (DVB + Analog)"
 	depends on SAA716X_CORE && DVB_CORE
-	select DVB_MB86A16 if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_TDA1004X if MEDIA_SUBDRV_AUTOSELECT
 	select MEDIA_TUNER_TDA827X if MEDIA_SUBDRV_AUTOSELECT
 
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index b53f9f2131ac9..de9eee773820f 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -32,7 +32,6 @@
 #include "saa716x_gpio.h"
 #include "saa716x_priv.h"
 
-#include "mb86a16.h"
 #include "tda1004x.h"
 #include "tda827x.h"
 
@@ -187,7 +186,7 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 
 /*
  * Twinhan/Azurewave VP-6090
- * DVB-S Frontend: 2x MB86A16
+ * DVB-S Frontend: 2x MB86A16 - not supported yet
  * DVB-T Frontend: 2x TDA10046 + TDA8275
  */
 #define SAA716x_MODEL_TWINHAN_VP6090	"Twinhan/Azurewave VP-6090"
@@ -212,33 +211,6 @@ static struct tda1004x_config tda1004x_vp6090_config = {
 	.request_firmware	= tda1004x_vp6090_request_firmware,
 };
 
-static int vp6090_dvbs_set_voltage(struct dvb_frontend *fe, enum fe_sec_voltage voltage)
-{
-	struct saa716x_dev *saa716x = fe->dvb->priv;
-
-	switch (voltage) {
-	case SEC_VOLTAGE_13:
-		dprintk(SAA716x_ERROR, 1, "Polarization=[13V]");
-		break;
-	case SEC_VOLTAGE_18:
-		dprintk(SAA716x_ERROR, 1, "Polarization=[18V]");
-		break;
-	case SEC_VOLTAGE_OFF:
-		dprintk(SAA716x_ERROR, 1, "Frontend (dummy) POWERDOWN");
-		break;
-	default:
-		dprintk(SAA716x_ERROR, 1, "Invalid = (%d)", (u32 ) voltage);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-struct mb86a16_config vp6090_mb86a16_config = {
-	.demod_address	= 0x08,
-	.set_voltage	= vp6090_dvbs_set_voltage,
-};
-
 static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
@@ -254,17 +226,7 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	saa716x_gpio_write(saa716x, 11, 1);
 	saa716x_gpio_write(saa716x, 10, 1);
 	msleep(100);
-#if 0
-	dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
-	adapter->fe = mb86a16_attach(&vp6090_mb86a16_config, &i2c->i2c_adapter);
-	if (adapter->fe) {
-		dprintk(SAA716x_ERROR, 1, "found MB86A16 DVB-S/DSS frontend @0x%02x",
-			vp6090_mb86a16_config.demod_address);
 
-	} else {
-		goto exit;
-	}
-#endif
 	adapter->fe = tda10046_attach(&tda1004x_vp6090_config, &i2c->i2c_adapter);
 	if (adapter->fe == NULL) {
 		dprintk(SAA716x_ERROR, 1, "Frontend attach failed");

From b918544a27d82054905b3a530bea9c5bc8e32f06 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 00:20:01 +0100
Subject: [PATCH 310/364] saa716x_budget: remove incomplete KNC1 Dual S2
 support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  1 -
 drivers/media/pci/saa716x/saa716x_budget.c | 24 ----------------------
 drivers/media/pci/saa716x/saa716x_budget.h |  3 ---
 3 files changed, 28 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 1abf8327174c4..04053d6e5bf8e 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -26,7 +26,6 @@ config DVB_SAA716X_BUDGET
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
 	  Currently supported devices are:
 
-	  * KNC1 Dual S2 (DVB-S, DVB-S/S2)
 	  * Twinhan/Azurewave VP-1028 (DVB-S)
 	  * Twinhan/Azurewave VP-3071 (DVB-T x2)
 	  * Twinhan/Azurewave VP-6002 (DVB-S)
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 87bf654d7f400..bd53fad12af8d 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -307,29 +307,6 @@ static struct saa716x_config saa716x_vp6002_config = {
 };
 
 
-#define SAA716x_MODEL_KNC1_DUALS2	"KNC One Dual S2"
-#define SAA716x_DEV_KNC1_DUALS2		"1xDVB-S + 1xDVB-S/S2"
-
-static int saa716x_knc1_duals2_frontend_attach(struct saa716x_adapter *adapter, int count)
-{
-	struct saa716x_dev *saa716x = adapter->saa716x;
-
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
-	return -ENODEV;
-}
-
-static struct saa716x_config saa716x_knc1_duals2_config = {
-	.model_name		= SAA716x_MODEL_KNC1_DUALS2,
-	.dev_type		= SAA716x_DEV_KNC1_DUALS2,
-	.adapters		= 2,
-	.frontend_attach	= saa716x_knc1_duals2_frontend_attach,
-	.irq_handler		= saa716x_budget_pci_irq,
-	.i2c_rate		= SAA716x_I2C_RATE_100,
-};
-
-
 #define SAA716x_MODEL_SKYSTAR2_EXPRESS_HD	"SkyStar 2 eXpress HD"
 #define SAA716x_DEV_SKYSTAR2_EXPRESS_HD		"DVB-S/S2"
 
@@ -518,7 +495,6 @@ static const struct pci_device_id saa716x_budget_pci_table[] = {
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
-	MAKE_ENTRY(KNC_One, KNC_Dual_S2, SAA7160, &saa716x_knc1_duals2_config),
 	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
 	{ }
 };
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 387c2027850d0..60b0b6f5659ff 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -6,9 +6,6 @@
 #define TWINHAN_VP_1028		0x0044
 #define TWINHAN_VP_6002		0x0047
 
-#define KNC_One			0x1894
-#define KNC_Dual_S2		0x0110
-
 #define TECHNISAT		0x1AE4
 #define SKYSTAR2_EXPRESS_HD	0x0700
 

From adc986758f0bf96c6718047dc64ecf54e90b2bff Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 00:25:01 +0100
Subject: [PATCH 311/364] saa716x_budget: remove incomplete Twinhan VP-6002
 support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  1 -
 drivers/media/pci/saa716x/saa716x_budget.c | 24 ----------------------
 drivers/media/pci/saa716x/saa716x_budget.h |  1 -
 3 files changed, 26 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 04053d6e5bf8e..01cd426290dc2 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -28,7 +28,6 @@ config DVB_SAA716X_BUDGET
 
 	  * Twinhan/Azurewave VP-1028 (DVB-S)
 	  * Twinhan/Azurewave VP-3071 (DVB-T x2)
-	  * Twinhan/Azurewave VP-6002 (DVB-S)
 
 	  Say Y if you own such a device and want to use it.
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index bd53fad12af8d..8a118412c264b 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -284,29 +284,6 @@ static struct saa716x_config saa716x_vp1028_config = {
 };
 
 
-#define SAA716x_MODEL_TWINHAN_VP6002	"Twinhan/Azurewave VP-6002"
-#define SAA716x_DEV_TWINHAN_VP6002	"DVB-S"
-
-static int saa716x_vp6002_frontend_attach(struct saa716x_adapter *adapter, int count)
-{
-	struct saa716x_dev *saa716x = adapter->saa716x;
-
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
-	return -ENODEV;
-}
-
-static struct saa716x_config saa716x_vp6002_config = {
-	.model_name		= SAA716x_MODEL_TWINHAN_VP6002,
-	.dev_type		= SAA716x_DEV_TWINHAN_VP6002,
-	.adapters		= 1,
-	.frontend_attach	= saa716x_vp6002_frontend_attach,
-	.irq_handler		= saa716x_budget_pci_irq,
-	.i2c_rate		= SAA716x_I2C_RATE_100,
-};
-
-
 #define SAA716x_MODEL_SKYSTAR2_EXPRESS_HD	"SkyStar 2 eXpress HD"
 #define SAA716x_DEV_SKYSTAR2_EXPRESS_HD		"DVB-S/S2"
 
@@ -494,7 +471,6 @@ static const struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
-	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6002, SAA7160, &saa716x_vp6002_config), /* VP-6002 */
 	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
 	{ }
 };
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 60b0b6f5659ff..5c75cc825dcc1 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -4,7 +4,6 @@
 #define TWINHAN_TECHNOLOGIES	0x1822
 #define TWINHAN_VP_3071		0x0039
 #define TWINHAN_VP_1028		0x0044
-#define TWINHAN_VP_6002		0x0047
 
 #define TECHNISAT		0x1AE4
 #define SKYSTAR2_EXPRESS_HD	0x0700

From 74b60b6900e67a02c4345bf4cd0d5a6306bf3a03 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 00:37:36 +0100
Subject: [PATCH 312/364] saa716x_budget: remove incomplete Twinhan VP-3071
 support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  1 -
 drivers/media/pci/saa716x/saa716x_budget.c | 23 ----------------------
 drivers/media/pci/saa716x/saa716x_budget.h |  1 -
 3 files changed, 25 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 01cd426290dc2..3fcc454d1f015 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -27,7 +27,6 @@ config DVB_SAA716X_BUDGET
 	  Currently supported devices are:
 
 	  * Twinhan/Azurewave VP-1028 (DVB-S)
-	  * Twinhan/Azurewave VP-3071 (DVB-T x2)
 
 	  Say Y if you own such a device and want to use it.
 
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 8a118412c264b..8acd60867499b 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -172,28 +172,6 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 }
 
 
-#define SAA716x_MODEL_TWINHAN_VP3071	"Twinhan/Azurewave VP-3071"
-#define SAA716x_DEV_TWINHAN_VP3071	"2x DVB-T"
-
-static int saa716x_vp3071_frontend_attach(struct saa716x_adapter *adapter, int count)
-{
-	struct saa716x_dev *saa716x = adapter->saa716x;
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
-	return -ENODEV;
-}
-
-static struct saa716x_config saa716x_vp3071_config = {
-	.model_name		= SAA716x_MODEL_TWINHAN_VP3071,
-	.dev_type		= SAA716x_DEV_TWINHAN_VP3071,
-	.adapters		= 2,
-	.frontend_attach	= saa716x_vp3071_frontend_attach,
-	.irq_handler		= saa716x_budget_pci_irq,
-	.i2c_rate		= SAA716x_I2C_RATE_100,
-};
-
-
 #define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
 #define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
 
@@ -470,7 +448,6 @@ static struct saa716x_config skystar2_express_hd_config = {
 static const struct pci_device_id saa716x_budget_pci_table[] = {
 
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
-	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_3071, SAA7160, &saa716x_vp3071_config), /* VP-3071 */
 	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
 	{ }
 };
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 5c75cc825dcc1..86a750c23d6f8 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -2,7 +2,6 @@
 #define __SAA716x_BUDGET_H
 
 #define TWINHAN_TECHNOLOGIES	0x1822
-#define TWINHAN_VP_3071		0x0039
 #define TWINHAN_VP_1028		0x0044
 
 #define TECHNISAT		0x1AE4

From 42cecfee576abdb0fb0a41602c69c3a66a23fbac Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 00:41:51 +0100
Subject: [PATCH 313/364] saa716x_budget: remove incomplete Twinhan VP-1028
 support

DVB-S set_voltage not supported

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |  3 -
 drivers/media/pci/saa716x/saa716x_budget.c | 93 ----------------------
 drivers/media/pci/saa716x/saa716x_budget.h |  3 -
 3 files changed, 99 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 3fcc454d1f015..77d35cebaa550 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -17,7 +17,6 @@ config SAA716X_CORE
 config DVB_SAA716X_BUDGET
 	tristate "SAA7160/1/2 based Budget PCIe cards (DVB only)"
 	depends on SAA716X_CORE && DVB_CORE
-	select DVB_MB86A16 if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
 
@@ -26,8 +25,6 @@ config DVB_SAA716X_BUDGET
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
 	  Currently supported devices are:
 
-	  * Twinhan/Azurewave VP-1028 (DVB-S)
-
 	  Say Y if you own such a device and want to use it.
 
 config DVB_SAA716X_HYBRID
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 8acd60867499b..615575189982a 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -32,7 +32,6 @@
 #include "saa716x_gpio.h"
 #include "saa716x_priv.h"
 
-#include "mb86a16.h"
 #include "stv6110x.h"
 #include "stv090x.h"
 
@@ -172,96 +171,6 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 }
 
 
-#define SAA716x_MODEL_TWINHAN_VP1028	"Twinhan/Azurewave VP-1028"
-#define SAA716x_DEV_TWINHAN_VP1028	"DVB-S"
-
-static int vp1028_dvbs_set_voltage(struct dvb_frontend *fe, enum fe_sec_voltage voltage)
-{
-	struct saa716x_dev *saa716x = fe->dvb->priv;
-
-	switch (voltage) {
-	case SEC_VOLTAGE_13:
-		dprintk(SAA716x_ERROR, 1, "Polarization=[13V]");
-		break;
-	case SEC_VOLTAGE_18:
-		dprintk(SAA716x_ERROR, 1, "Polarization=[18V]");
-		break;
-	case SEC_VOLTAGE_OFF:
-		dprintk(SAA716x_ERROR, 1, "Frontend (dummy) POWERDOWN");
-		break;
-	default:
-		dprintk(SAA716x_ERROR, 1, "Invalid = (%d)", (u32 ) voltage);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-struct mb86a16_config vp1028_mb86a16_config = {
-	.demod_address	= 0x08,
-	.set_voltage	= vp1028_dvbs_set_voltage,
-};
-
-static int saa716x_vp1028_frontend_attach(struct saa716x_adapter *adapter, int count)
-{
-	struct saa716x_dev *saa716x = adapter->saa716x;
-	struct saa716x_i2c *i2c = &saa716x->i2c[1];
-
-	if (count == 0) {
-
-		mutex_lock(&saa716x->adap_lock);
-
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Power ON", count);
-		saa716x_gpio_set_output(saa716x, 10);
-		msleep(1);
-
-		/* VP-1028 has inverted power supply control */
-		saa716x_gpio_write(saa716x, 10, 1); /* set to standby */
-		saa716x_gpio_write(saa716x, 10, 0); /* switch it on */
-		msleep(100);
-
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Reset", count);
-		saa716x_gpio_set_output(saa716x, 12);
-		msleep(1);
-
-		/* reset demodulator (Active LOW) */
-		saa716x_gpio_write(saa716x, 12, 1);
-		msleep(100);
-		saa716x_gpio_write(saa716x, 12, 0);
-		msleep(100);
-		saa716x_gpio_write(saa716x, 12, 1);
-		msleep(100);
-
-		mutex_unlock(&saa716x->adap_lock);
-
-		dprintk(SAA716x_ERROR, 1, "Probing for MB86A16 (DVB-S/DSS)");
-		adapter->fe = mb86a16_attach(&vp1028_mb86a16_config, &i2c->i2c_adapter);
-		if (adapter->fe) {
-			dprintk(SAA716x_ERROR, 1, "found MB86A16 DVB-S/DSS frontend @0x%02x",
-				vp1028_mb86a16_config.demod_address);
-
-		} else {
-			goto exit;
-		}
-		dprintk(SAA716x_ERROR, 1, "Done!");
-	}
-
-	return 0;
-exit:
-	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
-	return -ENODEV;
-}
-
-static struct saa716x_config saa716x_vp1028_config = {
-	.model_name		= SAA716x_MODEL_TWINHAN_VP1028,
-	.dev_type		= SAA716x_DEV_TWINHAN_VP1028,
-	.adapters		= 1,
-	.frontend_attach	= saa716x_vp1028_frontend_attach,
-	.irq_handler		= saa716x_budget_pci_irq,
-	.i2c_rate		= SAA716x_I2C_RATE_100,
-};
-
-
 #define SAA716x_MODEL_SKYSTAR2_EXPRESS_HD	"SkyStar 2 eXpress HD"
 #define SAA716x_DEV_SKYSTAR2_EXPRESS_HD		"DVB-S/S2"
 
@@ -446,8 +355,6 @@ static struct saa716x_config skystar2_express_hd_config = {
 };
 
 static const struct pci_device_id saa716x_budget_pci_table[] = {
-
-	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
 	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
 	{ }
 };
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 86a750c23d6f8..733726591a0a7 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -1,9 +1,6 @@
 #ifndef __SAA716x_BUDGET_H
 #define __SAA716x_BUDGET_H
 
-#define TWINHAN_TECHNOLOGIES	0x1822
-#define TWINHAN_VP_1028		0x0044
-
 #define TECHNISAT		0x1AE4
 #define SKYSTAR2_EXPRESS_HD	0x0700
 

From a9aa2b895febd4371f780e70b0e41d9d230abec8 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 00:27:53 +0100
Subject: [PATCH 314/364] saa716x_budget: document Technisat Skystar 2 Express
 HD support

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 77d35cebaa550..68972c61bdc20 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -20,11 +20,12 @@ config DVB_SAA716X_BUDGET
 	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
 
-
 	help
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
 	  Currently supported devices are:
 
+	  * Technisat Skystar 2 Express HD
+
 	  Say Y if you own such a device and want to use it.
 
 config DVB_SAA716X_HYBRID

From 20984c28b944e482c30d88b79e7b02a19142ea56 Mon Sep 17 00:00:00 2001
From: Luis Alves <ljalvs@gmail.com>
Date: Fri, 28 Jul 2017 11:25:19 +0200
Subject: [PATCH 315/364] saa716x: Add support for tbs 6281 and tbs 6285 cards.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Tycho Lürsen <tycholursen@gmail.com>
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig          |   5 +
 drivers/media/pci/saa716x/saa716x_adap.c   |  15 ++
 drivers/media/pci/saa716x/saa716x_budget.c | 208 ++++++++++++++++++++-
 drivers/media/pci/saa716x/saa716x_budget.h |   5 +
 drivers/media/pci/saa716x/saa716x_i2c.c    |   7 +-
 drivers/media/pci/saa716x/saa716x_priv.h   |   3 +
 6 files changed, 238 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 68972c61bdc20..2f310d93934a4 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -17,14 +17,19 @@ config SAA716X_CORE
 config DVB_SAA716X_BUDGET
 	tristate "SAA7160/1/2 based Budget PCIe cards (DVB only)"
 	depends on SAA716X_CORE && DVB_CORE
+	select I2C_MUX
 	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_SI2168 if MEDIA_SUBDRV_AUTOSELECT
+	select MEDIA_TUNER_SI2157 if MEDIA_SUBDRV_AUTOSELECT
 
 	help
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
 	  Currently supported devices are:
 
 	  * Technisat Skystar 2 Express HD
+	  * TurboSight 6281 (DVB-T/T2/C)
+	  * TurboSight 6285 (DVB-T/T2/C)
 
 	  Say Y if you own such a device and want to use it.
 
diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 8d9d53838da06..9b19bd3a62f3d 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -268,12 +268,27 @@ EXPORT_SYMBOL(saa716x_dvb_init);
 void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	struct i2c_client *client;
 	int i;
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
 
 		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_port);
 
+		/* remove I2C tuner */
+		client = saa716x_adap->i2c_client_tuner;
+		if (client) {
+			module_put(client->dev.driver->owner);
+			i2c_unregister_device(client);
+		}
+
+		/* remove I2C demod */
+		client = saa716x_adap->i2c_client_demod;
+		if (client) {
+			module_put(client->dev.driver->owner);
+			i2c_unregister_device(client);
+		}
+
 		if (saa716x_adap->fe) {
 			dvb_unregister_frontend(saa716x_adap->fe);
 			dvb_frontend_detach(saa716x_adap->fe);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 615575189982a..a0a0b57fdcc0f 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -34,6 +34,8 @@
 
 #include "stv6110x.h"
 #include "stv090x.h"
+#include "si2168.h"
+#include "si2157.h"
 
 unsigned int verbose;
 module_param(verbose, int, 0644);
@@ -90,9 +92,9 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 	saa716x_gpio_init(saa716x);
 
 	/* set default port mapping */
-	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x04080FA9);
-	/* enable FGPI3 and FGPI1 for TS input from Port 2 and 6 */
-	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x321);
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F0A);
+	/* enable FGPI3, FGPI2, FGPI1 and FGPI0 for TS input from Port 2 and 6 */
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x322);
 
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
@@ -354,8 +356,208 @@ static struct saa716x_config skystar2_express_hd_config = {
 	}
 };
 
+
+#define SAA716x_MODEL_TBS6281		"TurboSight TBS 6281"
+#define SAA716x_DEV_TBS6281		"DVB-T/T2/C"
+
+static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *dev = adapter->saa716x;
+	struct i2c_adapter *i2cadapter;
+	struct i2c_client *client;
+	struct i2c_board_info info;
+	struct si2168_config si2168_config;
+	struct si2157_config si2157_config;
+
+	if (count > 1)
+		goto err;
+
+	/* reset */
+	saa716x_gpio_set_output(dev, count ? 2 : 16);
+	saa716x_gpio_write(dev, count ? 2 : 16, 0);
+	msleep(50);
+	saa716x_gpio_write(dev, count ? 2 : 16, 1);
+	msleep(100);
+
+	/* attach demod */
+	memset(&si2168_config, 0, sizeof(si2168_config));
+	si2168_config.i2c_adapter = &i2cadapter;
+	si2168_config.fe = &adapter->fe;
+	si2168_config.ts_mode = SI2168_TS_PARALLEL;
+	si2168_config.ts_clock_gapped = true;
+	memset(&info, 0, sizeof(struct i2c_board_info));
+	strlcpy(info.type, "si2168", I2C_NAME_SIZE);
+	info.addr = 0x64;
+	info.platform_data = &si2168_config;
+	request_module(info.type);
+	client = i2c_new_device(&dev->i2c[1 - count].i2c_adapter, &info);
+	if (client == NULL || client->dev.driver == NULL) {
+		goto err;
+	}
+	if (!try_module_get(client->dev.driver->owner)) {
+		i2c_unregister_device(client);
+		goto err;
+	}
+	adapter->i2c_client_demod = client;
+
+	/* attach tuner */
+	memset(&si2157_config, 0, sizeof(si2157_config));
+	si2157_config.fe = adapter->fe;
+	si2157_config.if_port = 1;
+	memset(&info, 0, sizeof(struct i2c_board_info));
+	strlcpy(info.type, "si2157", I2C_NAME_SIZE);
+	info.addr = 0x60;
+	info.platform_data = &si2157_config;
+	request_module(info.type);
+	client = i2c_new_device(i2cadapter, &info);
+	if (client == NULL || client->dev.driver == NULL) {
+		module_put(adapter->i2c_client_demod->dev.driver->owner);
+		i2c_unregister_device(adapter->i2c_client_demod);
+		goto err;
+	}
+	if (!try_module_get(client->dev.driver->owner)) {
+		i2c_unregister_device(client);
+		module_put(adapter->i2c_client_demod->dev.driver->owner);
+		i2c_unregister_device(adapter->i2c_client_demod);
+		goto err;
+	}
+	adapter->i2c_client_tuner = client;
+
+	dev_dbg(&dev->pdev->dev, "%s frontend %d attached\n",
+		dev->config->model_name, count);
+
+	return 0;
+err:
+	dev_err(&dev->pdev->dev, "%s frontend %d attach failed\n",
+		dev->config->model_name, count);
+	return -ENODEV;
+}
+
+static struct saa716x_config saa716x_tbs6281_config = {
+	.model_name		= SAA716x_MODEL_TBS6281,
+	.dev_type		= SAA716x_DEV_TBS6281,
+	.adapters		= 2,
+	.frontend_attach	= saa716x_tbs6281_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_400,
+	.i2c_mode		= SAA716x_I2C_MODE_POLLING,
+	.adap_config		= {
+		{
+			/* adapter 0 */
+			.ts_port = 1, /* using FGPI 1 */
+		},
+		{
+			/* adapter 1 */
+			.ts_port = 3, /* using FGPI 3 */
+		},
+	},
+};
+
+#define SAA716x_MODEL_TBS6285		"TurboSight TBS 6285"
+#define SAA716x_DEV_TBS6285		"DVB-T/T2/C"
+
+static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+	struct saa716x_dev *dev = adapter->saa716x;
+	struct i2c_adapter *i2cadapter;
+	struct i2c_client *client;
+	struct i2c_board_info info;
+	struct si2168_config si2168_config;
+	struct si2157_config si2157_config;
+
+	if (count > 3)
+		goto err;
+
+	/* attach demod */
+	memset(&si2168_config, 0, sizeof(si2168_config));
+	si2168_config.i2c_adapter = &i2cadapter;
+	si2168_config.fe = &adapter->fe;
+	si2168_config.ts_mode = SI2168_TS_SERIAL;
+	si2168_config.ts_clock_gapped = true;
+	memset(&info, 0, sizeof(struct i2c_board_info));
+	strlcpy(info.type, "si2168", I2C_NAME_SIZE);
+	info.addr = ((count == 0) || (count == 2)) ? 0x64 : 0x66;
+	info.platform_data = &si2168_config;
+	request_module(info.type);
+	client = i2c_new_device( ((count == 0) || (count == 1)) ?
+		&dev->i2c[1].i2c_adapter : &dev->i2c[0].i2c_adapter,
+		&info);
+	if (client == NULL || client->dev.driver == NULL) {
+		goto err;
+	}
+
+	if (!try_module_get(client->dev.driver->owner)) {
+		i2c_unregister_device(client);
+		goto err;
+	}
+	adapter->i2c_client_demod = client;
+
+	/* attach tuner */
+	memset(&si2157_config, 0, sizeof(si2157_config));
+	si2157_config.fe = adapter->fe;
+	si2157_config.if_port = 1;
+	memset(&info, 0, sizeof(struct i2c_board_info));
+	strlcpy(info.type, "si2157", I2C_NAME_SIZE);
+	info.addr = ((count == 0) || (count == 2)) ? 0x62 : 0x60;
+	info.platform_data = &si2157_config;
+	request_module(info.type);
+	client = i2c_new_device(i2cadapter, &info);
+	if (client == NULL || client->dev.driver == NULL) {
+		module_put(adapter->i2c_client_demod->dev.driver->owner);
+		i2c_unregister_device(adapter->i2c_client_demod);
+		goto err;
+	}
+	if (!try_module_get(client->dev.driver->owner)) {
+		i2c_unregister_device(client);
+		module_put(adapter->i2c_client_demod->dev.driver->owner);
+		i2c_unregister_device(adapter->i2c_client_demod);
+		goto err;
+	}
+	adapter->i2c_client_tuner = client;
+
+	dev_dbg(&dev->pdev->dev, "%s frontend %d attached\n",
+		dev->config->model_name, count);
+
+	return 0;
+err:
+	dev_err(&dev->pdev->dev, "%s frontend %d attach failed\n",
+		dev->config->model_name, count);
+	return -ENODEV;
+}
+
+static struct saa716x_config saa716x_tbs6285_config = {
+	.model_name		= SAA716x_MODEL_TBS6285,
+	.dev_type		= SAA716x_DEV_TBS6285,
+	.adapters		= 4,
+	.frontend_attach	= saa716x_tbs6285_frontend_attach,
+	.irq_handler		= saa716x_budget_pci_irq,
+	.i2c_rate		= SAA716x_I2C_RATE_400,
+	.i2c_mode		= SAA716x_I2C_MODE_POLLING,
+	.adap_config		= {
+		{
+			/* adapter 0 */
+			.ts_port = 3,
+		},
+		{
+			/* adapter 1 */
+			.ts_port = 2,
+		},
+		{
+			/* adapter 1 */
+			.ts_port = 1,
+		},
+		{
+			/* adapter 1 */
+			.ts_port = 0,
+		},
+	},
+};
+
+
 static const struct pci_device_id saa716x_budget_pci_table[] = {
 	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
+	MAKE_ENTRY(TURBOSIGHT_TBS6281, TBS6281,    SAA7160, &saa716x_tbs6281_config),
+	MAKE_ENTRY(TURBOSIGHT_TBS6285, TBS6285,    SAA7160, &saa716x_tbs6285_config),
 	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_budget_pci_table);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 733726591a0a7..0486a2d5ace5d 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -4,4 +4,9 @@
 #define TECHNISAT		0x1AE4
 #define SKYSTAR2_EXPRESS_HD	0x0700
 
+#define TURBOSIGHT_TBS6281	0x6281
+#define TBS6281 		0x0001
+#define TURBOSIGHT_TBS6285	0x6285
+#define TBS6285 		0x0001
+
 #endif /* __SAA716x_BUDGET_H */
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 69ac5a7e28e45..0f5aebbc6d8f3 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -106,7 +106,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		dprintk(SAA716x_DEBUG, 1, "Initializing Adapter %s @ 400k", adapter->name);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
-		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x19);
+		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x10);
 		break;
 
 	case SAA716x_I2C_RATE_100:
@@ -482,7 +482,10 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 	}
 
 	mutex_unlock(&i2c->i2c_lock);
-	return num;
+	if (t < 3)
+		return num;
+	else
+		return -EIO;
 
 bail_out:
 	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 763e31e10bb59..f623bac94156a 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -98,6 +98,9 @@ struct saa716x_adapter {
 
 	u8				feeds;
 	u8				count;
+
+	struct i2c_client		*i2c_client_demod;
+	struct i2c_client		*i2c_client_tuner;
 };
 
 struct saa716x_dev {

From fb244ac723cbb89afaa7b70564b411058bda47f0 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sat, 8 Dec 2018 23:40:54 +0100
Subject: [PATCH 316/364] saa716x: allow individual configuration of video
 ports

For each adapter configure the used video port und the assigned fgpi engine.
fgpi 0 and fgpi 1 can be assigned to ports 4, 5, and 6.
fgpi 2 and fgpi 3 can be assigned to ports 1, 2, and 3.
No need to observe preconfigured ports anymore.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c     | 20 +++++++++----
 drivers/media/pci/saa716x/saa716x_budget.c   | 30 +++++++++++---------
 drivers/media/pci/saa716x/saa716x_ff_main.c  | 17 +++++------
 drivers/media/pci/saa716x/saa716x_greg_reg.h |  3 ++
 drivers/media/pci/saa716x/saa716x_hybrid.c   | 14 ++++-----
 drivers/media/pci/saa716x/saa716x_priv.h     |  3 +-
 6 files changed, 51 insertions(+), 36 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 9b19bd3a62f3d..075715106a2bc 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -5,6 +5,8 @@
 #include <media/dvb_demux.h>
 #include <media/dvb_frontend.h>
 
+#include "saa716x_greg_reg.h"
+
 #include "saa716x_mod.h"
 #include "saa716x_adap.h"
 #include "saa716x_i2c.h"
@@ -31,14 +33,14 @@ void saa716x_dma_start(struct saa716x_dev *saa716x, u8 adapter)
 	params.stream_type	= FGPI_TRANSPORT_STREAM;
 	params.stream_flags	= 0;
 
-	saa716x_fgpi_start(saa716x, saa716x->config->adap_config[adapter].ts_port, &params);
+	saa716x_fgpi_start(saa716x, saa716x->config->adap_config[adapter].ts_fgpi, &params);
 }
 
 void saa716x_dma_stop(struct saa716x_dev *saa716x, u8 adapter)
 {
 	dprintk(SAA716x_DEBUG, 1, "SAA716x Stop DMA engine for Adapter:%d", adapter);
 
-	saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[adapter].ts_port);
+	saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[adapter].ts_fgpi);
 }
 
 static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
@@ -96,7 +98,7 @@ static void saa716x_demux_worker(unsigned long data)
 	fgpi_index = fgpi_entry->dma_channel - 6;
 	demux = NULL;
 	for (i = 0; i < saa716x->config->adapters; i++) {
-		if (saa716x->config->adap_config[i].ts_port == fgpi_index) {
+		if (saa716x->config->adap_config[i].ts_fgpi == fgpi_index) {
 			demux = &saa716x->saa716x_adap[i].demux;
 			break;
 		}
@@ -140,6 +142,10 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 
 	mutex_init(&saa716x->adap_lock);
 
+	/* all video input ports use their own clocks */
+	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688000);
+	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0);
+
 	for (i = 0; i < config->adapters; i++) {
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
@@ -237,7 +243,11 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Frontend attach = NULL");
 		}
 
-		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_port,
+		/* assign video port to fgpi */
+		SAA716x_EPWR(GREG, GREG_FGPI_CTRL, SAA716x_EPRD(GREG, GREG_FGPI_CTRL) |
+		             (GREG_FGPI_CTRL_SEL(config->adap_config[i].ts_vp) << (config->adap_config[i].ts_fgpi * 3)));
+
+		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_fgpi,
 				  SAA716X_TS_DMA_BUF_SIZE,
 				  saa716x_demux_worker);
 
@@ -273,7 +283,7 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
 
-		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_port);
+		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_fgpi);
 
 		/* remove I2C tuner */
 		client = saa716x_adap->i2c_client_tuner;
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index a0a0b57fdcc0f..d7af45c2570d0 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -91,11 +91,6 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x_gpio_init(saa716x);
 
-	/* set default port mapping */
-	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F0A);
-	/* enable FGPI3, FGPI2, FGPI1 and FGPI0 for TS input from Port 2 and 6 */
-	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x322);
-
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -351,7 +346,8 @@ static struct saa716x_config skystar2_express_hd_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
-			.ts_port = 1, /* using FGPI 1 */
+			.ts_vp   = 6,
+			.ts_fgpi = 1
 		}
 	}
 };
@@ -444,11 +440,13 @@ static struct saa716x_config saa716x_tbs6281_config = {
 	.adap_config		= {
 		{
 			/* adapter 0 */
-			.ts_port = 1, /* using FGPI 1 */
+			.ts_vp   = 6,
+			.ts_fgpi = 1
 		},
 		{
 			/* adapter 1 */
-			.ts_port = 3, /* using FGPI 3 */
+			.ts_vp   = 2,
+			.ts_fgpi = 3
 		},
 	},
 };
@@ -536,19 +534,23 @@ static struct saa716x_config saa716x_tbs6285_config = {
 	.adap_config		= {
 		{
 			/* adapter 0 */
-			.ts_port = 3,
+			.ts_vp   = 2,
+			.ts_fgpi = 3
 		},
 		{
 			/* adapter 1 */
-			.ts_port = 2,
+			.ts_vp   = 3,
+			.ts_fgpi = 2
 		},
 		{
-			/* adapter 1 */
-			.ts_port = 1,
+			/* adapter 2 */
+			.ts_vp   = 6,
+			.ts_fgpi = 1
 		},
 		{
-			/* adapter 1 */
-			.ts_port = 0,
+			/* adapter 3 */
+			.ts_vp   = 5,
+			.ts_fgpi = 0
 		},
 	},
 };
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 18d850d06359b..ba56b0f4f4789 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -964,8 +964,12 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 	sti7109->fifo_workq = alloc_workqueue("saa716x_fifo_wq%d", WQ_UNBOUND, 1, SAA716x_DEV);
 	INIT_WORK(&sti7109->fifo_work, fifo_worker);
 
-	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
+	if (sti7109->video_capture != VIDEO_CAPTURE_OFF) {
+		/* enable FGPI0 for video capture inputs */
+		SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C689F04);
+		SAA716x_EPWR(GREG, GREG_VIDEO_IN_CTRL, 0xC0);
 		saa716x_vip_init(saa716x, 0, video_vip_worker);
+	}
 
 	return 0;
 }
@@ -1109,11 +1113,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 		goto fail5;
 	}
 
-	/* enable FGPI2 and FGPI3 for TS inputs */
-	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x0689F04);
-	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x280);
-	SAA716x_EPWR(GREG, GREG_VIDEO_IN_CTRL, 0xC0);
-
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -1712,10 +1711,12 @@ static struct saa716x_config saa716x_s26400_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
-			.ts_port = 2,
+			.ts_vp   = 1,
+			.ts_fgpi = 2
 		},{
 			/* Adapter 1 */
-			.ts_port = 3,
+			.ts_vp   = 2,
+			.ts_fgpi = 3
 		}
 	}
 };
diff --git a/drivers/media/pci/saa716x/saa716x_greg_reg.h b/drivers/media/pci/saa716x/saa716x_greg_reg.h
index 052e8cd1f820f..effecd2768c89 100644
--- a/drivers/media/pci/saa716x/saa716x_greg_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_greg_reg.h
@@ -34,6 +34,9 @@
 #define GREG_PMCSR_DATA_2		0x00c
 #define GREG_VI_CTRL			0x010
 #define GREG_FGPI_CTRL			0x014
+#define GREG_FGPI_CTRL_SEL(vp)		(((vp) == 2 || (vp) == 4) ? 1 : \
+					 ((vp) == 1 || (vp) == 5) ? 2 : \
+					 ((vp) == 3 || (vp) == 6) ? 4 : 0)
 
 #define GREG_RSTU_CTRL			0x018
 #define GREG_BOOT_READY			(0x00000001 << 13)
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index de9eee773820f..53d325abd5a2c 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -103,11 +103,6 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 		saa716x_gpio_write(saa716x, 25, 1);
 	}
 
-	/* set default port mapping */
-	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688F44);
-	/* enable FGPI3 and FGPI0 for TS input from Port 3 and 6 */
-	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0x894);
-
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
 		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
@@ -363,11 +358,13 @@ static struct saa716x_config saa716x_atlantis_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
-			.ts_port = 3, /* using FGPI 3 */
+			.ts_vp   = 3,
+			.ts_fgpi = 3
 		},
 		{
 			/* Adapter 1 */
-			.ts_port = 0, /* using FGPI 0 */
+			.ts_vp   = 6,
+			.ts_fgpi = 0
 		}
 	}
 };
@@ -471,7 +468,8 @@ static struct saa716x_config saa716x_nemo_config = {
 	.adap_config		= {
 		{
 			/* Adapter 0 */
-			.ts_port = 3, /* using FGPI 3 */
+			.ts_vp   = 3,
+			.ts_fgpi = 3
 		}
 	}
 };
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index f623bac94156a..203865eadf6f2 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -68,7 +68,8 @@ struct saa716x_dev;
 struct saa716x_adapter;
 
 struct saa716x_adap_config {
-	u32				ts_port;
+	u32				ts_vp;
+	u32				ts_fgpi;
 };
 
 struct saa716x_config {

From 566dae297df39e7fe9ec065ac98be443e6719e0f Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 20 Dec 2018 17:24:22 +0100
Subject: [PATCH 317/364] saa716x_ff: cleanup POINTER_LOCATION checkpatch
 errors

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  | 26 ++++++++++-----------
 drivers/media/pci/saa716x/saa716x_ff_cmd.h  | 12 +++++-----
 drivers/media/pci/saa716x/saa716x_ff_main.c |  4 ++--
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  6 ++---
 drivers/media/pci/saa716x/saa716x_ff_phi.h  |  6 ++---
 5 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index d64e7a141361b..f9e64b98fb44b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -40,9 +40,9 @@ int sti7109_cmd_init(struct sti7109_dev *sti7109)
 	return 0;
 }
 
-static int sti7109_do_raw_cmd(struct sti7109_dev * sti7109)
+static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	unsigned long timeout;
 
 	timeout = 1 * HZ;
@@ -96,9 +96,9 @@ static int sti7109_do_raw_cmd(struct sti7109_dev * sti7109)
 	return 0;
 }
 
-int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+int sti7109_raw_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	int err;
 
 	if (cmd->cmd_len > SIZE_CMD_DATA) {
@@ -133,9 +133,9 @@ int sti7109_raw_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 	return err;
 }
 
-static int sti7109_do_raw_osd_cmd(struct sti7109_dev * sti7109)
+static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	unsigned long timeout;
 
 	timeout = 1 * HZ;
@@ -190,9 +190,9 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev * sti7109)
 	return 0;
 }
 
-int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
+int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	int err;
 
 	if (cmd->cmd_len > SIZE_OSD_CMD_DATA) {
@@ -227,16 +227,16 @@ int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109, osd_raw_cmd_t * cmd)
 	return err;
 }
 
-static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	unsigned long timeout;
 	u16 blockSize;
 	u16 lastBlockSize;
 	u16 numBlocks;
 	u16 blockIndex;
 	u8 blockHeader[SIZE_BLOCK_HEADER];
-	u8 * blockPtr;
+	u8 *blockPtr;
 	int activeBlock;
 	u16 blockOffset;
 
@@ -347,9 +347,9 @@ static int sti7109_do_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * da
 	return 0;
 }
 
-int sti7109_raw_data(struct sti7109_dev * sti7109, osd_raw_data_t * data)
+int sti7109_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
 {
-	struct saa716x_dev * saa716x = sti7109->dev;
+	struct saa716x_dev *saa716x = sti7109->dev;
 	int err;
 
 	if (data->data_length > MAX_DATA_LEN) {
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.h b/drivers/media/pci/saa716x/saa716x_ff_cmd.h
index fc79f080ccde4..78d81c4e9c7fd 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.h
@@ -2,12 +2,12 @@
 #define __SAA716x_FF_CMD_H
 
 extern int sti7109_cmd_init(struct sti7109_dev *sti7109);
-extern int sti7109_raw_cmd(struct sti7109_dev * sti7109,
-			   osd_raw_cmd_t * cmd);
-extern int sti7109_raw_osd_cmd(struct sti7109_dev * sti7109,
-			       osd_raw_cmd_t * cmd);
-extern int sti7109_raw_data(struct sti7109_dev * sti7109,
-			    osd_raw_data_t * data);
+extern int sti7109_raw_cmd(struct sti7109_dev *sti7109,
+			   osd_raw_cmd_t *cmd);
+extern int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109,
+			       osd_raw_cmd_t *cmd);
+extern int sti7109_raw_data(struct sti7109_dev *sti7109,
+			    osd_raw_data_t *data);
 extern int sti7109_cmd_get_fw_version(struct sti7109_dev *sti7109,
 				      u32 *fw_version);
 extern int sti7109_cmd_get_video_format(struct sti7109_dev *sti7109,
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index ba56b0f4f4789..3a3af92e64859 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -622,7 +622,7 @@ static void video_vip_worker(unsigned long data)
 	} while (write_index != vip_entry->read_index);
 }
 
-static int video_vip_get_stream_params(struct vip_stream_params * params,
+static int video_vip_get_stream_params(struct vip_stream_params *params,
 				       u32 mode)
 {
 	switch (mode)
@@ -672,7 +672,7 @@ static int video_vip_get_stream_params(struct vip_stream_params * params,
 }
 
 static ssize_t video_vip_read(struct sti7109_dev *sti7109,
-			      struct vip_stream_params * stream_params,
+			      struct vip_stream_params *stream_params,
 			      char __user *buf, size_t count)
 {
 	struct saa716x_dev *saa716x = sti7109->dev;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 81eb0371d68b3..d8e78d496d93e 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -153,7 +153,7 @@ void saa716x_ff_phi_config(struct saa716x_dev *saa716x)
 }
 
 void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
-			  u32 address, const u8 * data, int length)
+			  u32 address, const u8 *data, int length)
 {
 	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
@@ -175,7 +175,7 @@ void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
 }
 
 void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
-			 u32 address, u8 * data, int length)
+			 u32 address, u8 *data, int length)
 {
 	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
@@ -197,7 +197,7 @@ void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
 }
 
 void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
-			       const u8 * data, int length)
+			       const u8 *data, int length)
 {
 	struct sti7109_dev *sti7109 = saa716x->priv;
 	int i;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.h b/drivers/media/pci/saa716x/saa716x_ff_phi.h
index 9305efae48567..85b8b69b0fd56 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.h
@@ -5,10 +5,10 @@ extern int saa716x_ff_phi_init(struct saa716x_dev *saa716x);
 extern void saa716x_ff_phi_exit(struct saa716x_dev *saa716x);
 extern void saa716x_ff_phi_config(struct saa716x_dev *saa716x);
 extern void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
-				 u32 address, const u8 * data, int length);
+				 u32 address, const u8 *data, int length);
 extern void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
-				u32 address, u8 * data, int length);
+				u32 address, u8 *data, int length);
 extern void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
-				      const u8 * data, int length);
+				      const u8 *data, int length);
 
 #endif /* __SAA716x_FF_PHI_H */

From 0da210ed27ff98894c84bd767de5a7b77d0e9bec Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 20 Dec 2018 17:37:31 +0100
Subject: [PATCH 318/364] saa716x: cleanup SPACING checkpatch errors

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  |  4 ++--
 drivers/media/pci/saa716x/saa716x_cgu.c     |  4 ++--
 drivers/media/pci/saa716x/saa716x_dma.c     | 14 +++++++-------
 drivers/media/pci/saa716x/saa716x_dma.h     |  4 ++--
 drivers/media/pci/saa716x/saa716x_ff_main.c | 11 ++++++-----
 drivers/media/pci/saa716x/saa716x_hybrid.c  |  2 +-
 drivers/media/pci/saa716x/saa716x_priv.h    | 12 ++++++------
 7 files changed, 26 insertions(+), 25 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index d7af45c2570d0..8516cf75365b0 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -52,7 +52,7 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 	struct saa716x_dev *saa716x;
 	int err = 0;
 
-	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
 		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
 		err = -ENOMEM;
@@ -477,7 +477,7 @@ static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter, int
 	info.addr = ((count == 0) || (count == 2)) ? 0x64 : 0x66;
 	info.platform_data = &si2168_config;
 	request_module(info.type);
-	client = i2c_new_device( ((count == 0) || (count == 1)) ?
+	client = i2c_new_device(((count == 0) || (count == 1)) ?
 		&dev->i2c[1].i2c_adapter : &dev->i2c[0].i2c_adapter,
 		&info);
 	if (client == NULL || client->dev.driver == NULL) {
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 4ec6aa7fd9bc7..80c70757aa128 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -68,7 +68,7 @@ int saa716x_getbootscript_setup(struct saa716x_dev *saa716x)
 		M = ((cgu->clk_boot_div[i] >>  3) & 0xff) + N;
 
 		if (M)
-			cgu->clk_freq[i] = (u32 ) N * PLL_FREQ / (u32 ) M;
+			cgu->clk_freq[i] = (u32) N * PLL_FREQ / (u32) M;
 		else
 			cgu->clk_freq[i] = 0;
 
@@ -341,7 +341,7 @@ int saa716x_get_clk(struct saa716x_dev *saa716x,
 		break;
 
 	case CLK_DOMAIN_VI1VBI:
-		*frequency =cgu->clk_freq[CLK_DOMAIN_VI1];
+		*frequency = cgu->clk_freq[CLK_DOMAIN_VI1];
 		break;
 	default:
 		dprintk(SAA716x_ERROR, 1, "Error Clock domain <%02x>", domain);
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 8a7e6addfe996..d2f7581d6ca69 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -108,7 +108,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 		pages = size / SAA716x_PAGE_SIZE;
 
 	/* Allocate memory for SG list */
-	dmabuf->sg_list = kzalloc(sizeof (struct scatterlist) * pages, GFP_KERNEL);
+	dmabuf->sg_list = kzalloc(sizeof(struct scatterlist) * pages, GFP_KERNEL);
 	if (dmabuf->sg_list == NULL) {
 		dprintk(SAA716x_ERROR, 1, "Failed to allocate memory for scatterlist.");
 		return -ENOMEM;
@@ -128,7 +128,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 		memset(dmabuf->mem_virt_noalign, 0, (pages + 1) * SAA716x_PAGE_SIZE);
 
 		/* align memory to page */
-		dmabuf->mem_virt = (void *) PAGE_ALIGN (((unsigned long) dmabuf->mem_virt_noalign));
+		dmabuf->mem_virt = (void *) PAGE_ALIGN(((unsigned long) dmabuf->mem_virt_noalign));
 
 		BUG_ON(!((((unsigned long) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
 	} else {
@@ -193,16 +193,16 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 			addr = ((u64)sg_dma_address(sg_cur)) + (j * SAA716x_PAGE_SIZE) - sg_cur->offset;
 
 			BUG_ON(addr == 0);
-			page[k * 2] = (u32 )addr; /* Low */
-			page[k * 2 + 1] = (u32 )(((u64) addr) >> 32); /* High */
+			page[k * 2] = (u32)addr; /* Low */
+			page[k * 2 + 1] = (u32)(((u64) addr) >> 32); /* High */
 			BUG_ON(page[k * 2] % SAA716x_PAGE_SIZE);
 			k++;
 		}
 	}
 
 	for (; k < (SAA716x_PAGE_SIZE / 8); k++) {
-		page[k * 2] = (u32 ) addr;
-		page[k * 2 + 1] = (u32 ) (((u64 ) addr) >> 32);
+		page[k * 2] = (u32) addr;
+		page[k * 2 + 1] = (u32) (((u64) addr) >> 32);
 	}
 
 	/* make "page table" page writable for the PC */
@@ -251,7 +251,7 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 
 	BUG_ON(saa716x == NULL);
 	BUG_ON(dmabuf == NULL);
-	BUG_ON(! (size > 0));
+	BUG_ON(!(size > 0));
 
 	dmabuf->dma_type		= SAA716x_DMABUF_INT;
 
diff --git a/drivers/media/pci/saa716x/saa716x_dma.h b/drivers/media/pci/saa716x/saa716x_dma.h
index a56b35134a729..9cdd9f7f653cb 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.h
+++ b/drivers/media/pci/saa716x/saa716x_dma.h
@@ -3,8 +3,8 @@
 
 #define SAA716x_PAGE_SIZE	4096
 
-#define PTA_LSB(__mem)		((u32 ) (__mem))
-#define PTA_MSB(__mem)		((u32 ) ((u64)(__mem) >> 32))
+#define PTA_LSB(__mem)		((u32) (__mem))
+#define PTA_MSB(__mem)		((u32) ((u64)(__mem) >> 32))
 
 #define BAM_DMA_BUF_MODE_BASE		0x00
 #define BAM_DMA_BUF_MODE_OFFSET		0x24
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 3a3af92e64859..074ae0c3ff3ae 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -307,7 +307,7 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 			parg = sbuf;
 		} else {
 			/* too big to allocate from stack */
-			mbuf = kmalloc(_IOC_SIZE(cmd),GFP_KERNEL);
+			mbuf = kmalloc(_IOC_SIZE(cmd), GFP_KERNEL);
 			if (NULL == mbuf)
 				return -ENOMEM;
 			parg = mbuf;
@@ -456,7 +456,7 @@ static long dvb_audio_ioctl(struct file *file, unsigned int cmd, unsigned long a
 	if (!dvbdev)
 		return -ENODEV;
 
-	return saa716x_usercopy (dvbdev, cmd, arg, do_dvb_audio_ioctl);
+	return saa716x_usercopy(dvbdev, cmd, arg, do_dvb_audio_ioctl);
 }
 
 static struct file_operations dvb_audio_fops = {
@@ -913,7 +913,7 @@ static long dvb_video_ioctl(struct file *file, unsigned int cmd, unsigned long a
 	if (!dvbdev)
 		return -ENODEV;
 
-	return saa716x_usercopy (dvbdev, cmd, arg, do_dvb_video_ioctl);
+	return saa716x_usercopy(dvbdev, cmd, arg, do_dvb_video_ioctl);
 }
 
 static struct file_operations dvb_video_fops = {
@@ -982,7 +982,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	u32 value;
 	unsigned long timeout;
 
-	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
 		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
 		err = -ENOMEM;
@@ -1713,7 +1713,8 @@ static struct saa716x_config saa716x_s26400_config = {
 			/* Adapter 0 */
 			.ts_vp   = 1,
 			.ts_fgpi = 2
-		},{
+		},
+		{
 			/* Adapter 1 */
 			.ts_vp   = 2,
 			.ts_fgpi = 3
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 53d325abd5a2c..6f0574cd3aa6c 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -50,7 +50,7 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 	struct saa716x_dev *saa716x;
 	int err = 0;
 
-	saa716x = kzalloc(sizeof (struct saa716x_dev), GFP_KERNEL);
+	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
 		printk(KERN_ERR "saa716x_hybrid_pci_probe ERROR: out of memory\n");
 		err = -ENOMEM;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 203865eadf6f2..d3ff7e9ef01db 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -32,18 +32,18 @@
 #define dprintk(__x, __y, __fmt, __arg...) do {								\
 	if (__y) {											\
 		if	((SAA716x_VERBOSE > SAA716x_ERROR) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_ERR "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+			printk(KERN_ERR "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
 		else if	((SAA716x_VERBOSE > SAA716x_NOTICE) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_NOTICE "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+			printk(KERN_NOTICE "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
 		else if ((SAA716x_VERBOSE > SAA716x_INFO) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_INFO "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+			printk(KERN_INFO "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
 		else if ((SAA716x_VERBOSE > SAA716x_DEBUG) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_DEBUG "%s (%d): " __fmt "\n" , __func__ , SAA716x_DEV , ##__arg);	\
+			printk(KERN_DEBUG "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
 	} else {											\
 		if (SAA716x_VERBOSE > __x)								\
-			printk(__fmt , ##__arg);							\
+			printk(__fmt, ##__arg);							\
 	}												\
-} while(0)
+} while (0)
 
 
 #define NXP_SEMICONDUCTOR	0x1131

From 72a8b6e602613b6bd551c98434b191a428908b65 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 20 Dec 2018 18:01:43 +0100
Subject: [PATCH 319/364] saa716x: cleanup ASSIGN_IN_IF checkpatch errors

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    | 25 +++++++++------------
 drivers/media/pci/saa716x/saa716x_ff_main.c |  3 ++-
 drivers/media/pci/saa716x/saa716x_pci.c     |  9 +++++---
 3 files changed, 18 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 075715106a2bc..19c7891bfc20c 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -174,7 +174,8 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		saa716x_adap->demux.write_to_decoder	= NULL;
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_dmx_init");
-		if ((result = dvb_dmx_init(&saa716x_adap->demux)) < 0) {
+		result = dvb_dmx_init(&saa716x_adap->demux);
+		if (result < 0) {
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err0;
 		}
@@ -184,33 +185,27 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		saa716x_adap->dmxdev.capabilities	= 0;
 
 		dprintk(SAA716x_DEBUG, 1, "dvb_dmxdev_init");
-		if ((result = dvb_dmxdev_init(&saa716x_adap->dmxdev,
-					      &saa716x_adap->dvb_adapter)) < 0) {
-
+		result = dvb_dmxdev_init(&saa716x_adap->dmxdev, &saa716x_adap->dvb_adapter);
+		if (result < 0) {
 			dprintk(SAA716x_ERROR, 1, "dvb_dmxdev_init failed, ERROR=%d", result);
 			goto err1;
 		}
 
 		saa716x_adap->fe_hw.source = DMX_FRONTEND_0;
-
-		if ((result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx,
-								   &saa716x_adap->fe_hw)) < 0) {
-
+		result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+		if (result < 0) {
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err2;
 		}
 
 		saa716x_adap->fe_mem.source = DMX_MEMORY_FE;
-
-		if ((result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx,
-								   &saa716x_adap->fe_mem)) < 0) {
+		result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
+		if (result < 0) {
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err3;
 		}
-
-		if ((result = saa716x_adap->demux.dmx.connect_frontend(&saa716x_adap->demux.dmx,
-								       &saa716x_adap->fe_hw)) < 0) {
-
+		result = saa716x_adap->demux.dmx.connect_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+		if (result < 0) {
 			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err4;
 		}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 074ae0c3ff3ae..1e0220957d631 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -320,7 +320,8 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 	}
 
 	/* call driver */
-	if ((err = func(dvbdev, cmd, parg)) == -ENOIOCTLCMD)
+	err = func(dvbdev, cmd, parg);
+	if (err == -ENOIOCTLCMD)
 		err = -EINVAL;
 
 	if (err < 0)
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index e9d88f914b1d7..7aa922d678baa 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -68,9 +68,12 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 			dprintk(SAA716x_ERROR, 1, "Unable to obtain 64bit DMA");
 			goto fail1;
 		}
-	} else if ((err = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(32))) != 0) {
-		dprintk(SAA716x_ERROR, 1, "Unable to obtain 32bit DMA");
-		goto fail1;
+	} else {
+		err = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(32));
+		if (err) {
+			dprintk(SAA716x_ERROR, 1, "Unable to obtain 32bit DMA");
+			goto fail1;
+		}
 	}
 
 	pci_set_master(pdev);

From 9976afb0ce5648fb2afac96acb83647529feb77c Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 20 Dec 2018 18:12:35 +0100
Subject: [PATCH 320/364] saa716x: cleanup COMPLEX_MACRO checkpatch errors

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma_reg.h | 32 ++++++++++-----------
 drivers/media/pci/saa716x/saa716x_gpio.h    |  2 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |  4 +--
 3 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma_reg.h b/drivers/media/pci/saa716x/saa716x_dma_reg.h
index 58678541119b1..d44ab937d13ff 100644
--- a/drivers/media/pci/saa716x/saa716x_dma_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_dma_reg.h
@@ -181,21 +181,21 @@
 
 #define MMU_PTA_BASE(__ch)		(MMU_PTA_BASE0 + (MMU_PTA_OFFSET * __ch))
 
-#define MMU_PTA0_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x00
-#define MMU_PTA0_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x04
-#define MMU_PTA1_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x08
-#define MMU_PTA1_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x0c
-#define MMU_PTA2_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x10
-#define MMU_PTA2_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x14
-#define MMU_PTA3_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x18
-#define MMU_PTA3_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x1c
-#define MMU_PTA4_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x20
-#define MMU_PTA4_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x24
-#define MMU_PTA5_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x28
-#define MMU_PTA5_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x2c
-#define MMU_PTA6_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x30
-#define MMU_PTA6_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x34
-#define MMU_PTA7_LSB(__ch)		MMU_PTA_BASE(__ch) + 0x38
-#define MMU_PTA7_MSB(__ch)		MMU_PTA_BASE(__ch) + 0x3c
+#define MMU_PTA0_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x00)
+#define MMU_PTA0_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x04)
+#define MMU_PTA1_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x08)
+#define MMU_PTA1_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x0c)
+#define MMU_PTA2_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x10)
+#define MMU_PTA2_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x14)
+#define MMU_PTA3_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x18)
+#define MMU_PTA3_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x1c)
+#define MMU_PTA4_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x20)
+#define MMU_PTA4_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x24)
+#define MMU_PTA5_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x28)
+#define MMU_PTA5_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x2c)
+#define MMU_PTA6_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x30)
+#define MMU_PTA6_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x34)
+#define MMU_PTA7_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x38)
+#define MMU_PTA7_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x3c)
 
 #endif /* __SAA716x_DMA_REG_H */
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index b33b1278a8c34..de8d679231bed 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -1,7 +1,7 @@
 #ifndef __SAA716x_GPIO_H
 #define __SAA716x_GPIO_H
 
-#define BOOT_MODE	GPIO_31 | GPIO_30
+#define BOOT_MODE	(GPIO_31 | GPIO_30)
 #define AV_UNIT_B	GPIO_25
 #define AV_UNIT_A	GPIO_24
 #define AV_INTR_B	GPIO_01
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index d3ff7e9ef01db..1dc460ee43a3e 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -25,8 +25,8 @@
 #define SAA716x_INFO		2
 #define SAA716x_DEBUG		3
 
-#define SAA716x_DEV		(saa716x)->num
-#define SAA716x_VERBOSE		(saa716x)->verbose
+#define SAA716x_DEV		((saa716x)->num)
+#define SAA716x_VERBOSE		((saa716x)->verbose)
 #define SAA716x_MAX_ADAPTERS	4
 
 #define dprintk(__x, __y, __fmt, __arg...) do {								\

From cb9439c0d9203ee074f510a3862c481f388cdb68 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 20 Dec 2018 18:20:13 +0100
Subject: [PATCH 321/364] saa716x: cleanup OPEN_BRACE and ELSE_AFTER_BRACE
 checkpatch errors

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 12 ++++--------
 drivers/media/pci/saa716x/saa716x_fgpi.c    |  5 +----
 drivers/media/pci/saa716x/saa716x_vip.c     | 10 ++--------
 3 files changed, 7 insertions(+), 20 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 1e0220957d631..0cf31f6088525 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -328,8 +328,7 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 		goto out;
 
 	/*  Copy results into user buffer  */
-	switch (_IOC_DIR(cmd))
-	{
+	switch (_IOC_DIR(cmd)) {
 	case _IOC_READ:
 	case (_IOC_WRITE | _IOC_READ):
 		if (copy_to_user((void __user *)arg, parg, _IOC_SIZE(cmd)))
@@ -373,8 +372,7 @@ static long dvb_osd_ioctl(struct file *file, unsigned int cmd, unsigned long arg
 
 		if (copy_to_user((void __user *)arg, &raw_cmd, _IOC_SIZE(cmd)))
 			err = -EFAULT;
-	}
-	else if (cmd == OSD_RAW_DATA) {
+	} else if (cmd == OSD_RAW_DATA) {
 		osd_raw_data_t raw_data;
 
 		err = -EFAULT;
@@ -626,8 +624,7 @@ static void video_vip_worker(unsigned long data)
 static int video_vip_get_stream_params(struct vip_stream_params *params,
 				       u32 mode)
 {
-	switch (mode)
-	{
+	switch (mode) {
 		case 4:  /* 1280x720p60 */
 		case 19: /* 1280x720p50 */
 			params->bits		= 16;
@@ -822,8 +819,7 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 	    (ringbuffer_avail > TSOUT_LEVEL_FILL)) {
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
-	}
-	else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) &&
+	} else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) &&
 	         (ringbuffer_avail > TSOUT_LEVEL_HIGH)) {
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
 		queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 0a56399111c5d..b77264a2ee562 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -352,8 +352,7 @@ int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port, int dma_buf_size,
 	int ret;
 
 	saa716x->fgpi[port].dma_channel = port + 6;
-	for (i = 0; i < FGPI_BUFFERS; i++)
-	{
+	for (i = 0; i < FGPI_BUFFERS; i++) {
 		ret = saa716x_dmabuf_alloc(saa716x,
 					   &saa716x->fgpi[port].dma_buf[i],
 					   dma_buf_size);
@@ -376,9 +375,7 @@ int saa716x_fgpi_exit(struct saa716x_dev *saa716x, int port)
 
 	tasklet_kill(&saa716x->fgpi[port].tasklet);
 	for (i = 0; i < FGPI_BUFFERS; i++)
-	{
 		saa716x_dmabuf_free(saa716x, &saa716x->fgpi[port].dma_buf[i]);
-	}
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 641a10460924f..63adce8a8065e 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -358,11 +358,9 @@ int saa716x_vip_init(struct saa716x_dev *saa716x, int port,
 	/* reset VI */
 	SAA716x_EPWR(vi_ch[port], VI_MODE, SOFT_RESET);
 
-	for (n = 0; n < 2; n++)
-	{
+	for (n = 0; n < 2; n++) {
 		saa716x->vip[port].dma_channel[n] = port * 3 + n;
-		for (i = 0; i < VIP_BUFFERS; i++)
-		{
+		for (i = 0; i < VIP_BUFFERS; i++) {
 			ret = saa716x_dmabuf_alloc(
 					saa716x,
 					&saa716x->vip[port].dma_buf[n][i],
@@ -388,13 +386,9 @@ int saa716x_vip_exit(struct saa716x_dev *saa716x, int port)
 
 	tasklet_kill(&saa716x->vip[port].tasklet);
 	for (n = 0; n < 2; n++)
-	{
 		for (i = 0; i < VIP_BUFFERS; i++)
-		{
 			saa716x_dmabuf_free(
 				saa716x, &saa716x->vip[port].dma_buf[n][i]);
-		}
-	}
 
 	return 0;
 }

From 92751118db84e16e708281fb87f75785354a3dc0 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 20 Dec 2018 18:46:45 +0100
Subject: [PATCH 322/364] saa716x: cleanup CODE_INDENT and
 SWITCH_CASE_INDENT_LEVEL checkpatch errors

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    |  6 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 84 ++++++++++-----------
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  7 +-
 drivers/media/pci/saa716x/saa716x_fgpi.c    |  2 +-
 drivers/media/pci/saa716x/saa716x_vip.c     |  4 +-
 5 files changed, 52 insertions(+), 51 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 19c7891bfc20c..5a13df5cde5ec 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -239,8 +239,10 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		}
 
 		/* assign video port to fgpi */
-		SAA716x_EPWR(GREG, GREG_FGPI_CTRL, SAA716x_EPRD(GREG, GREG_FGPI_CTRL) |
-		             (GREG_FGPI_CTRL_SEL(config->adap_config[i].ts_vp) << (config->adap_config[i].ts_fgpi * 3)));
+		SAA716x_EPWR(GREG, GREG_FGPI_CTRL,
+				 SAA716x_EPRD(GREG, GREG_FGPI_CTRL) |
+				 (GREG_FGPI_CTRL_SEL(config->adap_config[i].ts_vp) <<
+				  (config->adap_config[i].ts_fgpi * 3)));
 
 		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_fgpi,
 				  SAA716X_TS_DMA_BUF_SIZE,
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 0cf31f6088525..b7654035de9c5 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -502,7 +502,7 @@ static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf, const u8 __use
 	split = (rbuf->pwrite + len > rbuf->size) ? rbuf->size - rbuf->pwrite : 0;
 
 	if (split > 0) {
-        	if (copy_from_user(rbuf->data+rbuf->pwrite, buf, split)) {
+		if (copy_from_user(rbuf->data+rbuf->pwrite, buf, split)) {
 			return -EFAULT;
 		}
 		buf += split;
@@ -625,46 +625,46 @@ static int video_vip_get_stream_params(struct vip_stream_params *params,
 				       u32 mode)
 {
 	switch (mode) {
-		case 4:  /* 1280x720p60 */
-		case 19: /* 1280x720p50 */
-			params->bits		= 16;
-			params->samples		= 1280;
-			params->lines		= 720;
-			params->pitch		= 1280 * 2;
-			params->offset_x	= 32;
-			params->offset_y	= 30;
-			params->stream_flags	= VIP_HD;
-			break;
+	case 4:  /* 1280x720p60 */
+	case 19: /* 1280x720p50 */
+		params->bits		= 16;
+		params->samples		= 1280;
+		params->lines		= 720;
+		params->pitch		= 1280 * 2;
+		params->offset_x	= 32;
+		params->offset_y	= 30;
+		params->stream_flags	= VIP_HD;
+		break;
 
-		case 5:  /* 1920x1080i60 */
-		case 20: /* 1920x1080i50 */
-			params->bits		= 16;
-			params->samples		= 1920;
-			params->lines		= 1080;
-			params->pitch		= 1920 * 2;
-			params->offset_x	= 0;
-			params->offset_y	= 20;
-			params->stream_flags	= VIP_ODD_FIELD
-						| VIP_EVEN_FIELD
-						| VIP_INTERLACED
-						| VIP_HD
-						| VIP_NO_SCALER;
-			break;
+	case 5:  /* 1920x1080i60 */
+	case 20: /* 1920x1080i50 */
+		params->bits		= 16;
+		params->samples		= 1920;
+		params->lines		= 1080;
+		params->pitch		= 1920 * 2;
+		params->offset_x	= 0;
+		params->offset_y	= 20;
+		params->stream_flags	= VIP_ODD_FIELD
+					| VIP_EVEN_FIELD
+					| VIP_INTERLACED
+					| VIP_HD
+					| VIP_NO_SCALER;
+		break;
 
-		case 32: /* 1920x1080p24 */
-		case 33: /* 1920x1080p25 */
-		case 34: /* 1920x1080p30 */
-			params->bits		= 16;
-			params->samples		= 1920;
-			params->lines		= 1080;
-			params->pitch		= 1920 * 2;
-			params->offset_x	= 0;
-			params->offset_y	= 0;
-			params->stream_flags	= VIP_HD;
-			break;
+	case 32: /* 1920x1080p24 */
+	case 33: /* 1920x1080p25 */
+	case 34: /* 1920x1080p30 */
+		params->bits		= 16;
+		params->samples		= 1920;
+		params->lines		= 1080;
+		params->pitch		= 1920 * 2;
+		params->offset_x	= 0;
+		params->offset_y	= 0;
+		params->stream_flags	= VIP_HD;
+		break;
 
-		default:
-			return -1;
+	default:
+		return -1;
 	}
 	return 0;
 }
@@ -815,12 +815,10 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 
 	ringbuffer_avail = dvb_ringbuffer_avail(&sti7109->tsout);
 	spin_lock(&sti7109->tsout.lock);
-	if ((sti7109->tsout_stat == TSOUT_STAT_FILL) &&
-	    (ringbuffer_avail > TSOUT_LEVEL_FILL)) {
+	if ((sti7109->tsout_stat == TSOUT_STAT_FILL) && (ringbuffer_avail > TSOUT_LEVEL_FILL)) {
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
-	} else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) &&
-	         (ringbuffer_avail > TSOUT_LEVEL_HIGH)) {
+	} else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) && (ringbuffer_avail > TSOUT_LEVEL_HIGH)) {
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
 		queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
 	}
@@ -881,7 +879,7 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 		spin_lock(&sti7109->tsout.lock);
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 0);
 		sti7109->tsout.pread = sti7109->tsout.pwrite = 0;//dvb_ringbuffer_reset(&sti7109->tsout);
-        	sti7109->tsout_stat = TSOUT_STAT_FILL;
+		sti7109->tsout_stat = TSOUT_STAT_FILL;
 		spin_unlock(&sti7109->tsout.lock);
 		wake_up(&sti7109->tsout.queue);
 		break;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index d8e78d496d93e..b215ed8625a25 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -9,9 +9,10 @@
 
 unsigned int phi_mode;
 module_param(phi_mode, int, 0644);
-MODULE_PARM_DESC(phi_mode, "phi access mode: 0 - default, slow single word accesses;"
-                                           " 1 - faster phi clock;"
-                                           " 2 - fastest mode, use write-combining");
+MODULE_PARM_DESC(phi_mode, "phi access mode:"
+		" 0 - default, slow single word accesses;"
+		" 1 - faster phi clock;"
+		" 2 - fastest mode, use write-combining");
 
 
 /* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index b77264a2ee562..a675ee00c148c 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -64,7 +64,7 @@ int saa716x_fgpi_get_write_index(struct saa716x_dev *saa716x, u32 fgpi_index)
 	u32 buf_mode_reg;
 	u32 buf_mode;
 
- 	switch (fgpi_index) {
+	switch (fgpi_index) {
 	case 0: /* FGPI_0 */
 		fgpi_base = FGPI0;
 		buf_mode_reg = BAM_FGPI0_DMA_BUF_MODE;
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 63adce8a8065e..b46ac16b13521 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -39,8 +39,8 @@ EXPORT_SYMBOL_GPL(saa716x_vipint_disable);
 
 void saa716x_vip_disable(struct saa716x_dev *saa716x)
 {
-       SAA716x_EPWR(VI0, VIP_POWER_DOWN, VI_PWR_DWN);
-       SAA716x_EPWR(VI1, VIP_POWER_DOWN, VI_PWR_DWN);
+	SAA716x_EPWR(VI0, VIP_POWER_DOWN, VI_PWR_DWN);
+	SAA716x_EPWR(VI1, VIP_POWER_DOWN, VI_PWR_DWN);
 }
 EXPORT_SYMBOL_GPL(saa716x_vip_disable);
 

From 620274042195a2efc0180d058a1618e4c0c3ebc2 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 16:39:25 +0100
Subject: [PATCH 323/364] saa716x: cleanup SPACE_BEFORE_TAB checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.h | 4 ++--
 drivers/media/pci/saa716x/saa716x_ff.h     | 8 ++++----
 drivers/media/pci/saa716x/saa716x_i2c.c    | 2 +-
 drivers/media/pci/saa716x/saa716x_priv.h   | 2 +-
 4 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 0486a2d5ace5d..5cf9bd5248d0d 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -5,8 +5,8 @@
 #define SKYSTAR2_EXPRESS_HD	0x0700
 
 #define TURBOSIGHT_TBS6281	0x6281
-#define TBS6281 		0x0001
+#define TBS6281			0x0001
 #define TURBOSIGHT_TBS6285	0x6285
-#define TBS6285 		0x0001
+#define TBS6285			0x0001
 
 #endif /* __SAA716x_BUDGET_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index bb834d960eed0..ef5bd0de4a065 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -98,12 +98,12 @@
 #define TSOUT_LEN		(1024 * TS_SIZE)
 #define TSOUT_LEVEL_FILL	(350 * TS_SIZE)
 #define TSOUT_LEVEL_HIGH	(30 * TS_SIZE)
-#define TSOUT_LEVEL_LOW 	(20 * TS_SIZE)
+#define TSOUT_LEVEL_LOW		(20 * TS_SIZE)
 
 #define TSOUT_STAT_RESET	0
-#define TSOUT_STAT_FILL 	1
-#define TSOUT_STAT_RUN  	2
-#define TSOUT_STAT_WAIT  	3
+#define TSOUT_STAT_FILL		1
+#define TSOUT_STAT_RUN		2
+#define TSOUT_STAT_WAIT		3
 
 #define VIDEO_CAPTURE_OFF	0
 #define VIDEO_CAPTURE_ONE_SHOT	1
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 0f5aebbc6d8f3..a38d4b599f5a0 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -539,7 +539,7 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 			adapter->owner		= saa716x->module;
 			adapter->algo		= &saa716x_algo;
-			adapter->algo_data 	= NULL;
+			adapter->algo_data	= NULL;
 			adapter->timeout	= 500; /* FIXME ! */
 			adapter->retries	= 3; /* FIXME ! */
 			adapter->dev.parent	= &pdev->dev;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 1dc460ee43a3e..6ea970c01c2d8 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -112,7 +112,7 @@ struct saa716x_dev {
 	int				num; /* device count */
 	int				verbose;
 
-	u8 				revision;
+	u8				revision;
 
 	/* PCI */
 	void __iomem			*mmio;

From 9b23104c79c45437002fc2060edc7f241e56e947 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 17:26:55 +0100
Subject: [PATCH 324/364] saa716x: cleanup Kconfig

This fixes CONFIG_DESCRIPTION checkpatch warnings. Also we select the
required core module automatically.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/Kconfig | 43 ++++++++++---------------------
 1 file changed, 14 insertions(+), 29 deletions(-)

diff --git a/drivers/media/pci/saa716x/Kconfig b/drivers/media/pci/saa716x/Kconfig
index 2f310d93934a4..d789c10ebccf7 100644
--- a/drivers/media/pci/saa716x/Kconfig
+++ b/drivers/media/pci/saa716x/Kconfig
@@ -1,70 +1,55 @@
 menuconfig SAA716X_SUPPORT
-	bool "Support for SAA716x family from NXP/Philips"
-	depends on PCI && I2C
+	bool "Support for SAA7160/1/2 family from NXP/Philips"
+	depends on PCI && I2C && DVB_CORE
 	help
-	  support for saa716x
+	  Support for PCIe cards based on the SAA7160/SAA7161/SAA7162
+	  PCI Express bridge from NXP/Philips.
+	  There are budget, hybrid, and full-featured cards.
+	  Say Y if you own such a device and want to use it.
 
 if SAA716X_SUPPORT
 config SAA716X_CORE
-	tristate "SAA7160/1/2 PCI Express bridge based devices"
-	depends on PCI && I2C
-
-	help
-	  Support for PCI cards based on the SAA7160/1/2 PCI Express bridge.
-
-	  Say Y if you own such a device and want to use it.
+	tristate
 
 config DVB_SAA716X_BUDGET
 	tristate "SAA7160/1/2 based Budget PCIe cards (DVB only)"
-	depends on SAA716X_CORE && DVB_CORE
+	select SAA716X_CORE
 	select I2C_MUX
 	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_SI2168 if MEDIA_SUBDRV_AUTOSELECT
 	select MEDIA_TUNER_SI2157 if MEDIA_SUBDRV_AUTOSELECT
-
 	help
 	  Support for the SAA7160/1/2 based Budget PCIe DVB cards
 	  Currently supported devices are:
-
 	  * Technisat Skystar 2 Express HD
 	  * TurboSight 6281 (DVB-T/T2/C)
 	  * TurboSight 6285 (DVB-T/T2/C)
 
-	  Say Y if you own such a device and want to use it.
-
 config DVB_SAA716X_HYBRID
 	tristate "SAA7160/1/2 based Hybrid PCIe cards (DVB + Analog)"
-	depends on SAA716X_CORE && DVB_CORE
+	select SAA716X_CORE
 	select DVB_TDA1004X if MEDIA_SUBDRV_AUTOSELECT
 	select MEDIA_TUNER_TDA827X if MEDIA_SUBDRV_AUTOSELECT
-
 	help
 	  Support for the SAA7160/1/2 based Hybrid PCIe DVB cards
 	  Currently supported devices are:
-
 	  * NXP Reference (Atlantis) (DVB-T x2)
 	  * NXP Reference (Nemo) (DVB-T)
 	  * Twinhan/Azurewave VP-6090 (DVB-S x2, DVB-T x2)
 
-	  Say Y if you own such a device and want to use it.
-
 config DVB_SAA716X_FF
-	tristate "SAA7160/1/2 based Full Fledged PCIe cards"
-	depends on SAA716X_CORE && DVB_CORE
+	tristate "SAA7160/1/2 based Full-Featured PCIe cards"
 	depends on INPUT # IR
+	select SAA716X_CORE
 	select DVB_STV6110x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_STV090x if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_ISL6423 if MEDIA_SUBDRV_AUTOSELECT
-
 	help
-	  Support for the SAA7160/1/2 based  Full fledged PCIe DVB cards
-	  These cards do feature a hardware MPEG decoder and other
-	  peripherals. Also known as Premium cards.
+	  Support for the SAA7160/1/2 based Full-Featured PCIe DVB cards
+	  These cards feature a hardware MPEG decoder and other peripherals.
+	  Also known as Premium cards.
 	  Currently supported devices are:
-
 	  * Technotrend S2 6400 Dual S2 HD (DVB-S/S2 x2)
 
-	  Say Y if you own such a device and want to use it.
-
 endif # SAA716X_SUPPORT

From dadd0dcc1b2625588c44528d2b4807c41d1432e8 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 19:12:33 +0100
Subject: [PATCH 325/364] saa716x_ff: constify structs

Constify struct file_operations, struct dvb_device, and config structs.
All these are not supposed to change at runtime. This also fixes
CONST_STRUCT checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index b7654035de9c5..0101027abb996 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -392,13 +392,13 @@ static long dvb_osd_ioctl(struct file *file, unsigned int cmd, unsigned long arg
 	return err;
 }
 
-static struct file_operations dvb_osd_fops = {
+static const struct file_operations dvb_osd_fops = {
 	.unlocked_ioctl	= dvb_osd_ioctl,
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 };
 
-static struct dvb_device dvbdev_osd = {
+static const struct dvb_device dvbdev_osd = {
 	.priv		= NULL,
 	.users		= 2,
 	.writers	= 2,
@@ -458,13 +458,13 @@ static long dvb_audio_ioctl(struct file *file, unsigned int cmd, unsigned long a
 	return saa716x_usercopy(dvbdev, cmd, arg, do_dvb_audio_ioctl);
 }
 
-static struct file_operations dvb_audio_fops = {
+static const struct file_operations dvb_audio_fops = {
 	.unlocked_ioctl	= dvb_audio_ioctl,
 	.open		= dvb_generic_open,
 	.release	= dvb_generic_release,
 };
 
-static struct dvb_device dvbdev_audio = {
+static const struct dvb_device dvbdev_audio = {
 	.priv		= NULL,
 	.users		= 1,
 	.writers	= 1,
@@ -911,7 +911,7 @@ static long dvb_video_ioctl(struct file *file, unsigned int cmd, unsigned long a
 	return saa716x_usercopy(dvbdev, cmd, arg, do_dvb_video_ioctl);
 }
 
-static struct file_operations dvb_video_fops = {
+static const struct file_operations dvb_video_fops = {
 	.read		= dvb_video_read,
 	.write		= dvb_video_write,
 	.unlocked_ioctl	= dvb_video_ioctl,
@@ -920,7 +920,7 @@ static struct file_operations dvb_video_fops = {
 	.poll		= dvb_video_poll,
 };
 
-static struct dvb_device dvbdev_video = {
+static const struct dvb_device dvbdev_video = {
 	.priv		= NULL,
 	.users		= 5,
 	.readers	= 5,
@@ -1616,13 +1616,13 @@ static struct stv090x_config tt6400_stv090x_config = {
 	.tuner_get_status	= NULL,
 };
 
-static struct stv6110x_config tt6400_stv6110x_config = {
+static const struct stv6110x_config tt6400_stv6110x_config = {
 	.addr			= 0x60,
 	.refclk			= 27000000,
 	.clk_div		= 2,
 };
 
-static struct isl6423_config tt6400_isl6423_config[2] = {
+static const struct isl6423_config tt6400_isl6423_config[2] = {
 	{
 		.current_max		= SEC_CURRENT_515m,
 		.curlim			= SEC_CURRENT_LIM_ON,
@@ -1694,7 +1694,7 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 	return 0;
 }
 
-static struct saa716x_config saa716x_s26400_config = {
+static const struct saa716x_config saa716x_s26400_config = {
 	.model_name		= SAA716x_MODEL_S2_6400_DUAL,
 	.dev_type		= SAA716x_DEV_S2_6400_DUAL,
 	.adapters		= 2,

From f0be27d2b59dc1dee4d8cd4d6836f106d9484764 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 19:26:44 +0100
Subject: [PATCH 326/364] saa716x_budget: constify config structs

Constify all config structs that are not supposed to change at runtime.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 8516cf75365b0..7755fd1c9de52 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -254,7 +254,7 @@ static int skystar2_voltage_boost(struct dvb_frontend *fe, long arg)
 	return err;
 }
 
-static struct stv6110x_config skystar2_stv6110x_config = {
+static const struct stv6110x_config skystar2_stv6110x_config = {
 	.addr			= 0x60,
 	.refclk			= 16000000,
 	.clk_div		= 2,
@@ -336,7 +336,7 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 	return -ENODEV;
 }
 
-static struct saa716x_config skystar2_express_hd_config = {
+static const struct saa716x_config skystar2_express_hd_config = {
 	.model_name		= SAA716x_MODEL_SKYSTAR2_EXPRESS_HD,
 	.dev_type		= SAA716x_DEV_SKYSTAR2_EXPRESS_HD,
 	.adapters		= 1,
@@ -429,7 +429,7 @@ static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter, int
 	return -ENODEV;
 }
 
-static struct saa716x_config saa716x_tbs6281_config = {
+static const struct saa716x_config saa716x_tbs6281_config = {
 	.model_name		= SAA716x_MODEL_TBS6281,
 	.dev_type		= SAA716x_DEV_TBS6281,
 	.adapters		= 2,
@@ -523,7 +523,7 @@ static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter, int
 	return -ENODEV;
 }
 
-static struct saa716x_config saa716x_tbs6285_config = {
+static const struct saa716x_config saa716x_tbs6285_config = {
 	.model_name		= SAA716x_MODEL_TBS6285,
 	.dev_type		= SAA716x_DEV_TBS6285,
 	.adapters		= 4,

From 8b26ee51111699d0d9311dfe1375420044dba03e Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 19:44:12 +0100
Subject: [PATCH 327/364] saa716x_hybrid: constify config structs

Constify all config structs that are not supposed to change at runtime.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 6f0574cd3aa6c..e3fdfa323ce79 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -196,7 +196,7 @@ static int tda1004x_vp6090_request_firmware(struct dvb_frontend *fe,
 	return request_firmware(fw, name, &adapter->saa716x->pdev->dev);
 }
 
-static struct tda1004x_config tda1004x_vp6090_config = {
+static const struct tda1004x_config tda1004x_vp6090_config = {
 	.demod_address		= 0x8,
 	.invert			= 0,
 	.invert_oclk		= 0,
@@ -234,7 +234,7 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	return 0;
 }
 
-static struct saa716x_config saa716x_vp6090_config = {
+static const struct saa716x_config saa716x_vp6090_config = {
 	.model_name		= SAA716x_MODEL_TWINHAN_VP6090,
 	.dev_type		= SAA716x_DEV_TWINHAN_VP6090,
 	.adapters		= 1,
@@ -260,7 +260,7 @@ static int tda1004x_atlantis_request_firmware(struct dvb_frontend *fe,
 	return request_firmware(fw, name, &adapter->saa716x->pdev->dev);
 }
 
-static struct tda1004x_config tda1004x_atlantis_config = {
+static const struct tda1004x_config tda1004x_atlantis_config = {
 	.demod_address		= 0x8,
 	.invert			= 0,
 	.invert_oclk		= 0,
@@ -348,7 +348,7 @@ static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter,
 	return -ENODEV;
 }
 
-static struct saa716x_config saa716x_atlantis_config = {
+static const struct saa716x_config saa716x_atlantis_config = {
 	.model_name		= SAA716x_MODEL_NXP_ATLANTIS,
 	.dev_type		= SAA716x_DEV_NXP_ATLANTIS,
 	.adapters		= 2,
@@ -386,7 +386,7 @@ static int tda1004x_nemo_request_firmware(struct dvb_frontend *fe,
 	return request_firmware(fw, name, &adapter->saa716x->pdev->dev);
 }
 
-static struct tda1004x_config tda1004x_nemo_config = {
+static const struct tda1004x_config tda1004x_nemo_config = {
 	.demod_address		= 0x8,
 	.invert			= 0,
 	.invert_oclk		= 0,
@@ -457,7 +457,7 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 	return -ENODEV;
 }
 
-static struct saa716x_config saa716x_nemo_config = {
+static const struct saa716x_config saa716x_nemo_config = {
 	.model_name		= SAA716x_MODEL_NXP_NEMO,
 	.dev_type		= SAA716x_DEV_NXP_NEMO,
 	.adapters		= 1,

From 695cd8cce9a1fe69d3b549ffd2bcf942e51d83b5 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 13:47:00 +0100
Subject: [PATCH 328/364] saa716x: convert printk to pci_info/err/dbg

Use recommended pci device print functions to unify output and to get rid of
related checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 54 ++++++++--------
 drivers/media/pci/saa716x/saa716x_boot.c |  4 +-
 drivers/media/pci/saa716x/saa716x_cgu.c  | 10 +--
 drivers/media/pci/saa716x/saa716x_dma.c  | 34 +++++-----
 drivers/media/pci/saa716x/saa716x_fgpi.c |  8 +--
 drivers/media/pci/saa716x/saa716x_i2c.c  | 79 ++++++++++++------------
 drivers/media/pci/saa716x/saa716x_pci.c  | 39 +++++-------
 drivers/media/pci/saa716x/saa716x_vip.c  |  6 +-
 8 files changed, 113 insertions(+), 121 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 5a13df5cde5ec..97cf09745801e 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -22,7 +22,7 @@ void saa716x_dma_start(struct saa716x_dev *saa716x, u8 adapter)
 {
 	struct fgpi_stream_params params;
 
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Start DMA engine for Adapter:%d", adapter);
+	pci_dbg(saa716x->pdev, "Start DMA engine for Adapter:%d", adapter);
 
 	params.bits		= 8;
 	params.samples		= 188;
@@ -38,7 +38,7 @@ void saa716x_dma_start(struct saa716x_dev *saa716x, u8 adapter)
 
 void saa716x_dma_stop(struct saa716x_dev *saa716x, u8 adapter)
 {
-	dprintk(SAA716x_DEBUG, 1, "SAA716x Stop DMA engine for Adapter:%d", adapter);
+	pci_dbg(saa716x->pdev, "Stop DMA engine for Adapter:%d", adapter);
 
 	saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[adapter].ts_fgpi);
 }
@@ -49,17 +49,17 @@ static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
 	struct saa716x_adapter *saa716x_adap	= dvbdmx->priv;
 	struct saa716x_dev *saa716x		= saa716x_adap->saa716x;
 
-	dprintk(SAA716x_DEBUG, 1, "SAA716x DVB Start feed");
+	pci_dbg(saa716x->pdev, "DVB Start feed");
 	if (!dvbdmx->dmx.frontend) {
-		dprintk(SAA716x_DEBUG, 1, "no frontend ?");
+		pci_dbg(saa716x->pdev, "no frontend ?");
 		return -EINVAL;
 	}
 	saa716x_adap->feeds++;
-	dprintk(SAA716x_DEBUG, 1, "SAA716x start feed, feeds=%d",
+	pci_dbg(saa716x->pdev, "start feed, feeds=%d",
 		saa716x_adap->feeds);
 
 	if (saa716x_adap->feeds == 1) {
-		dprintk(SAA716x_DEBUG, 1, "SAA716x start feed & dma");
+		pci_dbg(saa716x->pdev, "start feed & dma");
 		saa716x_dma_start(saa716x, saa716x_adap->count);
 	}
 
@@ -72,14 +72,14 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	struct saa716x_adapter *saa716x_adap	= dvbdmx->priv;
 	struct saa716x_dev *saa716x		= saa716x_adap->saa716x;
 
-	dprintk(SAA716x_DEBUG, 1, "SAA716x DVB Stop feed");
+	pci_dbg(saa716x->pdev, "DVB Stop feed");
 	if (!dvbdmx->dmx.frontend) {
-		dprintk(SAA716x_DEBUG, 1, "no frontend ?");
+		pci_dbg(saa716x->pdev, "no frontend ?");
 		return -EINVAL;
 	}
 	saa716x_adap->feeds--;
 	if (saa716x_adap->feeds == 0) {
-		dprintk(SAA716x_DEBUG, 1, "saa716x stop feed and dma");
+		pci_dbg(saa716x->pdev, "stop feed and dma");
 		saa716x_dma_stop(saa716x, saa716x_adap->count);
 	}
 
@@ -104,7 +104,7 @@ static void saa716x_demux_worker(unsigned long data)
 		}
 	}
 	if (demux == NULL) {
-		printk(KERN_ERR "%s: unexpected channel %u\n",
+		pci_err(saa716x->pdev, "%s: unexpected channel %u",
 		       __func__, fgpi_entry->dma_channel);
 		return;
 	}
@@ -113,10 +113,10 @@ static void saa716x_demux_worker(unsigned long data)
 	if (write_index < 0)
 		return;
 
-	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
+	pci_dbg(saa716x->pdev, "dma buffer = %d", write_index);
 
 	if (write_index == fgpi_entry->read_index) {
-		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
+		pci_dbg(saa716x->pdev, "%s: called but nothing to do", __func__);
 		return;
 	}
 
@@ -148,14 +148,14 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 
 	for (i = 0; i < config->adapters; i++) {
 
-		dprintk(SAA716x_DEBUG, 1, "dvb_register_adapter");
+		pci_dbg(saa716x->pdev, "dvb_register_adapter");
 		if (dvb_register_adapter(&saa716x_adap->dvb_adapter,
 					 "SAA716x dvb adapter",
 					 saa716x->module,
 					 &saa716x->pdev->dev,
 					 adapter_nr) < 0) {
 
-			dprintk(SAA716x_ERROR, 1, "Error registering adapter");
+			pci_err(saa716x->pdev, "Error registering adapter");
 			return -ENODEV;
 		}
 
@@ -173,10 +173,10 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		saa716x_adap->demux.stop_feed		= saa716x_dvb_stop_feed;
 		saa716x_adap->demux.write_to_decoder	= NULL;
 
-		dprintk(SAA716x_DEBUG, 1, "dvb_dmx_init");
+		pci_dbg(saa716x->pdev, "dvb_dmx_init");
 		result = dvb_dmx_init(&saa716x_adap->demux);
 		if (result < 0) {
-			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_dbg(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err0;
 		}
 
@@ -184,44 +184,44 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		saa716x_adap->dmxdev.demux		= &saa716x_adap->demux.dmx;
 		saa716x_adap->dmxdev.capabilities	= 0;
 
-		dprintk(SAA716x_DEBUG, 1, "dvb_dmxdev_init");
+		pci_dbg(saa716x->pdev, "dvb_dmxdev_init");
 		result = dvb_dmxdev_init(&saa716x_adap->dmxdev, &saa716x_adap->dvb_adapter);
 		if (result < 0) {
-			dprintk(SAA716x_ERROR, 1, "dvb_dmxdev_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev, "dvb_dmxdev_init failed, ERROR=%d", result);
 			goto err1;
 		}
 
 		saa716x_adap->fe_hw.source = DMX_FRONTEND_0;
 		result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 		if (result < 0) {
-			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err2;
 		}
 
 		saa716x_adap->fe_mem.source = DMX_MEMORY_FE;
 		result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 		if (result < 0) {
-			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err3;
 		}
 		result = saa716x_adap->demux.dmx.connect_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 		if (result < 0) {
-			dprintk(SAA716x_ERROR, 1, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
 			goto err4;
 		}
 
 		dvb_net_init(&saa716x_adap->dvb_adapter, &saa716x_adap->dvb_net, &saa716x_adap->demux.dmx);
 //		tasklet_init(&saa716x_adap->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
-		dprintk(SAA716x_DEBUG, 1, "Frontend Init");
+		pci_dbg(saa716x->pdev, "Frontend Init");
 		saa716x_adap->saa716x = saa716x;
 
 		if (config->frontend_attach) {
 			result = config->frontend_attach(saa716x_adap, i);
 			if (result < 0)
-				dprintk(SAA716x_ERROR, 1, "SAA716x frontend attach failed");
+				pci_err(saa716x->pdev, "frontend attach failed");
 
 			if (saa716x_adap->fe == NULL) {
-				dprintk(SAA716x_ERROR, 1, "A frontend driver was not found for [%04x:%04x] subsystem [%04x:%04x]\n",
+				pci_err(saa716x->pdev, "A frontend driver was not found for [%04x:%04x] subsystem [%04x:%04x]",
 					saa716x->pdev->vendor,
 					saa716x->pdev->device,
 					saa716x->pdev->subsystem_vendor,
@@ -229,13 +229,13 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 			} else {
 				result = dvb_register_frontend(&saa716x_adap->dvb_adapter, saa716x_adap->fe);
 				if (result < 0) {
-					dprintk(SAA716x_ERROR, 1, "SAA716x register frontend failed");
+					pci_err(saa716x->pdev, "register frontend failed");
 					goto err6;
 				}
 			}
 
 		} else {
-			dprintk(SAA716x_ERROR, 1, "Frontend attach = NULL");
+			pci_err(saa716x->pdev, "Frontend attach = NULL");
 		}
 
 		/* assign video port to fgpi */
@@ -308,7 +308,7 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 		dvb_dmxdev_release(&saa716x_adap->dmxdev);
 		dvb_dmx_release(&saa716x_adap->demux);
 
-		dprintk(SAA716x_DEBUG, 1, "dvb_unregister_adapter");
+		pci_dbg(saa716x->pdev, "dvb_unregister_adapter");
 		dvb_unregister_adapter(&saa716x_adap->dvb_adapter);
 
 		saa716x_adap++;
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 639cfb1fef233..8043e482616c9 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -16,7 +16,7 @@
 
 static void saa716x_core_reset(struct saa716x_dev *saa716x)
 {
-	dprintk(SAA716x_DEBUG, 1, "RESET Modules");
+	pci_dbg(saa716x->pdev, "RESET Modules");
 
 	/* GREG */
 	SAA716x_EPWR(GREG, GREG_SW_RST, GREG_SW_RESET);
@@ -84,7 +84,7 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 
 	/* General setup for MMU */
 	SAA716x_EPWR(MMU, MMU_MODE, 0x14);
-	dprintk(SAA716x_DEBUG, 1, "SAA%02x Jetpack Successfully initialized", saa716x->pdev->device);
+	pci_dbg(saa716x->pdev, "SAA%02x Jetpack Successfully initialized", saa716x->pdev->device);
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 80c70757aa128..89c624f3101f8 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -72,7 +72,7 @@ int saa716x_getbootscript_setup(struct saa716x_dev *saa716x)
 		else
 			cgu->clk_freq[i] = 0;
 
-		dprintk(SAA716x_DEBUG, 1, "Domain %d: %s <0x%02x> Divider: 0x%x --> N=%d, M=%d, freq=%d",
+		pci_dbg(saa716x->pdev, "Domain %d: %s <0x%02x> Divider: 0x%x --> N=%d, M=%d, freq=%d",
 			i, clk_desc[i], cgu_clk[i], cgu->clk_boot_div[i], N, M, cgu->clk_freq[i]);
 	}
 	/* store clock settings */
@@ -190,7 +190,7 @@ int saa716x_set_clk_internal(struct saa716x_dev *saa716x, u32 port)
 		break;
 
 	default:
-		dprintk(SAA716x_ERROR, 1, "Unknown port <%02x>", port);
+		pci_err(saa716x->pdev, "Unknown port <%02x>", port);
 		delay = 0;
 		break;
 	}
@@ -300,7 +300,7 @@ int saa716x_set_clk_external(struct saa716x_dev *saa716x, u32 port)
 		break;
 
 	default:
-		dprintk(SAA716x_ERROR, 1, "Unknown port <%02x>", port);
+		pci_err(saa716x->pdev, "Unknown port <%02x>", port);
 		delay = 0;
 		break;
 
@@ -344,7 +344,7 @@ int saa716x_get_clk(struct saa716x_dev *saa716x,
 		*frequency = cgu->clk_freq[CLK_DOMAIN_VI1];
 		break;
 	default:
-		dprintk(SAA716x_ERROR, 1, "Error Clock domain <%02x>", domain);
+		pci_err(saa716x->pdev, "Error Clock domain <%02x>", domain);
 		break;
 	}
 
@@ -492,7 +492,7 @@ int saa716x_set_clk(struct saa716x_dev *saa716x,
 	cgu->clk_curr_div[domain] <<= 3;
 	cgu->clk_curr_div[domain] |= lsb;
 
-	dprintk(SAA716x_DEBUG, 1, "Domain <0x%02x> Frequency <%d> Set Freq <%d> N=%d M=%d Divider <0x%02x>",
+	pci_dbg(saa716x->pdev, "Domain <0x%02x> Frequency <%d> Set Freq <%d> N=%d M=%d Divider <0x%02x>",
 		domain,
 		frequency,
 		cgu->clk_freq[domain],
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index d2f7581d6ca69..92cbf9a8dcf9f 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -17,11 +17,11 @@ static int saa716x_allocate_ptable(struct saa716x_dmabuf *dmabuf)
 	struct saa716x_dev *saa716x	= dmabuf->saa716x;
 	struct pci_dev *pdev		= saa716x->pdev;
 
-	dprintk(SAA716x_DEBUG, 1, "SG Page table allocate");
+	pci_dbg(saa716x->pdev, "SG Page table allocate");
 	dmabuf->mem_ptab_virt = (void *) __get_free_page(GFP_KERNEL);
 
 	if (dmabuf->mem_ptab_virt == NULL) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: Out of pages !");
+		pci_err(saa716x->pdev, "ERROR: Out of pages !");
 		return -ENOMEM;
 	}
 
@@ -31,7 +31,7 @@ static int saa716x_allocate_ptable(struct saa716x_dmabuf *dmabuf)
 						DMA_TO_DEVICE);
 
 	if (dmabuf->mem_ptab_phys == 0) {
-		dprintk(SAA716x_ERROR, 1, "ERROR: map memory failed !");
+		pci_err(saa716x->pdev, "ERROR: map memory failed !");
 		return -ENOMEM;
 	}
 
@@ -46,7 +46,7 @@ static void saa716x_free_ptable(struct saa716x_dmabuf *dmabuf)
 	struct pci_dev *pdev		= saa716x->pdev;
 
 	BUG_ON(dmabuf == NULL);
-	dprintk(SAA716x_DEBUG, 1, "SG Page table free");
+	pci_dbg(saa716x->pdev, "SG Page table free");
 
 	/* free physical PCI memory */
 	if (dmabuf->mem_ptab_phys != 0) {
@@ -70,7 +70,7 @@ static void saa716x_dmabuf_sgfree(struct saa716x_dmabuf *dmabuf)
 	struct saa716x_dev *saa716x = dmabuf->saa716x;
 
 	BUG_ON(dmabuf == NULL);
-	dprintk(SAA716x_DEBUG, 1, "SG free");
+	pci_dbg(saa716x->pdev, "SG free");
 
 	dmabuf->mem_virt = NULL;
 	if (dmabuf->mem_virt_noalign != NULL) {
@@ -100,7 +100,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 
 	BUG_ON(!(size > 0));
 	BUG_ON(dmabuf == NULL);
-	dprintk(SAA716x_DEBUG, 1, "SG allocate");
+	pci_dbg(saa716x->pdev, "SG allocate");
 
 	if ((size % SAA716x_PAGE_SIZE) != 0) /* calculate required pages */
 		pages = size / SAA716x_PAGE_SIZE + 1;
@@ -110,11 +110,11 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 	/* Allocate memory for SG list */
 	dmabuf->sg_list = kzalloc(sizeof(struct scatterlist) * pages, GFP_KERNEL);
 	if (dmabuf->sg_list == NULL) {
-		dprintk(SAA716x_ERROR, 1, "Failed to allocate memory for scatterlist.");
+		pci_err(saa716x->pdev, "Failed to allocate memory for scatterlist.");
 		return -ENOMEM;
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "Initializing SG table");
+	pci_dbg(saa716x->pdev, "Initializing SG table");
 	sg_init_table(dmabuf->sg_list, pages);
 
 	if (buf == NULL) {
@@ -122,7 +122,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 		/* allocate memory, unaligned */
 		dmabuf->mem_virt_noalign = vmalloc((pages + 1) * SAA716x_PAGE_SIZE);
 		if (dmabuf->mem_virt_noalign == NULL) {
-			dprintk(SAA716x_ERROR, 1, "Failed to allocate memory for buffer");
+			pci_err(saa716x->pdev, "Failed to allocate memory for buffer");
 			return -ENOMEM;
 		}
 		memset(dmabuf->mem_virt_noalign, 0, (pages + 1) * SAA716x_PAGE_SIZE);
@@ -138,7 +138,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 	dmabuf->list_len = pages; /* scatterlist length */
 	list = dmabuf->sg_list;
 
-	dprintk(SAA716x_DEBUG, 1, "Allocating SG pages");
+	pci_dbg(saa716x->pdev, "Allocating SG pages");
 	for (i = 0; i < pages; i++) {
 		if (buf == NULL)
 			pg = vmalloc_to_page(dmabuf->mem_virt + i * SAA716x_PAGE_SIZE);
@@ -149,7 +149,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 		sg_set_page(&list[i], pg, SAA716x_PAGE_SIZE, 0);
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "Done!");
+	pci_dbg(saa716x->pdev, "Done!");
 	return 0;
 }
 
@@ -167,7 +167,7 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 	BUG_ON(dmabuf == NULL);
 	BUG_ON(sg_list == NULL);
 	BUG_ON(pages == 0);
-	dprintk(SAA716x_DEBUG, 1, "SG page fill");
+	pci_dbg(saa716x->pdev, "SG page fill");
 
 	/* make page writable for the PC */
 	dma_sync_single_for_cpu(&pdev->dev, dmabuf->mem_ptab_phys, SAA716x_PAGE_SIZE, DMA_TO_DEVICE);
@@ -218,7 +218,7 @@ void saa716x_dmabufsync_dev(struct saa716x_dmabuf *dmabuf)
 	struct saa716x_dev *saa716x	= dmabuf->saa716x;
 	struct pci_dev *pdev		= saa716x->pdev;
 
-	dprintk(SAA716x_DEBUG, 1, "DMABUF sync DEVICE");
+	pci_dbg(saa716x->pdev, "DMABUF sync DEVICE");
 	BUG_ON(dmabuf->sg_list == NULL);
 
 	dma_sync_sg_for_device(&pdev->dev,
@@ -233,7 +233,7 @@ void saa716x_dmabufsync_cpu(struct saa716x_dmabuf *dmabuf)
 	struct saa716x_dev *saa716x	= dmabuf->saa716x;
 	struct pci_dev *pdev		= saa716x->pdev;
 
-	dprintk(SAA716x_DEBUG, 1, "DMABUF sync CPU");
+	pci_dbg(saa716x->pdev, "DMABUF sync CPU");
 	BUG_ON(dmabuf->sg_list == NULL);
 
 	dma_sync_sg_for_cpu(&pdev->dev,
@@ -266,20 +266,20 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 	/* Allocate page table */
 	ret = saa716x_allocate_ptable(dmabuf);
 	if (ret < 0) {
-		dprintk(SAA716x_ERROR, 1, "PT alloc failed, Out of memory");
+		pci_err(saa716x->pdev, "PT alloc failed, Out of memory");
 		goto err1;
 	}
 
 	/* Allocate buffer as SG */
 	ret = saa716x_dmabuf_sgalloc(dmabuf, NULL, size);
 	if (ret < 0) {
-		dprintk(SAA716x_ERROR, 1, "SG alloc failed");
+		pci_err(saa716x->pdev, "SG alloc failed");
 		goto err2;
 	}
 
 	ret = dma_map_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len, DMA_FROM_DEVICE);
 	if (ret < 0) {
-		dprintk(SAA716x_ERROR, 1, "SG map failed");
+		pci_err(saa716x->pdev, "SG map failed");
 		goto err3;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index a675ee00c148c..dd7ab91ca47be 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -86,7 +86,7 @@ int saa716x_fgpi_get_write_index(struct saa716x_dev *saa716x, u32 fgpi_index)
 		break;
 
 	default:
-		printk(KERN_ERR "%s: unexpected fgpi %u\n",
+		pci_err(saa716x->pdev, "%s: unexpected fgpi %u",
 		       __func__, fgpi_index);
 		return -1;
 	}
@@ -190,7 +190,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	}
 
 	if (val) {
-		dprintk(SAA716x_ERROR, 1, "Error: BAM FGPI Reset failed!");
+		pci_err(saa716x->pdev, "Error: BAM FGPI Reset failed!");
 		return -EIO;
 	}
 
@@ -210,7 +210,7 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 	/* get module ID */
 	mid = SAA716x_EPRD(fgpi_port, FGPI_MODULE_ID);
 	if (mid != 0x14b0100)
-		dprintk(SAA716x_ERROR, 1, "FGPI Id<%04x> is not supported", mid);
+		pci_err(saa716x->pdev, "FGPI Id<%04x> is not supported", mid);
 
 	/* Initialize FGPI block */
 	SAA716x_EPWR(fgpi_port, FGPI_REC_SIZE, stream_params->samples * (stream_params->bits / 8));
@@ -309,7 +309,7 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 	}
 
 	if (!(val & 0x80)) {
-		dprintk(SAA716x_ERROR, 1, "Error: PTE pre-fetch failed!");
+		pci_err(saa716x->pdev, "Error: PTE pre-fetch failed!");
 		return -EIO;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index a38d4b599f5a0..e6ac5d9deeb66 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -61,7 +61,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (!(reg & 0xd)) {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%02x) %s RESET failed, Exiting !",
+		pci_err(saa716x->pdev, "Adapter (%02x) %s RESET failed, Exiting !",
 			I2C_DEV, adapter->name);
 		err = -EIO;
 		goto exit;
@@ -80,7 +80,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	for (i = 0; i < 100; i++) {
 		reg = SAA716x_EPRD(I2C_DEV, I2C_CONTROL);
 		if (reg == 0xc0) {
-			dprintk(SAA716x_ERROR, 1, "Adapter (%02x) %s RESET",
+			pci_dbg(saa716x->pdev, "Adapter (%02x) %s RESET",
 				I2C_DEV, adapter->name);
 			break;
 		}
@@ -91,7 +91,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	}
 
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "Adapter (%02x) %s RESET failed",
+		pci_err(saa716x->pdev, "Adapter (%02x) %s RESET failed",
 			I2C_DEV, adapter->name);
 
 		saa716x_term_xfer(i2c, I2C_DEV);
@@ -103,7 +103,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	switch (i2c->i2c_rate) {
 	case SAA716x_I2C_RATE_400:
 
-		dprintk(SAA716x_DEBUG, 1, "Initializing Adapter %s @ 400k", adapter->name);
+		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 400k", adapter->name);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x10);
@@ -111,7 +111,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	case SAA716x_I2C_RATE_100:
 
-		dprintk(SAA716x_DEBUG, 1, "Initializing Adapter %s @ 100k", adapter->name);
+		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 100k", adapter->name);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/100kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/100kHz */
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x60);
@@ -119,7 +119,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	default:
 
-		dprintk(SAA716x_ERROR, 1, "Adapter %s Unknown Rate (Rate=0x%02x)",
+		pci_err(saa716x->pdev, "Adapter %s Unknown Rate (Rate=0x%02x)",
 			adapter->name,
 			i2c->i2c_rate);
 
@@ -145,7 +145,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		reg = SAA716x_EPRD(I2C_DEV, INT_ENABLE);
 		if (reg != 0x81) {
 
-			dprintk(SAA716x_ERROR, 1,
+			pci_err(saa716x->pdev,
 				"Adapter (%d) %s Interrupt enable failed, Exiting !",
 				i,
 				adapter->name);
@@ -159,7 +159,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 	if (!(reg & 0xd)) {
 
-		dprintk(SAA716x_ERROR, 1,
+		pci_err(saa716x->pdev,
 			"Adapter (%02x) %s has bad state, Exiting !",
 			I2C_DEV,
 			adapter->name);
@@ -168,7 +168,7 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		goto exit;
 	}
 	reg = SAA716x_EPRD(CGU, CGU_SCR_3);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%02x) Autowake <%d> Active <%d>",
+	pci_dbg(saa716x->pdev, "Adapter (%02x) Autowake <%d> Active <%d>",
 		I2C_DEV,
 		(reg >> 1) & 0x01,
 		reg & 0x01);
@@ -199,11 +199,11 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 			reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
 
 			if (reg & SAA716x_I2C_TXBUSY) {
-				dprintk(SAA716x_ERROR, 1, "FIFO full or Blocked");
+				pci_err(saa716x->pdev, "FIFO full or Blocked");
 
 				err = saa716x_i2c_hwinit(i2c, I2C_DEV);
 				if (err < 0) {
-					dprintk(SAA716x_ERROR, 1, "Error Reinit");
+					pci_err(saa716x->pdev, "Error Reinit");
 					err = -EIO;
 					goto exit;
 				}
@@ -226,7 +226,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	}
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
-		dprintk(SAA716x_ERROR, 1, "TXFIFO not empty after Timeout, tried %d loops!", i);
+		pci_err(saa716x->pdev, "TXFIFO not empty after Timeout, tried %d loops!", i);
 		err = -EIO;
 		goto exit;
 	}
@@ -234,7 +234,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	return err;
 
 exit:
-	dprintk(SAA716x_ERROR, 1, "I2C Send failed (Err=%d)", err);
+	pci_err(saa716x->pdev, "I2C Send failed (Err=%d)", err);
 	return err;
 }
 
@@ -252,7 +252,7 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 		}
 	}
 	if (reg & SAA716x_I2C_RXBUSY) {
-		dprintk(SAA716x_INFO, 1, "FIFO empty");
+		pci_err(saa716x->pdev, "FIFO empty");
 		err = -EIO;
 		goto exit;
 	}
@@ -262,7 +262,7 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 
 	return 0;
 exit:
-	dprintk(SAA716x_ERROR, 1, "Error Reading data, err=%d", err);
+	pci_err(saa716x->pdev, "Error Reading data, err=%d", err);
 	return err;
 }
 
@@ -294,7 +294,7 @@ static int saa716x_i2c_irq_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 			/* a signal arrived */
 			err = -ERESTARTSYS;
 		} else {
-			dprintk(SAA716x_ERROR, 1, "timed out waiting for end of xfer!");
+			pci_err(saa716x->pdev, "timed out waiting for end of xfer!");
 			err = -EIO;
 		}
 	}
@@ -314,10 +314,10 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 
 	/* first write START with I2C address */
 	data = I2C_START_BIT | (addr << 1);
-	dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x", len, data);
+	pci_dbg(saa716x->pdev, "length=%d Addr:0x%02x", len, data);
 	err = saa716x_i2c_send(i2c, I2C_DEV, data);
 	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "Address write failed");
+		pci_err(saa716x->pdev, "Address write failed");
 		goto exit;
 	}
 
@@ -335,12 +335,12 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 
 		for (i = 0; i < bytes; i++) {
 			data = buf[i];
-			dprintk(SAA716x_DEBUG, 0, "    <W %04x> 0x%02x\n", i, data);
+			pci_dbg(saa716x->pdev, "    <W %04x> 0x%02x", i, data);
 			if (add_stop && i == (len - 1))
 				data |= I2C_STOP_BIT;
 			err = saa716x_i2c_send(i2c, I2C_DEV, data);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Data send failed");
+				pci_err(saa716x->pdev, "Data send failed");
 				goto exit;
 			}
 		}
@@ -358,7 +358,7 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	return 0;
 
 exit:
-	dprintk(SAA716x_ERROR, 1, "Error writing data, err=%d", err);
+	pci_err(saa716x->pdev, "Error writing data, err=%d", err);
 	return err;
 }
 
@@ -375,10 +375,10 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 
 	/* first write START with I2C address */
 	data = I2C_START_BIT | (addr << 1) | 1;
-	dprintk(SAA716x_DEBUG, 1, "length=%d Addr:0x%02x", len, data);
+	pci_dbg(saa716x->pdev, "length=%d Addr:0x%02x", len, data);
 	err = saa716x_i2c_send(i2c, I2C_DEV, data);
 	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "Address write failed");
+		pci_err(saa716x->pdev, "Address write failed");
 		goto exit;
 	}
 
@@ -400,7 +400,7 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 				data |= I2C_STOP_BIT;
 			err = saa716x_i2c_send(i2c, I2C_DEV, data);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Data send failed");
+				pci_err(saa716x->pdev, "Data send failed");
 				goto exit;
 			}
 		}
@@ -413,10 +413,10 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 		for (i = 0; i < bytes; i++) {
 			err = saa716x_i2c_recv(i2c, I2C_DEV, &data);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Data receive failed");
+				pci_err(saa716x->pdev, "Data receive failed");
 				goto exit;
 			}
-			dprintk(SAA716x_DEBUG, 0, "    <R %04x> 0x%02x\n\n", i, data);
+			pci_dbg(saa716x->pdev, "    <R %04x> 0x%02x", i, data);
 			buf[i] = data;
 		}
 
@@ -428,7 +428,7 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	return 0;
 
 exit:
-	dprintk(SAA716x_ERROR, 1, "Error reading data, err=%d", err);
+	pci_err(saa716x->pdev, "Error reading data, err=%d", err);
 	return err;
 }
 
@@ -441,8 +441,7 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 	int i, j, err = 0;
 	int t;
 
-	dprintk(SAA716x_DEBUG, 0, "\n");
-	dprintk(SAA716x_DEBUG, 1, "Bus(%02x) I2C transfer", DEV);
+	pci_dbg(saa716x->pdev, "Bus(%02x) I2C transfer", DEV);
 	mutex_lock(&i2c->i2c_lock);
 
 	for (t = 0; t < 3; t++) {
@@ -462,20 +461,20 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 		}
 		break;
 retry:
-		dprintk(SAA716x_INFO, 1, "Error in Transfer, try %d", t);
+		pci_err(saa716x->pdev, "Error in Transfer, try %d", t);
 		for (i = 0; i < num; i++) {
-			dprintk(SAA716x_INFO, 1, "msg %d, addr = 0x%02x, len=%d, flags=0x%x",
+			pci_err(saa716x->pdev, "msg %d, addr = 0x%02x, len=%d, flags=0x%x",
 				i, msgs[i].addr, msgs[i].len, msgs[i].flags);
 			if (!(msgs[i].flags & I2C_M_RD)) {
 				for (j = 0; j < msgs[i].len; j++) {
-					dprintk(SAA716x_INFO, 1, "    <W %04x> 0x%02x",
+					pci_err(saa716x->pdev, "    <W %04x> 0x%02x",
 						j, msgs[i].buf[j]);
 				}
 			}
 		}
 		err = saa716x_i2c_hwinit(i2c, DEV);
 		if (err < 0) {
-			dprintk(SAA716x_ERROR, 1, "Error Reinit");
+			pci_err(saa716x->pdev, "Error Reinit");
 			err = -EIO;
 			goto bail_out;
 		}
@@ -488,7 +487,7 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, i
 		return -EIO;
 
 bail_out:
-	dprintk(SAA716x_ERROR, 1, "ERROR: Bailing out <%d>", err);
+	pci_err(saa716x->pdev, "ERROR: Bailing out <%d>", err);
 	mutex_unlock(&i2c->i2c_lock);
 	return err;
 }
@@ -511,7 +510,7 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 	int i, err = 0;
 
-	dprintk(SAA716x_DEBUG, 1, "Initializing SAA%02x I2C Core",
+	pci_dbg(saa716x->pdev, "Initializing SAA%02x I2C Core",
 		saa716x->pdev->device);
 
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
@@ -544,13 +543,13 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 			adapter->retries	= 3; /* FIXME ! */
 			adapter->dev.parent	= &pdev->dev;
 
-			dprintk(SAA716x_DEBUG, 1, "Initializing adapter (%d) %s",
+			pci_dbg(saa716x->pdev, "Initializing adapter (%d) %s",
 				i,
 				adapter->name);
 
 			err = i2c_add_adapter(adapter);
 			if (err < 0) {
-				dprintk(SAA716x_ERROR, 1, "Adapter (%d) %s init failed", i, adapter->name);
+				pci_err(saa716x->pdev, "Adapter (%d) %s init failed", i, adapter->name);
 				goto exit;
 			}
 
@@ -565,7 +564,7 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 		SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_I2CINT_1);
 	}
 
-	dprintk(SAA716x_DEBUG, 1, "SAA%02x I2C Core succesfully initialized",
+	pci_dbg(saa716x->pdev, "SAA%02x I2C Core succesfully initialized",
 		saa716x->pdev->device);
 
 	return 0;
@@ -580,13 +579,13 @@ void saa716x_i2c_exit(struct saa716x_dev *saa716x)
 	struct i2c_adapter *adapter	= NULL;
 	int i;
 
-	dprintk(SAA716x_DEBUG, 1, "Removing SAA%02x I2C Core", saa716x->pdev->device);
+	pci_dbg(saa716x->pdev, "Removing SAA%02x I2C Core", saa716x->pdev->device);
 
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
 		adapter = &i2c->i2c_adapter;
 		saa716x_i2c_hwdeinit(i2c, SAA716x_I2C_BUS(i));
-		dprintk(SAA716x_DEBUG, 1, "Removing adapter (%d) %s", i, adapter->name);
+		pci_dbg(saa716x->pdev, "Removing adapter (%d) %s", i, adapter->name);
 
 		i2c_del_adapter(adapter);
 		i2c++;
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 7aa922d678baa..cd430c86db872 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -20,13 +20,13 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 
 	mode = PCI_IRQ_LEGACY; /* legacy fallback mode */
 	if (saa716x->int_type != MODE_INTA) {
-		dprintk(SAA716x_DEBUG, 1, "Enabling MSI mode");
+		pci_dbg(saa716x->pdev, "Enabling MSI mode");
 		mode |= PCI_IRQ_MSI;
 	}
 
 	ret = pci_alloc_irq_vectors(pdev, 1, 1, mode);
 	if (ret < 0) {
-		dprintk(SAA716x_ERROR, 1, "IRQ vector registration failed");
+		pci_err(saa716x->pdev, "IRQ vector registration failed");
 		return ret;
 	}
 	ret = request_irq(pci_irq_vector(pdev, 0),
@@ -52,12 +52,12 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 	u32 msi_cap;
 	u8 revision;
 
-	dprintk(SAA716x_ERROR, 1, "found a %s PCIe card", saa716x->config->model_name);
+	pci_info(saa716x->pdev, "found a %s PCIe card", saa716x->config->model_name);
 
 	err = pci_enable_device(pdev);
 	if (err != 0) {
 		ret = -ENODEV;
-		dprintk(SAA716x_ERROR, 1, "ERROR: PCI enable failed (%i)", err);
+		pci_err(saa716x->pdev, "ERROR: PCI enable failed (%i)", err);
 		goto fail0;
 	}
 
@@ -65,13 +65,13 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 		use_dac = 1;
 		err = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(64));
 		if (err) {
-			dprintk(SAA716x_ERROR, 1, "Unable to obtain 64bit DMA");
+			pci_err(saa716x->pdev, "Unable to obtain 64bit DMA");
 			goto fail1;
 		}
 	} else {
 		err = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(32));
 		if (err) {
-			dprintk(SAA716x_ERROR, 1, "Unable to obtain 32bit DMA");
+			pci_err(saa716x->pdev, "Unable to obtain 32bit DMA");
 			goto fail1;
 		}
 	}
@@ -80,7 +80,7 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 
 	pm_cap = pci_find_capability(pdev, PCI_CAP_ID_PM);
 	if (pm_cap == 0) {
-		dprintk(SAA716x_ERROR, 1, "Cannot find Power Management Capability");
+		pci_err(saa716x->pdev, "Cannot find Power Management Capability");
 		err = -EIO;
 		goto fail1;
 	}
@@ -89,27 +89,27 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 				pci_resource_len(pdev, 0),
 				DRIVER_NAME)) {
 
-		dprintk(SAA716x_ERROR, 1, "BAR0 Request failed");
+		pci_err(saa716x->pdev, "BAR0 Request failed");
 		ret = -ENODEV;
 		goto fail1;
 	}
 
 	if (pci_resource_len(pdev, 0) < 0x30000) {
-		dprintk(SAA716x_ERROR, 1, "wrong BAR0 length");
+		pci_err(saa716x->pdev, "wrong BAR0 length");
 		ret = -ENODEV;
 		goto fail2;
 	}
 
 	saa716x->mmio = ioremap_nocache(pci_resource_start(pdev, 0), 0x30000);
 	if (!saa716x->mmio) {
-		dprintk(SAA716x_ERROR, 1, "Mem 0 remap failed");
+		pci_err(saa716x->pdev, "Mem 0 remap failed");
 		ret = -ENODEV;
 		goto fail2;
 	}
 
 	err = saa716x_request_irq(saa716x);
 	if (err < 0) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x IRQ registration failed, err=%d", err);
+		pci_err(saa716x->pdev, "IRQ registration failed, err=%d", err);
 		ret = -ENODEV;
 		goto fail3;
 	}
@@ -119,30 +119,27 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 
 	saa716x->revision	= revision;
 
-	dprintk(SAA716x_ERROR, 0, " SAA%x Rev %d [%04x:%04x], irq: %d%s, mmio: 0x%p",
+	pci_info(saa716x->pdev, " SAA%x Rev %d, irq: %d%s",
 		saa716x->pdev->device,
 		revision,
-		saa716x->pdev->subsystem_vendor,
-		saa716x->pdev->subsystem_device,
 		saa716x->pdev->irq,
-		(((msi_cap >> 16) & 0x01) == 1 ? " (MSI)" : ""),
-		saa716x->mmio);
+		(((msi_cap >> 16) & 0x01) == 1 ? " (MSI)" : ""));
 
 	pci_set_drvdata(pdev, saa716x);
 
 	return 0;
 
 fail3:
-	dprintk(SAA716x_ERROR, 1, "Err: IO Unmap");
+	pci_err(saa716x->pdev, "Err: IO Unmap");
 	if (saa716x->mmio)
 		iounmap(saa716x->mmio);
 fail2:
-	dprintk(SAA716x_ERROR, 1, "Err: Release regions");
+	pci_err(saa716x->pdev, "Err: Release regions");
 	release_mem_region(pci_resource_start(pdev, 0),
 			   pci_resource_len(pdev, 0));
 
 fail1:
-	dprintk(SAA716x_ERROR, 1, "Err: Disabling device");
+	pci_err(saa716x->pdev, "Err: Disabling device");
 	pci_disable_device(pdev);
 
 fail0:
@@ -157,10 +154,6 @@ void saa716x_pci_exit(struct saa716x_dev *saa716x)
 
 	saa716x_free_irq(saa716x);
 
-	dprintk(SAA716x_NOTICE, 1, "SAA%02x mem0: 0x%p",
-		saa716x->pdev->device,
-		saa716x->mmio);
-
 	if (saa716x->mmio) {
 		iounmap(saa716x->mmio);
 		release_mem_region(pci_resource_start(pdev, 0),
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index b46ac16b13521..9ea098ea9f2c5 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -146,7 +146,7 @@ static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
 	/* get module ID */
 	mid = SAA716x_EPRD(vi_port, VI_MODULE_ID);
 	if (mid != 0x11A5100) {
-		dprintk(SAA716x_ERROR, 1, "VIP Id<%04x> is not supported", mid);
+		pci_err(saa716x->pdev, "VIP Id<%04x> is not supported", mid);
 		return -1;
 	}
 
@@ -225,7 +225,7 @@ static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
 		i++;
 	}
 	if (val) {
-		dprintk(SAA716x_ERROR, 1, "Error: BAM VIP Reset failed!");
+		pci_err(saa716x->pdev, "Error: BAM VIP Reset failed!");
 		return -EIO;
 	}
 
@@ -301,7 +301,7 @@ int saa716x_vip_start(struct saa716x_dev *saa716x, int port, int one_shot,
 	}
 
 	if (!(val & 0x80)) {
-		dprintk(SAA716x_ERROR, 1, "Error: PTE pre-fetch failed!");
+		pci_err(saa716x->pdev, "PTE pre-fetch failed!");
 		return -EIO;
 	}
 

From 1b8217bae920a36f63ad2f3a89779dcf56b4d9b7 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 21:26:42 +0100
Subject: [PATCH 329/364] saa716x_ff: convert printk to pci_info/err/dbg

Use recommended pci device print functions to unify output and to get rid of
related checkpatch warnings.
While at it, remove the prints that have been commented out anyway.
Also remove the verbose module parameter since we don't need it anymore
to enable debug messages.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  |  34 ++--
 drivers/media/pci/saa716x/saa716x_ff_ir.c   |   8 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 192 +++++---------------
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |   6 +-
 4 files changed, 74 insertions(+), 166 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index f9e64b98fb44b..9750f52afd62a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -53,10 +53,10 @@ static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 	if (timeout == -ERESTARTSYS || sti7109->cmd_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
-			dprintk(SAA716x_ERROR, 1, "cmd ERESTARTSYS");
+			pci_err(saa716x->pdev, "cmd ERESTARTSYS");
 			return -ERESTARTSYS;
 		}
-		dprintk(SAA716x_ERROR, 1,
+		pci_err(saa716x->pdev,
 			"timed out waiting for command ready");
 	}
 
@@ -78,17 +78,17 @@ static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 			sti7109->result_len = 0;
 			if (timeout == -ERESTARTSYS) {
 				/* a signal arrived */
-				dprintk(SAA716x_ERROR, 1, "result ERESTARTSYS");
+				pci_err(saa716x->pdev, "result ERESTARTSYS");
 				return -ERESTARTSYS;
 			}
-			dprintk(SAA716x_ERROR, 1,
+			pci_err(saa716x->pdev,
 				"timed out waiting for command result");
 			return -EIO;
 		}
 
 		if (sti7109->result_len > sti7109->result_max_len) {
 			sti7109->result_len = sti7109->result_max_len;
-			dprintk(SAA716x_NOTICE, 1,
+			pci_err(saa716x->pdev,
 				"not enough space in result buffer");
 		}
 	}
@@ -102,7 +102,7 @@ int sti7109_raw_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 	int err;
 
 	if (cmd->cmd_len > SIZE_CMD_DATA) {
-		dprintk(SAA716x_ERROR, 1, "command too long");
+		pci_err(saa716x->pdev, "command too long");
 		return -EFAULT;
 	}
 
@@ -146,10 +146,10 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 	if (timeout == -ERESTARTSYS || sti7109->osd_cmd_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
-			dprintk(SAA716x_ERROR, 1, "osd cmd ERESTARTSYS");
+			pci_err(saa716x->pdev, "osd cmd ERESTARTSYS");
 			return -ERESTARTSYS;
 		}
-		dprintk(SAA716x_ERROR, 1,
+		pci_err(saa716x->pdev,
 			"timed out waiting for osd command ready");
 	}
 
@@ -171,18 +171,18 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 			sti7109->osd_result_len = 0;
 			if (timeout == -ERESTARTSYS) {
 				/* a signal arrived */
-				dprintk(SAA716x_ERROR, 1,
+				pci_err(saa716x->pdev,
 					"osd result ERESTARTSYS");
 				return -ERESTARTSYS;
 			}
-			dprintk(SAA716x_ERROR, 1,
+			pci_err(saa716x->pdev,
 				"timed out waiting for osd command result");
 			return -EIO;
 		}
 
 		if (sti7109->osd_result_len > sti7109->osd_result_max_len) {
 			sti7109->osd_result_len = sti7109->osd_result_max_len;
-			dprintk(SAA716x_NOTICE, 1,
+			pci_err(saa716x->pdev,
 				"not enough space in result buffer");
 		}
 	}
@@ -196,7 +196,7 @@ int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 	int err;
 
 	if (cmd->cmd_len > SIZE_OSD_CMD_DATA) {
-		dprintk(SAA716x_ERROR, 1, "command too long");
+		pci_err(saa716x->pdev, "command too long");
 		return -EFAULT;
 	}
 
@@ -248,10 +248,10 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 	if (timeout == -ERESTARTSYS || sti7109->data_ready == 0) {
 		if (timeout == -ERESTARTSYS) {
 			/* a signal arrived */
-			dprintk(SAA716x_ERROR, 1, "data ERESTARTSYS");
+			pci_err(saa716x->pdev, "data ERESTARTSYS");
 			return -ERESTARTSYS;
 		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for data ready");
+		pci_err(saa716x->pdev, "timed out waiting for data ready");
 		return -EIO;
 	}
 
@@ -315,7 +315,7 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 						     timeout);
 
 			if (sti7109->block_done == 0) {
-				dprintk(SAA716x_ERROR, 1,
+				pci_err(saa716x->pdev,
 					"timed out waiting for block done");
 				/* send a data interrupt to cancel the transfer
 				   and reset the data handling */
@@ -334,7 +334,7 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 				     timeout);
 
 	if (sti7109->block_done == 0) {
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for block done");
+		pci_err(saa716x->pdev, "timed out waiting for block done");
 		/* send a data interrupt to cancel the transfer and reset the
 		   data handling */
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_DATA_MASK);
@@ -353,7 +353,7 @@ int sti7109_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
 	int err;
 
 	if (data->data_length > MAX_DATA_LEN) {
-		dprintk(SAA716x_ERROR, 1, "data too big");
+		pci_err(saa716x->pdev, "data too big");
 		return -EFAULT;
 	}
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index d4c2fd1c3cb23..7a3c69d99e569 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -89,7 +89,7 @@ static void ir_emit_key(unsigned long parm)
 			break;
 
 		default:
-			printk(KERN_ERR "%s: invalid protocol %x\n",
+			pci_err(saa716x->pdev, "%s: invalid protocol %x",
 				__func__, ir->protocol);
 			return;
 		}
@@ -100,8 +100,8 @@ static void ir_emit_key(unsigned long parm)
 
 	keycode = ir->key_map[data];
 
-	dprintk(SAA716x_DEBUG, 0,
-		"%s: code %08x -> addr %i data 0x%02x -> keycode %i\n",
+	pci_dbg(saa716x->pdev,
+		"%s: code %08x -> addr %i data 0x%02x -> keycode %i",
 		__func__, ircom, addr, data, keycode);
 
 	/* check device address */
@@ -109,7 +109,7 @@ static void ir_emit_key(unsigned long parm)
 		return;
 
 	if (!keycode) {
-		printk(KERN_WARNING "%s: code %08x -> addr %i data 0x%02x -> unknown key!\n",
+		pci_warn(saa716x->pdev, "%s: code %08x -> addr %i data 0x%02x -> unknown key!",
 			__func__, ircom, addr, data);
 		return;
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 0101027abb996..ef56ec5868870 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -49,10 +49,6 @@
 #include "stv090x.h"
 #include "isl6423.h"
 
-unsigned int verbose;
-module_param(verbose, int, 0644);
-MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
-
 unsigned int int_type = 1;
 module_param(int_type, int, 0644);
 MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
@@ -92,13 +88,9 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT) {
-			printk(KERN_ERR "dvb-ttpremium: could not load FPGA firmware,"
-			       " file not found: dvb-ttpremium-fpga-01.fw\n");
-			printk(KERN_ERR "dvb-ttpremium: usually this should be in "
-			       "/usr/lib/hotplug/firmware or /lib/firmware\n");
+			pci_err(saa716x->pdev, "dvb-ttpremium: could not find FPGA firmware: dvb-ttpremium-fpga-01.fw");
 		} else
-			printk(KERN_ERR "dvb-ttpremium: cannot request firmware"
-			       " (error %i)\n", ret);
+			pci_err(saa716x->pdev, "dvb-ttpremium: FPGA firmware request failed (error %i)", ret);
 		return -EINVAL;
 	}
 
@@ -120,8 +112,7 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 		fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
 		rounds++;
 	}
-	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA INITN=%d, rounds=%d",
-		fpgaInit, rounds);
+	pci_dbg(saa716x->pdev, "FPGA INITN=%d, rounds=%d", fpgaInit, rounds);
 
 	SAA716x_EPWR(SPI, SPI_CLOCK_COUNTER, 0x08);
 	SAA716x_EPWR(SPI, SPI_CONTROL_REG, SPI_MODE_SELECT);
@@ -129,25 +120,24 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	msleep(10);
 
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
-	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA DONE=%d", fpgaDone);
-	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA write bitstream");
+	pci_dbg(saa716x->pdev, "FPGA DONE=%d", fpgaDone);
+	pci_dbg(saa716x->pdev, "FPGA write bitstream");
 	saa716x_ff_spi_write(saa716x, fw->data, fw->size);
-	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA write bitstream done");
+	pci_dbg(saa716x->pdev, "FPGA write bitstream done");
 	fpgaDone = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_DONE);
-	dprintk(SAA716x_INFO, 1, "SAA716x FF FPGA DONE=%d", fpgaDone);
+	pci_dbg(saa716x->pdev, "FPGA DONE=%d", fpgaDone);
 
 	msleep(10);
 
 	release_firmware(fw);
 
 	if (!fpgaDone) {
-		printk(KERN_ERR "SAA716x FF FPGA is not responding, did you "
-				"connect the power supply?\n");
+		pci_err(saa716x->pdev, "FPGA is not responding, did you connect the power supply?");
 		return -EINVAL;
 	}
 
 	sti7109->fpga_version = SAA716x_EPRD(PHI_1, FPGA_ADDR_VERSION);
-	printk(KERN_INFO "SAA716x FF FPGA version %X.%02X\n",
+	pci_info(saa716x->pdev, "FPGA version %X.%02X",
 		sti7109->fpga_version >> 8, sti7109->fpga_version & 0xFF);
 
 	return 0;
@@ -175,17 +165,13 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT) {
-			printk(KERN_ERR "dvb-ttpremium: could not load ST7109 loader,"
-			       " file not found: dvb-ttpremium-loader-01.fw\n");
-			printk(KERN_ERR "dvb-ttpremium: usually this should be in "
-			       "/usr/lib/hotplug/firmware or /lib/firmware\n");
+			pci_err(saa716x->pdev, "dvb-ttpremium: could not find ST7109 loader: dvb-ttpremium-loader-01.fw");
 		} else
-			printk(KERN_ERR "dvb-ttpremium: cannot request firmware"
-			       " (error %i)\n", ret);
+			pci_err(saa716x->pdev, "dvb-ttpremium: loader firmware request failed (error %i)", ret);
 		return -EINVAL;
 	}
 	loaderVersion = (fw->data[0x1385] << 8) | fw->data[0x1384];
-	printk(KERN_INFO "SAA716x FF loader version %X.%02X\n",
+	pci_info(saa716x->pdev, "loader version %X.%02X",
 		loaderVersion >> 8, loaderVersion & 0xFF);
 
 	saa716x_ff_phi_write(saa716x, 0, fw->data, fw->size);
@@ -208,26 +194,22 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	} while (waitTime < (1 * HZ));
 
 	if (waitTime >= 1 * HZ) {
-		dprintk(SAA716x_ERROR, 1, "STi7109 seems to be DEAD!");
+		pci_err(saa716x->pdev, "STi7109 seems to be DEAD!");
 		return -1;
 	}
-	dprintk(SAA716x_INFO, 1, "STi7109 ready after %llu ticks", waitTime);
+	pci_dbg(saa716x->pdev, "STi7109 ready after %llu ticks", waitTime);
 
 	/* request the st7109 firmware, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-st7109-01.fw", &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT) {
-			printk(KERN_ERR "dvb-ttpremium: could not load ST7109 firmware,"
-			       " file not found: dvb-ttpremium-st7109-01.fw\n");
-			printk(KERN_ERR "dvb-ttpremium: usually this should be in "
-			       "/usr/lib/hotplug/firmware or /lib/firmware\n");
+			pci_err(saa716x->pdev, "dvb-ttpremium: could not find ST7109 firmware: dvb-ttpremium-st7109-01.fw");
 		} else
-			printk(KERN_ERR "dvb-ttpremium: cannot request firmware"
-			       " (error %i)\n", ret);
+			pci_err(saa716x->pdev, "dvb-ttpremium: ST7109 firmware request failed (error %i)", ret);
 		return -EINVAL;
 	}
 
-	dprintk(SAA716x_INFO, 1, "SAA716x FF download ST7109 firmware");
+	pci_dbg(saa716x->pdev, "download ST7109 firmware");
 	writtenBlock = 0;
 	blockSize = 0x3c00;
 	length = fw->size;
@@ -256,7 +238,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 		} while (waitTime < (1 * HZ));
 
 		if (waitTime >= 1 * HZ) {
-			dprintk(SAA716x_ERROR, 1, "STi7109 seems to be DEAD!");
+			pci_err(saa716x->pdev, "STi7109 seems to be DEAD!");
 			release_firmware(fw);
 			return -1;
 		}
@@ -274,7 +256,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	writtenBlock |= 0x80000000;
 	SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
 
-	dprintk(SAA716x_INFO, 1, "SAA716x FF download ST7109 firmware done");
+	pci_dbg(saa716x->pdev, "download ST7109 firmware done");
 
 	release_firmware(fw);
 
@@ -589,7 +571,7 @@ static void video_vip_worker(unsigned long data)
 
 	vip_index = vip_entry->dma_channel[0];
 	if (vip_index != 0) {
-		printk(KERN_ERR "%s: unexpected channel %u\n",
+		pci_err(saa716x->pdev, "%s: unexpected channel %u",
 		       __func__, vip_entry->dma_channel[0]);
 		return;
 	}
@@ -598,10 +580,10 @@ static void video_vip_worker(unsigned long data)
 	if (write_index < 0)
 		return;
 
-	dprintk(SAA716x_DEBUG, 1, "dma buffer = %d", write_index);
+	pci_dbg(saa716x->pdev, "dma buffer = %d", write_index);
 
 	if (write_index == vip_entry->read_index) {
-		printk(KERN_DEBUG "%s: called but nothing to do\n", __func__);
+		pci_dbg(saa716x->pdev, "%s: called but nothing to do", __func__);
 		return;
 	}
 
@@ -956,7 +938,7 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 			    DVB_DEVICE_VIDEO,
 			    0);
 
-	sti7109->fifo_workq = alloc_workqueue("saa716x_fifo_wq%d", WQ_UNBOUND, 1, SAA716x_DEV);
+	sti7109->fifo_workq = alloc_workqueue("saa716x_fifo_wq", WQ_UNBOUND, 1);
 	INIT_WORK(&sti7109->fifo_work, fifo_worker);
 
 	if (sti7109->video_capture != VIDEO_CAPTURE_OFF) {
@@ -979,12 +961,10 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
-		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
 		err = -ENOMEM;
 		goto fail0;
 	}
 
-	saa716x->verbose	= verbose;
 	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->module		= THIS_MODULE;
@@ -992,13 +972,13 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	err = saa716x_pci_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
+		pci_err(saa716x->pdev, "PCI Initialization failed");
 		goto fail1;
 	}
 
 	err = saa716x_cgu_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		pci_err(saa716x->pdev, "CGU Init failed");
 		goto fail1;
 	}
 
@@ -1006,13 +986,13 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
+		pci_err(saa716x->pdev, "Jetpack core initialization failed");
 		goto fail2;
 	}
 
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		pci_err(saa716x->pdev, "I2C Initialization failed");
 		goto fail3;
 	}
 
@@ -1021,7 +1001,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	/* prepare the sti7109 device struct */
 	sti7109 = kzalloc(sizeof(struct sti7109_dev), GFP_KERNEL);
 	if (!sti7109) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x: out of memory");
+		pci_err(saa716x->pdev, "out of memory");
 		goto fail3;
 	}
 
@@ -1071,7 +1051,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	err = saa716x_ff_fpga_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF FPGA Initialization failed");
+		pci_err(saa716x->pdev, "FPGA Initialization failed");
 		goto fail5;
 	}
 
@@ -1104,13 +1084,13 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	err = saa716x_ff_st7109_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF STi7109 initialization failed");
+		pci_err(saa716x->pdev, "STi7109 initialization failed");
 		goto fail5;
 	}
 
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		pci_err(saa716x->pdev, "DVB initialization failed");
 		goto fail6;
 	}
 
@@ -1125,33 +1105,33 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 			/* a signal arrived */
 			goto fail6;
 		}
-		dprintk(SAA716x_ERROR, 1, "timed out waiting for boot finish");
+		pci_err(saa716x->pdev, "timed out waiting for boot finish");
 		err = -1;
 		goto fail6;
 	}
-	dprintk(SAA716x_INFO, 1, "STi7109 finished booting");
+	pci_dbg(saa716x->pdev, "STi7109 finished booting");
 
 	err = saa716x_ff_video_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF VIDEO initialization failed");
+		pci_err(saa716x->pdev, "VIDEO initialization failed");
 		goto fail7;
 	}
 
 	err = saa716x_ff_audio_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF AUDIO initialization failed");
+		pci_err(saa716x->pdev, "AUDIO initialization failed");
 		goto fail8;
 	}
 
 	err = saa716x_ff_osd_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x FF OSD initialization failed");
+		pci_err(saa716x->pdev, "OSD initialization failed");
 		goto fail9;
 	}
 
 	err = sti7109_cmd_get_fw_version(sti7109, &sti7109->fw_version);
 	if (!err) {
-		printk(KERN_INFO "SAA716x FF firmware version %d.%d.%d\n",
+		pci_info(saa716x->pdev, "firmware version %d.%d.%d",
 			(sti7109->fw_version >> 16) & 0xFF,
 			(sti7109->fw_version >> 8) & 0xFF,
 			sti7109->fw_version & 0xFF);
@@ -1226,64 +1206,15 @@ static void saa716x_ff_pci_remove(struct pci_dev *pdev)
 
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
-	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
-	struct sti7109_dev *sti7109;
+	struct saa716x_dev *saa716x = (struct saa716x_dev *) dev_id;
+	struct sti7109_dev *sti7109 = saa716x->priv;
 	u32 msiStatusL;
 	u32 msiStatusH;
 	u32 phiISR;
 
-	if (unlikely(saa716x == NULL)) {
-		printk("%s: saa716x=NULL", __func__);
-		return IRQ_NONE;
-	}
-	sti7109 = saa716x->priv;
-	if (unlikely(sti7109 == NULL)) {
-		printk("%s: sti7109=NULL", __func__);
-		return IRQ_NONE;
-	}
 	if (sti7109->int_count_enable)
 		sti7109->total_int_count++;
-#if 0
-	dprintk(SAA716x_DEBUG, 1, "VI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(VI0, INT_STATUS),
-		SAA716x_EPRD(VI1, INT_STATUS),
-		SAA716x_EPRD(VI0, INT_ENABLE),
-		SAA716x_EPRD(VI1, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 0=<%02x> 1=<%02x>, CTL 1=<%02x> 2=<%02x>",
-		SAA716x_EPRD(FGPI0, INT_STATUS),
-		SAA716x_EPRD(FGPI1, INT_STATUS),
-		SAA716x_EPRD(FGPI0, INT_ENABLE),
-		SAA716x_EPRD(FGPI0, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "FGPI STAT 2=<%02x> 3=<%02x>, CTL 2=<%02x> 3=<%02x>",
-		SAA716x_EPRD(FGPI2, INT_STATUS),
-		SAA716x_EPRD(FGPI3, INT_STATUS),
-		SAA716x_EPRD(FGPI2, INT_ENABLE),
-		SAA716x_EPRD(FGPI3, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "AI STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(AI0, AI_STATUS),
-		SAA716x_EPRD(AI1, AI_STATUS),
-		SAA716x_EPRD(AI0, AI_CTL),
-		SAA716x_EPRD(AI1, AI_CTL));
-
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_L),
-		SAA716x_EPRD(MSI, MSI_INT_STATUS_H),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_L),
-		SAA716x_EPRD(MSI, MSI_INT_ENA_H));
-
-	dprintk(SAA716x_DEBUG, 1, "I2C STAT 0=<%02x> 1=<%02x>, CTL 0=<%02x> 1=<%02x>",
-		SAA716x_EPRD(I2C_A, INT_STATUS),
-		SAA716x_EPRD(I2C_B, INT_STATUS),
-		SAA716x_EPRD(I2C_A, INT_ENABLE),
-		SAA716x_EPRD(I2C_B, INT_ENABLE));
-
-	dprintk(SAA716x_DEBUG, 1, "DCS STAT=<%02x>, CTL=<%02x>",
-		SAA716x_EPRD(DCS, DCSC_INT_STATUS),
-		SAA716x_EPRD(DCS, DCSC_INT_ENABLE));
-#endif
+
 	msiStatusL = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, msiStatusL);
 	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
@@ -1306,9 +1237,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			tasklet_schedule(&saa716x->fgpi[3].tasklet);
 		}
 	}
-	if (msiStatusH) {
-		//dprintk(SAA716x_INFO, 1, "msiStatusH: %08X", msiStatusH);
-	}
 
 	if (msiStatusH & MSI_INT_I2CINT_0) {
 		if (sti7109->int_count_enable)
@@ -1326,8 +1254,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	if (msiStatusH & MSI_INT_EXTINT_0) {
 
 		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
-		//dprintk(SAA716x_INFO, 1, "interrupt status register: %08X", phiISR);
-
 		if (sti7109->int_count_enable) {
 			int i;
 			sti7109->ext_int_total_count++;
@@ -1340,16 +1266,13 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			u32 value;
 			u32 length;
-			/*dprintk(SAA716x_INFO, 1, "CMD interrupt source");*/
 
 			value = SAA716x_EPRD(PHI_1, ADDR_CMD_DATA);
 			value = __cpu_to_be32(value);
 			length = (value >> 16) + 2;
 
-			/*dprintk(SAA716x_INFO, 1, "CMD length: %d", length);*/
-
 			if (length > MAX_RESULT_LEN) {
-				dprintk(SAA716x_ERROR, 1, "CMD length %d > %d", length, MAX_RESULT_LEN);
+				pci_err(saa716x->pdev, "CMD length %d > %d", length, MAX_RESULT_LEN);
 				length = MAX_RESULT_LEN;
 			}
 
@@ -1363,7 +1286,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR & ISR_READY_MASK) {
-			/*dprintk(SAA716x_INFO, 1, "READY interrupt source");*/
 			sti7109->cmd_ready = 1;
 			wake_up(&sti7109->cmd_ready_wq);
 			phiISR &= ~ISR_READY_MASK;
@@ -1374,16 +1296,13 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			u32 value;
 			u32 length;
-			/*dprintk(SAA716x_INFO, 1, "OSD CMD interrupt source");*/
 
 			value = SAA716x_EPRD(PHI_1, ADDR_OSD_CMD_DATA);
 			value = __cpu_to_be32(value);
 			length = (value >> 16) + 2;
 
-			/*dprintk(SAA716x_INFO, 1, "OSD CMD length: %d", length);*/
-
 			if (length > MAX_RESULT_LEN) {
-				dprintk(SAA716x_ERROR, 1, "OSD CMD length %d > %d", length, MAX_RESULT_LEN);
+				pci_err(saa716x->pdev, "OSD CMD length %d > %d", length, MAX_RESULT_LEN);
 				length = MAX_RESULT_LEN;
 			}
 
@@ -1397,7 +1316,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR & ISR_OSD_READY_MASK) {
-			/*dprintk(SAA716x_INFO, 1, "OSD_READY interrupt source");*/
 			sti7109->osd_cmd_ready = 1;
 			wake_up(&sti7109->osd_cmd_ready_wq);
 			phiISR &= ~ISR_OSD_READY_MASK;
@@ -1405,7 +1323,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR & ISR_BLOCK_MASK) {
-			/*dprintk(SAA716x_INFO, 1, "BLOCK interrupt source");*/
 			sti7109->block_done = 1;
 			wake_up(&sti7109->block_done_wq);
 			phiISR &= ~ISR_BLOCK_MASK;
@@ -1413,7 +1330,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR & ISR_DATA_MASK) {
-			/*dprintk(SAA716x_INFO, 1, "DATA interrupt source");*/
 			sti7109->data_ready = 1;
 			wake_up(&sti7109->data_ready_wq);
 			phiISR &= ~ISR_DATA_MASK;
@@ -1421,7 +1337,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR & ISR_BOOT_FINISH_MASK) {
-			/*dprintk(SAA716x_INFO, 1, "BOOT FINISH interrupt source");*/
 			sti7109->boot_finished = 1;
 			wake_up(&sti7109->boot_finish_wq);
 			phiISR &= ~ISR_BOOT_FINISH_MASK;
@@ -1440,8 +1355,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			phiISR &= ~ISR_AUDIO_PTS_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_AUDIO_PTS_MASK);
-
-			/*dprintk(SAA716x_INFO, 1, "AUDIO PTS: %llX", sti7109->audio_pts);*/
 		}
 
 		if (phiISR & ISR_VIDEO_PTS_MASK) {
@@ -1456,8 +1369,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			phiISR &= ~ISR_VIDEO_PTS_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_VIDEO_PTS_MASK);
-
-			/*dprintk(SAA716x_INFO, 1, "VIDEO PTS: %llX", sti7109->video_pts);*/
 		}
 
 		if (phiISR & ISR_CURRENT_STC_MASK) {
@@ -1472,8 +1383,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 			phiISR &= ~ISR_CURRENT_STC_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CURRENT_STC_MASK);
-
-			/*dprintk(SAA716x_INFO, 1, "CURRENT STC: %llu", sti7109->current_stc);*/
 		}
 
 		if (phiISR & ISR_REMOTE_EVENT_MASK) {
@@ -1492,9 +1401,9 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
 
 			if (remote_event == 0) {
-				dprintk(SAA716x_ERROR, 1, "REMOTE EVENT: %X ignored", remote_event);
+				pci_err(saa716x->pdev, "REMOTE EVENT: %X ignored", remote_event);
 			} else {
-				dprintk(SAA716x_INFO, 1, "REMOTE EVENT: %X", remote_event);
+				pci_dbg(saa716x->pdev, "REMOTE EVENT: %X", remote_event);
 				saa716x_ir_handler(saa716x, remote_event);
 			}
 		}
@@ -1512,7 +1421,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			phiISR &= ~ISR_DVO_FORMAT_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DVO_FORMAT_MASK);
 
-			dprintk(SAA716x_INFO, 1, "DVO FORMAT CHANGE: %u", format);
+			pci_dbg(saa716x->pdev, "DVO FORMAT CHANGE: %u", format);
 			sti7109->video_format = format;
 		}
 
@@ -1525,12 +1434,11 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			phiISR &= ~ISR_LOG_MESSAGE_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_LOG_MESSAGE_MASK);
 
-			dprintk(SAA716x_INFO, 1, "LOG MESSAGE: %.*s",
+			pci_dbg(saa716x->pdev, "LOG MESSAGE: %.*s",
 				SIZE_LOG_MESSAGE_DATA, message);
 		}
 
 		if (phiISR & ISR_FIFO1_EMPTY_MASK) {
-			/*dprintk(SAA716x_INFO, 1, "FIFO EMPTY interrupt source");*/
 			/* clear FPGA_FIFO_CTRL_IE */
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_RUN);
 			queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
@@ -1538,14 +1446,14 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 
 		if (phiISR) {
-			dprintk(SAA716x_INFO, 1, "unknown interrupt source");
+			pci_dbg(saa716x->pdev, "unknown interrupt source");
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, phiISR);
 		}
 	}
 
 	if (sti7109->int_count_enable) {
 		if (jiffies - sti7109->last_int_ticks >= HZ) {
-			dprintk(SAA716x_INFO, 1,
+			pci_dbg(saa716x->pdev,
 				"int count: t: %d, v: %d %d, f:%d %d %d %d, i:%d %d,"
 				"e: %d (%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)",
 				sti7109->total_int_count,
@@ -1644,8 +1552,8 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *i2c_adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
 
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+	pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init", count);
+	pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
 
 	if (count == 0 || count == 1) {
 		adapter->fe = dvb_attach(stv090x_attach,
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index b215ed8625a25..15b741b165317 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -35,7 +35,7 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 	int err;
 
 	if (pci_resource_len(pdev, 0) < 0x80000) {
-		dprintk(SAA716x_ERROR, 1, "wrong BAR0 length");
+		pci_err(saa716x->pdev, "wrong BAR0 length");
 		err = -ENODEV;
 		goto fail0;
 	}
@@ -43,14 +43,14 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 	/* skip first PHI window as it is already mapped */
 	sti7109->mmio_uc = ioremap_nocache(phi1_start + 0x10000, 0x30000);
 	if (!sti7109->mmio_uc) {
-		dprintk(SAA716x_ERROR, 1, "Mem PHI1 remap failed");
+		pci_err(saa716x->pdev, "Mem PHI1 remap failed");
 		err = -ENODEV;
 		goto fail0;
 	}
 
 	sti7109->mmio_wc = ioremap_wc(phi1_start + 0x40000, 0x20000);
 	if (!sti7109->mmio_wc) {
-		dprintk(SAA716x_ERROR, 1, "Mem PHI1 WC remap failed");
+		pci_err(saa716x->pdev, "Mem PHI1 WC remap failed");
 		err = -ENODEV;
 		goto fail1;
 	}

From 932d621e4e76db1f29773cb77c5139c0e9dcb1eb Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 21:54:27 +0100
Subject: [PATCH 330/364] saa716x_budget: convert printk to pci_err/dbg

Use recommended pci device print functions to unify output and to get rid of
related checkpatch warnings.
Also remove the verbose module parameter since we don't need it anymore
to enable debug messages.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 48 +++++++---------------
 1 file changed, 15 insertions(+), 33 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 7755fd1c9de52..d916f0f6ffa79 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -37,10 +37,6 @@
 #include "si2168.h"
 #include "si2157.h"
 
-unsigned int verbose;
-module_param(verbose, int, 0644);
-MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
-
 unsigned int int_type = 1;
 module_param(int_type, int, 0644);
 MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
@@ -54,12 +50,10 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
-		printk(KERN_ERR "saa716x_budget_pci_probe ERROR: out of memory\n");
 		err = -ENOMEM;
 		goto fail0;
 	}
 
-	saa716x->verbose	= verbose;
 	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->module		= THIS_MODULE;
@@ -67,25 +61,25 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	err = saa716x_pci_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
+		pci_err(saa716x->pdev, "PCI Initialization failed");
 		goto fail1;
 	}
 
 	err = saa716x_cgu_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		pci_err(saa716x->pdev, "CGU Init failed");
 		goto fail1;
 	}
 
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core initialization failed");
+		pci_err(saa716x->pdev, "Jetpack core initialization failed");
 		goto fail2;
 	}
 
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		pci_err(saa716x->pdev, "I2C Initialization failed");
 		goto fail3;
 	}
 
@@ -93,7 +87,7 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		pci_err(saa716x->pdev, "DVB initialization failed");
 		goto fail4;
 	}
 
@@ -127,17 +121,12 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 
 	u32 stat_h, stat_l, mask_h, mask_l;
 
-	if (unlikely(saa716x == NULL)) {
-		printk("%s: saa716x=NULL", __func__);
-		return IRQ_NONE;
-	}
-
 	stat_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
 	stat_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 	mask_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
 	mask_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
 
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+	pci_dbg(saa716x->pdev, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
 		stat_l, stat_h, mask_l, mask_h);
 
 	if (!((stat_l & mask_l) || (stat_h & mask_h)))
@@ -268,9 +257,9 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 	struct stv6110x_devctl *ctl;
 
 	if (count < saa716x->config->adapters) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init",
+		pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init",
 			count);
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
+		pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count,
 			saa716x->pdev->subsystem_device);
 
 		saa716x_gpio_set_output(saa716x, 26);
@@ -288,12 +277,8 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 					 &i2c->i2c_adapter,
 					 STV090x_DEMODULATOR_0);
 
-		if (adapter->fe) {
-			dprintk(SAA716x_NOTICE, 1, "found STV0903 @0x%02x",
-				skystar2_stv090x_config.address);
-		} else {
+		if (!adapter->fe)
 			goto exit;
-		}
 
 		adapter->fe->ops.set_voltage = skystar2_set_voltage;
 		adapter->fe->ops.enable_high_lnb_voltage = skystar2_voltage_boost;
@@ -304,9 +289,6 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 				 &i2c->i2c_adapter);
 
 		if (ctl) {
-			dprintk(SAA716x_NOTICE, 1, "found STV6110(A) @0x%02x",
-				skystar2_stv6110x_config.addr);
-
 			skystar2_stv090x_config.tuner_init	    = ctl->tuner_init;
 			skystar2_stv090x_config.tuner_sleep	    = ctl->tuner_sleep;
 			skystar2_stv090x_config.tuner_set_mode	    = ctl->tuner_set_mode;
@@ -328,11 +310,11 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 			goto exit;
 		}
 
-		dprintk(SAA716x_ERROR, 1, "Done!");
+		pci_dbg(saa716x->pdev, "Done!");
 		return 0;
 	}
 exit:
-	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	pci_err(saa716x->pdev, "Frontend attach failed");
 	return -ENODEV;
 }
 
@@ -419,12 +401,12 @@ static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter, int
 	}
 	adapter->i2c_client_tuner = client;
 
-	dev_dbg(&dev->pdev->dev, "%s frontend %d attached\n",
+	pci_dbg(dev->pdev, "%s frontend %d attached",
 		dev->config->model_name, count);
 
 	return 0;
 err:
-	dev_err(&dev->pdev->dev, "%s frontend %d attach failed\n",
+	pci_err(dev->pdev, "%s frontend %d attach failed",
 		dev->config->model_name, count);
 	return -ENODEV;
 }
@@ -513,12 +495,12 @@ static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter, int
 	}
 	adapter->i2c_client_tuner = client;
 
-	dev_dbg(&dev->pdev->dev, "%s frontend %d attached\n",
+	pci_dbg(dev->pdev, "%s frontend %d attached",
 		dev->config->model_name, count);
 
 	return 0;
 err:
-	dev_err(&dev->pdev->dev, "%s frontend %d attach failed\n",
+	pci_err(dev->pdev, "%s frontend %d attach failed",
 		dev->config->model_name, count);
 	return -ENODEV;
 }

From b460e0a228ecc7053df42b99c7ad341d679b5421 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 21 Dec 2018 22:16:02 +0100
Subject: [PATCH 331/364] saa716x_hybrid: convert printk to pci_err/dbg

Use recommended pci device print functions to unify output and to get rid of
related checkpatch warnings.
Also remove the verbose module parameter since we don't need it anymore
to enable debug messages.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 60 +++++++++-------------
 1 file changed, 24 insertions(+), 36 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index e3fdfa323ce79..658281034da48 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -35,10 +35,6 @@
 #include "tda1004x.h"
 #include "tda827x.h"
 
-unsigned int verbose;
-module_param(verbose, int, 0644);
-MODULE_PARM_DESC(verbose, "verbose startup messages, default is 1 (yes)");
-
 unsigned int int_type = 1;
 module_param(int_type, int, 0644);
 MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
@@ -52,12 +48,10 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
 	if (saa716x == NULL) {
-		printk(KERN_ERR "saa716x_hybrid_pci_probe ERROR: out of memory\n");
 		err = -ENOMEM;
 		goto fail0;
 	}
 
-	saa716x->verbose	= verbose;
 	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->module		= THIS_MODULE;
@@ -65,25 +59,25 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	err = saa716x_pci_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x PCI Initialization failed");
+		pci_err(saa716x->pdev, "PCI Initialization failed");
 		goto fail1;
 	}
 
 	err = saa716x_cgu_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x CGU Init failed");
+		pci_err(saa716x->pdev, "CGU Init failed");
 		goto fail1;
 	}
 
 	err = saa716x_jetpack_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x Jetpack core Initialization failed");
+		pci_err(saa716x->pdev, "Jetpack core Initialization failed");
 		goto fail2;
 	}
 
 	err = saa716x_i2c_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x I2C Initialization failed");
+		pci_err(saa716x->pdev, "I2C Initialization failed");
 		goto fail3;
 	}
 
@@ -105,7 +99,7 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_devic
 
 	err = saa716x_dvb_init(saa716x);
 	if (err) {
-		dprintk(SAA716x_ERROR, 1, "SAA716x DVB initialization failed");
+		pci_err(saa716x->pdev, "DVB initialization failed");
 		goto fail4;
 	}
 
@@ -139,17 +133,12 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 
 	u32 stat_h, stat_l, mask_h, mask_l;
 
-	if (unlikely(saa716x == NULL)) {
-		printk("%s: saa716x=NULL", __func__);
-		return IRQ_NONE;
-	}
-
 	stat_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
 	stat_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 	mask_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
 	mask_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
 
-	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+	pci_dbg(saa716x->pdev, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
 		stat_l, stat_h, mask_l, mask_h);
 
 	if (!((stat_l & mask_l) || (stat_h & mask_h)))
@@ -211,10 +200,9 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	struct saa716x_dev *saa716x = adapter->saa716x;
 	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
-	dprintk(SAA716x_ERROR, 1, "Adapter (%d) SAA716x frontend Init", count);
-	dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-
-	dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+	pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init", count);
+	pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+	pci_dbg(saa716x->pdev, "Adapter (%d) Power ON", count);
 
 	saa716x_gpio_set_output(saa716x, 11);
 	saa716x_gpio_set_output(saa716x, 10);
@@ -224,10 +212,10 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 
 	adapter->fe = tda10046_attach(&tda1004x_vp6090_config, &i2c->i2c_adapter);
 	if (adapter->fe == NULL) {
-		dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+		pci_err(saa716x->pdev, "Frontend attach failed");
 		return -ENODEV;
 	} else {
-		dprintk(SAA716x_ERROR, 1, "Done!");
+		pci_dbg(saa716x->pdev, "Done!");
 		return 0;
 	}
 
@@ -295,9 +283,9 @@ static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter,
 	if (count < saa716x->config->adapters) {
 		u32 reset_gpio;
 
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init",
+		pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init",
 			count);
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
+		pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count,
 			saa716x->pdev->subsystem_device);
 
 		if (count == 0) {
@@ -326,25 +314,25 @@ static int saa716x_atlantis_frontend_attach(struct saa716x_adapter *adapter,
 		if (adapter->fe == NULL)
 			goto exit;
 
-		dprintk(SAA716x_ERROR, 1,
+		pci_dbg(saa716x->pdev,
 			"found TDA10046 DVB-T frontend @0x%02x",
 			tda1004x_atlantis_config.demod_address);
 
 		if (dvb_attach(tda827x_attach, adapter->fe,
 			       tda1004x_atlantis_config.tuner_address,
 			       &i2c->i2c_adapter, &tda827x_atlantis_config)) {
-			dprintk(SAA716x_ERROR, 1, "found TDA8275 tuner @0x%02x",
+			pci_dbg(saa716x->pdev, "found TDA8275 tuner @0x%02x",
 				tda1004x_atlantis_config.tuner_address);
 		} else {
 			goto exit;
 		}
 
-		dprintk(SAA716x_ERROR, 1, "Done!");
+		pci_dbg(saa716x->pdev, "Done!");
 		return 0;
 	}
 
 exit:
-	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	pci_err(saa716x->pdev, "Frontend attach failed");
 	return -ENODEV;
 }
 
@@ -413,9 +401,9 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 
 
 	if (count  == 0) {
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init", count);
-		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
-		dprintk(SAA716x_ERROR, 1, "Adapter (%d) Power ON", count);
+		pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init", count);
+		pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+		pci_dbg(saa716x->pdev, "Adapter (%d) Power ON", count);
 
 		/* GPIO 26 controls a +15dB gain */
 		saa716x_gpio_set_output(saa716x, 26);
@@ -434,7 +422,7 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 		adapter->fe = tda10046_attach(&tda1004x_nemo_config,
 					      &demod_i2c->i2c_adapter);
 		if (adapter->fe) {
-			dprintk(SAA716x_ERROR, 1, "found TDA10046 DVB-T frontend @0x%02x",
+			pci_dbg(saa716x->pdev, "found TDA10046 DVB-T frontend @0x%02x",
 				tda1004x_nemo_config.demod_address);
 
 		} else {
@@ -443,17 +431,17 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 		if (dvb_attach(tda827x_attach, adapter->fe,
 			       tda1004x_nemo_config.tuner_address,
 			       &tuner_i2c->i2c_adapter, &tda827x_nemo_config)) {
-			dprintk(SAA716x_ERROR, 1, "found TDA8275 tuner @0x%02x",
+			pci_dbg(saa716x->pdev, "found TDA8275 tuner @0x%02x",
 				tda1004x_nemo_config.tuner_address);
 		} else {
 			goto exit;
 		}
-		dprintk(SAA716x_ERROR, 1, "Done!");
+		pci_dbg(saa716x->pdev, "Done!");
 	}
 
 	return 0;
 exit:
-	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	pci_err(saa716x->pdev, "Frontend attach failed");
 	return -ENODEV;
 }
 

From d26a8f247f9ba63c8e5a19050841227abddae568 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 14:20:59 +0100
Subject: [PATCH 332/364] saa716x: remove dprintk macro

dprintk's are converted to pci_info/err/dbg. So we can remove the macro
definition and associated variables.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_priv.h | 27 ------------------------
 1 file changed, 27 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 6ea970c01c2d8..f4573e30cc056 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -20,32 +20,8 @@
 #include <media/dvb_frontend.h>
 #include <media/dvb_net.h>
 
-#define SAA716x_ERROR		0
-#define SAA716x_NOTICE		1
-#define SAA716x_INFO		2
-#define SAA716x_DEBUG		3
-
-#define SAA716x_DEV		((saa716x)->num)
-#define SAA716x_VERBOSE		((saa716x)->verbose)
 #define SAA716x_MAX_ADAPTERS	4
 
-#define dprintk(__x, __y, __fmt, __arg...) do {								\
-	if (__y) {											\
-		if	((SAA716x_VERBOSE > SAA716x_ERROR) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_ERR "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
-		else if	((SAA716x_VERBOSE > SAA716x_NOTICE) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_NOTICE "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
-		else if ((SAA716x_VERBOSE > SAA716x_INFO) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_INFO "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
-		else if ((SAA716x_VERBOSE > SAA716x_DEBUG) && (SAA716x_VERBOSE > __x))			\
-			printk(KERN_DEBUG "%s (%d): " __fmt "\n", __func__, SAA716x_DEV, ##__arg);	\
-	} else {											\
-		if (SAA716x_VERBOSE > __x)								\
-			printk(__fmt, ##__arg);							\
-	}												\
-} while (0)
-
-
 #define NXP_SEMICONDUCTOR	0x1131
 #define SAA7160			0x7160
 #define SAA7161			0x7161
@@ -109,9 +85,6 @@ struct saa716x_dev {
 	struct pci_dev			*pdev;
 	struct module			*module;
 
-	int				num; /* device count */
-	int				verbose;
-
 	u8				revision;
 
 	/* PCI */

From 7012cf58741fa2c59cb7f1c04055d517af8dc394 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 14:53:19 +0100
Subject: [PATCH 333/364] saa716x_ff: remove interrupt counting debug code

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  9 --
 drivers/media/pci/saa716x/saa716x_ff_main.c | 91 ++-------------------
 2 files changed, 6 insertions(+), 94 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index ef5bd0de4a065..a463bac22997e 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -171,15 +171,6 @@ struct sti7109_dev {
 	u32			video_capture;
 	u32			video_format;
 
-	u32			int_count_enable;
-	u32			total_int_count;
-	u32			vi_int_count[2];
-	u32			fgpi_int_count[4];
-	u32			i2c_int_count[2];
-	u32			ext_int_total_count;
-	u32			ext_int_source_count[16];
-	u32			last_int_ticks;
-
 	u16			fpga_version;
 	u32			fw_version;
 };
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index ef56ec5868870..62d47b55e2cef 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -53,10 +53,6 @@ unsigned int int_type = 1;
 module_param(int_type, int, 0644);
 MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
 
-unsigned int int_count_enable;
-module_param(int_count_enable, int, 0644);
-MODULE_PARM_DESC(int_count_enable, "enable counting of interrupts");
-
 unsigned int video_capture;
 module_param(video_capture, int, 0644);
 MODULE_PARM_DESC(video_capture, "capture digital video coming from STi7109: 0=off, 1=one-shot. default off");
@@ -1021,15 +1017,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	sti7109->video_capture = video_capture;
 	mutex_init(&sti7109->video_lock);
 
-	sti7109->int_count_enable = int_count_enable;
-	sti7109->total_int_count = 0;
-	memset(sti7109->vi_int_count, 0, sizeof(sti7109->vi_int_count));
-	memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
-	memset(sti7109->i2c_int_count, 0, sizeof(sti7109->i2c_int_count));
-	sti7109->ext_int_total_count = 0;
-	memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
-	sti7109->last_int_ticks = jiffies;
-
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_RESET_BACKEND);
 	saa716x_gpio_set_output(saa716x, TT_PREMIUM_GPIO_FPGA_CS0);
@@ -1212,41 +1199,23 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	u32 msiStatusH;
 	u32 phiISR;
 
-	if (sti7109->int_count_enable)
-		sti7109->total_int_count++;
-
 	msiStatusL = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, msiStatusL);
 	msiStatusH = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
 	SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, msiStatusH);
 
-	if (msiStatusL) {
-		if (msiStatusL & MSI_INT_TAGACK_VI0_0) {
-			if (sti7109->int_count_enable)
-				sti7109->vi_int_count[0]++;
-			tasklet_schedule(&saa716x->vip[0].tasklet);
-		}
-		if (msiStatusL & MSI_INT_TAGACK_FGPI_2) {
-			if (sti7109->int_count_enable)
-				sti7109->fgpi_int_count[2]++;
-			tasklet_schedule(&saa716x->fgpi[2].tasklet);
-		}
-		if (msiStatusL & MSI_INT_TAGACK_FGPI_3) {
-			if (sti7109->int_count_enable)
-				sti7109->fgpi_int_count[3]++;
-			tasklet_schedule(&saa716x->fgpi[3].tasklet);
-		}
-	}
+	if (msiStatusL & MSI_INT_TAGACK_VI0_0)
+		tasklet_schedule(&saa716x->vip[0].tasklet);
+	if (msiStatusL & MSI_INT_TAGACK_FGPI_2)
+		tasklet_schedule(&saa716x->fgpi[2].tasklet);
+	if (msiStatusL & MSI_INT_TAGACK_FGPI_3)
+		tasklet_schedule(&saa716x->fgpi[3].tasklet);
 
 	if (msiStatusH & MSI_INT_I2CINT_0) {
-		if (sti7109->int_count_enable)
-			sti7109->i2c_int_count[0]++;
 		saa716x->i2c[0].i2c_op = 0;
 		wake_up(&saa716x->i2c[0].i2c_wq);
 	}
 	if (msiStatusH & MSI_INT_I2CINT_1) {
-		if (sti7109->int_count_enable)
-			sti7109->i2c_int_count[1]++;
 		saa716x->i2c[1].i2c_op = 0;
 		wake_up(&saa716x->i2c[1].i2c_wq);
 	}
@@ -1254,14 +1223,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 	if (msiStatusH & MSI_INT_EXTINT_0) {
 
 		phiISR = SAA716x_EPRD(PHI_1, FPGA_ADDR_EMI_ISR);
-		if (sti7109->int_count_enable) {
-			int i;
-			sti7109->ext_int_total_count++;
-			for (i = 0; i < 16; i++)
-				if (phiISR & (1 << i))
-					sti7109->ext_int_source_count[i]++;
-		}
-
 		if (phiISR & ISR_CMD_MASK) {
 
 			u32 value;
@@ -1451,46 +1412,6 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		}
 	}
 
-	if (sti7109->int_count_enable) {
-		if (jiffies - sti7109->last_int_ticks >= HZ) {
-			pci_dbg(saa716x->pdev,
-				"int count: t: %d, v: %d %d, f:%d %d %d %d, i:%d %d,"
-				"e: %d (%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d)",
-				sti7109->total_int_count,
-				sti7109->vi_int_count[0],
-				sti7109->vi_int_count[1],
-				sti7109->fgpi_int_count[0],
-				sti7109->fgpi_int_count[1],
-				sti7109->fgpi_int_count[2],
-				sti7109->fgpi_int_count[3],
-				sti7109->i2c_int_count[0],
-				sti7109->i2c_int_count[1],
-				sti7109->ext_int_total_count,
-				sti7109->ext_int_source_count[0],
-				sti7109->ext_int_source_count[1],
-				sti7109->ext_int_source_count[2],
-				sti7109->ext_int_source_count[3],
-				sti7109->ext_int_source_count[4],
-				sti7109->ext_int_source_count[5],
-				sti7109->ext_int_source_count[6],
-				sti7109->ext_int_source_count[7],
-				sti7109->ext_int_source_count[8],
-				sti7109->ext_int_source_count[9],
-				sti7109->ext_int_source_count[10],
-				sti7109->ext_int_source_count[11],
-				sti7109->ext_int_source_count[12],
-				sti7109->ext_int_source_count[13],
-				sti7109->ext_int_source_count[14],
-				sti7109->ext_int_source_count[15]);
-			sti7109->total_int_count = 0;
-			memset(sti7109->vi_int_count, 0, sizeof(sti7109->vi_int_count));
-			memset(sti7109->fgpi_int_count, 0, sizeof(sti7109->fgpi_int_count));
-			memset(sti7109->i2c_int_count, 0, sizeof(sti7109->i2c_int_count));
-			sti7109->ext_int_total_count = 0;
-			memset(sti7109->ext_int_source_count, 0, sizeof(sti7109->ext_int_source_count));
-			sti7109->last_int_ticks = jiffies;
-		}
-	}
 	return IRQ_HANDLED;
 }
 

From e7d3c7cc84a42747259c4de3ced645fa945e358c Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 17:23:59 +0100
Subject: [PATCH 334/364] saa716x: cleanup RETURN_VOID checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 2 --
 drivers/media/pci/saa716x/saa716x_i2c.c  | 2 --
 2 files changed, 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 97cf09745801e..30b31c606b7bb 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -313,7 +313,5 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 
 		saa716x_adap++;
 	}
-
-	return;
 }
 EXPORT_SYMBOL(saa716x_dvb_exit);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index e6ac5d9deeb66..e43bd28172114 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -38,8 +38,6 @@ static void saa716x_term_xfer(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0x80);
 	msleep(10);
 	SAA716x_EPWR(I2C_DEV, I2C_CONTROL, 0xc0);
-
-	return;
 }
 
 static void saa716x_i2c_hwdeinit(struct saa716x_i2c *i2c, u32 I2C_DEV)

From e41b0ab53da76962d03916bb40d4ac0bdf9cb17c Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 18:03:47 +0100
Subject: [PATCH 335/364] saa716x: remove unused adap_lock

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c | 2 --
 drivers/media/pci/saa716x/saa716x_priv.h | 1 -
 2 files changed, 3 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 30b31c606b7bb..095b3228d9722 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -140,8 +140,6 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 	struct saa716x_config *config = saa716x->config;
 	int result, i;
 
-	mutex_init(&saa716x->adap_lock);
-
 	/* all video input ports use their own clocks */
 	SAA716x_EPWR(GREG, GREG_VI_CTRL, 0x2C688000);
 	SAA716x_EPWR(GREG, GREG_FGPI_CTRL, 0);
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index f4573e30cc056..8b9fbd210b42c 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -99,7 +99,6 @@ struct saa716x_dev {
 	u32				I2C_DEV[2];
 
 	struct saa716x_adapter		saa716x_adap[SAA716x_MAX_ADAPTERS];
-	struct mutex			adap_lock;
 	struct saa716x_cgu		cgu;
 
 	spinlock_t			gpio_lock;

From 8a7358beb174d1d8591697d3dac24a4d2290a375 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 21:25:49 +0100
Subject: [PATCH 336/364] saa716x: #include cleanup

This also fixes INCLUDE_LINUX checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  | 20 --------------------
 drivers/media/pci/saa716x/saa716x_ff_main.c | 21 ---------------------
 drivers/media/pci/saa716x/saa716x_hybrid.c  | 20 --------------------
 drivers/media/pci/saa716x/saa716x_i2c.h     |  2 ++
 drivers/media/pci/saa716x/saa716x_priv.h    |  6 ------
 5 files changed, 2 insertions(+), 67 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index d916f0f6ffa79..2237311bd24f1 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -1,23 +1,3 @@
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/kernel.h>
-#include <linux/pci.h>
-#include <linux/mutex.h>
-
-#include <asm/io.h>
-#include <asm/pgtable.h>
-#include <asm/page.h>
-#include <linux/kmod.h>
-#include <linux/vmalloc.h>
-#include <linux/init.h>
-#include <linux/device.h>
-
-#include <linux/signal.h>
-#include <linux/sched.h>
-#include <linux/interrupt.h>
-
-#include <linux/i2c.h>
-
 #include "saa716x_mod.h"
 
 #include "saa716x_gpio_reg.h"
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 62d47b55e2cef..370b9e92cd638 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1,25 +1,4 @@
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/kernel.h>
-#include <linux/pci.h>
-#include <linux/mutex.h>
-
-#include <asm/io.h>
-#include <asm/pgtable.h>
-#include <asm/page.h>
-#include <asm/byteorder.h>
-#include <linux/kmod.h>
-#include <linux/vmalloc.h>
-#include <linux/init.h>
-#include <linux/device.h>
 #include <linux/firmware.h>
-
-#include <linux/signal.h>
-#include <linux/sched.h>
-#include <linux/interrupt.h>
-
-#include <linux/i2c.h>
-
 #include <linux/videodev2.h>
 #include <linux/dvb/video.h>
 #include <linux/dvb/audio.h>
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 658281034da48..7fc2d1f39f28c 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -1,23 +1,3 @@
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/kernel.h>
-#include <linux/pci.h>
-#include <linux/mutex.h>
-
-#include <asm/io.h>
-#include <asm/pgtable.h>
-#include <asm/page.h>
-#include <linux/kmod.h>
-#include <linux/vmalloc.h>
-#include <linux/init.h>
-#include <linux/device.h>
-
-#include <linux/signal.h>
-#include <linux/sched.h>
-#include <linux/interrupt.h>
-
-#include <linux/i2c.h>
-
 #include "saa716x_mod.h"
 
 #include "saa716x_gpio_reg.h"
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index c76cc02019c50..2a14d62c0ef2d 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -1,6 +1,8 @@
 #ifndef __SAA716x_I2C_H
 #define __SAA716x_I2C_H
 
+#include <linux/i2c.h>
+
 #define SAA716x_I2C_ADAPTERS	2
 
 #define SAA716x_I2C_ADAPTER(__dev) ((	\
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 8b9fbd210b42c..81572e66182d1 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -1,13 +1,7 @@
 #ifndef __SAA716x_PRIV_H
 #define __SAA716x_PRIV_H
 
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/kernel.h>
 #include <linux/pci.h>
-#include <linux/mutex.h>
-#include <linux/ioport.h>
-#include <linux/i2c.h>
 #include "saa716x_i2c.h"
 #include "saa716x_cgu.h"
 #include "saa716x_dma.h"

From c1b2703d6350207b2ac5a4bfe7da5dd045509ee0 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 21:34:59 +0100
Subject: [PATCH 337/364] saa716x: use kcalloc for array memory allocation

This also fixes ALLOC_WITH_MULTIPLY checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 92cbf9a8dcf9f..4071f878f535e 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -108,7 +108,7 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 		pages = size / SAA716x_PAGE_SIZE;
 
 	/* Allocate memory for SG list */
-	dmabuf->sg_list = kzalloc(sizeof(struct scatterlist) * pages, GFP_KERNEL);
+	dmabuf->sg_list = kcalloc(pages, sizeof(struct scatterlist), GFP_KERNEL);
 	if (dmabuf->sg_list == NULL) {
 		pci_err(saa716x->pdev, "Failed to allocate memory for scatterlist.");
 		return -ENOMEM;

From 2745bf2d01154226cec106cde7c49778a53eabaf Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 21:59:09 +0100
Subject: [PATCH 338/364] saa716x_ff: cleanup CONSTANT_COMPARISON checkpatch
 warning

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 370b9e92cd638..e30ac0883f163 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -265,7 +265,7 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 		} else {
 			/* too big to allocate from stack */
 			mbuf = kmalloc(_IOC_SIZE(cmd), GFP_KERNEL);
-			if (NULL == mbuf)
+			if (!mbuf)
 				return -ENOMEM;
 			parg = mbuf;
 		}

From 9d5eab7ecabbb06cdc9c704248af18ebb736229a Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 22:02:58 +0100
Subject: [PATCH 339/364] saa716x_hybrid: cleanup UNNECESSARY_ELSE checkpatch
 warning

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 7fc2d1f39f28c..24a5cd0b0f126 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -194,11 +194,8 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	if (adapter->fe == NULL) {
 		pci_err(saa716x->pdev, "Frontend attach failed");
 		return -ENODEV;
-	} else {
-		pci_dbg(saa716x->pdev, "Done!");
-		return 0;
 	}
-
+	pci_dbg(saa716x->pdev, "Done!");
 	return 0;
 }
 

From 4d61274b384e7eeaa320474a3622afebe2d3732e Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 23 Dec 2018 23:06:37 +0100
Subject: [PATCH 340/364] saa716x: cleanup dma buffer sg list allocation

Convert vmalloc plus memset to zero to vzalloc, remove oom error messages
to cleanup OOM_MESSAGE checkpatch warnings.
Always allocate buffer, remove unused pre-allocated buffer handling.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_dma.c | 41 ++++++++-----------------
 1 file changed, 12 insertions(+), 29 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 4071f878f535e..752e7f9df315b 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -86,11 +86,8 @@ static void saa716x_dmabuf_sgfree(struct saa716x_dmabuf *dmabuf)
 	}
 }
 
-/*
- * Create a SG, when an allocated buffer is passed to it,
- * otherwise the needed memory gets allocated by itself
- */
-static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int size)
+/* Create a SG, the needed memory gets allocated */
+static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, int size)
 {
 	struct saa716x_dev *saa716x	= dmabuf->saa716x;
 	struct scatterlist *list;
@@ -109,42 +106,28 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, void *buf, int
 
 	/* Allocate memory for SG list */
 	dmabuf->sg_list = kcalloc(pages, sizeof(struct scatterlist), GFP_KERNEL);
-	if (dmabuf->sg_list == NULL) {
-		pci_err(saa716x->pdev, "Failed to allocate memory for scatterlist.");
+	if (dmabuf->sg_list == NULL)
 		return -ENOMEM;
-	}
 
 	pci_dbg(saa716x->pdev, "Initializing SG table");
 	sg_init_table(dmabuf->sg_list, pages);
 
-	if (buf == NULL) {
-
-		/* allocate memory, unaligned */
-		dmabuf->mem_virt_noalign = vmalloc((pages + 1) * SAA716x_PAGE_SIZE);
-		if (dmabuf->mem_virt_noalign == NULL) {
-			pci_err(saa716x->pdev, "Failed to allocate memory for buffer");
-			return -ENOMEM;
-		}
-		memset(dmabuf->mem_virt_noalign, 0, (pages + 1) * SAA716x_PAGE_SIZE);
+	/* allocate memory, unaligned */
+	dmabuf->mem_virt_noalign = vzalloc((pages + 1) * SAA716x_PAGE_SIZE);
+	if (dmabuf->mem_virt_noalign == NULL)
+		return -ENOMEM;
 
-		/* align memory to page */
-		dmabuf->mem_virt = (void *) PAGE_ALIGN(((unsigned long) dmabuf->mem_virt_noalign));
+	/* align memory to page */
+	dmabuf->mem_virt = (void *) PAGE_ALIGN(((unsigned long) dmabuf->mem_virt_noalign));
 
-		BUG_ON(!((((unsigned long) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
-	} else {
-		dmabuf->mem_virt = buf;
-	}
+	BUG_ON(!((((unsigned long) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
 
 	dmabuf->list_len = pages; /* scatterlist length */
 	list = dmabuf->sg_list;
 
 	pci_dbg(saa716x->pdev, "Allocating SG pages");
 	for (i = 0; i < pages; i++) {
-		if (buf == NULL)
-			pg = vmalloc_to_page(dmabuf->mem_virt + i * SAA716x_PAGE_SIZE);
-		else
-			pg = virt_to_page(dmabuf->mem_virt + i * SAA716x_PAGE_SIZE);
-
+		pg = vmalloc_to_page(dmabuf->mem_virt + i * SAA716x_PAGE_SIZE);
 		BUG_ON(pg == NULL);
 		sg_set_page(&list[i], pg, SAA716x_PAGE_SIZE, 0);
 	}
@@ -271,7 +254,7 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 	}
 
 	/* Allocate buffer as SG */
-	ret = saa716x_dmabuf_sgalloc(dmabuf, NULL, size);
+	ret = saa716x_dmabuf_sgalloc(dmabuf, size);
 	if (ret < 0) {
 		pci_err(saa716x->pdev, "SG alloc failed");
 		goto err2;

From 780b95f46c1c02743b00001afcb188ec37e2cab4 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Wed, 26 Dec 2018 21:03:51 +0100
Subject: [PATCH 341/364] saa716x_ff: use common device struct

Integrate PCIe bridge, decoder, and IR device structs. So we don't need multiple allocations and we can get rid
of the links between the different structs.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  10 +-
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  |  26 +--
 drivers/media/pci/saa716x/saa716x_ff_ir.c   |  52 ++----
 drivers/media/pci/saa716x/saa716x_ff_ir.h   |  23 ++-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 176 ++++++++++----------
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  29 ++--
 drivers/media/pci/saa716x/saa716x_ff_phi.h  |  12 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |   5 -
 8 files changed, 167 insertions(+), 166 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index a463bac22997e..51438100da93c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -5,6 +5,9 @@
 #include <linux/workqueue.h>
 #include <media/dvb_ringbuffer.h>
 
+#include "saa716x_ff_ir.h"
+#include "saa716x_priv.h"
+
 #define TECHNOTREND			0x13c2
 #define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009
 #define S2_6400_DUAL_S2_PREMIUM_PROD	0x300A
@@ -111,7 +114,6 @@
 
 /* place to store all the necessary device information */
 struct sti7109_dev {
-	struct saa716x_dev	*dev;
 	struct dvb_device	*osd_dev;
 	struct dvb_device	*video_dev;
 	struct dvb_device	*audio_dev;
@@ -175,4 +177,10 @@ struct sti7109_dev {
 	u32			fw_version;
 };
 
+struct saa716x_ff_dev {
+	struct saa716x_dev	saa716x;
+	struct sti7109_dev	sti7109;
+	struct infrared		ir;
+};
+
 #endif /* __SAA716x_FF_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 9750f52afd62a..1db4dd83b292b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -42,7 +42,8 @@ int sti7109_cmd_init(struct sti7109_dev *sti7109)
 
 static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long timeout;
 
 	timeout = 1 * HZ;
@@ -63,7 +64,7 @@ static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 	sti7109->cmd_ready = 0;
 	sti7109->result_len = 0;
 	sti7109->result_avail = 0;
-	saa716x_ff_phi_write(saa716x, ADDR_CMD_DATA, sti7109->cmd_data,
+	saa716x_ff_phi_write(saa716x_ff, ADDR_CMD_DATA, sti7109->cmd_data,
 			     sti7109->cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_CMD_MASK);
 
@@ -98,7 +99,8 @@ static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 
 int sti7109_raw_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int err;
 
 	if (cmd->cmd_len > SIZE_CMD_DATA) {
@@ -135,7 +137,8 @@ int sti7109_raw_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 
 static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long timeout;
 
 	timeout = 1 * HZ;
@@ -156,7 +159,7 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 	sti7109->osd_cmd_ready = 0;
 	sti7109->osd_result_len = 0;
 	sti7109->osd_result_avail = 0;
-	saa716x_ff_phi_write(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
+	saa716x_ff_phi_write(saa716x_ff, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
 			     sti7109->osd_cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
 
@@ -192,7 +195,8 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 
 int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int err;
 
 	if (cmd->cmd_len > SIZE_OSD_CMD_DATA) {
@@ -229,7 +233,8 @@ int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 
 static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long timeout;
 	u16 blockSize;
 	u16 lastBlockSize;
@@ -303,9 +308,9 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 			blockHeader[4] |= 0x80;
 
 		addr = ADDR_BLOCK_DATA + activeBlock * (SIZE_BLOCK_DATA / 2);
-		saa716x_ff_phi_write(saa716x, addr, blockHeader,
+		saa716x_ff_phi_write(saa716x_ff, addr, blockHeader,
 				     SIZE_BLOCK_HEADER);
-		saa716x_ff_phi_write(saa716x, addr + blockOffset,
+		saa716x_ff_phi_write(saa716x_ff, addr + blockOffset,
 				     blockPtr, blockSize);
 		activeBlock = (activeBlock + 1) & 1;
 		if (blockIndex > 0) {
@@ -349,7 +354,8 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 
 int sti7109_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int err;
 
 	if (data->data_length > MAX_DATA_LEN) {
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 7a3c69d99e569..018893d0ea7ae 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -26,22 +26,6 @@
 #include "saa716x_priv.h"
 #include "saa716x_ff.h"
 
-
-/* infrared remote control */
-struct infrared {
-	u16			key_map[128];
-	struct input_dev	*input_dev;
-	char			input_phys[32];
-	struct timer_list	keyup_timer;
-	struct tasklet_struct	tasklet;
-	u32			command;
-	u32			device_mask;
-	u8			protocol;
-	u16			last_key;
-	u16			last_toggle;
-	bool			key_pressed;
-};
-
 #define IR_RC5		0
 #define UP_TIMEOUT	(HZ*7/25)
 
@@ -63,8 +47,9 @@ static void ir_emit_keyup(struct timer_list *t)
 /* tasklet */
 static void ir_emit_key(unsigned long parm)
 {
-	struct saa716x_dev *saa716x = (struct saa716x_dev *) parm;
-	struct infrared *ir = saa716x->ir_priv;
+	struct saa716x_ff_dev *saa716x_ff = (struct saa716x_ff_dev *) parm;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct infrared *ir = &saa716x_ff->ir;
 	u32 ircom = ir->command;
 	u8 data;
 	u8 addr;
@@ -157,32 +142,23 @@ static void ir_register_keys(struct infrared *ir)
 }
 
 /* interrupt handler */
-void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd)
+void saa716x_ir_handler(struct saa716x_ff_dev *saa716x_ff, u32 ir_cmd)
 {
-	struct infrared *ir = saa716x->ir_priv;
-
-	if (!ir)
-		return;
+	struct infrared *ir = &saa716x_ff->ir;
 
 	ir->command = ir_cmd;
 	tasklet_schedule(&ir->tasklet);
 }
 
 
-int saa716x_ir_init(struct saa716x_dev *saa716x)
+int saa716x_ir_init(struct saa716x_ff_dev *saa716x_ff)
 {
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct infrared *ir = &saa716x_ff->ir;
 	struct input_dev *input_dev;
-	struct infrared *ir;
 	int rc;
 	int i;
 
-	if (!saa716x)
-		return -ENOMEM;
-
-	ir = kzalloc(sizeof(struct infrared), GFP_KERNEL);
-	if (!ir)
-		return -ENOMEM;
-
 	timer_setup(&ir->keyup_timer, ir_emit_keyup, 0);
 
 	input_dev = input_allocate_device();
@@ -211,27 +187,21 @@ int saa716x_ir_init(struct saa716x_dev *saa716x)
 	ir_register_keys(ir);
 
 	input_enable_softrepeat(input_dev, 800, 200);
-
-	tasklet_init(&ir->tasklet, ir_emit_key, (unsigned long) saa716x);
-	saa716x->ir_priv = ir;
-
+	tasklet_init(&ir->tasklet, ir_emit_key, (unsigned long) saa716x_ff);
 	return 0;
 
 err:
 	if (ir->input_dev)
 		input_free_device(ir->input_dev);
-	kfree(ir);
 	return -ENOMEM;
 }
 
 
-void saa716x_ir_exit(struct saa716x_dev *saa716x)
+void saa716x_ir_exit(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct infrared *ir = saa716x->ir_priv;
+	struct infrared *ir = &saa716x_ff->ir;
 
-	saa716x->ir_priv = NULL;
 	tasklet_kill(&ir->tasklet);
 	del_timer_sync(&ir->keyup_timer);
 	input_unregister_device(ir->input_dev);
-	kfree(ir);
 }
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.h b/drivers/media/pci/saa716x/saa716x_ff_ir.h
index 1da41302c3fd5..ff357986be4dc 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.h
@@ -1,8 +1,25 @@
 #ifndef __SAA716x_FF_IR_H
 #define __SAA716x_FF_IR_H
 
-extern int saa716x_ir_init(struct saa716x_dev *saa716x);
-extern void saa716x_ir_exit(struct saa716x_dev *saa716x);
-extern void saa716x_ir_handler(struct saa716x_dev *saa716x, u32 ir_cmd);
+/* infrared remote control */
+struct infrared {
+	u16			key_map[128];
+	struct input_dev	*input_dev;
+	char			input_phys[32];
+	struct timer_list	keyup_timer;
+	struct tasklet_struct	tasklet;
+	u32			command;
+	u32			device_mask;
+	u8			protocol;
+	u16			last_key;
+	u16			last_toggle;
+	bool			key_pressed;
+};
+
+struct saa716x_ff_dev;
+
+extern int saa716x_ir_init(struct saa716x_ff_dev *saa716x_ff);
+extern void saa716x_ir_exit(struct saa716x_ff_dev *saa716x_ff);
+extern void saa716x_ir_handler(struct saa716x_ff_dev *saa716x_ff, u32 ir_cmd);
 
 #endif /* __SAA716x_FF_IR_H */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index e30ac0883f163..77a8e2cc35e5d 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -21,7 +21,6 @@
 
 #include "saa716x_ff.h"
 #include "saa716x_ff_cmd.h"
-#include "saa716x_ff_ir.h"
 #include "saa716x_ff_phi.h"
 
 #include "stv6110x.h"
@@ -50,9 +49,10 @@ static void saa716x_ff_spi_write(struct saa716x_dev *saa716x, const u8 *data, in
 	}
 }
 
-static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
+static int saa716x_ff_fpga_init(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	int fpgaInit;
 	int fpgaDone;
 	int rounds;
@@ -118,9 +118,10 @@ static int saa716x_ff_fpga_init(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
+static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	int i;
 	int length;
 	u32 requestedBlock;
@@ -149,7 +150,7 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 	pci_info(saa716x->pdev, "loader version %X.%02X",
 		loaderVersion >> 8, loaderVersion & 0xFF);
 
-	saa716x_ff_phi_write(saa716x, 0, fw->data, fw->size);
+	saa716x_ff_phi_write(saa716x_ff, 0, fw->data, fw->size);
 	msleep(10);
 
 	release_firmware(fw);
@@ -194,10 +195,10 @@ static int saa716x_ff_st7109_init(struct saa716x_dev *saa716x)
 		writtenBlock++;
 		/* write one block (last may differ from blockSize) */
 		if (lastBlockSize && writtenBlock == (numBlocks + 1))
-			saa716x_ff_phi_write(saa716x, 0, &fw->data[i],
+			saa716x_ff_phi_write(saa716x_ff, 0, &fw->data[i],
 					     lastBlockSize);
 		else
-			saa716x_ff_phi_write(saa716x, 0, &fw->data[i],
+			saa716x_ff_phi_write(saa716x_ff, 0, &fw->data[i],
 					     blockSize);
 
 		SAA716x_EPWR(PHI_1, 0x3ff8, writtenBlock);
@@ -363,18 +364,19 @@ static const struct dvb_device dvbdev_osd = {
 	.kernel_ioctl	= NULL,
 };
 
-static int saa716x_ff_osd_exit(struct saa716x_dev *saa716x)
+static int saa716x_ff_osd_exit(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	dvb_unregister_device(sti7109->osd_dev);
 	return 0;
 }
 
-static int saa716x_ff_osd_init(struct saa716x_dev *saa716x)
+static int saa716x_ff_osd_init(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
-	struct sti7109_dev *sti7109		= saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	dvb_register_device(&saa716x_adap->dvb_adapter,
 			    &sti7109->osd_dev,
@@ -429,18 +431,19 @@ static const struct dvb_device dvbdev_audio = {
 	.kernel_ioctl	= NULL,
 };
 
-static int saa716x_ff_audio_exit(struct saa716x_dev *saa716x)
+static int saa716x_ff_audio_exit(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	dvb_unregister_device(sti7109->audio_dev);
 	return 0;
 }
 
-static int saa716x_ff_audio_init(struct saa716x_dev *saa716x)
+static int saa716x_ff_audio_init(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
-	struct sti7109_dev *sti7109		= saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	dvb_register_device(&saa716x_adap->dvb_adapter,
 			    &sti7109->audio_dev,
@@ -475,19 +478,19 @@ static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf, const u8 __use
 }
 
 static void ringbuffer_read_tofifo(struct dvb_ringbuffer *rbuf,
-				   struct saa716x_dev *saa716x, int len)
+				   struct saa716x_ff_dev *saa716x_ff, int len)
 {
 	size_t todo = len;
 	size_t split;
 
 	split = (rbuf->pread + len > rbuf->size) ? rbuf->size - rbuf->pread : 0;
 	if (split > 0) {
-		saa716x_ff_phi_write_fifo(saa716x, rbuf->data + rbuf->pread,
+		saa716x_ff_phi_write_fifo(saa716x_ff, rbuf->data + rbuf->pread,
 					  split);
 		todo -= split;
 		rbuf->pread = 0;
 	}
-	saa716x_ff_phi_write_fifo(saa716x, rbuf->data + rbuf->pread, todo);
+	saa716x_ff_phi_write_fifo(saa716x_ff, rbuf->data + rbuf->pread, todo);
 
 	rbuf->pread = (rbuf->pread + todo) % rbuf->size;
 }
@@ -495,7 +498,8 @@ static void ringbuffer_read_tofifo(struct dvb_ringbuffer *rbuf,
 static void fifo_worker(struct work_struct *work)
 {
 	struct sti7109_dev *sti7109 = container_of(work, struct sti7109_dev, fifo_work);
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	u32 fifoStat;
 	u16 fifoSize;
 	u16 fifoUsage;
@@ -515,7 +519,7 @@ static void fifo_worker(struct work_struct *work)
 	len = (ringbuffer_avail < fifoFree) ? ringbuffer_avail : fifoFree;
 	len = (len / 32) * 32;
 	if (len) {
-		ringbuffer_read_tofifo(&sti7109->tsout, saa716x, len);
+		ringbuffer_read_tofifo(&sti7109->tsout, saa716x_ff, len);
 		wake_up(&sti7109->tsout.queue);
 	}
 
@@ -630,7 +634,8 @@ static ssize_t video_vip_read(struct sti7109_dev *sti7109,
 			      struct vip_stream_params *stream_params,
 			      char __user *buf, size_t count)
 {
-	struct saa716x_dev *saa716x = sti7109->dev;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct v4l2_pix_format pix_format;
 	int one_shot = 0;
 	size_t num_bytes;
@@ -740,9 +745,10 @@ static ssize_t dvb_video_read(struct file *file, char __user *buf,
 static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 			       size_t count, loff_t *ppos)
 {
-	struct dvb_device *dvbdev	= file->private_data;
-	struct sti7109_dev *sti7109	= dvbdev->priv;
-	struct saa716x_dev *saa716x	= sti7109->dev;
+	struct dvb_device *dvbdev = file->private_data;
+	struct sti7109_dev *sti7109 = dvbdev->priv;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long todo = count;
 	int ringbuffer_avail;
 
@@ -803,8 +809,9 @@ static unsigned int dvb_video_poll(struct file *file, poll_table *wait)
 static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 			      unsigned int cmd, void *parg)
 {
-	struct sti7109_dev *sti7109	= dvbdev->priv;
-	struct saa716x_dev *saa716x	= sti7109->dev;
+	struct sti7109_dev *sti7109  = dvbdev->priv;
+	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int ret = 0;
 
 	switch (cmd) {
@@ -886,9 +893,10 @@ static const struct dvb_device dvbdev_video = {
 	.kernel_ioctl	= NULL,
 };
 
-static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)
+static int saa716x_ff_video_exit(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	if (sti7109->video_capture != VIDEO_CAPTURE_OFF)
 		saa716x_vip_exit(saa716x, 0);
@@ -899,10 +907,11 @@ static int saa716x_ff_video_exit(struct saa716x_dev *saa716x)
 	return 0;
 }
 
-static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
+static int saa716x_ff_video_init(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct saa716x_adapter *saa716x_adap	= saa716x->saa716x_adap;
-	struct sti7109_dev *sti7109		= saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	dvb_ringbuffer_init(&sti7109->tsout, sti7109->iobuf, TSOUT_LEN);
 
@@ -928,22 +937,26 @@ static int saa716x_ff_video_init(struct saa716x_dev *saa716x)
 
 static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
 {
+	struct saa716x_ff_dev *saa716x_ff;
 	struct saa716x_dev *saa716x;
 	struct sti7109_dev *sti7109;
 	int err = 0;
 	u32 value;
 	unsigned long timeout;
 
-	saa716x = kzalloc(sizeof(struct saa716x_dev), GFP_KERNEL);
-	if (saa716x == NULL) {
+	saa716x_ff = kzalloc(sizeof(struct saa716x_ff_dev), GFP_KERNEL);
+	if (saa716x_ff == NULL) {
 		err = -ENOMEM;
 		goto fail0;
 	}
 
-	saa716x->int_type	= int_type;
-	saa716x->pdev		= pdev;
-	saa716x->module		= THIS_MODULE;
-	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
+	saa716x = &saa716x_ff->saa716x;
+	sti7109 = &saa716x_ff->sti7109;
+
+	saa716x->int_type = int_type;
+	saa716x->pdev = pdev;
+	saa716x->module = THIS_MODULE;
+	saa716x->config = (struct saa716x_config *) pci_id->driver_data;
 
 	err = saa716x_pci_init(saa716x);
 	if (err) {
@@ -973,21 +986,11 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	saa716x_gpio_init(saa716x);
 
-	/* prepare the sti7109 device struct */
-	sti7109 = kzalloc(sizeof(struct sti7109_dev), GFP_KERNEL);
-	if (!sti7109) {
-		pci_err(saa716x->pdev, "out of memory");
-		goto fail3;
-	}
-
-	sti7109->dev = saa716x;
-	saa716x->priv = sti7109;
-
 	sti7109->iobuf = vmalloc(TSOUT_LEN + MAX_DATA_LEN);
 	if (!sti7109->iobuf)
 		goto fail4;
 
-	err = saa716x_ff_phi_init(saa716x);
+	err = saa716x_ff_phi_init(saa716x_ff);
 	if (err)
 		goto fail4;
 
@@ -1015,14 +1018,14 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	saa716x_gpio_write(saa716x, TT_PREMIUM_GPIO_POWER_ENABLE, 1);
 	msleep(100);
 
-	err = saa716x_ff_fpga_init(saa716x);
+	err = saa716x_ff_fpga_init(saa716x_ff);
 	if (err) {
 		pci_err(saa716x->pdev, "FPGA Initialization failed");
 		goto fail5;
 	}
 
 	/* reconfigure PHI based on FPGA version and phi_mode */
-	saa716x_ff_phi_config(saa716x);
+	saa716x_ff_phi_config(saa716x_ff);
 
 	/* configure TS muxer */
 	if (sti7109->fpga_version < 0x110) {
@@ -1048,7 +1051,7 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	/* disable tuner reset */
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PIO_CTRL, 1);
 
-	err = saa716x_ff_st7109_init(saa716x);
+	err = saa716x_ff_st7109_init(saa716x_ff);
 	if (err) {
 		pci_err(saa716x->pdev, "STi7109 initialization failed");
 		goto fail5;
@@ -1077,19 +1080,19 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 	}
 	pci_dbg(saa716x->pdev, "STi7109 finished booting");
 
-	err = saa716x_ff_video_init(saa716x);
+	err = saa716x_ff_video_init(saa716x_ff);
 	if (err) {
 		pci_err(saa716x->pdev, "VIDEO initialization failed");
 		goto fail7;
 	}
 
-	err = saa716x_ff_audio_init(saa716x);
+	err = saa716x_ff_audio_init(saa716x_ff);
 	if (err) {
 		pci_err(saa716x->pdev, "AUDIO initialization failed");
 		goto fail8;
 	}
 
-	err = saa716x_ff_osd_init(saa716x);
+	err = saa716x_ff_osd_init(saa716x_ff);
 	if (err) {
 		pci_err(saa716x->pdev, "OSD initialization failed");
 		goto fail9;
@@ -1103,18 +1106,18 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 			sti7109->fw_version & 0xFF);
 	}
 
-	err = saa716x_ir_init(saa716x);
+	err = saa716x_ir_init(saa716x_ff);
 	if (err)
 		goto fail9;
 
 	return 0;
 
 fail9:
-	saa716x_ff_osd_exit(saa716x);
+	saa716x_ff_osd_exit(saa716x_ff);
 fail8:
-	saa716x_ff_audio_exit(saa716x);
+	saa716x_ff_audio_exit(saa716x_ff);
 fail7:
-	saa716x_ff_video_exit(saa716x);
+	saa716x_ff_video_exit(saa716x_ff);
 fail6:
 	saa716x_dvb_exit(saa716x);
 fail5:
@@ -1125,31 +1128,30 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id
 
 	vfree(sti7109->iobuf);
 fail4:
-	saa716x_ff_phi_exit(saa716x);
-
-	kfree(sti7109);
+	saa716x_ff_phi_exit(saa716x_ff);
 fail3:
 	saa716x_i2c_exit(saa716x);
 fail2:
 	saa716x_pci_exit(saa716x);
 fail1:
-	kfree(saa716x);
+	kfree(saa716x_ff);
 fail0:
 	return err;
 }
 
 static void saa716x_ff_pci_remove(struct pci_dev *pdev)
 {
-	struct saa716x_dev *saa716x = pci_get_drvdata(pdev);
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_ff_dev *saa716x_ff = pci_get_drvdata(pdev);
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
-	saa716x_ir_exit(saa716x);
+	saa716x_ir_exit(saa716x_ff);
 
-	saa716x_ff_osd_exit(saa716x);
+	saa716x_ff_osd_exit(saa716x_ff);
 
-	saa716x_ff_audio_exit(saa716x);
+	saa716x_ff_audio_exit(saa716x_ff);
 
-	saa716x_ff_video_exit(saa716x);
+	saa716x_ff_video_exit(saa716x_ff);
 
 	saa716x_dvb_exit(saa716x);
 
@@ -1160,20 +1162,18 @@ static void saa716x_ff_pci_remove(struct pci_dev *pdev)
 
 	vfree(sti7109->iobuf);
 
-	saa716x_ff_phi_exit(saa716x);
-
-	saa716x->priv = NULL;
-	kfree(sti7109);
+	saa716x_ff_phi_exit(saa716x_ff);
 
 	saa716x_i2c_exit(saa716x);
 	saa716x_pci_exit(saa716x);
-	kfree(saa716x);
+	kfree(saa716x_ff);
 }
 
 static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 {
-	struct saa716x_dev *saa716x = (struct saa716x_dev *) dev_id;
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_ff_dev *saa716x_ff = (struct saa716x_ff_dev *) dev_id;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	u32 msiStatusL;
 	u32 msiStatusH;
 	u32 phiISR;
@@ -1216,7 +1216,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_ff_phi_read(saa716x, ADDR_CMD_DATA, sti7109->result_data, length);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_CMD_DATA, sti7109->result_data, length);
 			sti7109->result_len = length;
 			sti7109->result_avail = 1;
 			wake_up(&sti7109->result_avail_wq);
@@ -1246,7 +1246,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_ff_phi_read(saa716x, ADDR_OSD_CMD_DATA, sti7109->osd_result_data, length);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_OSD_CMD_DATA, sti7109->osd_result_data, length);
 			sti7109->osd_result_len = length;
 			sti7109->osd_result_avail = 1;
 			wake_up(&sti7109->osd_result_avail_wq);
@@ -1286,7 +1286,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_AUDIO_PTS_MASK) {
 			u8 data[8];
 
-			saa716x_ff_phi_read(saa716x, ADDR_AUDIO_PTS, data, 8);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_AUDIO_PTS, data, 8);
 			sti7109->audio_pts = (((u64) data[3] & 0x01) << 32)
 					    | ((u64) data[4] << 24)
 					    | ((u64) data[5] << 16)
@@ -1300,7 +1300,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_VIDEO_PTS_MASK) {
 			u8 data[8];
 
-			saa716x_ff_phi_read(saa716x, ADDR_VIDEO_PTS, data, 8);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_VIDEO_PTS, data, 8);
 			sti7109->video_pts = (((u64) data[3] & 0x01) << 32)
 					    | ((u64) data[4] << 24)
 					    | ((u64) data[5] << 16)
@@ -1314,7 +1314,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_CURRENT_STC_MASK) {
 			u8 data[8];
 
-			saa716x_ff_phi_read(saa716x, ADDR_CURRENT_STC, data, 8);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_CURRENT_STC, data, 8);
 			sti7109->current_stc = (((u64) data[3] & 0x01) << 32)
 					      | ((u64) data[4] << 24)
 					      | ((u64) data[5] << 16)
@@ -1329,13 +1329,13 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[4];
 			u32 remote_event;
 
-			saa716x_ff_phi_read(saa716x, ADDR_REMOTE_EVENT, data, 4);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_REMOTE_EVENT, data, 4);
 			remote_event = (data[3] << 24)
 				     | (data[2] << 16)
 				     | (data[1] << 8)
 				     | (data[0]);
 			memset(data, 0, sizeof(data));
-			saa716x_ff_phi_write(saa716x, ADDR_REMOTE_EVENT, data, 4);
+			saa716x_ff_phi_write(saa716x_ff, ADDR_REMOTE_EVENT, data, 4);
 
 			phiISR &= ~ISR_REMOTE_EVENT_MASK;
 			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
@@ -1344,7 +1344,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 				pci_err(saa716x->pdev, "REMOTE EVENT: %X ignored", remote_event);
 			} else {
 				pci_dbg(saa716x->pdev, "REMOTE EVENT: %X", remote_event);
-				saa716x_ir_handler(saa716x, remote_event);
+				saa716x_ir_handler(saa716x_ff, remote_event);
 			}
 		}
 
@@ -1352,7 +1352,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[4];
 			u32 format;
 
-			saa716x_ff_phi_read(saa716x, ADDR_DVO_FORMAT, data, 4);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_DVO_FORMAT, data, 4);
 			format = (data[0] << 24)
 			       | (data[1] << 16)
 			       | (data[2] << 8)
@@ -1368,7 +1368,7 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_LOG_MESSAGE_MASK) {
 			char message[SIZE_LOG_MESSAGE_DATA];
 
-			saa716x_ff_phi_read(saa716x, ADDR_LOG_MESSAGE, message,
+			saa716x_ff_phi_read(saa716x_ff, ADDR_LOG_MESSAGE, message,
 					 SIZE_LOG_MESSAGE_DATA);
 
 			phiISR &= ~ISR_LOG_MESSAGE_MASK;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 15b741b165317..4a02fe8aff987 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -27,10 +27,11 @@ MODULE_PARM_DESC(phi_mode, "phi access mode:"
 #define PHI_1_4 (sti7109->mmio_wc)
 #define PHI_1_5 (sti7109->mmio_wc + 0x10000)
 
-int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
+int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff)
 {
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	struct pci_dev *pdev = saa716x->pdev;
-	struct sti7109_dev *sti7109 = saa716x->priv;
 	resource_size_t phi1_start = pci_resource_start(pdev, 0) + PHI_1;
 	int err;
 
@@ -96,9 +97,9 @@ int saa716x_ff_phi_init(struct saa716x_dev *saa716x)
 	return err;
 }
 
-void saa716x_ff_phi_exit(struct saa716x_dev *saa716x)
+void saa716x_ff_phi_exit(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	if (sti7109->mmio_wc)
 		iounmap(sti7109->mmio_wc);
@@ -106,9 +107,10 @@ void saa716x_ff_phi_exit(struct saa716x_dev *saa716x)
 		iounmap(sti7109->mmio_uc);
 }
 
-void saa716x_ff_phi_config(struct saa716x_dev *saa716x)
+void saa716x_ff_phi_config(struct saa716x_ff_dev *saa716x_ff)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
 	if (sti7109->fpga_version < 0x110)
 		return;
@@ -153,10 +155,11 @@ void saa716x_ff_phi_config(struct saa716x_dev *saa716x)
 	sti7109->phi_mode = phi_mode;
 }
 
-void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
+void saa716x_ff_phi_write(struct saa716x_ff_dev *saa716x_ff,
 			  u32 address, const u8 *data, int length)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	int i;
 
 	switch (sti7109->phi_mode) {
@@ -175,10 +178,11 @@ void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
 	}
 }
 
-void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
+void saa716x_ff_phi_read(struct saa716x_ff_dev *saa716x_ff,
 			 u32 address, u8 *data, int length)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	int i;
 
 	switch (sti7109->phi_mode) {
@@ -197,10 +201,11 @@ void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
 	}
 }
 
-void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
+void saa716x_ff_phi_write_fifo(struct saa716x_ff_dev *saa716x_ff,
 			       const u8 *data, int length)
 {
-	struct sti7109_dev *sti7109 = saa716x->priv;
+	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
+	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	int i;
 
 	switch (sti7109->phi_mode) {
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.h b/drivers/media/pci/saa716x/saa716x_ff_phi.h
index 85b8b69b0fd56..858c8b4c6cc46 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.h
@@ -1,14 +1,14 @@
 #ifndef __SAA716x_FF_PHI_H
 #define __SAA716x_FF_PHI_H
 
-extern int saa716x_ff_phi_init(struct saa716x_dev *saa716x);
-extern void saa716x_ff_phi_exit(struct saa716x_dev *saa716x);
-extern void saa716x_ff_phi_config(struct saa716x_dev *saa716x);
-extern void saa716x_ff_phi_write(struct saa716x_dev *saa716x,
+extern int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff);
+extern void saa716x_ff_phi_exit(struct saa716x_ff_dev *saa716x_ff);
+extern void saa716x_ff_phi_config(struct saa716x_ff_dev *saa716x_ff);
+extern void saa716x_ff_phi_write(struct saa716x_ff_dev *saa716x_ff,
 				 u32 address, const u8 *data, int length);
-extern void saa716x_ff_phi_read(struct saa716x_dev *saa716x,
+extern void saa716x_ff_phi_read(struct saa716x_ff_dev *saa716x_ff,
 				u32 address, u8 *data, int length);
-extern void saa716x_ff_phi_write_fifo(struct saa716x_dev *saa716x,
+extern void saa716x_ff_phi_write_fifo(struct saa716x_ff_dev *saa716x_ff,
 				      const u8 *data, int length);
 
 #endif /* __SAA716x_FF_PHI_H */
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 81572e66182d1..445c17288615f 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -100,11 +100,6 @@ struct saa716x_dev {
 
 	struct saa716x_fgpi_stream_port	fgpi[4];
 	struct saa716x_vip_stream_port	vip[2];
-
-	void				*priv;
-
-	/* remote control */
-	void				*ir_priv;
 };
 
 #endif /* __SAA716x_PRIV_H */

From ff1730dd9e5288c9693a7e25bb9c6aae9db3f946 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Wed, 26 Dec 2018 21:30:05 +0100
Subject: [PATCH 342/364] saa716x_ff: cleanup LINE_SPACING checkpatch warning

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 77a8e2cc35e5d..42d21e0d815ea 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1460,9 +1460,9 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 					 &tt6400_stv090x_config,
 					 i2c_adapter,
 					 STV090x_DEMODULATOR_0 + count);
-
 		if (adapter->fe) {
 			struct stv6110x_devctl *ctl;
+
 			ctl = dvb_attach(stv6110x_attach,
 					 adapter->fe,
 					 &tt6400_stv6110x_config,

From ccc9d3d97a3468bff93c3bd1f650b4750db1f8ae Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 15:29:44 +0100
Subject: [PATCH 343/364] saa716x: cleanup BRACES checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_fgpi.c |  6 ++----
 drivers/media/pci/saa716x/saa716x_i2c.c  | 12 ++++--------
 drivers/media/pci/saa716x/saa716x_vip.c  |  9 +++------
 3 files changed, 9 insertions(+), 18 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index dd7ab91ca47be..873353d207b31 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -284,9 +284,8 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 	SAA716x_EPWR(fgpi_port, FGPI_INTERFACE, 0);
 	msleep(10);
 
-	if (saa716x_fgpi_setparams(saa716x->fgpi[port].dma_buf, stream_params, port) != 0) {
+	if (saa716x_fgpi_setparams(saa716x->fgpi[port].dma_buf, stream_params, port) != 0)
 		return -EIO;
-	}
 
 	saa716x->fgpi[port].read_index = 0;
 
@@ -356,9 +355,8 @@ int saa716x_fgpi_init(struct saa716x_dev *saa716x, int port, int dma_buf_size,
 		ret = saa716x_dmabuf_alloc(saa716x,
 					   &saa716x->fgpi[port].dma_buf[i],
 					   dma_buf_size);
-		if (ret < 0) {
+		if (ret < 0)
 			return ret;
-		}
 	}
 	saa716x->fgpi[port].saa716x = saa716x;
 	tasklet_init(&saa716x->fgpi[port].tasklet, worker,
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index e43bd28172114..07c4ab44a7940 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -218,9 +218,8 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	for (i = 0; i < 1000; i++) {
 		/* TODO! check for hotplug devices */
 		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-		if (reg & I2C_TRANSMIT_CLEAR) {
+		if (reg & I2C_TRANSMIT_CLEAR)
 			break;
-		}
 	}
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
@@ -245,9 +244,8 @@ static int saa716x_i2c_recv(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 *data)
 	/* Check FIFO status before RX */
 	for (i = 0; i < 1000; i++) {
 		reg = SAA716x_EPRD(I2C_DEV, I2C_STATUS);
-		if (!(reg & SAA716x_I2C_RXBUSY)) {
+		if (!(reg & SAA716x_I2C_RXBUSY))
 			break;
-		}
 	}
 	if (reg & SAA716x_I2C_RXBUSY) {
 		pci_err(saa716x->pdev, "FIFO empty");
@@ -344,9 +342,8 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 		}
 
 		err = saa716x_i2c_irq_wait(i2c, I2C_DEV);
-		if (err < 0) {
+		if (err < 0)
 			goto exit;
-		}
 
 		len -= bytes;
 		buf += bytes;
@@ -404,9 +401,8 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 		}
 
 		err = saa716x_i2c_irq_wait(i2c, I2C_DEV);
-		if (err < 0) {
+		if (err < 0)
 			goto exit;
-		}
 
 		for (i = 0; i < bytes; i++) {
 			err = saa716x_i2c_recv(i2c, I2C_DEV, &data);
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 9ea098ea9f2c5..31da0d5362c3a 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -174,9 +174,8 @@ static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
 			vin_format |= 0x01000200;
 		}
 	}
-	if (stream_params->stream_flags & VIP_NO_SCALER) {
+	if (stream_params->stream_flags & VIP_NO_SCALER)
 		vin_format |= 0x00000400;
-	}
 
 	end_line = stream_params->offset_y + num_lines;
 
@@ -274,9 +273,8 @@ int saa716x_vip_start(struct saa716x_dev *saa716x, int port, int one_shot,
 	config1 = MMU_DMA_CONFIG(saa716x->vip[port].dma_channel[0]);
 	config2 = MMU_DMA_CONFIG(saa716x->vip[port].dma_channel[1]);
 
-	if (saa716x_vip_setparams(saa716x, port, stream_params) != 0) {
+	if (saa716x_vip_setparams(saa716x, port, stream_params) != 0)
 		return -EIO;
-	}
 
 	val = SAA716x_EPRD(MMU, config1);
 	SAA716x_EPWR(MMU, config1, val & ~0x40);
@@ -365,9 +363,8 @@ int saa716x_vip_init(struct saa716x_dev *saa716x, int port,
 					saa716x,
 					&saa716x->vip[port].dma_buf[n][i],
 					512 * SAA716x_PAGE_SIZE);
-			if (ret < 0) {
+			if (ret < 0)
 				return ret;
-			}
 		}
 	}
 	saa716x->vip[port].saa716x = saa716x;

From 994428771a1b2c0149fbb4ab843411fc157e5918 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 15:30:20 +0100
Subject: [PATCH 344/364] saa716x_budget: cleanup BRACES checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 29 ++++++++--------------
 1 file changed, 10 insertions(+), 19 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 2237311bd24f1..af45b64c30441 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -114,24 +114,17 @@ static irqreturn_t saa716x_budget_pci_irq(int irq, void *dev_id)
 
 	if (stat_l)
 		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, stat_l);
-
 	if (stat_h)
 		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
 
-	if (stat_l) {
-		if (stat_l & MSI_INT_TAGACK_FGPI_0) {
-			tasklet_schedule(&saa716x->fgpi[0].tasklet);
-		}
-		if (stat_l & MSI_INT_TAGACK_FGPI_1) {
-			tasklet_schedule(&saa716x->fgpi[1].tasklet);
-		}
-		if (stat_l & MSI_INT_TAGACK_FGPI_2) {
-			tasklet_schedule(&saa716x->fgpi[2].tasklet);
-		}
-		if (stat_l & MSI_INT_TAGACK_FGPI_3) {
-			tasklet_schedule(&saa716x->fgpi[3].tasklet);
-		}
-	}
+	if (stat_l & MSI_INT_TAGACK_FGPI_0)
+		tasklet_schedule(&saa716x->fgpi[0].tasklet);
+	if (stat_l & MSI_INT_TAGACK_FGPI_1)
+		tasklet_schedule(&saa716x->fgpi[1].tasklet);
+	if (stat_l & MSI_INT_TAGACK_FGPI_2)
+		tasklet_schedule(&saa716x->fgpi[2].tasklet);
+	if (stat_l & MSI_INT_TAGACK_FGPI_3)
+		tasklet_schedule(&saa716x->fgpi[3].tasklet);
 
 	return IRQ_HANDLED;
 }
@@ -349,9 +342,8 @@ static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter, int
 	info.platform_data = &si2168_config;
 	request_module(info.type);
 	client = i2c_new_device(&dev->i2c[1 - count].i2c_adapter, &info);
-	if (client == NULL || client->dev.driver == NULL) {
+	if (client == NULL || client->dev.driver == NULL)
 		goto err;
-	}
 	if (!try_module_get(client->dev.driver->owner)) {
 		i2c_unregister_device(client);
 		goto err;
@@ -442,9 +434,8 @@ static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter, int
 	client = i2c_new_device(((count == 0) || (count == 1)) ?
 		&dev->i2c[1].i2c_adapter : &dev->i2c[0].i2c_adapter,
 		&info);
-	if (client == NULL || client->dev.driver == NULL) {
+	if (client == NULL || client->dev.driver == NULL)
 		goto err;
-	}
 
 	if (!try_module_get(client->dev.driver->owner)) {
 		i2c_unregister_device(client);

From 7b0aeecc7f1123ba2037c722921e50fc10c08361 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 15:30:55 +0100
Subject: [PATCH 345/364] saa716x_hybrid: cleanup BRACES checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 23 ++++++++--------------
 1 file changed, 8 insertions(+), 15 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 24a5cd0b0f126..e4d1079daee53 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -126,24 +126,17 @@ static irqreturn_t saa716x_hybrid_pci_irq(int irq, void *dev_id)
 
 	if (stat_l)
 		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, stat_l);
-
 	if (stat_h)
 		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
 
-	if (stat_l) {
-		if (stat_l & MSI_INT_TAGACK_FGPI_0) {
-			tasklet_schedule(&saa716x->fgpi[0].tasklet);
-		}
-		if (stat_l & MSI_INT_TAGACK_FGPI_1) {
-			tasklet_schedule(&saa716x->fgpi[1].tasklet);
-		}
-		if (stat_l & MSI_INT_TAGACK_FGPI_2) {
-			tasklet_schedule(&saa716x->fgpi[2].tasklet);
-		}
-		if (stat_l & MSI_INT_TAGACK_FGPI_3) {
-			tasklet_schedule(&saa716x->fgpi[3].tasklet);
-		}
-	}
+	if (stat_l & MSI_INT_TAGACK_FGPI_0)
+		tasklet_schedule(&saa716x->fgpi[0].tasklet);
+	if (stat_l & MSI_INT_TAGACK_FGPI_1)
+		tasklet_schedule(&saa716x->fgpi[1].tasklet);
+	if (stat_l & MSI_INT_TAGACK_FGPI_2)
+		tasklet_schedule(&saa716x->fgpi[2].tasklet);
+	if (stat_l & MSI_INT_TAGACK_FGPI_3)
+		tasklet_schedule(&saa716x->fgpi[3].tasklet);
 
 	return IRQ_HANDLED;
 }

From b3838b34aeb423987d5d3f9d5d900aadc1623e59 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 15:31:46 +0100
Subject: [PATCH 346/364] saa716x_ff: cleanup BRACES checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_main.c | 18 ++++++++----------
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  3 +--
 2 files changed, 9 insertions(+), 12 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 42d21e0d815ea..4e7f47799873e 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -62,9 +62,9 @@ static int saa716x_ff_fpga_init(struct saa716x_ff_dev *saa716x_ff)
 	/* request the FPGA firmware, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
 	if (ret) {
-		if (ret == -ENOENT) {
+		if (ret == -ENOENT)
 			pci_err(saa716x->pdev, "dvb-ttpremium: could not find FPGA firmware: dvb-ttpremium-fpga-01.fw");
-		} else
+		else
 			pci_err(saa716x->pdev, "dvb-ttpremium: FPGA firmware request failed (error %i)", ret);
 		return -EINVAL;
 	}
@@ -140,9 +140,9 @@ static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 	/* request the st7109 loader, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
 	if (ret) {
-		if (ret == -ENOENT) {
+		if (ret == -ENOENT)
 			pci_err(saa716x->pdev, "dvb-ttpremium: could not find ST7109 loader: dvb-ttpremium-loader-01.fw");
-		} else
+		else
 			pci_err(saa716x->pdev, "dvb-ttpremium: loader firmware request failed (error %i)", ret);
 		return -EINVAL;
 	}
@@ -178,9 +178,9 @@ static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 	/* request the st7109 firmware, this will block until someone uploads it */
 	ret = request_firmware(&fw, "dvb-ttpremium-st7109-01.fw", &saa716x->pdev->dev);
 	if (ret) {
-		if (ret == -ENOENT) {
+		if (ret == -ENOENT)
 			pci_err(saa716x->pdev, "dvb-ttpremium: could not find ST7109 firmware: dvb-ttpremium-st7109-01.fw");
-		} else
+		else
 			pci_err(saa716x->pdev, "dvb-ttpremium: ST7109 firmware request failed (error %i)", ret);
 		return -EINVAL;
 	}
@@ -462,16 +462,14 @@ static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf, const u8 __use
 	split = (rbuf->pwrite + len > rbuf->size) ? rbuf->size - rbuf->pwrite : 0;
 
 	if (split > 0) {
-		if (copy_from_user(rbuf->data+rbuf->pwrite, buf, split)) {
+		if (copy_from_user(rbuf->data+rbuf->pwrite, buf, split))
 			return -EFAULT;
-		}
 		buf += split;
 		todo -= split;
 		rbuf->pwrite = 0;
 	}
-	if (copy_from_user(rbuf->data+rbuf->pwrite, buf, todo)) {
+	if (copy_from_user(rbuf->data+rbuf->pwrite, buf, todo))
 		return -EFAULT;
-	}
 	rbuf->pwrite = (rbuf->pwrite + todo) % rbuf->size;
 
 	return len;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 4a02fe8aff987..3a7fee3cb2e33 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -220,9 +220,8 @@ void saa716x_ff_phi_write_fifo(struct saa716x_ff_dev *saa716x_ff,
 		iowrite32_rep(PHI_0_0, data, length/4);
 		break;
 	default:
-		for (i = 0; i < length; i += 4) {
+		for (i = 0; i < length; i += 4)
 			SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
-		}
 		break;
 	}
 }

From 710a144a354da7beb3976f6fd56838dfacf39efa Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 17:49:23 +0100
Subject: [PATCH 347/364] saa716x_ff: add SPDX license identifier

Adopt the SPDX license identifier to ease license compliance management.
This is not a license change.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_cmd.h  |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_ir.c   | 18 ++----------------
 drivers/media/pci/saa716x/saa716x_ff_ir.h   |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_main.c |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  2 ++
 drivers/media/pci/saa716x/saa716x_ff_phi.h  |  2 ++
 8 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 51438100da93c..fcb43764ea349 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_FF_H
 #define __SAA716x_FF_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 1db4dd83b292b..a687edad21de6 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/types.h>
 
 #include <linux/dvb/video.h>
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.h b/drivers/media/pci/saa716x/saa716x_ff_cmd.h
index 78d81c4e9c7fd..5fb5a9cbdfbee 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_FF_CMD_H
 #define __SAA716x_FF_CMD_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 018893d0ea7ae..2a57a12cbc123 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -1,23 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 /*
  * Driver for the remote control of the TT6400 DVB-S2 card
  *
  * Copyright (C) 2010 Oliver Endriss <o.endriss@gmx.de>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- * Or, point your browser to http://www.gnu.org/copyleft/gpl.html
- *
  */
 
 #include <linux/types.h>
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.h b/drivers/media/pci/saa716x/saa716x_ff_ir.h
index ff357986be4dc..b2d608e8b65c5 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_FF_IR_H
 #define __SAA716x_FF_IR_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 4e7f47799873e..33a77397dc6ff 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/firmware.h>
 #include <linux/videodev2.h>
 #include <linux/dvb/video.h>
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 3a7fee3cb2e33..2b39f78784e06 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/types.h>
 
 #include "saa716x_mod.h"
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.h b/drivers/media/pci/saa716x/saa716x_ff_phi.h
index 858c8b4c6cc46..ae4ee4d7892a4 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_FF_PHI_H
 #define __SAA716x_FF_PHI_H
 

From 2473e39cee7dc7e0b1dedccae9d2571e14b7782c Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 17:51:40 +0100
Subject: [PATCH 348/364] saa716x_budget: add SPDX license identifier

Adopt the SPDX license identifier to ease license compliance management.
This is not a license change.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 2 ++
 drivers/media/pci/saa716x/saa716x_budget.h | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index af45b64c30441..c6159ecc8b4d9 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include "saa716x_mod.h"
 
 #include "saa716x_gpio_reg.h"
diff --git a/drivers/media/pci/saa716x/saa716x_budget.h b/drivers/media/pci/saa716x/saa716x_budget.h
index 5cf9bd5248d0d..06d46deca6d00 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.h
+++ b/drivers/media/pci/saa716x/saa716x_budget.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_BUDGET_H
 #define __SAA716x_BUDGET_H
 

From 8c837e4b89fcad364121b5b4e13d8a682e81654e Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 17:52:22 +0100
Subject: [PATCH 349/364] saa716x_hybrid: add SPDX license identifier

Adopt the SPDX license identifier to ease license compliance management.
This is not a license change.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 2 ++
 drivers/media/pci/saa716x/saa716x_hybrid.h | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index e4d1079daee53..8bdf74dd430f6 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include "saa716x_mod.h"
 
 #include "saa716x_gpio_reg.h"
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.h b/drivers/media/pci/saa716x/saa716x_hybrid.h
index fad41be4c0671..30cc44c7eb1cb 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.h
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_HYBRID_H
 #define __SAA716x_HYBRID_H
 

From 5e08ec307929a0f326a170e5f423613e00d59087 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 17:52:53 +0100
Subject: [PATCH 350/364] saa716x: add SPDX license identifier

Adopt the SPDX license identifier to ease license compliance management.
This is not a license change.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c     | 2 ++
 drivers/media/pci/saa716x/saa716x_adap.h     | 2 ++
 drivers/media/pci/saa716x/saa716x_aip_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_boot.c     | 2 ++
 drivers/media/pci/saa716x/saa716x_boot.h     | 2 ++
 drivers/media/pci/saa716x/saa716x_cgu.c      | 2 ++
 drivers/media/pci/saa716x/saa716x_cgu.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_cgu_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_dcs_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_dma.c      | 2 ++
 drivers/media/pci/saa716x/saa716x_dma.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_dma_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_fgpi.c     | 2 ++
 drivers/media/pci/saa716x/saa716x_fgpi.h     | 2 ++
 drivers/media/pci/saa716x/saa716x_fgpi_reg.h | 2 ++
 drivers/media/pci/saa716x/saa716x_gpio.c     | 2 ++
 drivers/media/pci/saa716x/saa716x_gpio.h     | 2 ++
 drivers/media/pci/saa716x/saa716x_gpio_reg.h | 2 ++
 drivers/media/pci/saa716x/saa716x_greg_reg.h | 2 ++
 drivers/media/pci/saa716x/saa716x_i2c.c      | 2 ++
 drivers/media/pci/saa716x/saa716x_i2c.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_i2c_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_mod.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_msi_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_pci.c      | 2 ++
 drivers/media/pci/saa716x/saa716x_pci.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_phi_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_priv.h     | 2 ++
 drivers/media/pci/saa716x/saa716x_spi_reg.h  | 2 ++
 drivers/media/pci/saa716x/saa716x_vip.c      | 2 ++
 drivers/media/pci/saa716x/saa716x_vip.h      | 2 ++
 drivers/media/pci/saa716x/saa716x_vip_reg.h  | 2 ++
 32 files changed, 64 insertions(+)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 095b3228d9722..1f7b8302c792d 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/bitops.h>
 
 #include <media/dmxdev.h>
diff --git a/drivers/media/pci/saa716x/saa716x_adap.h b/drivers/media/pci/saa716x/saa716x_adap.h
index 7822e3633bc31..d9772bc7e48b3 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.h
+++ b/drivers/media/pci/saa716x/saa716x_adap.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_ADAP_H
 #define __SAA716x_ADAP_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_aip_reg.h b/drivers/media/pci/saa716x/saa716x_aip_reg.h
index 3e0893a5365fe..fe9465cae90dc 100644
--- a/drivers/media/pci/saa716x/saa716x_aip_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_aip_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_AIP_REG_H
 #define __SAA716x_AIP_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 8043e482616c9..2688ea60bcd00 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/delay.h>
 
 #include "saa716x_mod.h"
diff --git a/drivers/media/pci/saa716x/saa716x_boot.h b/drivers/media/pci/saa716x/saa716x_boot.h
index e5ae0a53740d5..dee919c9a3e36 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.h
+++ b/drivers/media/pci/saa716x/saa716x_boot.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_BOOT_H
 #define __SAA716x_BOOT_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 89c624f3101f8..4c57e9707dfb0 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/delay.h>
 
 #include "saa716x_mod.h"
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.h b/drivers/media/pci/saa716x/saa716x_cgu.h
index 523acba847664..a1c16f2bcc3ff 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.h
+++ b/drivers/media/pci/saa716x/saa716x_cgu.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_CGU_H
 #define __SAA716x_CGU_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_cgu_reg.h b/drivers/media/pci/saa716x/saa716x_cgu_reg.h
index f7d82ae3f1d05..ed6de5bb15687 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_cgu_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_CGU_REG_H
 #define __SAA716x_CGU_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_dcs_reg.h b/drivers/media/pci/saa716x/saa716x_dcs_reg.h
index 26dba68930746..40c0841934151 100644
--- a/drivers/media/pci/saa716x/saa716x_dcs_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_dcs_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_DCS_REG_H
 #define __SAA716x_DCS_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 752e7f9df315b..9bb2de3edf999 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/kernel.h>
 #include <linux/pci.h>
 #include <linux/scatterlist.h>
diff --git a/drivers/media/pci/saa716x/saa716x_dma.h b/drivers/media/pci/saa716x/saa716x_dma.h
index 9cdd9f7f653cb..6c9202547e848 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.h
+++ b/drivers/media/pci/saa716x/saa716x_dma.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_DMA_H
 #define __SAA716x_DMA_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_dma_reg.h b/drivers/media/pci/saa716x/saa716x_dma_reg.h
index d44ab937d13ff..41e35d3e05629 100644
--- a/drivers/media/pci/saa716x/saa716x_dma_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_dma_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_DMA_REG_H
 #define __SAA716x_DMA_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 873353d207b31..042e534fc1372 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/kernel.h>
 
 #include "saa716x_mod.h"
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.h b/drivers/media/pci/saa716x/saa716x_fgpi.h
index 47f9a9ce774a9..fc67486ec3f14 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_FGPI_H
 #define __SAA716x_FGPI_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi_reg.h b/drivers/media/pci/saa716x/saa716x_fgpi_reg.h
index 1193016d508db..7da871363d102 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_fgpi_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_FGPI_REG_H
 #define __SAA716x_FGPI_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.c b/drivers/media/pci/saa716x/saa716x_gpio.c
index 8e7c69c13766f..13232ff568eec 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.c
+++ b/drivers/media/pci/saa716x/saa716x_gpio.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/kernel.h>
 #include <linux/spinlock.h>
 
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index de8d679231bed..35c8c6614903d 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_GPIO_H
 #define __SAA716x_GPIO_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_gpio_reg.h b/drivers/media/pci/saa716x/saa716x_gpio_reg.h
index f36184a9eabd5..63a1bdc34102e 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_GPIO_REG_H
 #define __SAA716x_GPIO_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_greg_reg.h b/drivers/media/pci/saa716x/saa716x_greg_reg.h
index effecd2768c89..c93bebdbd9ae8 100644
--- a/drivers/media/pci/saa716x/saa716x_greg_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_greg_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_GREG_REG_H
 #define __SAA716x_GREG_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 07c4ab44a7940..c448653e2b3fc 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/delay.h>
 
 #include <linux/signal.h>
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index 2a14d62c0ef2d..bd1f55f7c3fc5 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_I2C_H
 #define __SAA716x_I2C_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c_reg.h b/drivers/media/pci/saa716x/saa716x_i2c_reg.h
index 8fa992c9a0922..ecad88873bc7d 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_I2C_REG_H
 #define __SAA716x_I2C_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_mod.h b/drivers/media/pci/saa716x/saa716x_mod.h
index a059ca4b321eb..38cb5015fe9d8 100644
--- a/drivers/media/pci/saa716x/saa716x_mod.h
+++ b/drivers/media/pci/saa716x/saa716x_mod.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_MOD_H
 #define __SAA716x_MOD_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_msi_reg.h b/drivers/media/pci/saa716x/saa716x_msi_reg.h
index d9a12c7aeb684..fab291f6a8b19 100644
--- a/drivers/media/pci/saa716x/saa716x_msi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_msi_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_MSI_REG_H
 #define __SAA716x_MSI_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index cd430c86db872..85da3d91f550d 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/kmod.h>
 #include <linux/vmalloc.h>
 #include <linux/init.h>
diff --git a/drivers/media/pci/saa716x/saa716x_pci.h b/drivers/media/pci/saa716x/saa716x_pci.h
index 7407fd12a606d..77bee27b3ecc9 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.h
+++ b/drivers/media/pci/saa716x/saa716x_pci.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_PCI_H
 #define __SAA716x_PCI_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_phi_reg.h b/drivers/media/pci/saa716x/saa716x_phi_reg.h
index 5ebaf5ec0385a..60762fabf7cd6 100644
--- a/drivers/media/pci/saa716x/saa716x_phi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_phi_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_PHI_REG_H
 #define __SAA716x_PHI_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 445c17288615f..8676745adb6a4 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_PRIV_H
 #define __SAA716x_PRIV_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_spi_reg.h b/drivers/media/pci/saa716x/saa716x_spi_reg.h
index c51abced3dcc1..6cb010d69d75b 100644
--- a/drivers/media/pci/saa716x/saa716x_spi_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_spi_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_SPI_REG_H
 #define __SAA716x_SPI_REG_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index 31da0d5362c3a..ea7b0d2a01b97 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -1,3 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0+
+
 #include <linux/kernel.h>
 
 #include "saa716x_mod.h"
diff --git a/drivers/media/pci/saa716x/saa716x_vip.h b/drivers/media/pci/saa716x/saa716x_vip.h
index b81da96183c95..d68017c22e452 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.h
+++ b/drivers/media/pci/saa716x/saa716x_vip.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_VIP_H
 #define __SAA716x_VIP_H
 
diff --git a/drivers/media/pci/saa716x/saa716x_vip_reg.h b/drivers/media/pci/saa716x/saa716x_vip_reg.h
index b064c3583f4e9..3e69cef4b1e3e 100644
--- a/drivers/media/pci/saa716x/saa716x_vip_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_vip_reg.h
@@ -1,3 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
 #ifndef __SAA716x_VIP_REG_H
 #define __SAA716x_VIP_REG_H
 

From 213ecdc5c949a67f61be617c11d31e75f39c6fbc Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 19:08:10 +0100
Subject: [PATCH 351/364] saa716x_ff: cleanup comment style and length

This fixes LONG_LINE_COMMENT and BLOCK_COMMENT_STYLE checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  |  6 ++--
 drivers/media/pci/saa716x/saa716x_ff_ir.c   |  3 +-
 drivers/media/pci/saa716x/saa716x_ff_main.c | 31 +++++++++++----------
 drivers/media/pci/saa716x/saa716x_ff_phi.c  |  4 +--
 4 files changed, 24 insertions(+), 20 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index a687edad21de6..627b162775e12 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -325,7 +325,8 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 				pci_err(saa716x->pdev,
 					"timed out waiting for block done");
 				/* send a data interrupt to cancel the transfer
-				   and reset the data handling */
+				 * and reset the data handling
+				 */
 				SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET,
 						ISR_DATA_MASK);
 				return -EIO;
@@ -343,7 +344,8 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 	if (sti7109->block_done == 0) {
 		pci_err(saa716x->pdev, "timed out waiting for block done");
 		/* send a data interrupt to cancel the transfer and reset the
-		   data handling */
+		 * data handling
+		 */
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_DATA_MASK);
 		return -EIO;
 	}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 2a57a12cbc123..936258c471c0a 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -49,7 +49,8 @@ static void ir_emit_key(unsigned long parm)
 		toggle = 0;
 	} else {
 		switch (ir->protocol) {
-		case IR_RC5: /* extended RC5: 5 bits device address, 7 bits data */
+		case IR_RC5:
+			/* extended RC5: 5 bits device address, 7 bits data */
 			addr = (ircom >> 6) & 0x1f;
 			/* data bits 1..6 */
 			data = ircom & 0x3f;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index 33a77397dc6ff..ce652feada2da 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -61,7 +61,7 @@ static int saa716x_ff_fpga_init(struct saa716x_ff_dev *saa716x_ff)
 	int ret;
 	const struct firmware *fw;
 
-	/* request the FPGA firmware, this will block until someone uploads it */
+	/* request the FPGA firmware */
 	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT)
@@ -139,7 +139,7 @@ static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 	u32 loaderVersion;
 	u32 options;
 
-	/* request the st7109 loader, this will block until someone uploads it */
+	/* request the st7109 loader */
 	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT)
@@ -177,7 +177,7 @@ static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 	}
 	pci_dbg(saa716x->pdev, "STi7109 ready after %llu ticks", waitTime);
 
-	/* request the st7109 firmware, this will block until someone uploads it */
+	/* request the st7109 firmware */
 	ret = request_firmware(&fw, "dvb-ttpremium-st7109-01.fw", &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT)
@@ -664,8 +664,10 @@ static ssize_t video_vip_read(struct sti7109_dev *sti7109,
 	}
 
 	saa716x_vip_start(saa716x, 0, one_shot, stream_params);
-	/* Sleep long enough to be sure to capture at least one frame.
-	   TODO: Change this in a way that it just waits the required time. */
+	/*
+	 * Sleep long enough to be sure to capture at least one frame.
+	 * TODO: Change this in a way that it just waits the required time.
+	 */
 	msleep(100);
 	saa716x_vip_stop(saa716x, 0);
 
@@ -754,10 +756,7 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 
 	if ((file->f_flags & O_ACCMODE) == O_RDONLY)
 		return -EPERM;
-/*
-	if (av7110->videostate.stream_source != VIDEO_SOURCE_MEMORY)
-		return -EPERM;
-*/
+
 	if (sti7109->tsout_stat == TSOUT_STAT_RESET)
 		return count;
 
@@ -842,7 +841,8 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 		/* start FIFO 1 */
 		spin_lock(&sti7109->tsout.lock);
 		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, 0);
-		sti7109->tsout.pread = sti7109->tsout.pwrite = 0;//dvb_ringbuffer_reset(&sti7109->tsout);
+		/* TODO convert to dvb_ringbuffer_reset(&sti7109->tsout); */
+		sti7109->tsout.pread = sti7109->tsout.pwrite = 0;
 		sti7109->tsout_stat = TSOUT_STAT_FILL;
 		spin_unlock(&sti7109->tsout.lock);
 		wake_up(&sti7109->tsout.queue);
@@ -1481,11 +1481,12 @@ static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int c
 			tt6400_stv090x_config.tuner_get_status	  = ctl->tuner_get_status;
 
 			if (count == 1) {
-				/* call the init function once to initialize
-				   tuner's clock output divider and demod's
-				   master clock */
-				/* The second tuner drives the STV0900 so
-				   call it only for adapter 1 */
+				/* Call the init function once to initialize
+				 * tuner's clock output divider and demod's
+				 * master clock.
+				 * The second tuner drives the STV0900, so
+				 * call it only for adapter 1
+				 */
 				if (adapter->fe->ops.init)
 					adapter->fe->ops.init(adapter->fe);
 			}
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 2b39f78784e06..870bec9b0b3eb 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0+
+// SPDX-License-Identifier: GPL-2.0
 
 #include <linux/types.h>
 
@@ -17,7 +17,7 @@ MODULE_PARM_DESC(phi_mode, "phi access mode:"
 		" 2 - fastest mode, use write-combining");
 
 
-/* phi config register values: chip_select mask, ready mask, strobe time, cycle time */
+/* phi config values: chip_select mask, ready mask, strobe time, cycle time */
 #define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
 	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
 

From 603989749a4c887829bfbe5dd5a7dabffe4a9dd9 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 19:10:41 +0100
Subject: [PATCH 352/364] saa716x_budget: cleanup comment style

This fixes BLOCK_COMMENT_STYLE checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index c6159ecc8b4d9..5187551d0bc3e 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -275,10 +275,11 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 			skystar2_stv090x_config.tuner_get_bbgain    = ctl->tuner_get_bbgain;
 			skystar2_stv090x_config.tuner_set_refclk    = ctl->tuner_set_refclk;
 			skystar2_stv090x_config.tuner_get_status    = ctl->tuner_get_status;
-
-			/* call the init function once to initialize
-			   tuner's clock output divider and demod's
-			   master clock */
+			/*
+			 * call the init function once to initialize
+			 * tuner's clock output divider and demod's
+			 * master clock
+			 */
 			if (adapter->fe->ops.init)
 				adapter->fe->ops.init(adapter->fe);
 		} else {

From 827faa6f0adc99eef71b1424d4bc87abe1c73097 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 19:12:30 +0100
Subject: [PATCH 353/364] saa716x: cleanup comment style and length

This fixes LONG_LINE_COMMENT and BLOCK_COMMENT_STYLE checkpatch warnings.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c |  2 -
 drivers/media/pci/saa716x/saa716x_fgpi.c | 72 ++++++++++++------------
 drivers/media/pci/saa716x/saa716x_i2c.c  | 21 +++----
 drivers/media/pci/saa716x/saa716x_i2c.h  |  6 +-
 drivers/media/pci/saa716x/saa716x_mod.h  | 25 --------
 drivers/media/pci/saa716x/saa716x_vip.c  | 72 ++++++++++++------------
 6 files changed, 89 insertions(+), 109 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 1f7b8302c792d..c94f0a5aff93f 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -211,7 +211,6 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 		}
 
 		dvb_net_init(&saa716x_adap->dvb_adapter, &saa716x_adap->dvb_net, &saa716x_adap->demux.dmx);
-//		tasklet_init(&saa716x_adap->tasklet, saa716x_dma_xfer, (unsigned long) saa716x);
 		pci_dbg(saa716x->pdev, "Frontend Init");
 		saa716x_adap->saa716x = saa716x;
 
@@ -301,7 +300,6 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 			dvb_frontend_detach(saa716x_adap->fe);
 		}
 
-//		tasklet_kill(&saa716x->tasklet);
 		dvb_net_release(&saa716x_adap->dvb_net);
 		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 042e534fc1372..6bf3581254ace 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -120,41 +120,43 @@ static u32 saa716x_init_ptables(struct saa716x_dmabuf *dmabuf, int channel,
 	if ((stream_params->stream_flags & FGPI_INTERLACED) &&
 	    (stream_params->stream_flags & FGPI_ODD_FIELD) &&
 	    (stream_params->stream_flags & FGPI_EVEN_FIELD)) {
-		/* In interlaced mode the same buffer is written twice, once
-		   the odd field and once the even field */
-		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+		/*
+		 * In interlaced mode the same buffer is written twice,
+		 * once the odd field and once the even field
+		 */
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys));
 	} else {
-		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys));
 	}
 
 	return 0;
@@ -291,7 +293,7 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 
 	saa716x->fgpi[port].read_index = 0;
 
-	config = MMU_DMA_CONFIG(saa716x->fgpi[port].dma_channel); /* DMACONFIGx */
+	config = MMU_DMA_CONFIG(saa716x->fgpi[port].dma_channel);
 
 	val = SAA716x_EPRD(MMU, config);
 	SAA716x_EPWR(MMU, config, val & ~0x40);
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index c448653e2b3fc..a509fd9ee1ba2 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -99,21 +99,21 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		goto exit;
 	}
 
-	/* I2C Rate Setup */
+	/* I2C Rate Setup, set clock divisor to 0.5 * 27MHz/i2c_rate */
 	switch (i2c->i2c_rate) {
 	case SAA716x_I2C_RATE_400:
 
 		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 400k", adapter->name);
-		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a); /* 0.5 * 27MHz/400kHz */
-		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21); /* 0.5 * 27MHz/400kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a);
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21);
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x10);
 		break;
 
 	case SAA716x_I2C_RATE_100:
 
 		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 100k", adapter->name);
-		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68); /* 0.5 * 27MHz/100kHz */
-		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87); /* 0.5 * 27MHz/100kHz */
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68);
+		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87);
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x60);
 		break;
 
@@ -131,11 +131,12 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 
 	if (i2c->i2c_mode >= SAA716x_I2C_MODE_IRQ) {
-		/* Enabled interrupts:
-		* Master Transaction Done,
-		* Master Transaction Data Request
-		* (0x81)
-		*/
+		/*
+		 * Enabled interrupts:
+		 * Master Transaction Done,
+		 * Master Transaction Data Request
+		 * (0x81)
+		 */
 		msleep(5);
 
 		SAA716x_EPWR(I2C_DEV, INT_SET_ENABLE,
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.h b/drivers/media/pci/saa716x/saa716x_i2c.h
index bd1f55f7c3fc5..c8bd9da7203ff 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.h
+++ b/drivers/media/pci/saa716x/saa716x_i2c.h
@@ -38,8 +38,10 @@ struct saa716x_i2c {
 
 	enum saa716x_i2c_rate		i2c_rate;
 	enum saa716x_i2c_mode		i2c_mode;
-	u32				block_size; /* block size for buffered
-						       mode, 1 otherwise */
+
+	/* block size for buffered mode, 1 otherwise */
+	u32				block_size;
+
 	wait_queue_head_t		i2c_wq;
 	int				i2c_op;
 };
diff --git a/drivers/media/pci/saa716x/saa716x_mod.h b/drivers/media/pci/saa716x/saa716x_mod.h
index 38cb5015fe9d8..4e0a6666da32d 100644
--- a/drivers/media/pci/saa716x/saa716x_mod.h
+++ b/drivers/media/pci/saa716x/saa716x_mod.h
@@ -3,31 +3,6 @@
 #ifndef __SAA716x_MOD_H
 #define __SAA716x_MOD_H
 
-/* BAR = 17 bits */
-/*
-	VI0	0x00000000
-	VI1	0x00001000
-	FGPI0	0x00002000
-	FGPI1	0x00003000
-	FGPI2	0x00004000
-	FGPI3	0x00005000
-	AI0	0x00006000
-	AI1	0x00007000
-	BAM	0x00008000
-	MMU	0x00009000
-	MSI	0x0000a000
-	I2C_B	0x0000b000
-	I2C_A	0x0000c000
-	SPI	0x0000d000
-	GPIO	0x0000e000
-	PHI_0	0x0000f000
-	CGU	0x00013000
-	DCS	0x00014000
-	GREG	0x00012000
-
-	PHI_1	0x00020000
-*/
-
 #define VI0				0x00000000
 #define VI1				0x00001000
 #define FGPI0				0x00002000
diff --git a/drivers/media/pci/saa716x/saa716x_vip.c b/drivers/media/pci/saa716x/saa716x_vip.c
index ea7b0d2a01b97..02cd5345ad705 100644
--- a/drivers/media/pci/saa716x/saa716x_vip.c
+++ b/drivers/media/pci/saa716x/saa716x_vip.c
@@ -73,41 +73,43 @@ static int saa716x_vip_init_ptables(struct saa716x_dmabuf *dmabuf, int channel,
 	if ((stream_params->stream_flags & VIP_INTERLACED) &&
 	    (stream_params->stream_flags & VIP_ODD_FIELD) &&
 	    (stream_params->stream_flags & VIP_EVEN_FIELD)) {
-		/* In interlaced mode the same buffer is written twice, once
-		   the odd field and once the even field */
-		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
+		/*
+		 * In interlaced mode the same buffer is written twice,
+		 * once the odd field and once the even field
+		 */
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys));
 	} else {
-		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys)); /* High */
-		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys)); /* Low */
-		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys)); /* High */
+		SAA716x_EPWR(MMU, MMU_PTA0_LSB(channel), PTA_LSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA0_MSB(channel), PTA_MSB(dmabuf[0].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_LSB(channel), PTA_LSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA1_MSB(channel), PTA_MSB(dmabuf[1].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_LSB(channel), PTA_LSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA2_MSB(channel), PTA_MSB(dmabuf[2].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_LSB(channel), PTA_LSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA3_MSB(channel), PTA_MSB(dmabuf[3].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_LSB(channel), PTA_LSB(dmabuf[4].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA4_MSB(channel), PTA_MSB(dmabuf[4].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_LSB(channel), PTA_LSB(dmabuf[5].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA5_MSB(channel), PTA_MSB(dmabuf[5].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_LSB(channel), PTA_LSB(dmabuf[6].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA6_MSB(channel), PTA_MSB(dmabuf[6].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_LSB(channel), PTA_LSB(dmabuf[7].mem_ptab_phys));
+		SAA716x_EPWR(MMU, MMU_PTA7_MSB(channel), PTA_MSB(dmabuf[7].mem_ptab_phys));
 	}
 	return 0;
 }
@@ -202,7 +204,7 @@ static int saa716x_vip_setparams(struct saa716x_dev *saa716x, int port,
 	SAA716x_EPWR(vi_port, WIN_XYEND,
 		     ((start_x + stream_params->samples - 1) << 16) + end_line);
 
-	/* enable cropping to assure that VIP does not exceed buffer boundaries */
+	/* enable cropping to assure not exceed buffer boundaries */
 	SAA716x_EPWR(vi_port, PSU_WINDOW,
 		     (stream_params->samples << 16) + num_lines);
 	/* set packet YUY2 output format */

From 4b81c925631ef7d9d7d259e23a10ee41d08c6caa Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 23:17:32 +0100
Subject: [PATCH 354/364] saa716x_budget: cleanup LONG_LINE checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 5187551d0bc3e..9718d38b7738c 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -25,7 +25,8 @@ MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. defau
 
 #define DRIVER_NAME	"SAA716x Budget"
 
-static int saa716x_budget_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+static int saa716x_budget_pci_probe(struct pci_dev *pdev,
+				    const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
 	int err = 0;
@@ -256,7 +257,8 @@ static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
 			goto exit;
 
 		adapter->fe->ops.set_voltage = skystar2_set_voltage;
-		adapter->fe->ops.enable_high_lnb_voltage = skystar2_voltage_boost;
+		adapter->fe->ops.enable_high_lnb_voltage =
+						 skystar2_voltage_boost;
 
 		ctl = dvb_attach(stv6110x_attach,
 				 adapter->fe,
@@ -314,7 +316,8 @@ static const struct saa716x_config skystar2_express_hd_config = {
 #define SAA716x_MODEL_TBS6281		"TurboSight TBS 6281"
 #define SAA716x_DEV_TBS6281		"DVB-T/T2/C"
 
-static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter, int count)
+static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter,
+					   int count)
 {
 	struct saa716x_dev *dev = adapter->saa716x;
 	struct i2c_adapter *i2cadapter;
@@ -411,7 +414,8 @@ static const struct saa716x_config saa716x_tbs6281_config = {
 #define SAA716x_MODEL_TBS6285		"TurboSight TBS 6285"
 #define SAA716x_DEV_TBS6285		"DVB-T/T2/C"
 
-static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter, int count)
+static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter,
+					   int count)
 {
 	struct saa716x_dev *dev = adapter->saa716x;
 	struct i2c_adapter *i2cadapter;

From 9653ae663e5ed7aad27fbb1a06e06479228030a2 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 23:18:26 +0100
Subject: [PATCH 355/364] saa716x_hybrid: cleanup LONG_LINE checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_hybrid.c | 25 ++++++++++++++--------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 8bdf74dd430f6..83894b52fa27f 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -23,7 +23,8 @@ MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. defau
 
 #define DRIVER_NAME	"SAA716x Hybrid"
 
-static int saa716x_hybrid_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+static int saa716x_hybrid_pci_probe(struct pci_dev *pdev,
+				    const struct pci_device_id *pci_id)
 {
 	struct saa716x_dev *saa716x;
 	int err = 0;
@@ -170,13 +171,15 @@ static const struct tda1004x_config tda1004x_vp6090_config = {
 	.request_firmware	= tda1004x_vp6090_request_firmware,
 };
 
-static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int count)
+static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter,
+					  int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
 	struct saa716x_i2c *i2c = &saa716x->i2c[count];
 
 	pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init", count);
-	pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+	pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count,
+		saa716x->pdev->subsystem_device);
 	pci_dbg(saa716x->pdev, "Adapter (%d) Power ON", count);
 
 	saa716x_gpio_set_output(saa716x, 11);
@@ -185,7 +188,8 @@ static int saa716x_vp6090_frontend_attach(struct saa716x_adapter *adapter, int c
 	saa716x_gpio_write(saa716x, 10, 1);
 	msleep(100);
 
-	adapter->fe = tda10046_attach(&tda1004x_vp6090_config, &i2c->i2c_adapter);
+	adapter->fe = tda10046_attach(&tda1004x_vp6090_config,
+				      &i2c->i2c_adapter);
 	if (adapter->fe == NULL) {
 		pci_err(saa716x->pdev, "Frontend attach failed");
 		return -ENODEV;
@@ -365,7 +369,8 @@ static struct tda827x_config tda827x_nemo_config = {
 	.agcf		= NULL,
 };
 
-static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int count)
+static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter,
+					int count)
 {
 	struct saa716x_dev *saa716x = adapter->saa716x;
 	struct saa716x_i2c *demod_i2c = &saa716x->i2c[SAA716x_I2C_BUS_B];
@@ -373,8 +378,10 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 
 
 	if (count  == 0) {
-		pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init", count);
-		pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+		pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init",
+			count);
+		pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count,
+			saa716x->pdev->subsystem_device);
 		pci_dbg(saa716x->pdev, "Adapter (%d) Power ON", count);
 
 		/* GPIO 26 controls a +15dB gain */
@@ -394,7 +401,8 @@ static int saa716x_nemo_frontend_attach(struct saa716x_adapter *adapter, int cou
 		adapter->fe = tda10046_attach(&tda1004x_nemo_config,
 					      &demod_i2c->i2c_adapter);
 		if (adapter->fe) {
-			pci_dbg(saa716x->pdev, "found TDA10046 DVB-T frontend @0x%02x",
+			pci_dbg(saa716x->pdev,
+				"found TDA10046 DVB-T frontend @0x%02x",
 				tda1004x_nemo_config.demod_address);
 
 		} else {
@@ -435,7 +443,6 @@ static const struct saa716x_config saa716x_nemo_config = {
 };
 
 static const struct pci_device_id saa716x_hybrid_pci_table[] = {
-
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_6090, SAA7162, &saa716x_vp6090_config),
 	MAKE_ENTRY(KWORLD, KWORLD_DVB_T_PE310, SAA7162, &saa716x_atlantis_config),
 	MAKE_ENTRY(NXP_REFERENCE_BOARD, PCI_ANY_ID, SAA7162, &saa716x_atlantis_config),

From bfd5b4ef5e301f83e859fe534f89528bcf6c8a40 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 23:19:08 +0100
Subject: [PATCH 356/364] saa716x_ff: cleanup LONG_LINE checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |   4 +-
 drivers/media/pci/saa716x/saa716x_ff_cmd.c  |  25 +--
 drivers/media/pci/saa716x/saa716x_ff_main.c | 162 +++++++++++++-------
 3 files changed, 122 insertions(+), 69 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index fcb43764ea349..8c28fb3d468f4 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -11,8 +11,8 @@
 #include "saa716x_priv.h"
 
 #define TECHNOTREND			0x13c2
-#define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009
-#define S2_6400_DUAL_S2_PREMIUM_PROD	0x300A
+#define S2_6400_DUAL_S2_PREMIUM_DEVEL	0x3009 /* development version */
+#define S2_6400_DUAL_S2_PREMIUM_PROD	0x300A /* production version */
 
 #define TT_PREMIUM_GPIO_POWER_ENABLE	27
 #define TT_PREMIUM_GPIO_RESET_BACKEND	26
diff --git a/drivers/media/pci/saa716x/saa716x_ff_cmd.c b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
index 627b162775e12..734a7dde30beb 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_cmd.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_cmd.c
@@ -44,7 +44,8 @@ int sti7109_cmd_init(struct sti7109_dev *sti7109)
 
 static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long timeout;
 
@@ -101,7 +102,8 @@ static int sti7109_do_raw_cmd(struct sti7109_dev *sti7109)
 
 int sti7109_raw_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int err;
 
@@ -139,7 +141,8 @@ int sti7109_raw_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 
 static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long timeout;
 
@@ -161,8 +164,8 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 	sti7109->osd_cmd_ready = 0;
 	sti7109->osd_result_len = 0;
 	sti7109->osd_result_avail = 0;
-	saa716x_ff_phi_write(saa716x_ff, ADDR_OSD_CMD_DATA, sti7109->osd_cmd_data,
-			     sti7109->osd_cmd_len);
+	saa716x_ff_phi_write(saa716x_ff, ADDR_OSD_CMD_DATA,
+			     sti7109->osd_cmd_data, sti7109->osd_cmd_len);
 	SAA716x_EPWR(PHI_1, FPGA_ADDR_PHI_ISET, ISR_OSD_CMD_MASK);
 
 	if (sti7109->osd_result_max_len > 0) {
@@ -197,7 +200,8 @@ static int sti7109_do_raw_osd_cmd(struct sti7109_dev *sti7109)
 
 int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int err;
 
@@ -233,9 +237,11 @@ int sti7109_raw_osd_cmd(struct sti7109_dev *sti7109, osd_raw_cmd_t *cmd)
 	return err;
 }
 
-static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
+static int sti7109_do_raw_data(struct sti7109_dev *sti7109,
+			       osd_raw_data_t *data)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long timeout;
 	u16 blockSize;
@@ -358,7 +364,8 @@ static int sti7109_do_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data
 
 int sti7109_raw_data(struct sti7109_dev *sti7109, osd_raw_data_t *data)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int err;
 
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index ce652feada2da..abb63d155c600 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -39,7 +39,8 @@ MODULE_PARM_DESC(video_capture, "capture digital video coming from STi7109: 0=of
 
 #define DRIVER_NAME	"SAA716x FF"
 
-static void saa716x_ff_spi_write(struct saa716x_dev *saa716x, const u8 *data, int length)
+static void saa716x_ff_spi_write(struct saa716x_dev *saa716x, const u8 *data,
+				 int length)
 {
 	int i, rounds;
 
@@ -62,7 +63,8 @@ static int saa716x_ff_fpga_init(struct saa716x_ff_dev *saa716x_ff)
 	const struct firmware *fw;
 
 	/* request the FPGA firmware */
-	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw", &saa716x->pdev->dev);
+	ret = request_firmware(&fw, "dvb-ttpremium-fpga-01.fw",
+			       &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT)
 			pci_err(saa716x->pdev, "dvb-ttpremium: could not find FPGA firmware: dvb-ttpremium-fpga-01.fw");
@@ -85,8 +87,8 @@ static int saa716x_ff_fpga_init(struct saa716x_ff_dev *saa716x_ff)
 	rounds = 0;
 	fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
 	while (fpgaInit == 0 && rounds < 5000) {
-		//msleep(1);
-		fpgaInit = saa716x_gpio_read(saa716x, TT_PREMIUM_GPIO_FPGA_INITN);
+		fpgaInit = saa716x_gpio_read(saa716x,
+					     TT_PREMIUM_GPIO_FPGA_INITN);
 		rounds++;
 	}
 	pci_dbg(saa716x->pdev, "FPGA INITN=%d, rounds=%d", fpgaInit, rounds);
@@ -140,7 +142,8 @@ static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 	u32 options;
 
 	/* request the st7109 loader */
-	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw", &saa716x->pdev->dev);
+	ret = request_firmware(&fw, "dvb-ttpremium-loader-01.fw",
+			       &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT)
 			pci_err(saa716x->pdev, "dvb-ttpremium: could not find ST7109 loader: dvb-ttpremium-loader-01.fw");
@@ -178,7 +181,8 @@ static int saa716x_ff_st7109_init(struct saa716x_ff_dev *saa716x_ff)
 	pci_dbg(saa716x->pdev, "STi7109 ready after %llu ticks", waitTime);
 
 	/* request the st7109 firmware */
-	ret = request_firmware(&fw, "dvb-ttpremium-st7109-01.fw", &saa716x->pdev->dev);
+	ret = request_firmware(&fw, "dvb-ttpremium-st7109-01.fw",
+			       &saa716x->pdev->dev);
 	if (ret) {
 		if (ret == -ENOENT)
 			pci_err(saa716x->pdev, "dvb-ttpremium: could not find ST7109 firmware: dvb-ttpremium-st7109-01.fw");
@@ -301,7 +305,8 @@ static int saa716x_usercopy(struct dvb_device *dvbdev,
 	return err;
 }
 
-static long dvb_osd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+static long dvb_osd_ioctl(struct file *file, unsigned int cmd,
+			  unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
 	struct sti7109_dev *sti7109 = dvbdev->priv;
@@ -409,7 +414,8 @@ static int do_dvb_audio_ioctl(struct dvb_device *dvbdev,
 	return ret;
 }
 
-static long dvb_audio_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+static long dvb_audio_ioctl(struct file *file, unsigned int cmd,
+			    unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
 
@@ -456,12 +462,14 @@ static int saa716x_ff_audio_init(struct saa716x_ff_dev *saa716x_ff)
 	return 0;
 }
 
-static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf, const u8 __user *buf, size_t len)
+static ssize_t ringbuffer_write_user(struct dvb_ringbuffer *rbuf,
+				     const u8 __user *buf, size_t len)
 {
 	size_t todo = len;
 	size_t split;
 
-	split = (rbuf->pwrite + len > rbuf->size) ? rbuf->size - rbuf->pwrite : 0;
+	split = (rbuf->pwrite + len > rbuf->size) ?
+		 rbuf->size - rbuf->pwrite : 0;
 
 	if (split > 0) {
 		if (copy_from_user(rbuf->data+rbuf->pwrite, buf, split))
@@ -497,8 +505,10 @@ static void ringbuffer_read_tofifo(struct dvb_ringbuffer *rbuf,
 
 static void fifo_worker(struct work_struct *work)
 {
-	struct sti7109_dev *sti7109 = container_of(work, struct sti7109_dev, fifo_work);
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct sti7109_dev *sti7109 =
+			 container_of(work, struct sti7109_dev, fifo_work);
+	struct saa716x_ff_dev *saa716x_ff =
+			 container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	u32 fifoStat;
 	u16 fifoSize;
@@ -536,14 +546,16 @@ static void fifo_worker(struct work_struct *work)
 	if (sti7109->tsout_stat != TSOUT_STAT_RESET) {
 		/* reenable fifo interrupt */
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL,
+			     FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
 	}
 	spin_unlock(&sti7109->tsout.lock);
 }
 
 static void video_vip_worker(unsigned long data)
 {
-	struct saa716x_vip_stream_port *vip_entry = (struct saa716x_vip_stream_port *)data;
+	struct saa716x_vip_stream_port *vip_entry =
+				 (struct saa716x_vip_stream_port *)data;
 	struct saa716x_dev *saa716x = vip_entry->saa716x;
 	u32 vip_index;
 	u32 write_index;
@@ -562,7 +574,8 @@ static void video_vip_worker(unsigned long data)
 	pci_dbg(saa716x->pdev, "dma buffer = %d", write_index);
 
 	if (write_index == vip_entry->read_index) {
-		pci_dbg(saa716x->pdev, "%s: called but nothing to do", __func__);
+		pci_dbg(saa716x->pdev,
+			"%s: called but nothing to do", __func__);
 		return;
 	}
 
@@ -573,9 +586,9 @@ static void video_vip_worker(unsigned long data)
 			PCI_DMA_FROMDEVICE);
 		if (vip_entry->dual_channel) {
 			pci_dma_sync_sg_for_cpu(saa716x->pdev,
-				vip_entry->dma_buf[1][vip_entry->read_index].sg_list,
-				vip_entry->dma_buf[1][vip_entry->read_index].list_len,
-				PCI_DMA_FROMDEVICE);
+			  vip_entry->dma_buf[1][vip_entry->read_index].sg_list,
+			  vip_entry->dma_buf[1][vip_entry->read_index].list_len,
+			  PCI_DMA_FROMDEVICE);
 		}
 
 		vip_entry->read_index = (vip_entry->read_index + 1) & 7;
@@ -634,7 +647,8 @@ static ssize_t video_vip_read(struct sti7109_dev *sti7109,
 			      struct vip_stream_params *stream_params,
 			      char __user *buf, size_t count)
 {
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			 container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct v4l2_pix_format pix_format;
 	int one_shot = 0;
@@ -749,7 +763,8 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 {
 	struct dvb_device *dvbdev = file->private_data;
 	struct sti7109_dev *sti7109 = dvbdev->priv;
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			 container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	unsigned long todo = count;
 	int ringbuffer_avail;
@@ -767,7 +782,8 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 		if (!FREE_COND_TS) {
 			if (file->f_flags & O_NONBLOCK)
 				break;
-			if (wait_event_interruptible(sti7109->tsout.queue, FREE_COND_TS))
+			if (wait_event_interruptible(sti7109->tsout.queue,
+						     FREE_COND_TS))
 				break;
 		}
 		ringbuffer_write_user(&sti7109->tsout, buf, TS_SIZE);
@@ -777,10 +793,13 @@ static ssize_t dvb_video_write(struct file *file, const char __user *buf,
 
 	ringbuffer_avail = dvb_ringbuffer_avail(&sti7109->tsout);
 	spin_lock(&sti7109->tsout.lock);
-	if ((sti7109->tsout_stat == TSOUT_STAT_FILL) && (ringbuffer_avail > TSOUT_LEVEL_FILL)) {
+	if ((sti7109->tsout_stat == TSOUT_STAT_FILL) &&
+	    (ringbuffer_avail > TSOUT_LEVEL_FILL)) {
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
-	} else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) && (ringbuffer_avail > TSOUT_LEVEL_HIGH)) {
+		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL,
+			     FPGA_FIFO_CTRL_IE | FPGA_FIFO_CTRL_RUN);
+	} else if ((sti7109->tsout_stat == TSOUT_STAT_WAIT) &&
+		   (ringbuffer_avail > TSOUT_LEVEL_HIGH)) {
 		sti7109->tsout_stat = TSOUT_STAT_RUN;
 		queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
 	}
@@ -809,7 +828,8 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 			      unsigned int cmd, void *parg)
 {
 	struct sti7109_dev *sti7109  = dvbdev->priv;
-	struct saa716x_ff_dev *saa716x_ff = container_of(sti7109, struct saa716x_ff_dev, sti7109);
+	struct saa716x_ff_dev *saa716x_ff =
+			 container_of(sti7109, struct saa716x_ff_dev, sti7109);
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	int ret = 0;
 
@@ -822,7 +842,8 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 		if (stream_source == VIDEO_SOURCE_DEMUX) {
 			/* stop and reset FIFO 1 */
 			spin_lock(&sti7109->tsout.lock);
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_RESET);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL,
+				     FPGA_FIFO_CTRL_RESET);
 			sti7109->tsout_stat = TSOUT_STAT_RESET;
 			spin_unlock(&sti7109->tsout.lock);
 			break;
@@ -855,7 +876,8 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 	}
 	case VIDEO_GET_SIZE:
 	{
-		ret = sti7109_cmd_get_video_format(sti7109, (video_size_t *) parg);
+		ret = sti7109_cmd_get_video_format(sti7109,
+						   (video_size_t *) parg);
 		break;
 	}
 	default:
@@ -865,7 +887,8 @@ static int do_dvb_video_ioctl(struct dvb_device *dvbdev,
 	return ret;
 }
 
-static long dvb_video_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+static long dvb_video_ioctl(struct file *file, unsigned int cmd,
+			    unsigned long arg)
 {
 	struct dvb_device *dvbdev = file->private_data;
 
@@ -935,7 +958,8 @@ static int saa716x_ff_video_init(struct saa716x_ff_dev *saa716x_ff)
 	return 0;
 }
 
-static int saa716x_ff_pci_probe(struct pci_dev *pdev, const struct pci_device_id *pci_id)
+static int saa716x_ff_pci_probe(struct pci_dev *pdev,
+				const struct pci_device_id *pci_id)
 {
 	struct saa716x_ff_dev *saa716x_ff;
 	struct saa716x_dev *saa716x;
@@ -1212,11 +1236,13 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			length = (value >> 16) + 2;
 
 			if (length > MAX_RESULT_LEN) {
-				pci_err(saa716x->pdev, "CMD length %d > %d", length, MAX_RESULT_LEN);
+				pci_err(saa716x->pdev, "CMD length %d > %d",
+					length, MAX_RESULT_LEN);
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_CMD_DATA, sti7109->result_data, length);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_CMD_DATA,
+					    sti7109->result_data, length);
 			sti7109->result_len = length;
 			sti7109->result_avail = 1;
 			wake_up(&sti7109->result_avail_wq);
@@ -1242,24 +1268,28 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			length = (value >> 16) + 2;
 
 			if (length > MAX_RESULT_LEN) {
-				pci_err(saa716x->pdev, "OSD CMD length %d > %d", length, MAX_RESULT_LEN);
+				pci_err(saa716x->pdev, "OSD CMD length %d > %d",
+					length, MAX_RESULT_LEN);
 				length = MAX_RESULT_LEN;
 			}
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_OSD_CMD_DATA, sti7109->osd_result_data, length);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_OSD_CMD_DATA,
+					    sti7109->osd_result_data, length);
 			sti7109->osd_result_len = length;
 			sti7109->osd_result_avail = 1;
 			wake_up(&sti7109->osd_result_avail_wq);
 
 			phiISR &= ~ISR_OSD_CMD_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_OSD_CMD_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_OSD_CMD_MASK);
 		}
 
 		if (phiISR & ISR_OSD_READY_MASK) {
 			sti7109->osd_cmd_ready = 1;
 			wake_up(&sti7109->osd_cmd_ready_wq);
 			phiISR &= ~ISR_OSD_READY_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_OSD_READY_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_OSD_READY_MASK);
 		}
 
 		if (phiISR & ISR_BLOCK_MASK) {
@@ -1280,13 +1310,15 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			sti7109->boot_finished = 1;
 			wake_up(&sti7109->boot_finish_wq);
 			phiISR &= ~ISR_BOOT_FINISH_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_BOOT_FINISH_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_BOOT_FINISH_MASK);
 		}
 
 		if (phiISR & ISR_AUDIO_PTS_MASK) {
 			u8 data[8];
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_AUDIO_PTS, data, 8);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_AUDIO_PTS,
+					    data, 8);
 			sti7109->audio_pts = (((u64) data[3] & 0x01) << 32)
 					    | ((u64) data[4] << 24)
 					    | ((u64) data[5] << 16)
@@ -1294,13 +1326,15 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 					    | ((u64) data[7]);
 
 			phiISR &= ~ISR_AUDIO_PTS_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_AUDIO_PTS_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_AUDIO_PTS_MASK);
 		}
 
 		if (phiISR & ISR_VIDEO_PTS_MASK) {
 			u8 data[8];
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_VIDEO_PTS, data, 8);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_VIDEO_PTS,
+					    data, 8);
 			sti7109->video_pts = (((u64) data[3] & 0x01) << 32)
 					    | ((u64) data[4] << 24)
 					    | ((u64) data[5] << 16)
@@ -1308,13 +1342,15 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 					    | ((u64) data[7]);
 
 			phiISR &= ~ISR_VIDEO_PTS_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_VIDEO_PTS_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_VIDEO_PTS_MASK);
 		}
 
 		if (phiISR & ISR_CURRENT_STC_MASK) {
 			u8 data[8];
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_CURRENT_STC, data, 8);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_CURRENT_STC,
+					    data, 8);
 			sti7109->current_stc = (((u64) data[3] & 0x01) << 32)
 					      | ((u64) data[4] << 24)
 					      | ((u64) data[5] << 16)
@@ -1322,28 +1358,33 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 					      | ((u64) data[7]);
 
 			phiISR &= ~ISR_CURRENT_STC_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_CURRENT_STC_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_CURRENT_STC_MASK);
 		}
 
 		if (phiISR & ISR_REMOTE_EVENT_MASK) {
 			u8 data[4];
 			u32 remote_event;
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_REMOTE_EVENT, data, 4);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_REMOTE_EVENT,
+					    data, 4);
 			remote_event = (data[3] << 24)
 				     | (data[2] << 16)
 				     | (data[1] << 8)
 				     | (data[0]);
 			memset(data, 0, sizeof(data));
-			saa716x_ff_phi_write(saa716x_ff, ADDR_REMOTE_EVENT, data, 4);
+			saa716x_ff_phi_write(saa716x_ff, ADDR_REMOTE_EVENT,
+					     data, 4);
 
 			phiISR &= ~ISR_REMOTE_EVENT_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_REMOTE_EVENT_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_REMOTE_EVENT_MASK);
 
 			if (remote_event == 0) {
-				pci_err(saa716x->pdev, "REMOTE EVENT: %X ignored", remote_event);
+				pci_err(saa716x->pdev, "REMOTE EVENT ignored");
 			} else {
-				pci_dbg(saa716x->pdev, "REMOTE EVENT: %X", remote_event);
+				pci_dbg(saa716x->pdev, "REMOTE EVENT: %X",
+					remote_event);
 				saa716x_ir_handler(saa716x_ff, remote_event);
 			}
 		}
@@ -1352,14 +1393,16 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 			u8 data[4];
 			u32 format;
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_DVO_FORMAT, data, 4);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_DVO_FORMAT,
+					    data, 4);
 			format = (data[0] << 24)
 			       | (data[1] << 16)
 			       | (data[2] << 8)
 			       | (data[3]);
 
 			phiISR &= ~ISR_DVO_FORMAT_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_DVO_FORMAT_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_DVO_FORMAT_MASK);
 
 			pci_dbg(saa716x->pdev, "DVO FORMAT CHANGE: %u", format);
 			sti7109->video_format = format;
@@ -1368,11 +1411,12 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 		if (phiISR & ISR_LOG_MESSAGE_MASK) {
 			char message[SIZE_LOG_MESSAGE_DATA];
 
-			saa716x_ff_phi_read(saa716x_ff, ADDR_LOG_MESSAGE, message,
-					 SIZE_LOG_MESSAGE_DATA);
+			saa716x_ff_phi_read(saa716x_ff, ADDR_LOG_MESSAGE,
+					    message, SIZE_LOG_MESSAGE_DATA);
 
 			phiISR &= ~ISR_LOG_MESSAGE_MASK;
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR, ISR_LOG_MESSAGE_MASK);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_EMI_ICLR,
+				     ISR_LOG_MESSAGE_MASK);
 
 			pci_dbg(saa716x->pdev, "LOG MESSAGE: %.*s",
 				SIZE_LOG_MESSAGE_DATA, message);
@@ -1380,7 +1424,8 @@ static irqreturn_t saa716x_ff_pci_irq(int irq, void *dev_id)
 
 		if (phiISR & ISR_FIFO1_EMPTY_MASK) {
 			/* clear FPGA_FIFO_CTRL_IE */
-			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL, FPGA_FIFO_CTRL_RUN);
+			SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_CTRL,
+				     FPGA_FIFO_CTRL_RUN);
 			queue_work(sti7109->fifo_workq, &sti7109->fifo_work);
 			phiISR &= ~ISR_FIFO1_EMPTY_MASK;
 		}
@@ -1446,14 +1491,16 @@ static const struct isl6423_config tt6400_isl6423_config[2] = {
 };
 
 
-static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter, int count)
+static int saa716x_s26400_frontend_attach(struct saa716x_adapter *adapter,
+					  int count)
 {
 	struct saa716x_dev *saa716x	= adapter->saa716x;
 	struct saa716x_i2c *i2c		= saa716x->i2c;
 	struct i2c_adapter *i2c_adapter	= &i2c[SAA716x_I2C_BUS_A].i2c_adapter;
 
 	pci_dbg(saa716x->pdev, "Adapter (%d) SAA716x frontend Init", count);
-	pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count, saa716x->pdev->subsystem_device);
+	pci_dbg(saa716x->pdev, "Adapter (%d) Device ID=%02x", count,
+		saa716x->pdev->subsystem_device);
 
 	if (count == 0 || count == 1) {
 		adapter->fe = dvb_attach(stv090x_attach,
@@ -1528,9 +1575,8 @@ static const struct saa716x_config saa716x_s26400_config = {
 
 
 static const struct pci_device_id saa716x_ff_pci_table[] = {
-
-	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_DEVEL, SAA7160, &saa716x_s26400_config),  /* S2 6400 Dual development version */
-	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_PROD, SAA7160, &saa716x_s26400_config), /* S2 6400 Dual production version */
+	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_DEVEL, SAA7160, &saa716x_s26400_config),
+	MAKE_ENTRY(TECHNOTREND, S2_6400_DUAL_S2_PREMIUM_PROD, SAA7160, &saa716x_s26400_config),
 	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_ff_pci_table);

From 65df5b234ea63511dd30df868fb8a5749229622e Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Thu, 27 Dec 2018 23:19:32 +0100
Subject: [PATCH 357/364] saa716x: cleanup LONG_LINE checkpatch warnings

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c    | 97 +++++++++++++--------
 drivers/media/pci/saa716x/saa716x_boot.c    |  4 +-
 drivers/media/pci/saa716x/saa716x_cgu.c     |  3 +-
 drivers/media/pci/saa716x/saa716x_cgu.h     | 10 +--
 drivers/media/pci/saa716x/saa716x_dma.c     | 35 ++++----
 drivers/media/pci/saa716x/saa716x_dma.h     |  6 +-
 drivers/media/pci/saa716x/saa716x_dma_reg.h |  3 +-
 drivers/media/pci/saa716x/saa716x_fgpi.c    | 31 +++++--
 drivers/media/pci/saa716x/saa716x_gpio.h    |  3 +-
 drivers/media/pci/saa716x/saa716x_i2c.c     | 25 +++---
 drivers/media/pci/saa716x/saa716x_pci.c     |  3 +-
 drivers/media/pci/saa716x/saa716x_priv.h    |  6 +-
 12 files changed, 140 insertions(+), 86 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index c94f0a5aff93f..13013a488a9e5 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -35,14 +35,17 @@ void saa716x_dma_start(struct saa716x_dev *saa716x, u8 adapter)
 	params.stream_type	= FGPI_TRANSPORT_STREAM;
 	params.stream_flags	= 0;
 
-	saa716x_fgpi_start(saa716x, saa716x->config->adap_config[adapter].ts_fgpi, &params);
+	saa716x_fgpi_start(saa716x,
+			   saa716x->config->adap_config[adapter].ts_fgpi,
+			   &params);
 }
 
 void saa716x_dma_stop(struct saa716x_dev *saa716x, u8 adapter)
 {
 	pci_dbg(saa716x->pdev, "Stop DMA engine for Adapter:%d", adapter);
 
-	saa716x_fgpi_stop(saa716x, saa716x->config->adap_config[adapter].ts_fgpi);
+	saa716x_fgpi_stop(saa716x,
+			  saa716x->config->adap_config[adapter].ts_fgpi);
 }
 
 static int saa716x_dvb_start_feed(struct dvb_demux_feed *dvbdmxfeed)
@@ -90,7 +93,8 @@ static int saa716x_dvb_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 
 static void saa716x_demux_worker(unsigned long data)
 {
-	struct saa716x_fgpi_stream_port *fgpi_entry = (struct saa716x_fgpi_stream_port *)data;
+	struct saa716x_fgpi_stream_port *fgpi_entry =
+				 (struct saa716x_fgpi_stream_port *)data;
 	struct saa716x_dev *saa716x = fgpi_entry->saa716x;
 	struct dvb_demux *demux;
 	u32 fgpi_index;
@@ -118,12 +122,14 @@ static void saa716x_demux_worker(unsigned long data)
 	pci_dbg(saa716x->pdev, "dma buffer = %d", write_index);
 
 	if (write_index == fgpi_entry->read_index) {
-		pci_dbg(saa716x->pdev, "%s: called but nothing to do", __func__);
+		pci_dbg(saa716x->pdev,
+			"%s: called but nothing to do", __func__);
 		return;
 	}
 
 	do {
-		u8 *data = (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
+		u8 *data =
+		 (u8 *)fgpi_entry->dma_buf[fgpi_entry->read_index].mem_virt;
 
 		pci_dma_sync_sg_for_cpu(saa716x->pdev,
 			fgpi_entry->dma_buf[fgpi_entry->read_index].sg_list,
@@ -159,58 +165,67 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 			return -ENODEV;
 		}
 
-		saa716x_adap->count			= i;
+		saa716x_adap->count = i;
 
-		saa716x_adap->dvb_adapter.priv		= saa716x_adap;
-		saa716x_adap->demux.dmx.capabilities	= DMX_TS_FILTERING	|
-							  DMX_SECTION_FILTERING	|
-							  DMX_MEMORY_BASED_FILTERING;
+		saa716x_adap->dvb_adapter.priv = saa716x_adap;
+		saa716x_adap->demux.dmx.capabilities = DMX_TS_FILTERING	|
+			  DMX_SECTION_FILTERING | DMX_MEMORY_BASED_FILTERING;
 
-		saa716x_adap->demux.priv		= saa716x_adap;
-		saa716x_adap->demux.filternum		= 256;
-		saa716x_adap->demux.feednum		= 256;
-		saa716x_adap->demux.start_feed		= saa716x_dvb_start_feed;
-		saa716x_adap->demux.stop_feed		= saa716x_dvb_stop_feed;
-		saa716x_adap->demux.write_to_decoder	= NULL;
+		saa716x_adap->demux.priv = saa716x_adap;
+		saa716x_adap->demux.filternum = 256;
+		saa716x_adap->demux.feednum = 256;
+		saa716x_adap->demux.start_feed = saa716x_dvb_start_feed;
+		saa716x_adap->demux.stop_feed = saa716x_dvb_stop_feed;
+		saa716x_adap->demux.write_to_decoder = NULL;
 
 		pci_dbg(saa716x->pdev, "dvb_dmx_init");
 		result = dvb_dmx_init(&saa716x_adap->demux);
 		if (result < 0) {
-			pci_dbg(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_dbg(saa716x->pdev,
+				"dvb_dmx_init failed, ERROR=%d", result);
 			goto err0;
 		}
 
-		saa716x_adap->dmxdev.filternum		= 256;
-		saa716x_adap->dmxdev.demux		= &saa716x_adap->demux.dmx;
-		saa716x_adap->dmxdev.capabilities	= 0;
+		saa716x_adap->dmxdev.filternum = 256;
+		saa716x_adap->dmxdev.demux = &saa716x_adap->demux.dmx;
+		saa716x_adap->dmxdev.capabilities = 0;
 
 		pci_dbg(saa716x->pdev, "dvb_dmxdev_init");
-		result = dvb_dmxdev_init(&saa716x_adap->dmxdev, &saa716x_adap->dvb_adapter);
+		result = dvb_dmxdev_init(&saa716x_adap->dmxdev,
+					 &saa716x_adap->dvb_adapter);
 		if (result < 0) {
-			pci_err(saa716x->pdev, "dvb_dmxdev_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev,
+				"dvb_dmxdev_init failed, ERROR=%d", result);
 			goto err1;
 		}
 
 		saa716x_adap->fe_hw.source = DMX_FRONTEND_0;
-		result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+		result = saa716x_adap->demux.dmx.add_frontend(
+				&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 		if (result < 0) {
-			pci_err(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev,
+				"dvb_dmx_init failed, ERROR=%d", result);
 			goto err2;
 		}
 
 		saa716x_adap->fe_mem.source = DMX_MEMORY_FE;
-		result = saa716x_adap->demux.dmx.add_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
+		result = saa716x_adap->demux.dmx.add_frontend(
+			      &saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 		if (result < 0) {
-			pci_err(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev,
+				"dvb_dmx_init failed, ERROR=%d", result);
 			goto err3;
 		}
-		result = saa716x_adap->demux.dmx.connect_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+		result = saa716x_adap->demux.dmx.connect_frontend(
+			      &saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 		if (result < 0) {
-			pci_err(saa716x->pdev, "dvb_dmx_init failed, ERROR=%d", result);
+			pci_err(saa716x->pdev,
+				"dvb_dmx_init failed, ERROR=%d", result);
 			goto err4;
 		}
 
-		dvb_net_init(&saa716x_adap->dvb_adapter, &saa716x_adap->dvb_net, &saa716x_adap->demux.dmx);
+		dvb_net_init(&saa716x_adap->dvb_adapter, &saa716x_adap->dvb_net,
+			     &saa716x_adap->demux.dmx);
 		pci_dbg(saa716x->pdev, "Frontend Init");
 		saa716x_adap->saa716x = saa716x;
 
@@ -226,7 +241,8 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 					saa716x->pdev->subsystem_vendor,
 					saa716x->pdev->subsystem_device);
 			} else {
-				result = dvb_register_frontend(&saa716x_adap->dvb_adapter, saa716x_adap->fe);
+				result = dvb_register_frontend(
+				  &saa716x_adap->dvb_adapter, saa716x_adap->fe);
 				if (result < 0) {
 					pci_err(saa716x->pdev, "register frontend failed");
 					goto err6;
@@ -239,9 +255,9 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 
 		/* assign video port to fgpi */
 		SAA716x_EPWR(GREG, GREG_FGPI_CTRL,
-				 SAA716x_EPRD(GREG, GREG_FGPI_CTRL) |
-				 (GREG_FGPI_CTRL_SEL(config->adap_config[i].ts_vp) <<
-				  (config->adap_config[i].ts_fgpi * 3)));
+			SAA716x_EPRD(GREG, GREG_FGPI_CTRL) |
+			(GREG_FGPI_CTRL_SEL(config->adap_config[i].ts_vp) <<
+			 (config->adap_config[i].ts_fgpi * 3)));
 
 		saa716x_fgpi_init(saa716x, config->adap_config[i].ts_fgpi,
 				  SAA716X_TS_DMA_BUF_SIZE,
@@ -257,9 +273,11 @@ int saa716x_dvb_init(struct saa716x_dev *saa716x)
 err6:
 	dvb_frontend_detach(saa716x_adap->fe);
 err4:
-	saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
+	saa716x_adap->demux.dmx.remove_frontend(
+			&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
 err3:
-	saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+	saa716x_adap->demux.dmx.remove_frontend(
+			&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 err2:
 	dvb_dmxdev_release(&saa716x_adap->dmxdev);
 err1:
@@ -279,7 +297,8 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
 
-		saa716x_fgpi_exit(saa716x, saa716x->config->adap_config[i].ts_fgpi);
+		saa716x_fgpi_exit(saa716x,
+				  saa716x->config->adap_config[i].ts_fgpi);
 
 		/* remove I2C tuner */
 		client = saa716x_adap->i2c_client_tuner;
@@ -301,8 +320,10 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 		}
 
 		dvb_net_release(&saa716x_adap->dvb_net);
-		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
-		saa716x_adap->demux.dmx.remove_frontend(&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
+		saa716x_adap->demux.dmx.remove_frontend(
+			&saa716x_adap->demux.dmx, &saa716x_adap->fe_mem);
+		saa716x_adap->demux.dmx.remove_frontend(
+			&saa716x_adap->demux.dmx, &saa716x_adap->fe_hw);
 		dvb_dmxdev_release(&saa716x_adap->dmxdev);
 		dvb_dmx_release(&saa716x_adap->demux);
 
diff --git a/drivers/media/pci/saa716x/saa716x_boot.c b/drivers/media/pci/saa716x/saa716x_boot.c
index 2688ea60bcd00..0292162ee36f7 100644
--- a/drivers/media/pci/saa716x/saa716x_boot.c
+++ b/drivers/media/pci/saa716x/saa716x_boot.c
@@ -86,7 +86,9 @@ int saa716x_jetpack_init(struct saa716x_dev *saa716x)
 
 	/* General setup for MMU */
 	SAA716x_EPWR(MMU, MMU_MODE, 0x14);
-	pci_dbg(saa716x->pdev, "SAA%02x Jetpack Successfully initialized", saa716x->pdev->device);
+	pci_dbg(saa716x->pdev,
+		"SAA%02x Jetpack Successfully initialized",
+		saa716x->pdev->device);
 
 	return 0;
 }
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.c b/drivers/media/pci/saa716x/saa716x_cgu.c
index 4c57e9707dfb0..c4788a5b36d06 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.c
+++ b/drivers/media/pci/saa716x/saa716x_cgu.c
@@ -75,7 +75,8 @@ int saa716x_getbootscript_setup(struct saa716x_dev *saa716x)
 			cgu->clk_freq[i] = 0;
 
 		pci_dbg(saa716x->pdev, "Domain %d: %s <0x%02x> Divider: 0x%x --> N=%d, M=%d, freq=%d",
-			i, clk_desc[i], cgu_clk[i], cgu->clk_boot_div[i], N, M, cgu->clk_freq[i]);
+			i, clk_desc[i], cgu_clk[i], cgu->clk_boot_div[i],
+			N, M, cgu->clk_freq[i]);
 	}
 	/* store clock settings */
 	cgu->clk_vi_0[0] = cgu->clk_freq[CLK_DOMAIN_VI0];
diff --git a/drivers/media/pci/saa716x/saa716x_cgu.h b/drivers/media/pci/saa716x/saa716x_cgu.h
index a1c16f2bcc3ff..28400707d6293 100644
--- a/drivers/media/pci/saa716x/saa716x_cgu.h
+++ b/drivers/media/pci/saa716x/saa716x_cgu.h
@@ -5,11 +5,11 @@
 
 #define PLL_FREQ	2500
 
-#define SAA716x_CGU_CLKRUN(__reg)  do {						\
-	SAA716x_EPWR(CGU, CGU_PCR_##__reg, CGU_PCR_RUN); /* Run */		\
-	SAA716x_EPWR(CGU, CGU_SCR_##__reg, CGU_SCR_ENF1); /* Switch */		\
-	SAA716x_EPWR(CGU, CGU_FS1_##__reg, 0x00000000); /* PLL Clk */		\
-	SAA716x_EPWR(CGU, CGU_ESR_##__reg, CGU_ESR_FD_EN); /* Frac div */	\
+#define SAA716x_CGU_CLKRUN(__reg)  do {					   \
+	SAA716x_EPWR(CGU, CGU_PCR_##__reg, CGU_PCR_RUN); /* Run */	   \
+	SAA716x_EPWR(CGU, CGU_SCR_##__reg, CGU_SCR_ENF1); /* Switch */	   \
+	SAA716x_EPWR(CGU, CGU_FS1_##__reg, 0x00000000); /* PLL Clk */	   \
+	SAA716x_EPWR(CGU, CGU_ESR_##__reg, CGU_ESR_FD_EN); /* Frac div */  \
 } while (0)
 
 enum saa716x_clk_domain {
diff --git a/drivers/media/pci/saa716x/saa716x_dma.c b/drivers/media/pci/saa716x/saa716x_dma.c
index 9bb2de3edf999..8b5527edff6c9 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.c
+++ b/drivers/media/pci/saa716x/saa716x_dma.c
@@ -37,8 +37,6 @@ static int saa716x_allocate_ptable(struct saa716x_dmabuf *dmabuf)
 		return -ENOMEM;
 	}
 
-	BUG_ON(!(((unsigned long) dmabuf->mem_ptab_phys % SAA716x_PAGE_SIZE) == 0));
-
 	return 0;
 }
 
@@ -107,7 +105,8 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, int size)
 		pages = size / SAA716x_PAGE_SIZE;
 
 	/* Allocate memory for SG list */
-	dmabuf->sg_list = kcalloc(pages, sizeof(struct scatterlist), GFP_KERNEL);
+	dmabuf->sg_list = kcalloc(pages, sizeof(struct scatterlist),
+				  GFP_KERNEL);
 	if (dmabuf->sg_list == NULL)
 		return -ENOMEM;
 
@@ -120,9 +119,8 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, int size)
 		return -ENOMEM;
 
 	/* align memory to page */
-	dmabuf->mem_virt = (void *) PAGE_ALIGN(((unsigned long) dmabuf->mem_virt_noalign));
-
-	BUG_ON(!((((unsigned long) dmabuf->mem_virt) % SAA716x_PAGE_SIZE) == 0));
+	dmabuf->mem_virt =
+		(void *) PAGE_ALIGN(((unsigned long) dmabuf->mem_virt_noalign));
 
 	dmabuf->list_len = pages; /* scatterlist length */
 	list = dmabuf->sg_list;
@@ -139,7 +137,8 @@ static int saa716x_dmabuf_sgalloc(struct saa716x_dmabuf *dmabuf, int size)
 }
 
 /*  Fill the "page table" page with the pointers to the specified SG buffer */
-static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scatterlist *sg_list, int pages, int offset)
+static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf,
+			 struct scatterlist *sg_list, int pages, int offset)
 {
 	struct saa716x_dev *saa716x	= dmabuf->saa716x;
 	struct pci_dev *pdev		= saa716x->pdev;
@@ -155,16 +154,17 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 	pci_dbg(saa716x->pdev, "SG page fill");
 
 	/* make page writable for the PC */
-	dma_sync_single_for_cpu(&pdev->dev, dmabuf->mem_ptab_phys, SAA716x_PAGE_SIZE, DMA_TO_DEVICE);
+	dma_sync_single_for_cpu(&pdev->dev, dmabuf->mem_ptab_phys,
+				SAA716x_PAGE_SIZE, DMA_TO_DEVICE);
 	page = dmabuf->mem_ptab_virt;
 
 	/* create page table */
 	for (i = 0; i < pages; i++) {
 		sg_cur = &sg_list[i];
-		BUG_ON(!(((sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE) == 0));
 
 		if (i == 0)
-			dmabuf->offset = (sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE;
+			dmabuf->offset =
+			  (sg_cur->length + sg_cur->offset) % SAA716x_PAGE_SIZE;
 		else
 			BUG_ON(sg_cur->offset != 0);
 
@@ -175,7 +175,8 @@ static void saa716x_dmabuf_sgpagefill(struct saa716x_dmabuf *dmabuf, struct scat
 				continue;
 			}
 
-			addr = ((u64)sg_dma_address(sg_cur)) + (j * SAA716x_PAGE_SIZE) - sg_cur->offset;
+			addr = ((u64)sg_dma_address(sg_cur)) +
+			       (j * SAA716x_PAGE_SIZE) - sg_cur->offset;
 
 			BUG_ON(addr == 0);
 			page[k * 2] = (u32)addr; /* Low */
@@ -228,7 +229,8 @@ void saa716x_dmabufsync_cpu(struct saa716x_dmabuf *dmabuf)
 }
 
 /* Allocates a DMA buffer for the specified external linear buffer. */
-int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dmabuf, int size)
+int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x,
+			 struct saa716x_dmabuf *dmabuf, int size)
 {
 	struct pci_dev *pdev		= saa716x->pdev;
 
@@ -262,7 +264,8 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 		goto err2;
 	}
 
-	ret = dma_map_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len, DMA_FROM_DEVICE);
+	ret = dma_map_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len,
+			 DMA_FROM_DEVICE);
 	if (ret < 0) {
 		pci_err(saa716x->pdev, "SG map failed");
 		goto err3;
@@ -279,14 +282,16 @@ int saa716x_dmabuf_alloc(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dma
 	return ret;
 }
 
-void saa716x_dmabuf_free(struct saa716x_dev *saa716x, struct saa716x_dmabuf *dmabuf)
+void saa716x_dmabuf_free(struct saa716x_dev *saa716x,
+			 struct saa716x_dmabuf *dmabuf)
 {
 	struct pci_dev *pdev		= saa716x->pdev;
 
 	BUG_ON(saa716x == NULL);
 	BUG_ON(dmabuf == NULL);
 
-	dma_unmap_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len, DMA_FROM_DEVICE);
+	dma_unmap_sg(&pdev->dev, dmabuf->sg_list, dmabuf->list_len,
+		     DMA_FROM_DEVICE);
 	saa716x_dmabuf_sgfree(dmabuf);
 	saa716x_free_ptable(dmabuf);
 }
diff --git a/drivers/media/pci/saa716x/saa716x_dma.h b/drivers/media/pci/saa716x/saa716x_dma.h
index 6c9202547e848..51236db3a32d8 100644
--- a/drivers/media/pci/saa716x/saa716x_dma.h
+++ b/drivers/media/pci/saa716x/saa716x_dma.h
@@ -11,12 +11,14 @@
 #define BAM_DMA_BUF_MODE_BASE		0x00
 #define BAM_DMA_BUF_MODE_OFFSET		0x24
 
-#define BAM_DMA_BUF_MODE(__ch)		(BAM_DMA_BUF_MODE_BASE + (BAM_DMA_BUF_MODE_OFFSET * __ch))
+#define BAM_DMA_BUF_MODE(__ch)		(BAM_DMA_BUF_MODE_BASE + \
+					 (BAM_DMA_BUF_MODE_OFFSET * __ch))
 
 #define BAM_ADDR_OFFSET_BASE		0x04
 #define BAM_ADDR_OFFSET_OFFSET		0x24
 
-#define BAM_ADDR_OFFSET(__ch)		(BAM_ADDR_OFFSET_BASE + (BAM_ADDR_OFFSET_OFFSET * __ch))
+#define BAM_ADDR_OFFSET(__ch)		(BAM_ADDR_OFFSET_BASE + \
+					 (BAM_ADDR_OFFSET_OFFSET * __ch))
 
 #define BAM_ADDR_OFFSET_0(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x00)
 #define BAM_ADDR_OFFSET_1(__ch)		(BAM_ADDR_OFFSET(__ch) + 0x04)
diff --git a/drivers/media/pci/saa716x/saa716x_dma_reg.h b/drivers/media/pci/saa716x/saa716x_dma_reg.h
index 41e35d3e05629..15a601cd0135a 100644
--- a/drivers/media/pci/saa716x/saa716x_dma_reg.h
+++ b/drivers/media/pci/saa716x/saa716x_dma_reg.h
@@ -181,7 +181,8 @@
 
 #define MMU_PTA_OFFSET			0x40
 
-#define MMU_PTA_BASE(__ch)		(MMU_PTA_BASE0 + (MMU_PTA_OFFSET * __ch))
+#define MMU_PTA_BASE(__ch)		(MMU_PTA_BASE0 + \
+					 (MMU_PTA_OFFSET * __ch))
 
 #define MMU_PTA0_LSB(__ch)		(MMU_PTA_BASE(__ch) + 0x00)
 #define MMU_PTA0_MSB(__ch)		(MMU_PTA_BASE(__ch) + 0x04)
diff --git a/drivers/media/pci/saa716x/saa716x_fgpi.c b/drivers/media/pci/saa716x/saa716x_fgpi.c
index 6bf3581254ace..78e2d13fed921 100644
--- a/drivers/media/pci/saa716x/saa716x_fgpi.c
+++ b/drivers/media/pci/saa716x/saa716x_fgpi.c
@@ -217,7 +217,8 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 		pci_err(saa716x->pdev, "FGPI Id<%04x> is not supported", mid);
 
 	/* Initialize FGPI block */
-	SAA716x_EPWR(fgpi_port, FGPI_REC_SIZE, stream_params->samples * (stream_params->bits / 8));
+	SAA716x_EPWR(fgpi_port, FGPI_REC_SIZE, stream_params->samples *
+					       (stream_params->bits / 8));
 	SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch);
 
 	offst_1 = 0;
@@ -236,17 +237,22 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 
 	case FGPI_VIDEO_STREAM:
 		SAA716x_EPWR(fgpi_port, FGPI_CONTROL, 0x00000040);
-		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_START, stream_params->offset);
+		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_START,
+			     stream_params->offset);
 
 		if ((stream_params->stream_flags & FGPI_INTERLACED) &&
 		    (stream_params->stream_flags & FGPI_ODD_FIELD) &&
 		    (stream_params->stream_flags & FGPI_EVEN_FIELD)) {
 
-			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines / 2);
-			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch * 2); /* interlaced stride of 2 lines */
+			SAA716x_EPWR(fgpi_port, FGPI_SIZE,
+				     stream_params->lines / 2);
+			/* interlaced stride of 2 lines */
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE,
+				     stream_params->pitch * 2);
 
 			D1_XY_END  = (stream_params->samples << 16);
-			D1_XY_END |= (stream_params->lines / 2) + stream_params->offset;
+			D1_XY_END |= (stream_params->lines / 2) +
+				     stream_params->offset;
 
 			if (stream_params->stream_flags & FGPI_PAL)
 				offst_2 = stream_params->pitch;
@@ -254,11 +260,15 @@ int saa716x_fgpi_setparams(struct saa716x_dmabuf *dmabuf,
 				offst_1 = stream_params->pitch;
 
 		} else {
-			SAA716x_EPWR(fgpi_port, FGPI_SIZE, stream_params->lines);
-			SAA716x_EPWR(fgpi_port, FGPI_STRIDE, stream_params->pitch); /* stride of 1 line */
+			SAA716x_EPWR(fgpi_port, FGPI_SIZE,
+				     stream_params->lines);
+			/* stride of 1 line */
+			SAA716x_EPWR(fgpi_port, FGPI_STRIDE,
+				     stream_params->pitch);
 
 			D1_XY_END  = stream_params->samples << 16;
-			D1_XY_END |= stream_params->lines + stream_params->offset;
+			D1_XY_END |= stream_params->lines +
+				     stream_params->offset;
 		}
 
 		SAA716x_EPWR(fgpi_port, FGPI_D1_XY_END, D1_XY_END);
@@ -282,13 +292,16 @@ int saa716x_fgpi_start(struct saa716x_dev *saa716x, int port,
 	u32 config;
 	u32 val;
 	u32 i;
+	int ret;
 
 	fgpi_port = fgpi_ch[port];
 
 	SAA716x_EPWR(fgpi_port, FGPI_INTERFACE, 0);
 	msleep(10);
 
-	if (saa716x_fgpi_setparams(saa716x->fgpi[port].dma_buf, stream_params, port) != 0)
+	ret = saa716x_fgpi_setparams(saa716x->fgpi[port].dma_buf,
+				     stream_params, port);
+	if (ret)
 		return -EIO;
 
 	saa716x->fgpi[port].read_index = 0;
diff --git a/drivers/media/pci/saa716x/saa716x_gpio.h b/drivers/media/pci/saa716x/saa716x_gpio.h
index 35c8c6614903d..6699505bd1022 100644
--- a/drivers/media/pci/saa716x/saa716x_gpio.h
+++ b/drivers/media/pci/saa716x/saa716x_gpio.h
@@ -14,7 +14,8 @@ struct saa716x_dev;
 extern void saa716x_gpio_init(struct saa716x_dev *saa716x);
 extern void saa716x_gpio_set_output(struct saa716x_dev *saa716x, int gpio);
 extern void saa716x_gpio_set_input(struct saa716x_dev *saa716x, int gpio);
-extern void saa716x_gpio_set_mode(struct saa716x_dev *saa716x, int gpio, int mode);
+extern void saa716x_gpio_set_mode(struct saa716x_dev *saa716x, int gpio,
+				  int mode);
 extern void saa716x_gpio_write(struct saa716x_dev *saa716x, int gpio, int set);
 extern int saa716x_gpio_read(struct saa716x_dev *saa716x, int gpio);
 
diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index a509fd9ee1ba2..785bff37dc631 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -103,7 +103,8 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 	switch (i2c->i2c_rate) {
 	case SAA716x_I2C_RATE_400:
 
-		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 400k", adapter->name);
+		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 400k",
+			adapter->name);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x1a);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x21);
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x10);
@@ -111,7 +112,8 @@ static int saa716x_i2c_hwinit(struct saa716x_i2c *i2c, u32 I2C_DEV)
 
 	case SAA716x_I2C_RATE_100:
 
-		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 100k", adapter->name);
+		pci_dbg(saa716x->pdev, "Initializing Adapter %s @ 100k",
+			adapter->name);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_HIGH, 0x68);
 		SAA716x_EPWR(I2C_DEV, I2C_CLOCK_DIVISOR_LOW,  0x87);
 		SAA716x_EPWR(I2C_DEV, I2C_SDA_HOLD, 0x60);
@@ -226,7 +228,7 @@ static int saa716x_i2c_send(struct saa716x_i2c *i2c, u32 I2C_DEV, u32 data)
 	}
 
 	if (!(reg & I2C_TRANSMIT_CLEAR)) {
-		pci_err(saa716x->pdev, "TXFIFO not empty after Timeout, tried %d loops!", i);
+		pci_err(saa716x->pdev, "TXFIFO not empty after Timeout");
 		err = -EIO;
 		goto exit;
 	}
@@ -286,7 +288,8 @@ static int saa716x_i2c_irq_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 		return 0;
 
 	timeout = HZ/100 + 1; /* 10ms */
-	timeout = wait_event_interruptible_timeout(i2c->i2c_wq, i2c->i2c_op == 0, timeout);
+	timeout = wait_event_interruptible_timeout(i2c->i2c_wq,
+					i2c->i2c_op == 0, timeout);
 	if (timeout == -ERESTARTSYS || i2c->i2c_op) {
 		SAA716x_EPWR(I2C_DEV, INT_CLR_STATUS, 0x1fff);
 		if (timeout == -ERESTARTSYS) {
@@ -429,7 +432,8 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	return err;
 }
 
-static int saa716x_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs, int num)
+static int saa716x_i2c_xfer(struct i2c_adapter *adapter,
+			    struct i2c_msg *msgs, int num)
 {
 	struct saa716x_i2c *i2c		= i2c_get_adapdata(adapter);
 	struct saa716x_dev *saa716x	= i2c->saa716x;
@@ -545,10 +549,8 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 				adapter->name);
 
 			err = i2c_add_adapter(adapter);
-			if (err < 0) {
-				pci_err(saa716x->pdev, "Adapter (%d) %s init failed", i, adapter->name);
+			if (err < 0)
 				goto exit;
-			}
 
 			i2c->saa716x = saa716x;
 			saa716x_i2c_hwinit(i2c, SAA716x_I2C_BUS(i));
@@ -566,6 +568,7 @@ int saa716x_i2c_init(struct saa716x_dev *saa716x)
 
 	return 0;
 exit:
+	pci_err(saa716x->pdev, "Adapter (%d) %s init failed", i, adapter->name);
 	return err;
 }
 EXPORT_SYMBOL_GPL(saa716x_i2c_init);
@@ -576,13 +579,15 @@ void saa716x_i2c_exit(struct saa716x_dev *saa716x)
 	struct i2c_adapter *adapter	= NULL;
 	int i;
 
-	pci_dbg(saa716x->pdev, "Removing SAA%02x I2C Core", saa716x->pdev->device);
+	pci_dbg(saa716x->pdev, "Removing SAA%02x I2C Core",
+		saa716x->pdev->device);
 
 	for (i = 0; i < SAA716x_I2C_ADAPTERS; i++) {
 
 		adapter = &i2c->i2c_adapter;
 		saa716x_i2c_hwdeinit(i2c, SAA716x_I2C_BUS(i));
-		pci_dbg(saa716x->pdev, "Removing adapter (%d) %s", i, adapter->name);
+		pci_dbg(saa716x->pdev, "Removing adapter (%d) %s", i,
+			adapter->name);
 
 		i2c_del_adapter(adapter);
 		i2c++;
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 85da3d91f550d..095ce37269c76 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -54,7 +54,8 @@ int saa716x_pci_init(struct saa716x_dev *saa716x)
 	u32 msi_cap;
 	u8 revision;
 
-	pci_info(saa716x->pdev, "found a %s PCIe card", saa716x->config->model_name);
+	pci_info(saa716x->pdev, "found a %s PCIe card",
+		 saa716x->config->model_name);
 
 	err = pci_enable_device(pdev);
 	if (err != 0) {
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index 8676745adb6a4..b8f7b127f6b89 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -33,8 +33,10 @@
 		.driver_data	= (unsigned long) (__configptr)		\
 }
 
-#define SAA716x_EPWR(__offst, __addr, __data)	writel((__data), (saa716x->mmio + (__offst + __addr)))
-#define SAA716x_EPRD(__offst, __addr)		readl((saa716x->mmio + (__offst + __addr)))
+#define SAA716x_EPWR(__offst, __addr, __data)	\
+	writel((__data), (saa716x->mmio + (__offst + __addr)))
+#define SAA716x_EPRD(__offst, __addr)		\
+	readl((saa716x->mmio + (__offst + __addr)))
 
 struct saa716x_dev;
 struct saa716x_adapter;

From bc4ff92826e55d9f172ced4240f430fb3baea130 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Sun, 30 Dec 2018 01:01:41 +0100
Subject: [PATCH 358/364] saa716x: do not report recoverable i2c transfer
 errors

Do not report errors for i2c transfers that will be retried.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_i2c.c | 44 ++++++++-----------------
 1 file changed, 13 insertions(+), 31 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_i2c.c b/drivers/media/pci/saa716x/saa716x_i2c.c
index 785bff37dc631..fcf82faf15cf6 100644
--- a/drivers/media/pci/saa716x/saa716x_i2c.c
+++ b/drivers/media/pci/saa716x/saa716x_i2c.c
@@ -296,7 +296,7 @@ static int saa716x_i2c_irq_wait(struct saa716x_i2c *i2c, u32 I2C_DEV)
 			/* a signal arrived */
 			err = -ERESTARTSYS;
 		} else {
-			pci_err(saa716x->pdev, "timed out waiting for end of xfer!");
+			pci_dbg(saa716x->pdev, "timed out waiting for end of xfer!");
 			err = -EIO;
 		}
 	}
@@ -359,7 +359,7 @@ static int saa716x_i2c_write_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	return 0;
 
 exit:
-	pci_err(saa716x->pdev, "Error writing data, err=%d", err);
+	pci_dbg(saa716x->pdev, "Error writing data, err=%d", err);
 	return err;
 }
 
@@ -428,7 +428,7 @@ static int saa716x_i2c_read_msg(struct saa716x_i2c *i2c, u32 I2C_DEV,
 	return 0;
 
 exit:
-	pci_err(saa716x->pdev, "Error reading data, err=%d", err);
+	pci_dbg(saa716x->pdev, "Error reading data, err=%d", err);
 	return err;
 }
 
@@ -439,8 +439,7 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter,
 	struct saa716x_dev *saa716x	= i2c->saa716x;
 
 	u32 DEV = SAA716x_I2C_BUS(i2c->i2c_dev);
-	int i, j, err = 0;
-	int t;
+	int i, t, err;
 
 	pci_dbg(saa716x->pdev, "Bus(%02x) I2C transfer", DEV);
 	mutex_lock(&i2c->i2c_lock);
@@ -455,42 +454,25 @@ static int saa716x_i2c_xfer(struct i2c_adapter *adapter,
 				err = saa716x_i2c_write_msg(i2c, DEV,
 					msgs[i].addr, msgs[i].buf, msgs[i].len,
 					i == (num - 1));
-			if (err < 0) {
-				err = -EIO;
+			if (err < 0)
 				goto retry;
-			}
 		}
 		break;
 retry:
-		pci_err(saa716x->pdev, "Error in Transfer, try %d", t);
-		for (i = 0; i < num; i++) {
-			pci_err(saa716x->pdev, "msg %d, addr = 0x%02x, len=%d, flags=0x%x",
-				i, msgs[i].addr, msgs[i].len, msgs[i].flags);
-			if (!(msgs[i].flags & I2C_M_RD)) {
-				for (j = 0; j < msgs[i].len; j++) {
-					pci_err(saa716x->pdev, "    <W %04x> 0x%02x",
-						j, msgs[i].buf[j]);
-				}
-			}
-		}
 		err = saa716x_i2c_hwinit(i2c, DEV);
-		if (err < 0) {
-			pci_err(saa716x->pdev, "Error Reinit");
-			err = -EIO;
-			goto bail_out;
-		}
+		if (err < 0)
+			break;
 	}
 
 	mutex_unlock(&i2c->i2c_lock);
-	if (t < 3)
+
+	if ((t < 3) && (err >= 0))
 		return num;
-	else
-		return -EIO;
 
-bail_out:
-	pci_err(saa716x->pdev, "ERROR: Bailing out <%d>", err);
-	mutex_unlock(&i2c->i2c_lock);
-	return err;
+	pci_err(saa716x->pdev,
+		"I2C transfer error, msg %d, addr = 0x%02x, len=%d, flags=0x%x",
+		i, msgs[i].addr, msgs[i].len, msgs[i].flags);
+	return -EIO;
 }
 
 static u32 saa716x_i2c_func(struct i2c_adapter *adapter)

From 69322d12fbacc8558bdaf3e139bd15781b717780 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 28 Dec 2018 01:44:19 +0100
Subject: [PATCH 359/364] saa716x_ff: simplify PHI code

Always use the fast PHI clock in the PCIe bridge, use the same slow FPGA clock
in phi_mode=0 as before.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h      |  1 -
 drivers/media/pci/saa716x/saa716x_ff_main.c |  3 -
 drivers/media/pci/saa716x/saa716x_ff_phi.c  | 93 +++++----------------
 drivers/media/pci/saa716x/saa716x_ff_phi.h  |  1 -
 4 files changed, 23 insertions(+), 75 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 8c28fb3d468f4..3c91c6e6f346c 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -122,7 +122,6 @@ struct sti7109_dev {
 
 	void __iomem		*mmio_uc; /* uncached PHI1 regions */
 	void __iomem		*mmio_wc; /* write-combining PHI1 regions */
-	int			phi_mode;
 
 	void			*iobuf;  /* memory for all buffers */
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index abb63d155c600..b637a219ee27b 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -1048,9 +1048,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev,
 		goto fail5;
 	}
 
-	/* reconfigure PHI based on FPGA version and phi_mode */
-	saa716x_ff_phi_config(saa716x_ff);
-
 	/* configure TS muxer */
 	if (sti7109->fpga_version < 0x110) {
 		/* select FIFO 1 for TS mux 3 */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 870bec9b0b3eb..54b4c224193ba 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -68,25 +68,23 @@ int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff)
 	SAA716x_EPWR(PHI_0, PHI_POLARITY, PHI_ALE_POL);
 	SAA716x_EPWR(PHI_0, PHI_TIMEOUT, 0x2a);
 
-	/* start with PHI settings that should work on all versions of the FPGA
-	   firmware */
-	if (phi_mode) {
-		/* fast PHI clock */
-		saa716x_set_clk(saa716x, CLK_DOMAIN_PHI, PLL_FREQ);
-
-		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 6, 12));
-		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 6, 10));
-	} else {
-		/* slow PHI clock */
-		saa716x_set_clk(saa716x, CLK_DOMAIN_PHI, PLL_FREQ / 2);
-
-		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
-		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
-	}
-
-	/* for the actual access use PHI mode 0 until saa716x_ff_phi_config
-	   gets called */
-	sti7109->phi_mode = 0;
+	/* fast PHI clock */
+	saa716x_set_clk(saa716x, CLK_DOMAIN_PHI, PLL_FREQ);
+
+	/* 8k fifo window */
+	SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 6, 12));
+	/* noncached slow read/write window, for single-word accesses */
+	SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 6, 10));
+	/* slower noncached read window */
+	SAA716x_EPWR(PHI_0, PHI_1_1_CONFIG, PHI_CONFIG(0x05, 0, 3, 8));
+	/* fast noncached read window */
+	SAA716x_EPWR(PHI_0, PHI_1_2_CONFIG, PHI_CONFIG(0x05, 0, 4, 6));
+	/* noncached write window */
+	SAA716x_EPWR(PHI_0, PHI_1_3_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
+	/* write-combining dpram window */
+	SAA716x_EPWR(PHI_0, PHI_1_4_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
+	/* write-combining fifo window */
+	SAA716x_EPWR(PHI_0, PHI_1_5_CONFIG, PHI_CONFIG(0x06, 0, 3, 5));
 
 	return 0;
 
@@ -109,62 +107,15 @@ void saa716x_ff_phi_exit(struct saa716x_ff_dev *saa716x_ff)
 		iounmap(sti7109->mmio_uc);
 }
 
-void saa716x_ff_phi_config(struct saa716x_ff_dev *saa716x_ff)
-{
-	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
-	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
-
-	if (sti7109->fpga_version < 0x110)
-		return;
-
-	if (phi_mode) {
-		/* 8k fifo window */
-		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
-		SAA716x_EPWR(PHI_0, PHI_0_1_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
-		SAA716x_EPWR(PHI_0, PHI_0_2_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
-		SAA716x_EPWR(PHI_0, PHI_0_3_CONFIG, PHI_CONFIG(0x02, 0, 3, 5));
-
-		/* noncached slow read/write window, for single-word accesses */
-		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 6, 10));
-		/* slower noncached read window */
-		SAA716x_EPWR(PHI_0, PHI_1_1_CONFIG, PHI_CONFIG(0x05, 0, 3, 8));
-		/* fast noncached read window */
-		SAA716x_EPWR(PHI_0, PHI_1_2_CONFIG, PHI_CONFIG(0x05, 0, 4, 6));
-		/* noncached write window */
-		SAA716x_EPWR(PHI_0, PHI_1_3_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
-		/* write-combining dpram window */
-		SAA716x_EPWR(PHI_0, PHI_1_4_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
-		/* write-combining fifo window */
-		SAA716x_EPWR(PHI_0, PHI_1_5_CONFIG, PHI_CONFIG(0x06, 0, 3, 5));
-	} else {
-		/* 8k fifo window */
-		SAA716x_EPWR(PHI_0, PHI_0_0_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
-		SAA716x_EPWR(PHI_0, PHI_0_1_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
-		SAA716x_EPWR(PHI_0, PHI_0_2_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
-		SAA716x_EPWR(PHI_0, PHI_0_3_CONFIG, PHI_CONFIG(0x02, 0, 3, 6));
-
-		/* noncached read/write windows */
-		SAA716x_EPWR(PHI_0, PHI_1_0_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
-		SAA716x_EPWR(PHI_0, PHI_1_1_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
-		SAA716x_EPWR(PHI_0, PHI_1_2_CONFIG, PHI_CONFIG(0x01, 0, 3, 5));
-		SAA716x_EPWR(PHI_0, PHI_1_3_CONFIG, PHI_CONFIG(0x05, 0, 3, 4));
-		/* write-combining dpram window */
-		SAA716x_EPWR(PHI_0, PHI_1_4_CONFIG, PHI_CONFIG(0x05, 0, 3, 4));
-		/* write-combining fifo window */
-		SAA716x_EPWR(PHI_0, PHI_1_5_CONFIG, PHI_CONFIG(0x06, 0, 3, 4));
-	}
-
-	sti7109->phi_mode = phi_mode;
-}
-
 void saa716x_ff_phi_write(struct saa716x_ff_dev *saa716x_ff,
 			  u32 address, const u8 *data, int length)
 {
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
+	unsigned int mode = (sti7109->fpga_version < 0x110) ? 0 : phi_mode;
 	int i;
 
-	switch (sti7109->phi_mode) {
+	switch (mode) {
 	case 2:
 		memcpy(PHI_1_4 + address, data, (length+3) & ~3);
 		break;
@@ -185,9 +136,10 @@ void saa716x_ff_phi_read(struct saa716x_ff_dev *saa716x_ff,
 {
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
+	unsigned int mode = (sti7109->fpga_version < 0x110) ? 0 : phi_mode;
 	int i;
 
-	switch (sti7109->phi_mode) {
+	switch (mode) {
 	case 2:
 		memcpy(data, PHI_1_2 + address, (length+3) & ~3);
 		break;
@@ -208,9 +160,10 @@ void saa716x_ff_phi_write_fifo(struct saa716x_ff_dev *saa716x_ff,
 {
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
+	unsigned int mode = (sti7109->fpga_version < 0x110) ? 0 : phi_mode;
 	int i;
 
-	switch (sti7109->phi_mode) {
+	switch (mode) {
 	case 2:
 		/* special fifo access                                        */
 		/* first write data in arbitrary order, then commit fifo data */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.h b/drivers/media/pci/saa716x/saa716x_ff_phi.h
index ae4ee4d7892a4..27cb29a3b2c79 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.h
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.h
@@ -5,7 +5,6 @@
 
 extern int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff);
 extern void saa716x_ff_phi_exit(struct saa716x_ff_dev *saa716x_ff);
-extern void saa716x_ff_phi_config(struct saa716x_ff_dev *saa716x_ff);
 extern void saa716x_ff_phi_write(struct saa716x_ff_dev *saa716x_ff,
 				 u32 address, const u8 *data, int length);
 extern void saa716x_ff_phi_read(struct saa716x_ff_dev *saa716x_ff,

From f2391da5cf295d619b8eec4377f0e275a7e9880e Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 28 Dec 2018 02:31:50 +0100
Subject: [PATCH 360/364] saa716x_budget/ff/hybrid: autoselect PCI interrupt
 mode

Let the PCI core decide about legacy or MSI interrupt mode, no need for the
user to specify this mode correctly anymore.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_budget.c  |  5 -----
 drivers/media/pci/saa716x/saa716x_ff_main.c |  5 -----
 drivers/media/pci/saa716x/saa716x_hybrid.c  |  5 -----
 drivers/media/pci/saa716x/saa716x_pci.c     | 10 ++--------
 drivers/media/pci/saa716x/saa716x_priv.h    |  4 ----
 5 files changed, 2 insertions(+), 27 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 9718d38b7738c..49e1f7598a1ec 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -19,10 +19,6 @@
 #include "si2168.h"
 #include "si2157.h"
 
-unsigned int int_type = 1;
-module_param(int_type, int, 0644);
-MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
-
 #define DRIVER_NAME	"SAA716x Budget"
 
 static int saa716x_budget_pci_probe(struct pci_dev *pdev,
@@ -37,7 +33,6 @@ static int saa716x_budget_pci_probe(struct pci_dev *pdev,
 		goto fail0;
 	}
 
-	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->module		= THIS_MODULE;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
diff --git a/drivers/media/pci/saa716x/saa716x_ff_main.c b/drivers/media/pci/saa716x/saa716x_ff_main.c
index b637a219ee27b..5e65002928f57 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_main.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_main.c
@@ -29,10 +29,6 @@
 #include "stv090x.h"
 #include "isl6423.h"
 
-unsigned int int_type = 1;
-module_param(int_type, int, 0644);
-MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
-
 unsigned int video_capture;
 module_param(video_capture, int, 0644);
 MODULE_PARM_DESC(video_capture, "capture digital video coming from STi7109: 0=off, 1=one-shot. default off");
@@ -977,7 +973,6 @@ static int saa716x_ff_pci_probe(struct pci_dev *pdev,
 	saa716x = &saa716x_ff->saa716x;
 	sti7109 = &saa716x_ff->sti7109;
 
-	saa716x->int_type = int_type;
 	saa716x->pdev = pdev;
 	saa716x->module = THIS_MODULE;
 	saa716x->config = (struct saa716x_config *) pci_id->driver_data;
diff --git a/drivers/media/pci/saa716x/saa716x_hybrid.c b/drivers/media/pci/saa716x/saa716x_hybrid.c
index 83894b52fa27f..438532c0b893e 100644
--- a/drivers/media/pci/saa716x/saa716x_hybrid.c
+++ b/drivers/media/pci/saa716x/saa716x_hybrid.c
@@ -17,10 +17,6 @@
 #include "tda1004x.h"
 #include "tda827x.h"
 
-unsigned int int_type = 1;
-module_param(int_type, int, 0644);
-MODULE_PARM_DESC(int_type, "select Interrupt Handler type: 0=INT-A, 1=MSI. default: MSI mode");
-
 #define DRIVER_NAME	"SAA716x Hybrid"
 
 static int saa716x_hybrid_pci_probe(struct pci_dev *pdev,
@@ -35,7 +31,6 @@ static int saa716x_hybrid_pci_probe(struct pci_dev *pdev,
 		goto fail0;
 	}
 
-	saa716x->int_type	= int_type;
 	saa716x->pdev		= pdev;
 	saa716x->module		= THIS_MODULE;
 	saa716x->config		= (struct saa716x_config *) pci_id->driver_data;
diff --git a/drivers/media/pci/saa716x/saa716x_pci.c b/drivers/media/pci/saa716x/saa716x_pci.c
index 095ce37269c76..4d3f4a866bb81 100644
--- a/drivers/media/pci/saa716x/saa716x_pci.c
+++ b/drivers/media/pci/saa716x/saa716x_pci.c
@@ -18,15 +18,9 @@ static int saa716x_request_irq(struct saa716x_dev *saa716x)
 {
 	struct pci_dev *pdev = saa716x->pdev;
 	struct saa716x_config *config = saa716x->config;
-	int mode, ret;
+	int ret;
 
-	mode = PCI_IRQ_LEGACY; /* legacy fallback mode */
-	if (saa716x->int_type != MODE_INTA) {
-		pci_dbg(saa716x->pdev, "Enabling MSI mode");
-		mode |= PCI_IRQ_MSI;
-	}
-
-	ret = pci_alloc_irq_vectors(pdev, 1, 1, mode);
+	ret = pci_alloc_irq_vectors(pdev, 1, 1, PCI_IRQ_LEGACY | PCI_IRQ_MSI);
 	if (ret < 0) {
 		pci_err(saa716x->pdev, "IRQ vector registration failed");
 		return ret;
diff --git a/drivers/media/pci/saa716x/saa716x_priv.h b/drivers/media/pci/saa716x/saa716x_priv.h
index b8f7b127f6b89..7db944fbc01e0 100644
--- a/drivers/media/pci/saa716x/saa716x_priv.h
+++ b/drivers/media/pci/saa716x/saa716x_priv.h
@@ -88,10 +88,6 @@ struct saa716x_dev {
 	/* PCI */
 	void __iomem			*mmio;
 
-#define MODE_INTA	0
-#define MODE_MSI	1
-	u8				int_type;
-
 	/* I2C */
 	struct saa716x_i2c		i2c[2];
 	u32				I2C_DEV[2];

From 09e42974ec51c676520f5b0bc83d7f7d3bc7bdec Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 28 Dec 2018 13:25:41 +0100
Subject: [PATCH 361/364] saa716x_ff: autoselect phi_mode

Select phi_mode=0 for FPGA firmware versions < 1.10, phi_mode=1 otherwise.
So we automatically use the faster mode when supported.
phi_mode=2 was a dirty hack (accessing pci iomem like normal RAM), that was
used to increase throughput on older x86 or ARM architectures (e.g. Via C7,
or Marvell Kirkwood). This hack does not work anymore on modern CPUs, and
is not required for reasonable speed there.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff.h     |   3 +-
 drivers/media/pci/saa716x/saa716x_ff_phi.c | 117 ++++-----------------
 2 files changed, 20 insertions(+), 100 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff.h b/drivers/media/pci/saa716x/saa716x_ff.h
index 3c91c6e6f346c..b8be0abababad 100644
--- a/drivers/media/pci/saa716x/saa716x_ff.h
+++ b/drivers/media/pci/saa716x/saa716x_ff.h
@@ -120,8 +120,7 @@ struct sti7109_dev {
 	struct dvb_device	*video_dev;
 	struct dvb_device	*audio_dev;
 
-	void __iomem		*mmio_uc; /* uncached PHI1 regions */
-	void __iomem		*mmio_wc; /* write-combining PHI1 regions */
+	void __iomem		*mmio;
 
 	void			*iobuf;  /* memory for all buffers */
 	struct dvb_ringbuffer	tsout;   /* buffer for TS output */
diff --git a/drivers/media/pci/saa716x/saa716x_ff_phi.c b/drivers/media/pci/saa716x/saa716x_ff_phi.c
index 54b4c224193ba..29bea6a78ca2e 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_phi.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_phi.c
@@ -8,26 +8,15 @@
 
 #include "saa716x_ff.h"
 
-
-unsigned int phi_mode;
-module_param(phi_mode, int, 0644);
-MODULE_PARM_DESC(phi_mode, "phi access mode:"
-		" 0 - default, slow single word accesses;"
-		" 1 - faster phi clock;"
-		" 2 - fastest mode, use write-combining");
-
-
 /* phi config values: chip_select mask, ready mask, strobe time, cycle time */
 #define PHI_CONFIG(__cs, __ready, __strobe, __cycle) \
 	((__cs) + ((__ready) << 8) + ((__strobe) << 12) +  ((__cycle) << 20))
 
 #define PHI_0_0 (saa716x->mmio + PHI_0 + PHI_0_0_RW_0)
 #define PHI_1_0 (saa716x->mmio + PHI_1 + PHI_1_0_RW_0)
-#define PHI_1_1 (sti7109->mmio_uc)
-#define PHI_1_2 (sti7109->mmio_uc + 0x10000)
-#define PHI_1_3 (sti7109->mmio_uc + 0x20000)
-#define PHI_1_4 (sti7109->mmio_wc)
-#define PHI_1_5 (sti7109->mmio_wc + 0x10000)
+#define PHI_1_1 (sti7109->mmio)
+#define PHI_1_2 (sti7109->mmio + 0x10000)
+#define PHI_1_3 (sti7109->mmio + 0x20000)
 
 int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff)
 {
@@ -35,27 +24,17 @@ int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff)
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 	struct pci_dev *pdev = saa716x->pdev;
 	resource_size_t phi1_start = pci_resource_start(pdev, 0) + PHI_1;
-	int err;
 
 	if (pci_resource_len(pdev, 0) < 0x80000) {
 		pci_err(saa716x->pdev, "wrong BAR0 length");
-		err = -ENODEV;
-		goto fail0;
+		return -ENODEV;
 	}
 
 	/* skip first PHI window as it is already mapped */
-	sti7109->mmio_uc = ioremap_nocache(phi1_start + 0x10000, 0x30000);
-	if (!sti7109->mmio_uc) {
+	sti7109->mmio = ioremap_nocache(phi1_start + 0x10000, 0x30000);
+	if (!sti7109->mmio) {
 		pci_err(saa716x->pdev, "Mem PHI1 remap failed");
-		err = -ENODEV;
-		goto fail0;
-	}
-
-	sti7109->mmio_wc = ioremap_wc(phi1_start + 0x40000, 0x20000);
-	if (!sti7109->mmio_wc) {
-		pci_err(saa716x->pdev, "Mem PHI1 WC remap failed");
-		err = -ENODEV;
-		goto fail1;
+		return -ENODEV;
 	}
 
 	/* init PHI 0 to FIFO mode */
@@ -81,30 +60,16 @@ int saa716x_ff_phi_init(struct saa716x_ff_dev *saa716x_ff)
 	SAA716x_EPWR(PHI_0, PHI_1_2_CONFIG, PHI_CONFIG(0x05, 0, 4, 6));
 	/* noncached write window */
 	SAA716x_EPWR(PHI_0, PHI_1_3_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
-	/* write-combining dpram window */
-	SAA716x_EPWR(PHI_0, PHI_1_4_CONFIG, PHI_CONFIG(0x05, 0, 3, 5));
-	/* write-combining fifo window */
-	SAA716x_EPWR(PHI_0, PHI_1_5_CONFIG, PHI_CONFIG(0x06, 0, 3, 5));
 
 	return 0;
-
-fail1:
-	if (sti7109->mmio_wc)
-		iounmap(sti7109->mmio_wc);
-	if (sti7109->mmio_uc)
-		iounmap(sti7109->mmio_uc);
-fail0:
-	return err;
 }
 
 void saa716x_ff_phi_exit(struct saa716x_ff_dev *saa716x_ff)
 {
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
 
-	if (sti7109->mmio_wc)
-		iounmap(sti7109->mmio_wc);
-	if (sti7109->mmio_uc)
-		iounmap(sti7109->mmio_uc);
+	if (sti7109->mmio)
+		iounmap(sti7109->mmio);
 }
 
 void saa716x_ff_phi_write(struct saa716x_ff_dev *saa716x_ff,
@@ -112,23 +77,10 @@ void saa716x_ff_phi_write(struct saa716x_ff_dev *saa716x_ff,
 {
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
-	unsigned int mode = (sti7109->fpga_version < 0x110) ? 0 : phi_mode;
-	int i;
-
-	switch (mode) {
-	case 2:
-		memcpy(PHI_1_4 + address, data, (length+3) & ~3);
-		break;
-	case 1:
-		memcpy_toio(PHI_1_3 + address, data, (length+3) & ~3);
-		break;
-	default:
-		for (i = 0; i < length; i += 4) {
-			SAA716x_EPWR(PHI_1, address, *((u32 *) &data[i]));
-			address += 4;
-		}
-		break;
-	}
+	void __iomem *iobase;
+
+	iobase = (sti7109->fpga_version < 0x110) ? PHI_1_0 : PHI_1_3;
+	memcpy_toio(iobase + address, data, (length+3) & ~3);
 }
 
 void saa716x_ff_phi_read(struct saa716x_ff_dev *saa716x_ff,
@@ -136,47 +88,16 @@ void saa716x_ff_phi_read(struct saa716x_ff_dev *saa716x_ff,
 {
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
 	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
-	unsigned int mode = (sti7109->fpga_version < 0x110) ? 0 : phi_mode;
-	int i;
-
-	switch (mode) {
-	case 2:
-		memcpy(data, PHI_1_2 + address, (length+3) & ~3);
-		break;
-	case 1:
-		memcpy_fromio(data, PHI_1_1 + address, (length+3) & ~3);
-		break;
-	default:
-		for (i = 0; i < length; i += 4) {
-			*((u32 *) &data[i]) = SAA716x_EPRD(PHI_1, address);
-			address += 4;
-		}
-		break;
-	}
+	void __iomem *iobase;
+
+	iobase = (sti7109->fpga_version < 0x110) ? PHI_1_0 : PHI_1_2;
+	memcpy_fromio(data, iobase + address, (length+3) & ~3);
 }
 
 void saa716x_ff_phi_write_fifo(struct saa716x_ff_dev *saa716x_ff,
 			       const u8 *data, int length)
 {
 	struct saa716x_dev *saa716x = &saa716x_ff->saa716x;
-	struct sti7109_dev *sti7109 = &saa716x_ff->sti7109;
-	unsigned int mode = (sti7109->fpga_version < 0x110) ? 0 : phi_mode;
-	int i;
-
-	switch (mode) {
-	case 2:
-		/* special fifo access                                        */
-		/* first write data in arbitrary order, then commit fifo data */
-		memcpy(PHI_1_5, data, length);
-		wmb();
-		SAA716x_EPWR(PHI_1, FPGA_ADDR_FIFO_STAT, 0);
-		break;
-	case 1:
-		iowrite32_rep(PHI_0_0, data, length/4);
-		break;
-	default:
-		for (i = 0; i < length; i += 4)
-			SAA716x_EPWR(PHI_0, PHI_0_0_RW_0, *((u32 *) &data[i]));
-		break;
-	}
+
+	iowrite32_rep(PHI_0_0, data, length/4);
 }

From dd899187e862af654732903e19546b5943a2adfc Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 4 Jan 2019 09:36:02 +0100
Subject: [PATCH 362/364] saa716x_budget: simplify TBS frontend attach code

Use the recommended dvb_module_probe() / dvb_module_release() calls.

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_adap.c   |  17 +---
 drivers/media/pci/saa716x/saa716x_budget.c | 109 +++++++--------------
 2 files changed, 38 insertions(+), 88 deletions(-)

diff --git a/drivers/media/pci/saa716x/saa716x_adap.c b/drivers/media/pci/saa716x/saa716x_adap.c
index 13013a488a9e5..11276f7cc50c1 100644
--- a/drivers/media/pci/saa716x/saa716x_adap.c
+++ b/drivers/media/pci/saa716x/saa716x_adap.c
@@ -292,7 +292,6 @@ EXPORT_SYMBOL(saa716x_dvb_init);
 void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 {
 	struct saa716x_adapter *saa716x_adap = saa716x->saa716x_adap;
-	struct i2c_client *client;
 	int i;
 
 	for (i = 0; i < saa716x->config->adapters; i++) {
@@ -300,19 +299,11 @@ void saa716x_dvb_exit(struct saa716x_dev *saa716x)
 		saa716x_fgpi_exit(saa716x,
 				  saa716x->config->adap_config[i].ts_fgpi);
 
-		/* remove I2C tuner */
-		client = saa716x_adap->i2c_client_tuner;
-		if (client) {
-			module_put(client->dev.driver->owner);
-			i2c_unregister_device(client);
-		}
+		/* remove I2C tuner if available */
+		dvb_module_release(saa716x_adap->i2c_client_tuner);
 
-		/* remove I2C demod */
-		client = saa716x_adap->i2c_client_demod;
-		if (client) {
-			module_put(client->dev.driver->owner);
-			i2c_unregister_device(client);
-		}
+		/* remove I2C demod if available */
+		dvb_module_release(saa716x_adap->i2c_client_demod);
 
 		if (saa716x_adap->fe) {
 			dvb_unregister_frontend(saa716x_adap->fe);
diff --git a/drivers/media/pci/saa716x/saa716x_budget.c b/drivers/media/pci/saa716x/saa716x_budget.c
index 49e1f7598a1ec..60094d0b16bdb 100644
--- a/drivers/media/pci/saa716x/saa716x_budget.c
+++ b/drivers/media/pci/saa716x/saa716x_budget.c
@@ -315,11 +315,9 @@ static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter,
 					   int count)
 {
 	struct saa716x_dev *dev = adapter->saa716x;
-	struct i2c_adapter *i2cadapter;
-	struct i2c_client *client;
-	struct i2c_board_info info;
-	struct si2168_config si2168_config;
-	struct si2157_config si2157_config;
+	struct i2c_adapter *i2c_adapter;
+	struct si2168_config si2168_config = {};
+	struct si2157_config si2157_config = {};
 
 	if (count > 1)
 		goto err;
@@ -332,47 +330,27 @@ static int saa716x_tbs6281_frontend_attach(struct saa716x_adapter *adapter,
 	msleep(100);
 
 	/* attach demod */
-	memset(&si2168_config, 0, sizeof(si2168_config));
-	si2168_config.i2c_adapter = &i2cadapter;
+	si2168_config.i2c_adapter = &i2c_adapter;
 	si2168_config.fe = &adapter->fe;
 	si2168_config.ts_mode = SI2168_TS_PARALLEL;
 	si2168_config.ts_clock_gapped = true;
-	memset(&info, 0, sizeof(struct i2c_board_info));
-	strlcpy(info.type, "si2168", I2C_NAME_SIZE);
-	info.addr = 0x64;
-	info.platform_data = &si2168_config;
-	request_module(info.type);
-	client = i2c_new_device(&dev->i2c[1 - count].i2c_adapter, &info);
-	if (client == NULL || client->dev.driver == NULL)
+	adapter->i2c_client_demod =
+			dvb_module_probe("si2168", NULL,
+					 &dev->i2c[1 - count].i2c_adapter,
+					 0x64, &si2168_config);
+	if (!adapter->i2c_client_demod)
 		goto err;
-	if (!try_module_get(client->dev.driver->owner)) {
-		i2c_unregister_device(client);
-		goto err;
-	}
-	adapter->i2c_client_demod = client;
 
 	/* attach tuner */
-	memset(&si2157_config, 0, sizeof(si2157_config));
 	si2157_config.fe = adapter->fe;
 	si2157_config.if_port = 1;
-	memset(&info, 0, sizeof(struct i2c_board_info));
-	strlcpy(info.type, "si2157", I2C_NAME_SIZE);
-	info.addr = 0x60;
-	info.platform_data = &si2157_config;
-	request_module(info.type);
-	client = i2c_new_device(i2cadapter, &info);
-	if (client == NULL || client->dev.driver == NULL) {
-		module_put(adapter->i2c_client_demod->dev.driver->owner);
-		i2c_unregister_device(adapter->i2c_client_demod);
+	adapter->i2c_client_tuner = dvb_module_probe("si2157", NULL,
+						     i2c_adapter,
+						     0x60, &si2157_config);
+	if (!adapter->i2c_client_tuner) {
+		dvb_module_release(adapter->i2c_client_demod);
 		goto err;
 	}
-	if (!try_module_get(client->dev.driver->owner)) {
-		i2c_unregister_device(client);
-		module_put(adapter->i2c_client_demod->dev.driver->owner);
-		i2c_unregister_device(adapter->i2c_client_demod);
-		goto err;
-	}
-	adapter->i2c_client_tuner = client;
 
 	pci_dbg(dev->pdev, "%s frontend %d attached",
 		dev->config->model_name, count);
@@ -413,60 +391,41 @@ static int saa716x_tbs6285_frontend_attach(struct saa716x_adapter *adapter,
 					   int count)
 {
 	struct saa716x_dev *dev = adapter->saa716x;
-	struct i2c_adapter *i2cadapter;
-	struct i2c_client *client;
-	struct i2c_board_info info;
-	struct si2168_config si2168_config;
-	struct si2157_config si2157_config;
+	struct i2c_adapter *i2c_adapter;
+	struct si2168_config si2168_config = {};
+	struct si2157_config si2157_config = {};
 
 	if (count > 3)
 		goto err;
 
 	/* attach demod */
-	memset(&si2168_config, 0, sizeof(si2168_config));
-	si2168_config.i2c_adapter = &i2cadapter;
+	si2168_config.i2c_adapter = &i2c_adapter;
 	si2168_config.fe = &adapter->fe;
 	si2168_config.ts_mode = SI2168_TS_SERIAL;
 	si2168_config.ts_clock_gapped = true;
-	memset(&info, 0, sizeof(struct i2c_board_info));
-	strlcpy(info.type, "si2168", I2C_NAME_SIZE);
-	info.addr = ((count == 0) || (count == 2)) ? 0x64 : 0x66;
-	info.platform_data = &si2168_config;
-	request_module(info.type);
-	client = i2c_new_device(((count == 0) || (count == 1)) ?
-		&dev->i2c[1].i2c_adapter : &dev->i2c[0].i2c_adapter,
-		&info);
-	if (client == NULL || client->dev.driver == NULL)
+	adapter->i2c_client_demod =
+			dvb_module_probe("si2168", NULL,
+					 ((count == 0) || (count == 1)) ?
+					  &dev->i2c[1].i2c_adapter :
+					  &dev->i2c[0].i2c_adapter,
+					 ((count == 0) || (count == 2)) ?
+					  0x64 : 0x66,
+					 &si2168_config);
+	if (!adapter->i2c_client_demod)
 		goto err;
 
-	if (!try_module_get(client->dev.driver->owner)) {
-		i2c_unregister_device(client);
-		goto err;
-	}
-	adapter->i2c_client_demod = client;
-
 	/* attach tuner */
-	memset(&si2157_config, 0, sizeof(si2157_config));
 	si2157_config.fe = adapter->fe;
 	si2157_config.if_port = 1;
-	memset(&info, 0, sizeof(struct i2c_board_info));
-	strlcpy(info.type, "si2157", I2C_NAME_SIZE);
-	info.addr = ((count == 0) || (count == 2)) ? 0x62 : 0x60;
-	info.platform_data = &si2157_config;
-	request_module(info.type);
-	client = i2c_new_device(i2cadapter, &info);
-	if (client == NULL || client->dev.driver == NULL) {
-		module_put(adapter->i2c_client_demod->dev.driver->owner);
-		i2c_unregister_device(adapter->i2c_client_demod);
-		goto err;
-	}
-	if (!try_module_get(client->dev.driver->owner)) {
-		i2c_unregister_device(client);
-		module_put(adapter->i2c_client_demod->dev.driver->owner);
-		i2c_unregister_device(adapter->i2c_client_demod);
+	adapter->i2c_client_tuner =
+			dvb_module_probe("si2157", NULL, i2c_adapter,
+					 ((count == 0) || (count == 2)) ?
+					  0x62 : 0x60,
+					 &si2157_config);
+	if (!adapter->i2c_client_tuner) {
+		dvb_module_release(adapter->i2c_client_demod);
 		goto err;
 	}
-	adapter->i2c_client_tuner = client;
 
 	pci_dbg(dev->pdev, "%s frontend %d attached",
 		dev->config->model_name, count);

From d4e61dc0ffef5e31ca7cc9ef462a354a0787a570 Mon Sep 17 00:00:00 2001
From: Uwe Scheffler <scheffler.u@web.de>
Date: Sat, 12 Jan 2019 13:57:56 +0100
Subject: [PATCH 363/364] saa716x_ff : reduce ir repeat delay and period

The S2-6400 card comes with an infrared remote
control that reacts more smoothly with this change.

Signed-off-by: Uwe Scheffler <scheffler.u@web.de>
Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/saa716x/saa716x_ff_ir.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/media/pci/saa716x/saa716x_ff_ir.c b/drivers/media/pci/saa716x/saa716x_ff_ir.c
index 936258c471c0a..f95d3e690c046 100644
--- a/drivers/media/pci/saa716x/saa716x_ff_ir.c
+++ b/drivers/media/pci/saa716x/saa716x_ff_ir.c
@@ -173,7 +173,7 @@ int saa716x_ir_init(struct saa716x_ff_dev *saa716x_ff)
 		ir->key_map[i] = i+1;
 	ir_register_keys(ir);
 
-	input_enable_softrepeat(input_dev, 800, 200);
+	input_enable_softrepeat(input_dev, 400, 125);
 	tasklet_init(&ir->tasklet, ir_emit_key, (unsigned long) saa716x_ff);
 	return 0;
 

From f68ceb79b3d1f3a0b53e0ca51727b9299addede1 Mon Sep 17 00:00:00 2001
From: Soeren Moch <smoch@web.de>
Date: Fri, 4 Jan 2019 09:40:13 +0100
Subject: [PATCH 364/364] saa716x: hook up driver in drivers/media/pci

Signed-off-by: Soeren Moch <smoch@web.de>
---
 drivers/media/pci/Kconfig  | 1 +
 drivers/media/pci/Makefile | 1 +
 2 files changed, 2 insertions(+)

diff --git a/drivers/media/pci/Kconfig b/drivers/media/pci/Kconfig
index 1f09123e2bf95..94ddbd6a2e87c 100644
--- a/drivers/media/pci/Kconfig
+++ b/drivers/media/pci/Kconfig
@@ -33,6 +33,7 @@ source "drivers/media/pci/cx25821/Kconfig"
 source "drivers/media/pci/cx88/Kconfig"
 source "drivers/media/pci/bt8xx/Kconfig"
 source "drivers/media/pci/saa7134/Kconfig"
+source "drivers/media/pci/saa716x/Kconfig"
 source "drivers/media/pci/saa7164/Kconfig"
 source "drivers/media/pci/cobalt/Kconfig"
 
diff --git a/drivers/media/pci/Makefile b/drivers/media/pci/Makefile
index 984fa247096d9..78e79a432bc88 100644
--- a/drivers/media/pci/Makefile
+++ b/drivers/media/pci/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_VIDEO_CX25821) += cx25821/
 obj-$(CONFIG_VIDEO_CX88) += cx88/
 obj-$(CONFIG_VIDEO_BT848) += bt8xx/
 obj-$(CONFIG_VIDEO_SAA7134) += saa7134/
+obj-$(CONFIG_SAA716X_SUPPORT) += saa716x/
 obj-$(CONFIG_VIDEO_SAA7164) += saa7164/
 obj-$(CONFIG_VIDEO_TW68) += tw68/
 obj-$(CONFIG_VIDEO_TW686X) += tw686x/
